; ModuleID = 'linked.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.png_xy = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.png_XYZ = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon = type { i32, i32, i32, [4 x i32], i8, i8, i16 }
%struct._IO_FILE.1 = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE.1*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE.1*, i32 }
%struct.arib_instance_t = type { i8, i8, i8, %struct.arib_instance_private_t* }
%struct.arib_instance_private_t = type { i8*, void (i8*, i8*)*, %struct.arib_decoder_t*, %struct.arib_parser_t*, i8*, i8*, %struct.drcs_conversion_s*, i32, [188 x i32], [188 x [33 x i8]] }
%struct.arib_decoder_t = type { %struct.arib_instance_t*, i8*, i64, i8*, i64, i32 (%struct.arib_decoder_t*, i32)**, i32 (%struct.arib_decoder_t*, i32)**, i32 (%struct.arib_decoder_t*, i32)**, i32 (%struct.arib_decoder_t*, i32)*, i32 (%struct.arib_decoder_t*, i32)*, i32 (%struct.arib_decoder_t*, i32)*, i32 (%struct.arib_decoder_t*, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.arib_buf_region_s*, i8 }
%struct.arib_buf_region_s = type { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.arib_buf_region_s* }
%struct.arib_parser_t = type { %struct.arib_instance_t*, i32, i64, i8* }
%struct.drcs_conversion_s = type { [33 x i8], i32, %struct.drcs_conversion_s* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.png_struct_def = type { [1 x %struct.__jmp_buf_tag], void (%struct.__jmp_buf_tag*, i32)*, [1 x %struct.__jmp_buf_tag]*, i64, void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)*, i8*, void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)*, i8*, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)*, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)*, i8*, i8, i8, i32, i32, i32, i32, %struct.z_stream_s, %struct.png_compression_buffer*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i8*, i8*, i8*, i8*, i64, i32, i32, %struct.png_color_struct*, i16, i32, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i16, i8, i32, %struct.png_color_16_struct, %struct.png_color_16_struct, void (%struct.png_struct_def*)*, i32, i32, i32, i32, i8*, i16**, i8*, i8*, i16**, i16**, %struct.png_color_8_struct, %struct.png_color_8_struct, i8*, %struct.png_color_16_struct, void (%struct.png_struct_def*, i32, i32)*, void (%struct.png_struct_def*, i32, i32)*, void (%struct.png_struct_def*, %struct.png_info_def*)*, void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, %struct.png_info_def*)*, i8*, i8*, i8*, i8*, i32, i32, i64, i64, i64, i64, i32, i32, i8*, i8*, i32, [29 x i8], i32, i8*, i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)*, i32, i32, i8*, i8, i8, i16, i16, i32, i8, i8*, i8* (%struct.png_struct_def*, i64)*, void (%struct.png_struct_def*, i8*)*, i8*, i8*, i8*, i8*, i8, i32, i32, i32, i64, %struct.png_unknown_chunk_t, i64, i8*, i64, i32, i32, i8*, [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], %struct.png_colorspace }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.png_row_info_struct = type { i32, i64, i8, i8, i8, i8 }
%struct.z_stream_s = type { i8*, i32, i64, i8*, i32, i64, i8*, %struct.internal_state*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8*, i32, i64, i64 }
%struct.internal_state = type opaque
%struct.png_compression_buffer = type { %struct.png_compression_buffer*, [1 x i8] }
%struct.png_color_struct = type { i8, i8, i8 }
%struct.png_color_8_struct = type { i8, i8, i8, i8, i8 }
%struct.png_color_16_struct = type { i8, i16, i16, i16, i16 }
%struct.png_info_def = type { i32, i32, i32, i64, %struct.png_color_struct*, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], %struct.png_colorspace, i8*, i8*, i32, i32, i32, %struct.png_text_struct*, %struct.png_time_struct, %struct.png_color_8_struct, i8*, %struct.png_color_16_struct, %struct.png_color_16_struct, i32, i32, i8, i32, i32, i8, i32, i8*, i8*, i16*, i8*, i32, i32, i8*, i8**, i8, i8, i32, %struct.png_unknown_chunk_t*, i32, %struct.png_sPLT_struct*, i32, i8, i8*, i8*, i8** }
%struct.png_text_struct = type { i32, i8*, i8*, i64, i64, i8*, i8* }
%struct.png_time_struct = type { i16, i8, i8, i8, i8, i8 }
%struct.png_sPLT_struct = type { i8*, i8, %struct.png_sPLT_entry_struct*, i32 }
%struct.png_sPLT_entry_struct = type { i16, i16, i16, i16, i16 }
%struct.png_unknown_chunk_t = type { [5 x i8], i8*, i64, i8 }
%struct.png_colorspace = type { i32, %struct.png_xy, %struct.png_XYZ, i16, i16 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.png_struct_def.60 = type { [1 x %struct.__jmp_buf_tag], void (%struct.__jmp_buf_tag*, i32)*, [1 x %struct.__jmp_buf_tag]*, i64, void (%struct.png_struct_def.60*, i8*)*, void (%struct.png_struct_def.60*, i8*)*, i8*, void (%struct.png_struct_def.60*, i8*, i64)*, void (%struct.png_struct_def.60*, i8*, i64)*, i8*, void (%struct.png_struct_def.60*, %struct.png_row_info_struct*, i8*)*, void (%struct.png_struct_def.60*, %struct.png_row_info_struct*, i8*)*, i8*, i8, i8, i32, i32, i32, i32, %struct.z_stream_s, %struct.png_compression_buffer*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i8*, i8*, i8*, i8*, i64, i32, i32, %struct.png_color_struct*, i16, i32, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i16, i8, i32, %struct.png_color_16_struct, %struct.png_color_16_struct, {}*, i32, i32, i32, i32, i8*, i16**, i8*, i8*, i16**, i16**, %struct.png_color_8_struct, %struct.png_color_8_struct, i8*, %struct.png_color_16_struct, void (%struct.png_struct_def.60*, i32, i32)*, void (%struct.png_struct_def.60*, i32, i32)*, void (%struct.png_struct_def.60*, %struct.png_info_def*)*, void (%struct.png_struct_def.60*, i8*, i32, i32)*, void (%struct.png_struct_def.60*, %struct.png_info_def*)*, i8*, i8*, i8*, i8*, i32, i32, i64, i64, i64, i64, i32, i32, i8*, i8*, i32, [29 x i8], i32, i8*, i32 (%struct.png_struct_def.60*, %struct.png_unknown_chunk_t*)*, i32, i32, i8*, i8, i8, i16, i16, i32, i8, i8*, i8* (%struct.png_struct_def.60*, i64)*, void (%struct.png_struct_def.60*, i8*)*, i8*, i8*, i8*, i8*, i8, i32, i32, i32, i64, %struct.png_unknown_chunk_t, i64, i8*, i64, i32, i32, i8*, [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], %struct.png_colorspace }
%struct.png_image = type { %struct.png_control*, i32, i32, i32, i32, i32, i32, i32, [64 x i8] }
%struct.png_control = type { %struct.png_struct_def*, %struct.png_info_def*, i8*, i8*, i64, i8 }
%struct.png_struct_def.121 = type { [1 x %struct.__jmp_buf_tag], void (%struct.__jmp_buf_tag*, i32)*, [1 x %struct.__jmp_buf_tag]*, i64, void (%struct.png_struct_def.121*, i8*)*, void (%struct.png_struct_def.121*, i8*)*, i8*, {}*, {}*, i8*, void (%struct.png_struct_def.121*, %struct.png_row_info_struct*, i8*)*, void (%struct.png_struct_def.121*, %struct.png_row_info_struct*, i8*)*, i8*, i8, i8, i32, i32, i32, i32, %struct.z_stream_s, %struct.png_compression_buffer*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i8*, i8*, i8*, i8*, i64, i32, i32, %struct.png_color_struct*, i16, i32, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i16, i8, i32, %struct.png_color_16_struct, %struct.png_color_16_struct, void (%struct.png_struct_def.121*)*, i32, i32, i32, i32, i8*, i16**, i8*, i8*, i16**, i16**, %struct.png_color_8_struct, %struct.png_color_8_struct, i8*, %struct.png_color_16_struct, void (%struct.png_struct_def.121*, i32, i32)*, void (%struct.png_struct_def.121*, i32, i32)*, void (%struct.png_struct_def.121*, %struct.png_info_def*)*, void (%struct.png_struct_def.121*, i8*, i32, i32)*, void (%struct.png_struct_def.121*, %struct.png_info_def*)*, i8*, i8*, i8*, i8*, i32, i32, i64, i64, i64, i64, i32, i32, i8*, i8*, i32, [29 x i8], i32, i8*, i32 (%struct.png_struct_def.121*, %struct.png_unknown_chunk_t*)*, i32, i32, i8*, i8, i8, i16, i16, i32, i8, i8*, i8* (%struct.png_struct_def.121*, i64)*, void (%struct.png_struct_def.121*, i8*)*, i8*, i8*, i8*, i8*, i8, i32, i32, i32, i64, %struct.png_unknown_chunk_t, i64, i8*, i64, i32, i32, i8*, [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], %struct.png_colorspace }
%struct.png_struct_def.199 = type { [1 x %struct.__jmp_buf_tag], void (%struct.__jmp_buf_tag*, i32)*, [1 x %struct.__jmp_buf_tag]*, i64, void (%struct.png_struct_def.199*, i8*)*, void (%struct.png_struct_def.199*, i8*)*, i8*, void (%struct.png_struct_def.199*, i8*, i64)*, void (%struct.png_struct_def.199*, i8*, i64)*, i8*, void (%struct.png_struct_def.199*, %struct.png_row_info_struct*, i8*)*, void (%struct.png_struct_def.199*, %struct.png_row_info_struct*, i8*)*, i8*, i8, i8, i32, i32, i32, i32, %struct.z_stream_s, %struct.png_compression_buffer*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i8*, i8*, i8*, i8*, i64, i32, i32, %struct.png_color_struct*, i16, i32, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i16, i8, i32, %struct.png_color_16_struct, %struct.png_color_16_struct, {}*, i32, i32, i32, i32, i8*, i16**, i8*, i8*, i16**, i16**, %struct.png_color_8_struct, %struct.png_color_8_struct, i8*, %struct.png_color_16_struct, void (%struct.png_struct_def.199*, i32, i32)*, void (%struct.png_struct_def.199*, i32, i32)*, void (%struct.png_struct_def.199*, %struct.png_info_def*)*, void (%struct.png_struct_def.199*, i8*, i32, i32)*, void (%struct.png_struct_def.199*, %struct.png_info_def*)*, i8*, i8*, i8*, i8*, i32, i32, i64, i64, i64, i64, i32, i32, i8*, i8*, i32, [29 x i8], i32, i8*, i32 (%struct.png_struct_def.199*, %struct.png_unknown_chunk_t*)*, i32, i32, i8*, i8, i8, i16, i16, i32, i8, i8*, i8* (%struct.png_struct_def.199*, i64)*, void (%struct.png_struct_def.199*, i8*)*, i8*, i8*, i8*, i8*, i8, i32, i32, i32, i64, %struct.png_unknown_chunk_t, i64, i8*, i64, i32, i32, i8*, [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], %struct.png_colorspace }
%struct.png_image_read_control = type { %struct.png_image*, i8*, i32, i8*, %struct.png_color_struct*, i8*, i8*, i64, i32, i32, i32 }
%struct.png_dsort_struct = type { %struct.png_dsort_struct*, i8, i8 }
%struct.compression_state = type { i8*, i64, i32, [1024 x i8] }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.png_image_write_control = type { %struct.png_image*, i8*, i32, i8*, i32, i8*, i64, i8*, i8*, i64, i64 }

@.str = dso_local unnamed_addr constant [25 x i8] c"arib decoder was created\00", align 1
@.str.1 = dso_local unnamed_addr constant [23 x i8] c"arib decoder destroyed\00", align 1
@decoder_kanji_table = dso_local unnamed_addr constant <{ [94 x i32], [94 x i32], [94 x i32], <{ [83 x i32], [11 x i32] }>, <{ [86 x i32], [8 x i32] }>, <{ [56 x i32], [38 x i32] }>, <{ [81 x i32], [13 x i32] }>, <{ [32 x i32], [62 x i32] }>, [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], <{ [51 x i32], [43 x i32] }>, [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], [94 x i32], <{ i32, i32, i32, i32, i32, i32, [88 x i32] }>, [94 x i32], <{ [43 x i32], [51 x i32] }>, [94 x i32], [94 x i32], [94 x i32], <{ [84 x i32], [10 x i32] }>, <{ [49 x i32], [45 x i32] }>, [94 x i32], [94 x i32], [94 x i32] }> <{ [94 x i32] [i32 12288, i32 12289, i32 12290, i32 65292, i32 65294, i32 12539, i32 65306, i32 65307, i32 65311, i32 65281, i32 12443, i32 12444, i32 180, i32 65344, i32 168, i32 65342, i32 65507, i32 65343, i32 12541, i32 12542, i32 12445, i32 12446, i32 12291, i32 20189, i32 12293, i32 12294, i32 12295, i32 12540, i32 8213, i32 8208, i32 65295, i32 92, i32 12316, i32 8214, i32 65372, i32 8230, i32 8229, i32 8216, i32 8217, i32 8220, i32 8221, i32 65288, i32 65289, i32 12308, i32 12309, i32 65339, i32 65341, i32 65371, i32 65373, i32 12296, i32 12297, i32 12298, i32 12299, i32 12300, i32 12301, i32 12302, i32 12303, i32 12304, i32 12305, i32 65291, i32 65293, i32 177, i32 215, i32 247, i32 65309, i32 8800, i32 65308, i32 65310, i32 8806, i32 8807, i32 8734, i32 8756, i32 9794, i32 9792, i32 176, i32 8242, i32 8243, i32 8451, i32 65509, i32 65284, i32 162, i32 163, i32 65285, i32 65283, i32 65286, i32 65290, i32 65312, i32 167, i32 9734, i32 9733, i32 9675, i32 9679, i32 9678, i32 9671], [94 x i32] [i32 9670, i32 9633, i32 9632, i32 9651, i32 9650, i32 9661, i32 9660, i32 8251, i32 12306, i32 8594, i32 8592, i32 8593, i32 8595, i32 12307, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8712, i32 8715, i32 8838, i32 8839, i32 8834, i32 8835, i32 8746, i32 8745, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8743, i32 8744, i32 172, i32 8658, i32 8660, i32 8704, i32 8707, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8736, i32 8869, i32 8978, i32 8706, i32 8711, i32 8801, i32 8786, i32 8810, i32 8811, i32 8730, i32 8765, i32 8733, i32 8757, i32 8747, i32 8748, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8491, i32 8240, i32 9839, i32 9837, i32 9834, i32 8224, i32 8225, i32 182, i32 0, i32 0, i32 0, i32 0, i32 9711], [94 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 65296, i32 65297, i32 65298, i32 65299, i32 65300, i32 65301, i32 65302, i32 65303, i32 65304, i32 65305, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 65313, i32 65314, i32 65315, i32 65316, i32 65317, i32 65318, i32 65319, i32 65320, i32 65321, i32 65322, i32 65323, i32 65324, i32 65325, i32 65326, i32 65327, i32 65328, i32 65329, i32 65330, i32 65331, i32 65332, i32 65333, i32 65334, i32 65335, i32 65336, i32 65337, i32 65338, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 65345, i32 65346, i32 65347, i32 65348, i32 65349, i32 65350, i32 65351, i32 65352, i32 65353, i32 65354, i32 65355, i32 65356, i32 65357, i32 65358, i32 65359, i32 65360, i32 65361, i32 65362, i32 65363, i32 65364, i32 65365, i32 65366, i32 65367, i32 65368, i32 65369, i32 65370, i32 0, i32 0, i32 0, i32 0], <{ [83 x i32], [11 x i32] }> <{ [83 x i32] [i32 12353, i32 12354, i32 12355, i32 12356, i32 12357, i32 12358, i32 12359, i32 12360, i32 12361, i32 12362, i32 12363, i32 12364, i32 12365, i32 12366, i32 12367, i32 12368, i32 12369, i32 12370, i32 12371, i32 12372, i32 12373, i32 12374, i32 12375, i32 12376, i32 12377, i32 12378, i32 12379, i32 12380, i32 12381, i32 12382, i32 12383, i32 12384, i32 12385, i32 12386, i32 12387, i32 12388, i32 12389, i32 12390, i32 12391, i32 12392, i32 12393, i32 12394, i32 12395, i32 12396, i32 12397, i32 12398, i32 12399, i32 12400, i32 12401, i32 12402, i32 12403, i32 12404, i32 12405, i32 12406, i32 12407, i32 12408, i32 12409, i32 12410, i32 12411, i32 12412, i32 12413, i32 12414, i32 12415, i32 12416, i32 12417, i32 12418, i32 12419, i32 12420, i32 12421, i32 12422, i32 12423, i32 12424, i32 12425, i32 12426, i32 12427, i32 12428, i32 12429, i32 12430, i32 12431, i32 12432, i32 12433, i32 12434, i32 12435], [11 x i32] zeroinitializer }>, <{ [86 x i32], [8 x i32] }> <{ [86 x i32] [i32 12449, i32 12450, i32 12451, i32 12452, i32 12453, i32 12454, i32 12455, i32 12456, i32 12457, i32 12458, i32 12459, i32 12460, i32 12461, i32 12462, i32 12463, i32 12464, i32 12465, i32 12466, i32 12467, i32 12468, i32 12469, i32 12470, i32 12471, i32 12472, i32 12473, i32 12474, i32 12475, i32 12476, i32 12477, i32 12478, i32 12479, i32 12480, i32 12481, i32 12482, i32 12483, i32 12484, i32 12485, i32 12486, i32 12487, i32 12488, i32 12489, i32 12490, i32 12491, i32 12492, i32 12493, i32 12494, i32 12495, i32 12496, i32 12497, i32 12498, i32 12499, i32 12500, i32 12501, i32 12502, i32 12503, i32 12504, i32 12505, i32 12506, i32 12507, i32 12508, i32 12509, i32 12510, i32 12511, i32 12512, i32 12513, i32 12514, i32 12515, i32 12516, i32 12517, i32 12518, i32 12519, i32 12520, i32 12521, i32 12522, i32 12523, i32 12524, i32 12525, i32 12526, i32 12527, i32 12528, i32 12529, i32 12530, i32 12531, i32 12532, i32 12533, i32 12534], [8 x i32] zeroinitializer }>, <{ [56 x i32], [38 x i32] }> <{ [56 x i32] [i32 913, i32 914, i32 915, i32 916, i32 917, i32 918, i32 919, i32 920, i32 921, i32 922, i32 923, i32 924, i32 925, i32 926, i32 927, i32 928, i32 929, i32 931, i32 932, i32 933, i32 934, i32 935, i32 936, i32 937, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 945, i32 946, i32 947, i32 948, i32 949, i32 950, i32 951, i32 952, i32 953, i32 954, i32 955, i32 956, i32 957, i32 958, i32 959, i32 960, i32 961, i32 963, i32 964, i32 965, i32 966, i32 967, i32 968, i32 969], [38 x i32] zeroinitializer }>, <{ [81 x i32], [13 x i32] }> <{ [81 x i32] [i32 1040, i32 1041, i32 1042, i32 1043, i32 1044, i32 1045, i32 1025, i32 1046, i32 1047, i32 1048, i32 1049, i32 1050, i32 1051, i32 1052, i32 1053, i32 1054, i32 1055, i32 1056, i32 1057, i32 1058, i32 1059, i32 1060, i32 1061, i32 1062, i32 1063, i32 1064, i32 1065, i32 1066, i32 1067, i32 1068, i32 1069, i32 1070, i32 1071, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1072, i32 1073, i32 1074, i32 1075, i32 1076, i32 1077, i32 1105, i32 1078, i32 1079, i32 1080, i32 1081, i32 1082, i32 1083, i32 1084, i32 1085, i32 1086, i32 1087, i32 1088, i32 1089, i32 1090, i32 1091, i32 1092, i32 1093, i32 1094, i32 1095, i32 1096, i32 1097, i32 1098, i32 1099, i32 1100, i32 1101, i32 1102, i32 1103], [13 x i32] zeroinitializer }>, <{ [32 x i32], [62 x i32] }> <{ [32 x i32] [i32 9472, i32 9474, i32 9484, i32 9488, i32 9496, i32 9492, i32 9500, i32 9516, i32 9508, i32 9524, i32 9532, i32 9473, i32 9475, i32 9487, i32 9491, i32 9499, i32 9495, i32 9507, i32 9523, i32 9515, i32 9531, i32 9547, i32 9504, i32 9519, i32 9512, i32 9527, i32 9535, i32 9501, i32 9520, i32 9509, i32 9528, i32 9538], [62 x i32] zeroinitializer }>, [94 x i32] zeroinitializer, [94 x i32] zeroinitializer, [94 x i32] zeroinitializer, [94 x i32] zeroinitializer, [94 x i32] zeroinitializer, [94 x i32] zeroinitializer, [94 x i32] zeroinitializer, [94 x i32] [i32 20124, i32 21782, i32 23043, i32 38463, i32 21696, i32 24859, i32 25384, i32 23030, i32 36898, i32 33909, i32 33564, i32 31312, i32 24746, i32 25569, i32 28197, i32 26093, i32 33894, i32 33446, i32 39925, i32 26771, i32 22311, i32 26017, i32 25201, i32 23451, i32 22992, i32 34427, i32 39156, i32 32098, i32 32190, i32 39822, i32 25110, i32 31903, i32 34999, i32 23433, i32 24245, i32 25353, i32 26263, i32 26696, i32 38343, i32 38797, i32 26447, i32 20197, i32 20234, i32 20301, i32 20381, i32 20553, i32 22258, i32 22839, i32 22996, i32 23041, i32 23561, i32 24799, i32 24847, i32 24944, i32 26131, i32 26885, i32 28858, i32 30031, i32 30064, i32 31227, i32 32173, i32 32239, i32 32963, i32 33806, i32 34915, i32 35586, i32 36949, i32 36986, i32 21307, i32 20117, i32 20133, i32 22495, i32 32946, i32 37057, i32 30959, i32 19968, i32 22769, i32 28322, i32 36920, i32 31282, i32 33576, i32 33419, i32 39983, i32 20801, i32 21360, i32 21693, i32 21729, i32 22240, i32 23035, i32 24341, i32 39154, i32 28139, i32 32996, i32 34093], [94 x i32] [i32 38498, i32 38512, i32 38560, i32 38907, i32 21515, i32 21491, i32 23431, i32 28879, i32 32701, i32 36802, i32 38632, i32 21359, i32 40284, i32 31418, i32 19985, i32 30867, i32 33276, i32 28198, i32 22040, i32 21764, i32 27421, i32 34074, i32 39995, i32 23013, i32 21417, i32 28006, i32 29916, i32 38287, i32 22082, i32 20113, i32 36939, i32 38642, i32 33615, i32 39180, i32 21473, i32 21942, i32 23344, i32 24433, i32 26144, i32 26355, i32 26628, i32 27704, i32 27891, i32 27945, i32 29787, i32 30408, i32 31310, i32 38964, i32 33521, i32 34907, i32 35424, i32 37613, i32 28082, i32 30123, i32 30410, i32 39365, i32 24742, i32 35585, i32 36234, i32 38322, i32 27022, i32 21421, i32 20870, i32 22290, i32 22576, i32 22852, i32 23476, i32 24310, i32 24616, i32 25513, i32 25588, i32 27839, i32 28436, i32 28814, i32 28948, i32 29017, i32 29141, i32 29503, i32 32257, i32 33398, i32 33489, i32 34199, i32 36960, i32 37467, i32 40219, i32 22633, i32 26044, i32 27738, i32 29989, i32 20985, i32 22830, i32 22885, i32 24448, i32 24540], [94 x i32] [i32 25276, i32 26106, i32 27178, i32 27431, i32 27572, i32 29579, i32 32705, i32 35158, i32 40236, i32 40206, i32 40644, i32 23713, i32 27798, i32 33659, i32 20740, i32 23627, i32 25014, i32 33222, i32 26742, i32 29281, i32 20057, i32 20474, i32 21368, i32 24681, i32 28201, i32 31311, i32 38899, i32 19979, i32 21270, i32 20206, i32 20309, i32 20285, i32 20385, i32 20339, i32 21152, i32 21487, i32 22025, i32 22799, i32 23233, i32 23478, i32 23521, i32 31185, i32 26247, i32 26524, i32 26550, i32 27468, i32 27827, i32 28779, i32 29634, i32 31117, i32 31166, i32 31292, i32 31623, i32 33457, i32 33499, i32 33540, i32 33655, i32 33775, i32 33747, i32 34662, i32 35506, i32 22057, i32 36008, i32 36838, i32 36942, i32 38686, i32 34442, i32 20420, i32 23784, i32 25105, i32 29273, i32 30011, i32 33253, i32 33469, i32 34558, i32 36032, i32 38597, i32 39187, i32 39381, i32 20171, i32 20250, i32 35299, i32 22238, i32 22602, i32 22730, i32 24315, i32 24555, i32 24618, i32 24724, i32 24674, i32 25040, i32 25106, i32 25296, i32 25913], [94 x i32] [i32 39745, i32 26214, i32 26800, i32 28023, i32 28784, i32 30028, i32 30342, i32 32117, i32 33445, i32 34809, i32 38283, i32 38542, i32 35997, i32 20977, i32 21182, i32 22806, i32 21683, i32 23475, i32 23830, i32 24936, i32 27010, i32 28079, i32 30861, i32 33995, i32 34903, i32 35442, i32 37799, i32 39608, i32 28012, i32 39336, i32 34521, i32 22435, i32 26623, i32 34510, i32 37390, i32 21123, i32 22151, i32 21508, i32 24275, i32 25313, i32 25785, i32 26684, i32 26680, i32 27579, i32 29554, i32 30906, i32 31339, i32 35226, i32 35282, i32 36203, i32 36611, i32 37101, i32 38307, i32 38548, i32 38761, i32 23398, i32 23731, i32 27005, i32 38989, i32 38990, i32 25499, i32 31520, i32 27179, i32 27263, i32 26806, i32 39949, i32 28511, i32 21106, i32 21917, i32 24688, i32 25324, i32 27963, i32 28167, i32 28369, i32 33883, i32 35088, i32 36676, i32 19988, i32 39993, i32 21494, i32 26907, i32 27194, i32 38788, i32 26666, i32 20828, i32 31427, i32 33970, i32 37340, i32 37772, i32 22107, i32 40232, i32 26658, i32 33541, i32 33841], [94 x i32] [i32 31909, i32 21000, i32 33477, i32 29926, i32 20094, i32 20355, i32 20896, i32 23506, i32 21002, i32 21208, i32 21223, i32 24059, i32 21914, i32 22570, i32 23014, i32 23436, i32 23448, i32 23515, i32 24178, i32 24185, i32 24739, i32 24863, i32 24931, i32 25022, i32 25563, i32 25954, i32 26577, i32 26707, i32 26874, i32 27454, i32 27475, i32 27735, i32 28450, i32 28567, i32 28485, i32 29872, i32 29976, i32 30435, i32 30475, i32 31487, i32 31649, i32 31777, i32 32233, i32 32566, i32 32752, i32 32925, i32 33382, i32 33694, i32 35251, i32 35532, i32 36011, i32 36996, i32 37969, i32 38291, i32 38289, i32 38306, i32 38501, i32 38867, i32 39208, i32 33304, i32 20024, i32 21547, i32 23736, i32 24012, i32 29609, i32 30284, i32 30524, i32 23721, i32 32747, i32 36107, i32 38593, i32 38929, i32 38996, i32 39000, i32 20225, i32 20238, i32 21361, i32 21916, i32 22120, i32 22522, i32 22855, i32 23305, i32 23492, i32 23696, i32 24076, i32 24190, i32 24524, i32 25582, i32 26426, i32 26071, i32 26082, i32 26399, i32 26827, i32 26820], [94 x i32] [i32 27231, i32 24112, i32 27589, i32 27671, i32 27773, i32 30079, i32 31048, i32 23395, i32 31232, i32 32000, i32 24509, i32 35215, i32 35352, i32 36020, i32 36215, i32 36556, i32 36637, i32 39138, i32 39438, i32 39740, i32 20096, i32 20605, i32 20736, i32 22931, i32 23452, i32 25135, i32 25216, i32 25836, i32 27450, i32 29344, i32 30097, i32 31047, i32 32681, i32 34811, i32 35516, i32 35696, i32 25516, i32 33738, i32 38816, i32 21513, i32 21507, i32 21931, i32 26708, i32 27224, i32 35440, i32 30759, i32 26485, i32 40653, i32 21364, i32 23458, i32 33050, i32 34384, i32 36870, i32 19992, i32 20037, i32 20167, i32 20241, i32 21450, i32 21560, i32 23470, i32 24339, i32 24613, i32 25937, i32 26429, i32 27714, i32 27762, i32 27875, i32 28792, i32 29699, i32 31350, i32 31406, i32 31496, i32 32026, i32 31998, i32 32102, i32 26087, i32 29275, i32 21435, i32 23621, i32 24040, i32 25298, i32 25312, i32 25369, i32 28192, i32 34394, i32 35377, i32 36317, i32 37624, i32 28417, i32 31142, i32 39770, i32 20136, i32 20139, i32 20140], [94 x i32] [i32 20379, i32 20384, i32 20689, i32 20807, i32 31478, i32 20849, i32 20982, i32 21332, i32 21281, i32 21375, i32 21483, i32 21932, i32 22659, i32 23777, i32 24375, i32 24394, i32 24623, i32 24656, i32 24685, i32 25375, i32 25945, i32 27211, i32 27841, i32 29378, i32 29421, i32 30703, i32 33016, i32 33029, i32 33288, i32 34126, i32 37111, i32 37857, i32 38911, i32 39255, i32 39514, i32 20208, i32 20957, i32 23597, i32 26241, i32 26989, i32 23616, i32 26354, i32 26997, i32 29577, i32 26704, i32 31873, i32 20677, i32 21220, i32 22343, i32 24062, i32 37670, i32 26020, i32 27427, i32 27453, i32 29748, i32 31105, i32 31165, i32 31563, i32 32202, i32 33465, i32 33740, i32 34943, i32 35167, i32 35641, i32 36817, i32 37329, i32 21535, i32 37504, i32 20061, i32 20534, i32 21477, i32 21306, i32 29399, i32 29590, i32 30697, i32 33510, i32 36527, i32 39366, i32 39368, i32 39378, i32 20855, i32 24858, i32 34398, i32 21936, i32 31354, i32 20598, i32 23507, i32 36935, i32 38533, i32 20018, i32 27355, i32 37351, i32 23633, i32 23624], [94 x i32] [i32 25496, i32 31391, i32 27795, i32 38772, i32 36705, i32 31402, i32 29066, i32 38536, i32 31874, i32 26647, i32 32368, i32 26705, i32 37740, i32 21234, i32 21531, i32 34219, i32 35347, i32 32676, i32 36557, i32 37089, i32 21350, i32 34952, i32 31041, i32 20418, i32 20670, i32 21009, i32 20804, i32 21843, i32 22317, i32 29674, i32 22411, i32 22865, i32 24418, i32 24452, i32 24693, i32 24950, i32 24935, i32 25001, i32 25522, i32 25658, i32 25964, i32 26223, i32 26690, i32 28179, i32 30054, i32 31293, i32 31995, i32 32076, i32 32153, i32 32331, i32 32619, i32 33550, i32 33610, i32 34509, i32 35336, i32 35427, i32 35686, i32 36605, i32 38938, i32 40335, i32 33464, i32 36814, i32 39912, i32 21127, i32 25119, i32 25731, i32 28608, i32 38553, i32 26689, i32 20625, i32 27424, i32 27770, i32 28500, i32 31348, i32 32080, i32 34880, i32 35363, i32 26376, i32 20214, i32 20537, i32 20518, i32 20581, i32 20860, i32 21048, i32 21091, i32 21927, i32 22287, i32 22533, i32 23244, i32 24314, i32 25010, i32 25080, i32 25331, i32 25458], [94 x i32] [i32 26908, i32 27177, i32 29309, i32 29356, i32 29486, i32 30740, i32 30831, i32 32121, i32 30476, i32 32937, i32 35211, i32 35609, i32 36066, i32 36562, i32 36963, i32 37749, i32 38522, i32 38997, i32 39443, i32 40568, i32 20803, i32 21407, i32 21427, i32 24187, i32 24358, i32 28187, i32 28304, i32 29572, i32 29694, i32 32067, i32 33335, i32 35328, i32 35578, i32 38480, i32 20046, i32 20491, i32 21476, i32 21628, i32 22266, i32 22993, i32 23396, i32 24049, i32 24235, i32 24359, i32 25144, i32 25925, i32 26543, i32 28246, i32 29392, i32 31946, i32 34996, i32 32929, i32 32993, i32 33776, i32 34382, i32 35463, i32 36328, i32 37431, i32 38599, i32 39015, i32 40723, i32 20116, i32 20114, i32 20237, i32 21320, i32 21577, i32 21566, i32 23087, i32 24460, i32 24481, i32 24735, i32 26791, i32 27278, i32 29786, i32 30849, i32 35486, i32 35492, i32 35703, i32 37264, i32 20062, i32 39881, i32 20132, i32 20348, i32 20399, i32 20505, i32 20502, i32 20809, i32 20844, i32 21151, i32 21177, i32 21246, i32 21402, i32 21475, i32 21521], [94 x i32] [i32 21518, i32 21897, i32 22353, i32 22434, i32 22909, i32 23380, i32 23389, i32 23439, i32 24037, i32 24039, i32 24055, i32 24184, i32 24195, i32 24218, i32 24247, i32 24344, i32 24658, i32 24908, i32 25239, i32 25304, i32 25511, i32 25915, i32 26114, i32 26179, i32 26356, i32 26477, i32 26657, i32 26775, i32 27083, i32 27743, i32 27946, i32 28009, i32 28207, i32 28317, i32 30002, i32 30343, i32 30828, i32 31295, i32 31968, i32 32005, i32 32024, i32 32094, i32 32177, i32 32789, i32 32771, i32 32943, i32 32945, i32 33108, i32 33167, i32 33322, i32 33618, i32 34892, i32 34913, i32 35611, i32 36002, i32 36092, i32 37066, i32 37237, i32 37489, i32 30783, i32 37628, i32 38308, i32 38477, i32 38917, i32 39321, i32 39640, i32 40251, i32 21083, i32 21163, i32 21495, i32 21512, i32 22741, i32 25335, i32 28640, i32 35946, i32 36703, i32 40633, i32 20811, i32 21051, i32 21578, i32 22269, i32 31296, i32 37239, i32 40288, i32 40658, i32 29508, i32 28425, i32 33136, i32 29969, i32 24573, i32 24794, i32 39592, i32 29403, i32 36796], [94 x i32] [i32 27492, i32 38915, i32 20170, i32 22256, i32 22372, i32 22718, i32 23130, i32 24680, i32 25031, i32 26127, i32 26118, i32 26681, i32 26801, i32 28151, i32 30165, i32 32058, i32 33390, i32 39746, i32 20123, i32 20304, i32 21449, i32 21766, i32 23919, i32 24038, i32 24046, i32 26619, i32 27801, i32 29811, i32 30722, i32 35408, i32 37782, i32 35039, i32 22352, i32 24231, i32 25387, i32 20661, i32 20652, i32 20877, i32 26368, i32 21705, i32 22622, i32 22971, i32 23472, i32 24425, i32 25165, i32 25505, i32 26685, i32 27507, i32 28168, i32 28797, i32 37319, i32 29312, i32 30741, i32 30758, i32 31085, i32 25998, i32 32048, i32 33756, i32 35009, i32 36617, i32 38555, i32 21092, i32 22312, i32 26448, i32 32618, i32 36001, i32 20916, i32 22338, i32 38442, i32 22586, i32 27018, i32 32948, i32 21682, i32 23822, i32 22524, i32 30869, i32 40442, i32 20316, i32 21066, i32 21643, i32 25662, i32 26152, i32 26388, i32 26613, i32 31364, i32 31574, i32 32034, i32 37679, i32 26716, i32 39853, i32 31545, i32 21273, i32 20874, i32 21047], [94 x i32] [i32 23519, i32 25334, i32 25774, i32 25830, i32 26413, i32 27578, i32 34217, i32 38609, i32 30352, i32 39894, i32 25420, i32 37638, i32 39851, i32 30399, i32 26194, i32 19977, i32 20632, i32 21442, i32 23665, i32 24808, i32 25746, i32 25955, i32 26719, i32 29158, i32 29642, i32 29987, i32 31639, i32 32386, i32 34453, i32 35715, i32 36059, i32 37240, i32 39184, i32 26028, i32 26283, i32 27531, i32 20181, i32 20180, i32 20282, i32 20351, i32 21050, i32 21496, i32 21490, i32 21987, i32 22235, i32 22763, i32 22987, i32 22985, i32 23039, i32 23376, i32 23629, i32 24066, i32 24107, i32 24535, i32 24605, i32 25351, i32 25903, i32 23388, i32 26031, i32 26045, i32 26088, i32 26525, i32 27490, i32 27515, i32 27663, i32 29509, i32 31049, i32 31169, i32 31992, i32 32025, i32 32043, i32 32930, i32 33026, i32 33267, i32 35222, i32 35422, i32 35433, i32 35430, i32 35468, i32 35566, i32 36039, i32 36060, i32 38604, i32 39164, i32 27503, i32 20107, i32 20284, i32 20365, i32 20816, i32 23383, i32 23546, i32 24904, i32 25345, i32 26178], [94 x i32] [i32 27425, i32 28363, i32 27835, i32 29246, i32 29885, i32 30164, i32 30913, i32 31034, i32 32780, i32 32819, i32 33258, i32 33940, i32 36766, i32 27728, i32 40575, i32 24335, i32 35672, i32 40235, i32 31482, i32 36600, i32 23437, i32 38635, i32 19971, i32 21489, i32 22519, i32 22833, i32 23241, i32 23460, i32 24713, i32 28287, i32 28422, i32 30142, i32 36074, i32 23455, i32 34048, i32 31712, i32 20594, i32 26612, i32 33437, i32 23649, i32 34122, i32 32286, i32 33294, i32 20889, i32 23556, i32 25448, i32 36198, i32 26012, i32 29038, i32 31038, i32 32023, i32 32773, i32 35613, i32 36554, i32 36974, i32 34503, i32 37034, i32 20511, i32 21242, i32 23610, i32 26451, i32 28796, i32 29237, i32 37196, i32 37320, i32 37675, i32 33509, i32 23490, i32 24369, i32 24825, i32 20027, i32 21462, i32 23432, i32 25163, i32 26417, i32 27530, i32 29417, i32 29664, i32 31278, i32 33131, i32 36259, i32 37202, i32 39318, i32 20754, i32 21463, i32 21610, i32 23551, i32 25480, i32 27193, i32 32172, i32 38656, i32 22234, i32 21454, i32 21608], [94 x i32] [i32 23447, i32 23601, i32 24030, i32 20462, i32 24833, i32 25342, i32 27954, i32 31168, i32 31179, i32 32066, i32 32333, i32 32722, i32 33261, i32 33311, i32 33936, i32 34886, i32 35186, i32 35728, i32 36468, i32 36655, i32 36913, i32 37195, i32 37228, i32 38598, i32 37276, i32 20160, i32 20303, i32 20805, i32 21313, i32 24467, i32 25102, i32 26580, i32 27713, i32 28171, i32 29539, i32 32294, i32 37325, i32 37507, i32 21460, i32 22809, i32 23487, i32 28113, i32 31069, i32 32302, i32 31899, i32 22654, i32 29087, i32 20986, i32 34899, i32 36848, i32 20426, i32 23803, i32 26149, i32 30636, i32 31459, i32 33308, i32 39423, i32 20934, i32 24490, i32 26092, i32 26991, i32 27529, i32 28147, i32 28310, i32 28516, i32 30462, i32 32020, i32 24033, i32 36981, i32 37255, i32 38918, i32 20966, i32 21021, i32 25152, i32 26257, i32 26329, i32 28186, i32 24246, i32 32210, i32 32626, i32 26360, i32 34223, i32 34295, i32 35576, i32 21161, i32 21465, i32 22899, i32 24207, i32 24464, i32 24661, i32 37604, i32 38500, i32 20663, i32 20767], [94 x i32] [i32 21213, i32 21280, i32 21319, i32 21484, i32 21736, i32 21830, i32 21809, i32 22039, i32 22888, i32 22974, i32 23100, i32 23477, i32 23558, i32 23567, i32 23569, i32 23578, i32 24196, i32 24202, i32 24288, i32 24432, i32 25215, i32 25220, i32 25307, i32 25484, i32 25463, i32 26119, i32 26124, i32 26157, i32 26230, i32 26494, i32 26786, i32 27167, i32 27189, i32 27836, i32 28040, i32 28169, i32 28248, i32 28988, i32 28966, i32 29031, i32 30151, i32 30465, i32 30813, i32 30977, i32 31077, i32 31216, i32 31456, i32 31505, i32 31911, i32 32057, i32 32918, i32 33750, i32 33931, i32 34121, i32 34909, i32 35059, i32 35359, i32 35388, i32 35412, i32 35443, i32 35937, i32 36062, i32 37284, i32 37478, i32 37758, i32 37912, i32 38556, i32 38808, i32 19978, i32 19976, i32 19998, i32 20055, i32 20887, i32 21104, i32 22478, i32 22580, i32 22732, i32 23330, i32 24120, i32 24773, i32 25854, i32 26465, i32 26454, i32 27972, i32 29366, i32 30067, i32 31331, i32 33976, i32 35698, i32 37304, i32 37664, i32 22065, i32 22516, i32 39166], [94 x i32] [i32 25325, i32 26893, i32 27542, i32 29165, i32 32340, i32 32887, i32 33394, i32 35302, i32 39135, i32 34645, i32 36785, i32 23611, i32 20280, i32 20449, i32 20405, i32 21767, i32 23072, i32 23517, i32 23529, i32 24515, i32 24910, i32 25391, i32 26032, i32 26187, i32 26862, i32 27035, i32 28024, i32 28145, i32 30003, i32 30137, i32 30495, i32 31070, i32 31206, i32 32051, i32 33251, i32 33455, i32 34218, i32 35242, i32 35386, i32 36523, i32 36763, i32 36914, i32 37341, i32 38663, i32 20154, i32 20161, i32 20995, i32 22645, i32 22764, i32 23563, i32 29978, i32 23613, i32 33102, i32 35338, i32 36805, i32 38499, i32 38765, i32 31525, i32 35535, i32 38920, i32 37218, i32 22259, i32 21416, i32 36887, i32 21561, i32 22402, i32 24101, i32 25512, i32 27700, i32 28810, i32 30561, i32 31883, i32 32736, i32 34928, i32 36930, i32 37204, i32 37648, i32 37656, i32 38543, i32 29790, i32 39620, i32 23815, i32 23913, i32 25968, i32 26530, i32 36264, i32 38619, i32 25454, i32 26441, i32 26905, i32 33733, i32 38935, i32 38592, i32 35070], [94 x i32] [i32 28548, i32 25722, i32 23544, i32 19990, i32 28716, i32 30045, i32 26159, i32 20932, i32 21046, i32 21218, i32 22995, i32 24449, i32 24615, i32 25104, i32 25919, i32 25972, i32 26143, i32 26228, i32 26866, i32 26646, i32 27491, i32 28165, i32 29298, i32 29983, i32 30427, i32 31934, i32 32854, i32 22768, i32 35069, i32 35199, i32 35488, i32 35475, i32 35531, i32 36893, i32 37266, i32 38738, i32 38745, i32 25993, i32 31246, i32 33030, i32 38587, i32 24109, i32 24796, i32 25114, i32 26021, i32 26132, i32 26512, i32 30707, i32 31309, i32 31821, i32 32318, i32 33034, i32 36012, i32 36196, i32 36321, i32 36447, i32 30889, i32 20999, i32 25305, i32 25509, i32 25666, i32 25240, i32 35373, i32 31363, i32 31680, i32 35500, i32 38634, i32 32118, i32 33292, i32 34633, i32 20185, i32 20808, i32 21315, i32 21344, i32 23459, i32 23554, i32 23574, i32 24029, i32 25126, i32 25159, i32 25776, i32 26643, i32 26676, i32 27849, i32 27973, i32 27927, i32 26579, i32 28508, i32 29006, i32 29053, i32 26059, i32 31359, i32 31661, i32 32218], [94 x i32] [i32 32330, i32 32680, i32 33146, i32 33307, i32 33337, i32 34214, i32 35438, i32 36046, i32 36341, i32 36984, i32 36983, i32 37549, i32 37521, i32 38275, i32 39854, i32 21069, i32 21892, i32 28472, i32 28982, i32 20840, i32 31109, i32 32341, i32 33203, i32 31950, i32 22092, i32 22609, i32 23720, i32 25514, i32 26366, i32 26365, i32 26970, i32 29401, i32 30095, i32 30094, i32 30990, i32 31062, i32 31199, i32 31895, i32 32032, i32 32068, i32 34311, i32 35380, i32 38459, i32 36961, i32 40736, i32 20711, i32 21109, i32 21452, i32 21474, i32 20489, i32 21930, i32 22766, i32 22863, i32 29245, i32 23435, i32 23652, i32 21277, i32 24803, i32 24819, i32 25436, i32 25475, i32 25407, i32 25531, i32 25805, i32 26089, i32 26361, i32 24035, i32 27085, i32 27133, i32 28437, i32 29157, i32 20105, i32 30185, i32 30456, i32 31379, i32 31967, i32 32207, i32 32156, i32 32865, i32 33609, i32 33624, i32 33900, i32 33980, i32 34299, i32 35013, i32 36208, i32 36865, i32 36973, i32 37783, i32 38684, i32 39442, i32 20687, i32 22679, i32 24974], [94 x i32] [i32 33235, i32 34101, i32 36104, i32 36896, i32 20419, i32 20596, i32 21063, i32 21363, i32 24687, i32 25417, i32 26463, i32 28204, i32 36275, i32 36895, i32 20439, i32 23646, i32 36042, i32 26063, i32 32154, i32 21330, i32 34966, i32 20854, i32 25539, i32 23384, i32 23403, i32 23562, i32 25613, i32 26449, i32 36956, i32 20182, i32 22810, i32 22826, i32 27760, i32 35409, i32 21822, i32 22549, i32 22949, i32 24816, i32 25171, i32 26561, i32 33333, i32 26965, i32 38464, i32 39364, i32 39464, i32 20307, i32 22534, i32 23550, i32 32784, i32 23729, i32 24111, i32 24453, i32 24608, i32 24907, i32 25140, i32 26367, i32 27888, i32 28382, i32 32974, i32 33151, i32 33492, i32 34955, i32 36024, i32 36864, i32 36910, i32 38538, i32 40667, i32 39899, i32 20195, i32 21488, i32 22823, i32 31532, i32 37261, i32 38988, i32 40441, i32 28381, i32 28711, i32 21331, i32 21828, i32 23429, i32 25176, i32 25246, i32 25299, i32 27810, i32 28655, i32 29730, i32 35351, i32 37944, i32 28609, i32 35582, i32 33592, i32 20967, i32 34552, i32 21482], [94 x i32] [i32 21481, i32 20294, i32 36948, i32 36784, i32 22890, i32 33073, i32 24061, i32 31466, i32 36799, i32 26842, i32 35895, i32 29432, i32 40008, i32 27197, i32 35504, i32 20025, i32 21336, i32 22022, i32 22374, i32 25285, i32 25506, i32 26086, i32 27470, i32 28129, i32 28251, i32 28845, i32 30701, i32 31471, i32 31658, i32 32187, i32 32829, i32 32966, i32 34507, i32 35477, i32 37723, i32 22243, i32 22727, i32 24382, i32 26029, i32 26262, i32 27264, i32 27573, i32 30007, i32 35527, i32 20516, i32 30693, i32 22320, i32 24347, i32 24677, i32 26234, i32 27744, i32 30196, i32 31258, i32 32622, i32 33268, i32 34584, i32 36933, i32 39347, i32 31689, i32 30044, i32 31481, i32 31569, i32 33988, i32 36880, i32 31209, i32 31378, i32 33590, i32 23265, i32 30528, i32 20013, i32 20210, i32 23449, i32 24544, i32 25277, i32 26172, i32 26609, i32 27880, i32 34411, i32 34935, i32 35387, i32 37198, i32 37619, i32 39376, i32 27159, i32 28710, i32 29482, i32 33511, i32 33879, i32 36015, i32 19969, i32 20806, i32 20939, i32 21899, i32 23541], [94 x i32] [i32 24086, i32 24115, i32 24193, i32 24340, i32 24373, i32 24427, i32 24500, i32 25074, i32 25361, i32 26274, i32 26397, i32 28526, i32 29266, i32 30010, i32 30522, i32 32884, i32 33081, i32 33144, i32 34678, i32 35519, i32 35548, i32 36229, i32 36339, i32 37530, i32 38263, i32 38914, i32 40165, i32 21189, i32 25431, i32 30452, i32 26389, i32 27784, i32 29645, i32 36035, i32 37806, i32 38515, i32 27941, i32 22684, i32 26894, i32 27084, i32 36861, i32 37786, i32 30171, i32 36890, i32 22618, i32 26626, i32 25524, i32 27131, i32 20291, i32 28460, i32 26584, i32 36795, i32 34086, i32 32180, i32 37716, i32 26943, i32 28528, i32 22378, i32 22775, i32 23340, i32 32044, i32 29226, i32 21514, i32 37347, i32 40372, i32 20141, i32 20302, i32 20572, i32 20597, i32 21059, i32 35998, i32 21576, i32 22564, i32 23450, i32 24093, i32 24213, i32 24237, i32 24311, i32 24351, i32 24716, i32 25269, i32 25402, i32 25552, i32 26799, i32 27712, i32 30855, i32 31118, i32 31243, i32 32224, i32 33351, i32 35330, i32 35558, i32 36420, i32 36883], [94 x i32] [i32 37048, i32 37165, i32 37336, i32 40718, i32 27877, i32 25688, i32 25826, i32 25973, i32 28404, i32 30340, i32 31515, i32 36969, i32 37841, i32 28346, i32 21746, i32 24505, i32 25764, i32 36685, i32 36845, i32 37444, i32 20856, i32 22635, i32 22825, i32 23637, i32 24215, i32 28155, i32 32399, i32 29980, i32 36028, i32 36578, i32 39003, i32 28857, i32 20253, i32 27583, i32 28593, i32 30000, i32 38651, i32 20814, i32 21520, i32 22581, i32 22615, i32 22956, i32 23648, i32 24466, i32 26007, i32 26460, i32 28193, i32 30331, i32 33759, i32 36077, i32 36884, i32 37117, i32 37709, i32 30757, i32 30778, i32 21162, i32 24230, i32 22303, i32 22900, i32 24594, i32 20498, i32 20826, i32 20908, i32 20941, i32 20992, i32 21776, i32 22612, i32 22616, i32 22871, i32 23445, i32 23798, i32 23947, i32 24764, i32 25237, i32 25645, i32 26481, i32 26691, i32 26812, i32 26847, i32 30423, i32 28120, i32 28271, i32 28059, i32 28783, i32 29128, i32 24403, i32 30168, i32 31095, i32 31561, i32 31572, i32 31570, i32 31958, i32 32113, i32 21040], [94 x i32] [i32 33891, i32 34153, i32 34276, i32 35342, i32 35588, i32 35910, i32 36367, i32 36867, i32 36879, i32 37913, i32 38518, i32 38957, i32 39472, i32 38360, i32 20685, i32 21205, i32 21516, i32 22530, i32 23566, i32 24999, i32 25758, i32 27934, i32 30643, i32 31461, i32 33012, i32 33796, i32 36947, i32 37509, i32 23776, i32 40199, i32 21311, i32 24471, i32 24499, i32 28060, i32 29305, i32 30563, i32 31167, i32 31716, i32 27602, i32 29420, i32 35501, i32 26627, i32 27233, i32 20984, i32 31361, i32 26932, i32 23626, i32 40182, i32 33515, i32 23493, i32 37193, i32 28702, i32 22136, i32 23663, i32 24775, i32 25958, i32 27788, i32 35930, i32 36929, i32 38931, i32 21585, i32 26311, i32 37389, i32 22856, i32 37027, i32 20869, i32 20045, i32 20970, i32 34201, i32 35598, i32 28760, i32 25466, i32 37707, i32 26978, i32 39348, i32 32260, i32 30071, i32 21335, i32 26976, i32 36575, i32 38627, i32 27741, i32 20108, i32 23612, i32 24336, i32 36841, i32 21250, i32 36049, i32 32905, i32 34425, i32 24319, i32 26085, i32 20083, i32 20837], [94 x i32] [i32 22914, i32 23615, i32 38894, i32 20219, i32 22922, i32 24525, i32 35469, i32 28641, i32 31152, i32 31074, i32 23527, i32 33905, i32 29483, i32 29105, i32 24180, i32 24565, i32 25467, i32 25754, i32 29123, i32 31896, i32 20035, i32 24316, i32 20043, i32 22492, i32 22178, i32 24745, i32 28611, i32 32013, i32 33021, i32 33075, i32 33215, i32 36786, i32 35223, i32 34468, i32 24052, i32 25226, i32 25773, i32 35207, i32 26487, i32 27874, i32 27966, i32 29750, i32 30772, i32 23110, i32 32629, i32 33453, i32 39340, i32 20467, i32 24259, i32 25309, i32 25490, i32 25943, i32 26479, i32 30403, i32 29260, i32 32972, i32 32954, i32 36649, i32 37197, i32 20493, i32 22521, i32 23186, i32 26757, i32 26995, i32 29028, i32 29437, i32 36023, i32 22770, i32 36064, i32 38506, i32 36889, i32 34687, i32 31204, i32 30695, i32 33833, i32 20271, i32 21093, i32 21338, i32 25293, i32 26575, i32 27850, i32 30333, i32 31636, i32 31893, i32 33334, i32 34180, i32 36843, i32 26333, i32 28448, i32 29190, i32 32283, i32 33707, i32 39361, i32 40614], [94 x i32] [i32 20989, i32 31665, i32 30834, i32 31672, i32 32903, i32 31560, i32 27368, i32 24161, i32 32908, i32 30033, i32 30048, i32 20843, i32 37474, i32 28300, i32 30330, i32 37271, i32 39658, i32 20240, i32 32624, i32 25244, i32 31567, i32 38309, i32 40169, i32 22138, i32 22617, i32 34532, i32 38588, i32 20276, i32 21028, i32 21322, i32 21453, i32 21467, i32 24070, i32 25644, i32 26001, i32 26495, i32 27710, i32 27726, i32 29256, i32 29359, i32 29677, i32 30036, i32 32321, i32 33324, i32 34281, i32 36009, i32 31684, i32 37318, i32 29033, i32 38930, i32 39151, i32 25405, i32 26217, i32 30058, i32 30436, i32 30928, i32 34115, i32 34542, i32 21290, i32 21329, i32 21542, i32 22915, i32 24199, i32 24444, i32 24754, i32 25161, i32 25209, i32 25259, i32 26000, i32 27604, i32 27852, i32 30130, i32 30382, i32 30865, i32 31192, i32 32203, i32 32631, i32 32933, i32 34987, i32 35513, i32 36027, i32 36991, i32 38750, i32 39131, i32 27147, i32 31800, i32 20633, i32 23614, i32 24494, i32 26503, i32 27608, i32 29749, i32 30473, i32 32654], [94 x i32] [i32 40763, i32 26570, i32 31255, i32 21305, i32 30091, i32 39661, i32 24422, i32 33181, i32 33777, i32 32920, i32 24380, i32 24517, i32 30050, i32 31558, i32 36924, i32 26727, i32 23019, i32 23195, i32 32016, i32 30334, i32 35628, i32 20469, i32 24426, i32 27161, i32 27703, i32 28418, i32 29922, i32 31080, i32 34920, i32 35413, i32 35961, i32 24287, i32 25551, i32 30149, i32 31186, i32 33495, i32 37672, i32 37618, i32 33948, i32 34541, i32 39981, i32 21697, i32 24428, i32 25996, i32 27996, i32 28693, i32 36007, i32 36051, i32 38971, i32 25935, i32 29942, i32 19981, i32 20184, i32 22496, i32 22827, i32 23142, i32 23500, i32 20904, i32 24067, i32 24220, i32 24598, i32 25206, i32 25975, i32 26023, i32 26222, i32 28014, i32 29238, i32 31526, i32 33104, i32 33178, i32 33433, i32 35676, i32 36000, i32 36070, i32 36212, i32 38428, i32 38468, i32 20398, i32 25771, i32 27494, i32 33310, i32 33889, i32 34154, i32 37096, i32 23553, i32 26963, i32 39080, i32 33914, i32 34135, i32 20239, i32 21103, i32 24489, i32 24133, i32 26381], [94 x i32] [i32 31119, i32 33145, i32 35079, i32 35206, i32 28149, i32 24343, i32 25173, i32 27832, i32 20175, i32 29289, i32 39826, i32 20998, i32 21563, i32 22132, i32 22707, i32 24996, i32 25198, i32 28954, i32 22894, i32 31881, i32 31966, i32 32027, i32 38640, i32 25991, i32 32862, i32 19993, i32 20341, i32 20853, i32 22592, i32 24163, i32 24179, i32 24330, i32 26564, i32 20006, i32 34109, i32 38281, i32 38491, i32 31859, i32 38913, i32 20731, i32 22721, i32 30294, i32 30887, i32 21029, i32 30629, i32 34065, i32 31622, i32 20559, i32 22793, i32 29255, i32 31687, i32 32232, i32 36794, i32 36820, i32 36941, i32 20415, i32 21193, i32 23081, i32 24321, i32 38829, i32 20445, i32 33303, i32 37610, i32 22275, i32 25429, i32 27497, i32 29995, i32 35036, i32 36628, i32 31298, i32 21215, i32 22675, i32 24917, i32 25098, i32 26286, i32 27597, i32 31807, i32 33769, i32 20515, i32 20472, i32 21253, i32 21574, i32 22577, i32 22857, i32 23453, i32 23792, i32 23791, i32 23849, i32 24214, i32 25265, i32 25447, i32 25918, i32 26041, i32 26379], [94 x i32] [i32 27861, i32 27873, i32 28921, i32 30770, i32 32299, i32 32990, i32 33459, i32 33804, i32 34028, i32 34562, i32 35090, i32 35370, i32 35914, i32 37030, i32 37586, i32 39165, i32 40179, i32 40300, i32 20047, i32 20129, i32 20621, i32 21078, i32 22346, i32 22952, i32 24125, i32 24536, i32 24537, i32 25151, i32 26292, i32 26395, i32 26576, i32 26834, i32 20882, i32 32033, i32 32938, i32 33192, i32 35584, i32 35980, i32 36031, i32 37502, i32 38450, i32 21536, i32 38956, i32 21271, i32 20693, i32 21340, i32 22696, i32 25778, i32 26420, i32 29287, i32 30566, i32 31302, i32 37350, i32 21187, i32 27809, i32 27526, i32 22528, i32 24140, i32 22868, i32 26412, i32 32763, i32 20961, i32 30406, i32 25705, i32 30952, i32 39764, i32 40635, i32 22475, i32 22969, i32 26151, i32 26522, i32 27598, i32 21737, i32 27097, i32 24149, i32 33180, i32 26517, i32 39850, i32 26622, i32 40018, i32 26717, i32 20134, i32 20451, i32 21448, i32 25273, i32 26411, i32 27819, i32 36804, i32 20397, i32 32365, i32 40639, i32 19975, i32 24930, i32 28288], [94 x i32] [i32 28459, i32 34067, i32 21619, i32 26410, i32 39749, i32 24051, i32 31637, i32 23724, i32 23494, i32 34588, i32 28234, i32 34001, i32 31252, i32 33032, i32 22937, i32 31885, i32 27665, i32 30496, i32 21209, i32 22818, i32 28961, i32 29279, i32 30683, i32 38695, i32 40289, i32 26891, i32 23167, i32 23064, i32 20901, i32 21517, i32 21629, i32 26126, i32 30431, i32 36855, i32 37528, i32 40180, i32 23018, i32 29277, i32 28357, i32 20813, i32 26825, i32 32191, i32 32236, i32 38754, i32 40634, i32 25720, i32 27169, i32 33538, i32 22916, i32 23391, i32 27611, i32 29467, i32 30450, i32 32178, i32 32791, i32 33945, i32 20786, i32 26408, i32 40665, i32 30446, i32 26466, i32 21247, i32 39173, i32 23588, i32 25147, i32 31870, i32 36016, i32 21839, i32 24758, i32 32011, i32 38272, i32 21249, i32 20063, i32 20918, i32 22812, i32 29242, i32 32822, i32 37326, i32 24357, i32 30690, i32 21380, i32 24441, i32 32004, i32 34220, i32 35379, i32 36493, i32 38742, i32 26611, i32 34222, i32 37971, i32 24841, i32 24840, i32 27833, i32 30290], [94 x i32] [i32 35565, i32 36664, i32 21807, i32 20305, i32 20778, i32 21191, i32 21451, i32 23461, i32 24189, i32 24736, i32 24962, i32 25558, i32 26377, i32 26586, i32 28263, i32 28044, i32 29494, i32 29495, i32 30001, i32 31056, i32 35029, i32 35480, i32 36938, i32 37009, i32 37109, i32 38596, i32 34701, i32 22805, i32 20104, i32 20313, i32 19982, i32 35465, i32 36671, i32 38928, i32 20653, i32 24188, i32 22934, i32 23481, i32 24248, i32 25562, i32 25594, i32 25793, i32 26332, i32 26954, i32 27096, i32 27915, i32 28342, i32 29076, i32 29992, i32 31407, i32 32650, i32 32768, i32 33865, i32 33993, i32 35201, i32 35617, i32 36362, i32 36965, i32 38525, i32 39178, i32 24958, i32 25233, i32 27442, i32 27779, i32 28020, i32 32716, i32 32764, i32 28096, i32 32645, i32 34746, i32 35064, i32 26469, i32 33713, i32 38972, i32 38647, i32 27931, i32 32097, i32 33853, i32 37226, i32 20081, i32 21365, i32 23888, i32 27396, i32 28651, i32 34253, i32 34349, i32 35239, i32 21033, i32 21519, i32 23653, i32 26446, i32 26792, i32 29702, i32 29827], [94 x i32] [i32 30178, i32 35023, i32 35041, i32 37324, i32 38626, i32 38520, i32 24459, i32 29575, i32 31435, i32 33870, i32 25504, i32 30053, i32 21129, i32 27969, i32 28316, i32 29705, i32 30041, i32 30827, i32 31890, i32 38534, i32 31452, i32 40845, i32 20406, i32 24942, i32 26053, i32 34396, i32 20102, i32 20142, i32 20698, i32 20001, i32 20940, i32 23534, i32 26009, i32 26753, i32 28092, i32 29471, i32 30274, i32 30637, i32 31260, i32 31975, i32 33391, i32 35538, i32 36988, i32 37327, i32 38517, i32 38936, i32 21147, i32 32209, i32 20523, i32 21400, i32 26519, i32 28107, i32 29136, i32 29747, i32 33256, i32 36650, i32 38563, i32 40023, i32 40607, i32 29792, i32 22593, i32 28057, i32 32047, i32 39006, i32 20196, i32 20278, i32 20363, i32 20919, i32 21169, i32 23994, i32 24604, i32 29618, i32 31036, i32 33491, i32 37428, i32 38583, i32 38646, i32 38666, i32 40599, i32 40802, i32 26278, i32 27508, i32 21015, i32 21155, i32 28872, i32 35010, i32 24265, i32 24651, i32 24976, i32 28451, i32 29001, i32 31806, i32 32244, i32 32879], <{ [51 x i32], [43 x i32] }> <{ [51 x i32] [i32 34030, i32 36899, i32 37676, i32 21570, i32 39791, i32 27347, i32 28809, i32 36034, i32 36335, i32 38706, i32 21172, i32 23105, i32 24266, i32 24324, i32 26391, i32 27004, i32 27028, i32 28010, i32 28431, i32 29282, i32 29436, i32 31725, i32 32769, i32 32894, i32 34635, i32 37070, i32 20845, i32 40595, i32 31108, i32 32907, i32 37682, i32 35542, i32 20525, i32 21644, i32 35441, i32 27498, i32 36036, i32 33031, i32 24785, i32 26528, i32 40434, i32 20121, i32 20120, i32 39952, i32 35435, i32 34241, i32 34152, i32 26880, i32 28286, i32 30871, i32 33109], [43 x i32] zeroinitializer }>, [94 x i32] [i32 24332, i32 19984, i32 19989, i32 20010, i32 20017, i32 20022, i32 20028, i32 20031, i32 20034, i32 20054, i32 20056, i32 20098, i32 20101, i32 35947, i32 20106, i32 33298, i32 24333, i32 20110, i32 20126, i32 20127, i32 20128, i32 20130, i32 20144, i32 20147, i32 20150, i32 20174, i32 20173, i32 20164, i32 20166, i32 20162, i32 20183, i32 20190, i32 20205, i32 20191, i32 20215, i32 20233, i32 20314, i32 20272, i32 20315, i32 20317, i32 20311, i32 20295, i32 20342, i32 20360, i32 20367, i32 20376, i32 20347, i32 20329, i32 20336, i32 20369, i32 20335, i32 20358, i32 20374, i32 20760, i32 20436, i32 20447, i32 20430, i32 20440, i32 20443, i32 20433, i32 20442, i32 20432, i32 20452, i32 20453, i32 20506, i32 20520, i32 20500, i32 20522, i32 20517, i32 20485, i32 20252, i32 20470, i32 20513, i32 20521, i32 20524, i32 20478, i32 20463, i32 20497, i32 20486, i32 20547, i32 20551, i32 26371, i32 20565, i32 20560, i32 20552, i32 20570, i32 20566, i32 20588, i32 20600, i32 20608, i32 20634, i32 20613, i32 20660, i32 20658], [94 x i32] [i32 20681, i32 20682, i32 20659, i32 20674, i32 20694, i32 20702, i32 20709, i32 20717, i32 20707, i32 20718, i32 20729, i32 20725, i32 20745, i32 20737, i32 20738, i32 20758, i32 20757, i32 20756, i32 20762, i32 20769, i32 20794, i32 20791, i32 20796, i32 20795, i32 20799, i32 20800, i32 20818, i32 20812, i32 20820, i32 20834, i32 31480, i32 20841, i32 20842, i32 20846, i32 20864, i32 20866, i32 22232, i32 20876, i32 20873, i32 20879, i32 20881, i32 20883, i32 20885, i32 20886, i32 20900, i32 20902, i32 20898, i32 20905, i32 20906, i32 20907, i32 20915, i32 20913, i32 20914, i32 20912, i32 20917, i32 20925, i32 20933, i32 20937, i32 20955, i32 20960, i32 34389, i32 20969, i32 20973, i32 20976, i32 20981, i32 20990, i32 20996, i32 21003, i32 21012, i32 21006, i32 21031, i32 21034, i32 21038, i32 21043, i32 21049, i32 21071, i32 21060, i32 21067, i32 21068, i32 21086, i32 21076, i32 21098, i32 21108, i32 21097, i32 21107, i32 21119, i32 21117, i32 21133, i32 21140, i32 21138, i32 21105, i32 21128, i32 21137, i32 36776], [94 x i32] [i32 36775, i32 21164, i32 21165, i32 21180, i32 21173, i32 21185, i32 21197, i32 21207, i32 21214, i32 21219, i32 21222, i32 39149, i32 21216, i32 21235, i32 21237, i32 21240, i32 21241, i32 21254, i32 21256, i32 30008, i32 21261, i32 21264, i32 21263, i32 21269, i32 21274, i32 21283, i32 21295, i32 21297, i32 21299, i32 21304, i32 21312, i32 21318, i32 21317, i32 19991, i32 21321, i32 21325, i32 20950, i32 21342, i32 21353, i32 21358, i32 22808, i32 21371, i32 21367, i32 21378, i32 21398, i32 21408, i32 21414, i32 21413, i32 21422, i32 21424, i32 21430, i32 21443, i32 31762, i32 38617, i32 21471, i32 26364, i32 29166, i32 21486, i32 21480, i32 21485, i32 21498, i32 21505, i32 21565, i32 21568, i32 21548, i32 21549, i32 21564, i32 21550, i32 21558, i32 21545, i32 21533, i32 21582, i32 21647, i32 21621, i32 21646, i32 21599, i32 21617, i32 21623, i32 21616, i32 21650, i32 21627, i32 21632, i32 21622, i32 21636, i32 21648, i32 21638, i32 21703, i32 21666, i32 21688, i32 21669, i32 21676, i32 21700, i32 21704, i32 21672], [94 x i32] [i32 21675, i32 21698, i32 21668, i32 21694, i32 21692, i32 21720, i32 21733, i32 21734, i32 21775, i32 21780, i32 21757, i32 21742, i32 21741, i32 21754, i32 21730, i32 21817, i32 21824, i32 21859, i32 21836, i32 21806, i32 21852, i32 21829, i32 21846, i32 21847, i32 21816, i32 21811, i32 21853, i32 21913, i32 21888, i32 21679, i32 21898, i32 21919, i32 21883, i32 21886, i32 21912, i32 21918, i32 21934, i32 21884, i32 21891, i32 21929, i32 21895, i32 21928, i32 21978, i32 21957, i32 21983, i32 21956, i32 21980, i32 21988, i32 21972, i32 22036, i32 22007, i32 22038, i32 22014, i32 22013, i32 22043, i32 22009, i32 22094, i32 22096, i32 29151, i32 22068, i32 22070, i32 22066, i32 22072, i32 22123, i32 22116, i32 22063, i32 22124, i32 22122, i32 22150, i32 22144, i32 22154, i32 22176, i32 22164, i32 22159, i32 22181, i32 22190, i32 22198, i32 22196, i32 22210, i32 22204, i32 22209, i32 22211, i32 22208, i32 22216, i32 22222, i32 22225, i32 22227, i32 22231, i32 22254, i32 22265, i32 22272, i32 22271, i32 22276, i32 22281], [94 x i32] [i32 22280, i32 22283, i32 22285, i32 22291, i32 22296, i32 22294, i32 21959, i32 22300, i32 22310, i32 22327, i32 22328, i32 22350, i32 22331, i32 22336, i32 22351, i32 22377, i32 22464, i32 22408, i32 22369, i32 22399, i32 22409, i32 22419, i32 22432, i32 22451, i32 22436, i32 22442, i32 22448, i32 22467, i32 22470, i32 22484, i32 22482, i32 22483, i32 22538, i32 22486, i32 22499, i32 22539, i32 22553, i32 22557, i32 22642, i32 22561, i32 22626, i32 22603, i32 22640, i32 27584, i32 22610, i32 22589, i32 22649, i32 22661, i32 22713, i32 22687, i32 22699, i32 22714, i32 22750, i32 22715, i32 22712, i32 22702, i32 22725, i32 22739, i32 22737, i32 22743, i32 22745, i32 22744, i32 22757, i32 22748, i32 22756, i32 22751, i32 22767, i32 22778, i32 22777, i32 22779, i32 22780, i32 22781, i32 22786, i32 22794, i32 22800, i32 22811, i32 26790, i32 22821, i32 22828, i32 22829, i32 22834, i32 22840, i32 22846, i32 31442, i32 22869, i32 22864, i32 22862, i32 22874, i32 22872, i32 22882, i32 22880, i32 22887, i32 22892, i32 22889], [94 x i32] [i32 22904, i32 22913, i32 22941, i32 20318, i32 20395, i32 22947, i32 22962, i32 22982, i32 23016, i32 23004, i32 22925, i32 23001, i32 23002, i32 23077, i32 23071, i32 23057, i32 23068, i32 23049, i32 23066, i32 23104, i32 23148, i32 23113, i32 23093, i32 23094, i32 23138, i32 23146, i32 23194, i32 23228, i32 23230, i32 23243, i32 23234, i32 23229, i32 23267, i32 23255, i32 23270, i32 23273, i32 23254, i32 23290, i32 23291, i32 23308, i32 23307, i32 23318, i32 23346, i32 23248, i32 23338, i32 23350, i32 23358, i32 23363, i32 23365, i32 23360, i32 23377, i32 23381, i32 23386, i32 23387, i32 23397, i32 23401, i32 23408, i32 23411, i32 23413, i32 23416, i32 25992, i32 23418, i32 23424, i32 23427, i32 23462, i32 23480, i32 23491, i32 23495, i32 23497, i32 23508, i32 23504, i32 23524, i32 23526, i32 23522, i32 23518, i32 23525, i32 23531, i32 23536, i32 23542, i32 23539, i32 23557, i32 23559, i32 23560, i32 23565, i32 23571, i32 23584, i32 23586, i32 23592, i32 23608, i32 23609, i32 23617, i32 23622, i32 23630, i32 23635], [94 x i32] [i32 23632, i32 23631, i32 23409, i32 23660, i32 23662, i32 20066, i32 23670, i32 23673, i32 23692, i32 23697, i32 23700, i32 22939, i32 23723, i32 23739, i32 23734, i32 23740, i32 23735, i32 23749, i32 23742, i32 23751, i32 23769, i32 23785, i32 23805, i32 23802, i32 23789, i32 23948, i32 23786, i32 23819, i32 23829, i32 23831, i32 23900, i32 23839, i32 23835, i32 23825, i32 23828, i32 23842, i32 23834, i32 23833, i32 23832, i32 23884, i32 23890, i32 23886, i32 23883, i32 23916, i32 23923, i32 23926, i32 23943, i32 23940, i32 23938, i32 23970, i32 23965, i32 23980, i32 23982, i32 23997, i32 23952, i32 23991, i32 23996, i32 24009, i32 24013, i32 24019, i32 24018, i32 24022, i32 24027, i32 24043, i32 24050, i32 24053, i32 24075, i32 24090, i32 24089, i32 24081, i32 24091, i32 24118, i32 24119, i32 24132, i32 24131, i32 24128, i32 24142, i32 24151, i32 24148, i32 24159, i32 24162, i32 24164, i32 24135, i32 24181, i32 24182, i32 24186, i32 40636, i32 24191, i32 24224, i32 24257, i32 24258, i32 24264, i32 24272, i32 24271], [94 x i32] [i32 24278, i32 24291, i32 24285, i32 24282, i32 24283, i32 24290, i32 24289, i32 24296, i32 24297, i32 24300, i32 24305, i32 24307, i32 24304, i32 24308, i32 24312, i32 24318, i32 24323, i32 24329, i32 24413, i32 24412, i32 24331, i32 24337, i32 24342, i32 24361, i32 24365, i32 24376, i32 24385, i32 24392, i32 24396, i32 24398, i32 24367, i32 24401, i32 24406, i32 24407, i32 24409, i32 24417, i32 24429, i32 24435, i32 24439, i32 24451, i32 24450, i32 24447, i32 24458, i32 24456, i32 24465, i32 24455, i32 24478, i32 24473, i32 24472, i32 24480, i32 24488, i32 24493, i32 24508, i32 24534, i32 24571, i32 24548, i32 24568, i32 24561, i32 24541, i32 24755, i32 24575, i32 24609, i32 24672, i32 24601, i32 24592, i32 24617, i32 24590, i32 24625, i32 24603, i32 24597, i32 24619, i32 24614, i32 24591, i32 24634, i32 24666, i32 24641, i32 24682, i32 24695, i32 24671, i32 24650, i32 24646, i32 24653, i32 24675, i32 24643, i32 24676, i32 24642, i32 24684, i32 24683, i32 24665, i32 24705, i32 24717, i32 24807, i32 24707, i32 24730], [94 x i32] [i32 24708, i32 24731, i32 24726, i32 24727, i32 24722, i32 24743, i32 24715, i32 24801, i32 24760, i32 24800, i32 24787, i32 24756, i32 24560, i32 24765, i32 24774, i32 24757, i32 24792, i32 24909, i32 24853, i32 24838, i32 24822, i32 24823, i32 24832, i32 24820, i32 24826, i32 24835, i32 24865, i32 24827, i32 24817, i32 24845, i32 24846, i32 24903, i32 24894, i32 24872, i32 24871, i32 24906, i32 24895, i32 24892, i32 24876, i32 24884, i32 24893, i32 24898, i32 24900, i32 24947, i32 24951, i32 24920, i32 24921, i32 24922, i32 24939, i32 24948, i32 24943, i32 24933, i32 24945, i32 24927, i32 24925, i32 24915, i32 24949, i32 24985, i32 24982, i32 24967, i32 25004, i32 24980, i32 24986, i32 24970, i32 24977, i32 25003, i32 25006, i32 25036, i32 25034, i32 25033, i32 25079, i32 25032, i32 25027, i32 25030, i32 25018, i32 25035, i32 32633, i32 25037, i32 25062, i32 25059, i32 25078, i32 25082, i32 25076, i32 25087, i32 25085, i32 25084, i32 25086, i32 25088, i32 25096, i32 25097, i32 25101, i32 25100, i32 25108, i32 25115], [94 x i32] [i32 25118, i32 25121, i32 25130, i32 25134, i32 25136, i32 25138, i32 25139, i32 25153, i32 25166, i32 25182, i32 25187, i32 25179, i32 25184, i32 25192, i32 25212, i32 25218, i32 25225, i32 25214, i32 25234, i32 25235, i32 25238, i32 25300, i32 25219, i32 25236, i32 25303, i32 25297, i32 25275, i32 25295, i32 25343, i32 25286, i32 25812, i32 25288, i32 25308, i32 25292, i32 25290, i32 25282, i32 25287, i32 25243, i32 25289, i32 25356, i32 25326, i32 25329, i32 25383, i32 25346, i32 25352, i32 25327, i32 25333, i32 25424, i32 25406, i32 25421, i32 25628, i32 25423, i32 25494, i32 25486, i32 25472, i32 25515, i32 25462, i32 25507, i32 25487, i32 25481, i32 25503, i32 25525, i32 25451, i32 25449, i32 25534, i32 25577, i32 25536, i32 25542, i32 25571, i32 25545, i32 25554, i32 25590, i32 25540, i32 25622, i32 25652, i32 25606, i32 25619, i32 25638, i32 25654, i32 25885, i32 25623, i32 25640, i32 25615, i32 25703, i32 25711, i32 25718, i32 25678, i32 25898, i32 25749, i32 25747, i32 25765, i32 25769, i32 25736, i32 25788], [94 x i32] [i32 25818, i32 25810, i32 25797, i32 25799, i32 25787, i32 25816, i32 25794, i32 25841, i32 25831, i32 33289, i32 25824, i32 25825, i32 25260, i32 25827, i32 25839, i32 25900, i32 25846, i32 25844, i32 25842, i32 25850, i32 25856, i32 25853, i32 25880, i32 25884, i32 25861, i32 25892, i32 25891, i32 25899, i32 25908, i32 25909, i32 25911, i32 25910, i32 25912, i32 30027, i32 25928, i32 25942, i32 25941, i32 25933, i32 25944, i32 25950, i32 25949, i32 25970, i32 25976, i32 25986, i32 25987, i32 35722, i32 26011, i32 26015, i32 26027, i32 26039, i32 26051, i32 26054, i32 26049, i32 26052, i32 26060, i32 26066, i32 26075, i32 26073, i32 26080, i32 26081, i32 26097, i32 26482, i32 26122, i32 26115, i32 26107, i32 26483, i32 26165, i32 26166, i32 26164, i32 26140, i32 26191, i32 26180, i32 26185, i32 26177, i32 26206, i32 26205, i32 26212, i32 26215, i32 26216, i32 26207, i32 26210, i32 26224, i32 26243, i32 26248, i32 26254, i32 26249, i32 26244, i32 26264, i32 26269, i32 26305, i32 26297, i32 26313, i32 26302, i32 26300], [94 x i32] [i32 26308, i32 26296, i32 26326, i32 26330, i32 26336, i32 26175, i32 26342, i32 26345, i32 26352, i32 26357, i32 26359, i32 26383, i32 26390, i32 26398, i32 26406, i32 26407, i32 38712, i32 26414, i32 26431, i32 26422, i32 26433, i32 26424, i32 26423, i32 26438, i32 26462, i32 26464, i32 26457, i32 26467, i32 26468, i32 26505, i32 26480, i32 26537, i32 26492, i32 26474, i32 26508, i32 26507, i32 26534, i32 26529, i32 26501, i32 26551, i32 26607, i32 26548, i32 26604, i32 26547, i32 26601, i32 26552, i32 26596, i32 26590, i32 26589, i32 26594, i32 26606, i32 26553, i32 26574, i32 26566, i32 26599, i32 27292, i32 26654, i32 26694, i32 26665, i32 26688, i32 26701, i32 26674, i32 26702, i32 26803, i32 26667, i32 26713, i32 26723, i32 26743, i32 26751, i32 26783, i32 26767, i32 26797, i32 26772, i32 26781, i32 26779, i32 26755, i32 27310, i32 26809, i32 26740, i32 26805, i32 26784, i32 26810, i32 26895, i32 26765, i32 26750, i32 26881, i32 26826, i32 26888, i32 26840, i32 26914, i32 26918, i32 26849, i32 26892, i32 26829], [94 x i32] [i32 26836, i32 26855, i32 26837, i32 26934, i32 26898, i32 26884, i32 26839, i32 26851, i32 26917, i32 26873, i32 26848, i32 26863, i32 26920, i32 26922, i32 26906, i32 26915, i32 26913, i32 26822, i32 27001, i32 26999, i32 26972, i32 27000, i32 26987, i32 26964, i32 27006, i32 26990, i32 26937, i32 26996, i32 26941, i32 26969, i32 26928, i32 26977, i32 26974, i32 26973, i32 27009, i32 26986, i32 27058, i32 27054, i32 27088, i32 27071, i32 27073, i32 27091, i32 27070, i32 27086, i32 23528, i32 27082, i32 27101, i32 27067, i32 27075, i32 27047, i32 27182, i32 27025, i32 27040, i32 27036, i32 27029, i32 27060, i32 27102, i32 27112, i32 27138, i32 27163, i32 27135, i32 27402, i32 27129, i32 27122, i32 27111, i32 27141, i32 27057, i32 27166, i32 27117, i32 27156, i32 27115, i32 27146, i32 27154, i32 27329, i32 27171, i32 27155, i32 27204, i32 27148, i32 27250, i32 27190, i32 27256, i32 27207, i32 27234, i32 27225, i32 27238, i32 27208, i32 27192, i32 27170, i32 27280, i32 27277, i32 27296, i32 27268, i32 27298, i32 27299], [94 x i32] [i32 27287, i32 34327, i32 27323, i32 27331, i32 27330, i32 27320, i32 27315, i32 27308, i32 27358, i32 27345, i32 27359, i32 27306, i32 27354, i32 27370, i32 27387, i32 27397, i32 34326, i32 27386, i32 27410, i32 27414, i32 39729, i32 27423, i32 27448, i32 27447, i32 30428, i32 27449, i32 39150, i32 27463, i32 27459, i32 27465, i32 27472, i32 27481, i32 27476, i32 27483, i32 27487, i32 27489, i32 27512, i32 27513, i32 27519, i32 27520, i32 27524, i32 27523, i32 27533, i32 27544, i32 27541, i32 27550, i32 27556, i32 27562, i32 27563, i32 27567, i32 27570, i32 27569, i32 27571, i32 27575, i32 27580, i32 27590, i32 27595, i32 27603, i32 27615, i32 27628, i32 27627, i32 27635, i32 27631, i32 40638, i32 27656, i32 27667, i32 27668, i32 27675, i32 27684, i32 27683, i32 27742, i32 27733, i32 27746, i32 27754, i32 27778, i32 27789, i32 27802, i32 27777, i32 27803, i32 27774, i32 27752, i32 27763, i32 27794, i32 27792, i32 27844, i32 27889, i32 27859, i32 27837, i32 27863, i32 27845, i32 27869, i32 27822, i32 27825, i32 27838], [94 x i32] [i32 27834, i32 27867, i32 27887, i32 27865, i32 27882, i32 27935, i32 34893, i32 27958, i32 27947, i32 27965, i32 27960, i32 27929, i32 27957, i32 27955, i32 27922, i32 27916, i32 28003, i32 28051, i32 28004, i32 27994, i32 28025, i32 27993, i32 28046, i32 28053, i32 28644, i32 28037, i32 28153, i32 28181, i32 28170, i32 28085, i32 28103, i32 28134, i32 28088, i32 28102, i32 28140, i32 28126, i32 28108, i32 28136, i32 28114, i32 28101, i32 28154, i32 28121, i32 28132, i32 28117, i32 28138, i32 28142, i32 28205, i32 28270, i32 28206, i32 28185, i32 28274, i32 28255, i32 28222, i32 28195, i32 28267, i32 28203, i32 28278, i32 28237, i32 28191, i32 28227, i32 28218, i32 28238, i32 28196, i32 28415, i32 28189, i32 28216, i32 28290, i32 28330, i32 28312, i32 28361, i32 28343, i32 28371, i32 28349, i32 28335, i32 28356, i32 28338, i32 28372, i32 28373, i32 28303, i32 28325, i32 28354, i32 28319, i32 28481, i32 28433, i32 28748, i32 28396, i32 28408, i32 28414, i32 28479, i32 28402, i32 28465, i32 28399, i32 28466, i32 28364], [94 x i32] [i32 28478, i32 28435, i32 28407, i32 28550, i32 28538, i32 28536, i32 28545, i32 28544, i32 28527, i32 28507, i32 28659, i32 28525, i32 28546, i32 28540, i32 28504, i32 28558, i32 28561, i32 28610, i32 28518, i32 28595, i32 28579, i32 28577, i32 28580, i32 28601, i32 28614, i32 28586, i32 28639, i32 28629, i32 28652, i32 28628, i32 28632, i32 28657, i32 28654, i32 28635, i32 28681, i32 28683, i32 28666, i32 28689, i32 28673, i32 28687, i32 28670, i32 28699, i32 28698, i32 28532, i32 28701, i32 28696, i32 28703, i32 28720, i32 28734, i32 28722, i32 28753, i32 28771, i32 28825, i32 28818, i32 28847, i32 28913, i32 28844, i32 28856, i32 28851, i32 28846, i32 28895, i32 28875, i32 28893, i32 28889, i32 28937, i32 28925, i32 28956, i32 28953, i32 29029, i32 29013, i32 29064, i32 29030, i32 29026, i32 29004, i32 29014, i32 29036, i32 29071, i32 29179, i32 29060, i32 29077, i32 29096, i32 29100, i32 29143, i32 29113, i32 29118, i32 29138, i32 29129, i32 29140, i32 29134, i32 29152, i32 29164, i32 29159, i32 29173, i32 29180], [94 x i32] [i32 29177, i32 29183, i32 29197, i32 29200, i32 29211, i32 29224, i32 29229, i32 29228, i32 29232, i32 29234, i32 29243, i32 29244, i32 29247, i32 29248, i32 29254, i32 29259, i32 29272, i32 29300, i32 29310, i32 29314, i32 29313, i32 29319, i32 29330, i32 29334, i32 29346, i32 29351, i32 29369, i32 29362, i32 29379, i32 29382, i32 29380, i32 29390, i32 29394, i32 29410, i32 29408, i32 29409, i32 29433, i32 29431, i32 20495, i32 29463, i32 29450, i32 29468, i32 29462, i32 29469, i32 29492, i32 29487, i32 29481, i32 29477, i32 29502, i32 29518, i32 29519, i32 40664, i32 29527, i32 29546, i32 29544, i32 29552, i32 29560, i32 29557, i32 29563, i32 29562, i32 29640, i32 29619, i32 29646, i32 29627, i32 29632, i32 29669, i32 29678, i32 29662, i32 29858, i32 29701, i32 29807, i32 29733, i32 29688, i32 29746, i32 29754, i32 29781, i32 29759, i32 29791, i32 29785, i32 29761, i32 29788, i32 29801, i32 29808, i32 29795, i32 29802, i32 29814, i32 29822, i32 29835, i32 29854, i32 29863, i32 29898, i32 29903, i32 29908, i32 29681], [94 x i32] [i32 29920, i32 29923, i32 29927, i32 29929, i32 29934, i32 29938, i32 29936, i32 29937, i32 29944, i32 29943, i32 29956, i32 29955, i32 29957, i32 29964, i32 29966, i32 29965, i32 29973, i32 29971, i32 29982, i32 29990, i32 29996, i32 30012, i32 30020, i32 30029, i32 30026, i32 30025, i32 30043, i32 30022, i32 30042, i32 30057, i32 30052, i32 30055, i32 30059, i32 30061, i32 30072, i32 30070, i32 30086, i32 30087, i32 30068, i32 30090, i32 30089, i32 30082, i32 30100, i32 30106, i32 30109, i32 30117, i32 30115, i32 30146, i32 30131, i32 30147, i32 30133, i32 30141, i32 30136, i32 30140, i32 30129, i32 30157, i32 30154, i32 30162, i32 30169, i32 30179, i32 30174, i32 30206, i32 30207, i32 30204, i32 30209, i32 30192, i32 30202, i32 30194, i32 30195, i32 30219, i32 30221, i32 30217, i32 30239, i32 30247, i32 30240, i32 30241, i32 30242, i32 30244, i32 30260, i32 30256, i32 30267, i32 30279, i32 30280, i32 30278, i32 30300, i32 30296, i32 30305, i32 30306, i32 30312, i32 30313, i32 30314, i32 30311, i32 30316, i32 30320], [94 x i32] [i32 30322, i32 30326, i32 30328, i32 30332, i32 30336, i32 30339, i32 30344, i32 30347, i32 30350, i32 30358, i32 30355, i32 30361, i32 30362, i32 30384, i32 30388, i32 30392, i32 30393, i32 30394, i32 30402, i32 30413, i32 30422, i32 30418, i32 30430, i32 30433, i32 30437, i32 30439, i32 30442, i32 34351, i32 30459, i32 30472, i32 30471, i32 30468, i32 30505, i32 30500, i32 30494, i32 30501, i32 30502, i32 30491, i32 30519, i32 30520, i32 30535, i32 30554, i32 30568, i32 30571, i32 30555, i32 30565, i32 30591, i32 30590, i32 30585, i32 30606, i32 30603, i32 30609, i32 30624, i32 30622, i32 30640, i32 30646, i32 30649, i32 30655, i32 30652, i32 30653, i32 30651, i32 30663, i32 30669, i32 30679, i32 30682, i32 30684, i32 30691, i32 30702, i32 30716, i32 30732, i32 30738, i32 31014, i32 30752, i32 31018, i32 30789, i32 30862, i32 30836, i32 30854, i32 30844, i32 30874, i32 30860, i32 30883, i32 30901, i32 30890, i32 30895, i32 30929, i32 30918, i32 30923, i32 30932, i32 30910, i32 30908, i32 30917, i32 30922, i32 30956], [94 x i32] [i32 30951, i32 30938, i32 30973, i32 30964, i32 30983, i32 30994, i32 30993, i32 31001, i32 31020, i32 31019, i32 31040, i32 31072, i32 31063, i32 31071, i32 31066, i32 31061, i32 31059, i32 31098, i32 31103, i32 31114, i32 31133, i32 31143, i32 40779, i32 31146, i32 31150, i32 31155, i32 31161, i32 31162, i32 31177, i32 31189, i32 31207, i32 31212, i32 31201, i32 31203, i32 31240, i32 31245, i32 31256, i32 31257, i32 31264, i32 31263, i32 31104, i32 31281, i32 31291, i32 31294, i32 31287, i32 31299, i32 31319, i32 31305, i32 31329, i32 31330, i32 31337, i32 40861, i32 31344, i32 31353, i32 31357, i32 31368, i32 31383, i32 31381, i32 31384, i32 31382, i32 31401, i32 31432, i32 31408, i32 31414, i32 31429, i32 31428, i32 31423, i32 36995, i32 31431, i32 31434, i32 31437, i32 31439, i32 31445, i32 31443, i32 31449, i32 31450, i32 31453, i32 31457, i32 31458, i32 31462, i32 31469, i32 31472, i32 31490, i32 31503, i32 31498, i32 31494, i32 31539, i32 31512, i32 31513, i32 31518, i32 31541, i32 31528, i32 31542, i32 31568], [94 x i32] [i32 31610, i32 31492, i32 31565, i32 31499, i32 31564, i32 31557, i32 31605, i32 31589, i32 31604, i32 31591, i32 31600, i32 31601, i32 31596, i32 31598, i32 31645, i32 31640, i32 31647, i32 31629, i32 31644, i32 31642, i32 31627, i32 31634, i32 31631, i32 31581, i32 31641, i32 31691, i32 31681, i32 31692, i32 31695, i32 31668, i32 31686, i32 31709, i32 31721, i32 31761, i32 31764, i32 31718, i32 31717, i32 31840, i32 31744, i32 31751, i32 31763, i32 31731, i32 31735, i32 31767, i32 31757, i32 31734, i32 31779, i32 31783, i32 31786, i32 31775, i32 31799, i32 31787, i32 31805, i32 31820, i32 31811, i32 31828, i32 31823, i32 31808, i32 31824, i32 31832, i32 31839, i32 31844, i32 31830, i32 31845, i32 31852, i32 31861, i32 31875, i32 31888, i32 31908, i32 31917, i32 31906, i32 31915, i32 31905, i32 31912, i32 31923, i32 31922, i32 31921, i32 31918, i32 31929, i32 31933, i32 31936, i32 31941, i32 31938, i32 31960, i32 31954, i32 31964, i32 31970, i32 39739, i32 31983, i32 31986, i32 31988, i32 31990, i32 31994, i32 32006], [94 x i32] [i32 32002, i32 32028, i32 32021, i32 32010, i32 32069, i32 32075, i32 32046, i32 32050, i32 32063, i32 32053, i32 32070, i32 32115, i32 32086, i32 32078, i32 32114, i32 32104, i32 32110, i32 32079, i32 32099, i32 32147, i32 32137, i32 32091, i32 32143, i32 32125, i32 32155, i32 32186, i32 32174, i32 32163, i32 32181, i32 32199, i32 32189, i32 32171, i32 32317, i32 32162, i32 32175, i32 32220, i32 32184, i32 32159, i32 32176, i32 32216, i32 32221, i32 32228, i32 32222, i32 32251, i32 32242, i32 32225, i32 32261, i32 32266, i32 32291, i32 32289, i32 32274, i32 32305, i32 32287, i32 32265, i32 32267, i32 32290, i32 32326, i32 32358, i32 32315, i32 32309, i32 32313, i32 32323, i32 32311, i32 32306, i32 32314, i32 32359, i32 32349, i32 32342, i32 32350, i32 32345, i32 32346, i32 32377, i32 32362, i32 32361, i32 32380, i32 32379, i32 32387, i32 32213, i32 32381, i32 36782, i32 32383, i32 32392, i32 32393, i32 32396, i32 32402, i32 32400, i32 32403, i32 32404, i32 32406, i32 32398, i32 32411, i32 32412, i32 32568, i32 32570], [94 x i32] [i32 32581, i32 32588, i32 32589, i32 32590, i32 32592, i32 32593, i32 32597, i32 32596, i32 32600, i32 32607, i32 32608, i32 32616, i32 32617, i32 32615, i32 32632, i32 32642, i32 32646, i32 32643, i32 32648, i32 32647, i32 32652, i32 32660, i32 32670, i32 32669, i32 32666, i32 32675, i32 32687, i32 32690, i32 32697, i32 32686, i32 32694, i32 32696, i32 35697, i32 32709, i32 32710, i32 32714, i32 32725, i32 32724, i32 32737, i32 32742, i32 32745, i32 32755, i32 32761, i32 39132, i32 32774, i32 32772, i32 32779, i32 32786, i32 32792, i32 32793, i32 32796, i32 32801, i32 32808, i32 32831, i32 32827, i32 32842, i32 32838, i32 32850, i32 32856, i32 32858, i32 32863, i32 32866, i32 32872, i32 32883, i32 32882, i32 32880, i32 32886, i32 32889, i32 32893, i32 32895, i32 32900, i32 32902, i32 32901, i32 32923, i32 32915, i32 32922, i32 32941, i32 20880, i32 32940, i32 32987, i32 32997, i32 32985, i32 32989, i32 32964, i32 32986, i32 32982, i32 33033, i32 33007, i32 33009, i32 33051, i32 33065, i32 33059, i32 33071, i32 33099], [94 x i32] [i32 38539, i32 33094, i32 33086, i32 33107, i32 33105, i32 33020, i32 33137, i32 33134, i32 33125, i32 33126, i32 33140, i32 33155, i32 33160, i32 33162, i32 33152, i32 33154, i32 33184, i32 33173, i32 33188, i32 33187, i32 33119, i32 33171, i32 33193, i32 33200, i32 33205, i32 33214, i32 33208, i32 33213, i32 33216, i32 33218, i32 33210, i32 33225, i32 33229, i32 33233, i32 33241, i32 33240, i32 33224, i32 33242, i32 33247, i32 33248, i32 33255, i32 33274, i32 33275, i32 33278, i32 33281, i32 33282, i32 33285, i32 33287, i32 33290, i32 33293, i32 33296, i32 33302, i32 33321, i32 33323, i32 33336, i32 33331, i32 33344, i32 33369, i32 33368, i32 33373, i32 33370, i32 33375, i32 33380, i32 33378, i32 33384, i32 33386, i32 33387, i32 33326, i32 33393, i32 33399, i32 33400, i32 33406, i32 33421, i32 33426, i32 33451, i32 33439, i32 33467, i32 33452, i32 33505, i32 33507, i32 33503, i32 33490, i32 33524, i32 33523, i32 33530, i32 33683, i32 33539, i32 33531, i32 33529, i32 33502, i32 33542, i32 33500, i32 33545, i32 33497], [94 x i32] [i32 33589, i32 33588, i32 33558, i32 33586, i32 33585, i32 33600, i32 33593, i32 33616, i32 33605, i32 33583, i32 33579, i32 33559, i32 33560, i32 33669, i32 33690, i32 33706, i32 33695, i32 33698, i32 33686, i32 33571, i32 33678, i32 33671, i32 33674, i32 33660, i32 33717, i32 33651, i32 33653, i32 33696, i32 33673, i32 33704, i32 33780, i32 33811, i32 33771, i32 33742, i32 33789, i32 33795, i32 33752, i32 33803, i32 33729, i32 33783, i32 33799, i32 33760, i32 33778, i32 33805, i32 33826, i32 33824, i32 33725, i32 33848, i32 34054, i32 33787, i32 33901, i32 33834, i32 33852, i32 34138, i32 33924, i32 33911, i32 33899, i32 33965, i32 33902, i32 33922, i32 33897, i32 33862, i32 33836, i32 33903, i32 33913, i32 33845, i32 33994, i32 33890, i32 33977, i32 33983, i32 33951, i32 34009, i32 33997, i32 33979, i32 34010, i32 34000, i32 33985, i32 33990, i32 34006, i32 33953, i32 34081, i32 34047, i32 34036, i32 34071, i32 34072, i32 34092, i32 34079, i32 34069, i32 34068, i32 34044, i32 34112, i32 34147, i32 34136, i32 34120], [94 x i32] [i32 34113, i32 34306, i32 34123, i32 34133, i32 34176, i32 34212, i32 34184, i32 34193, i32 34186, i32 34216, i32 34157, i32 34196, i32 34203, i32 34282, i32 34183, i32 34204, i32 34167, i32 34174, i32 34192, i32 34249, i32 34234, i32 34255, i32 34233, i32 34256, i32 34261, i32 34269, i32 34277, i32 34268, i32 34297, i32 34314, i32 34323, i32 34315, i32 34302, i32 34298, i32 34310, i32 34338, i32 34330, i32 34352, i32 34367, i32 34381, i32 20053, i32 34388, i32 34399, i32 34407, i32 34417, i32 34451, i32 34467, i32 34473, i32 34474, i32 34443, i32 34444, i32 34486, i32 34479, i32 34500, i32 34502, i32 34480, i32 34505, i32 34851, i32 34475, i32 34516, i32 34526, i32 34537, i32 34540, i32 34527, i32 34523, i32 34543, i32 34578, i32 34566, i32 34568, i32 34560, i32 34563, i32 34555, i32 34577, i32 34569, i32 34573, i32 34553, i32 34570, i32 34612, i32 34623, i32 34615, i32 34619, i32 34597, i32 34601, i32 34586, i32 34656, i32 34655, i32 34680, i32 34636, i32 34638, i32 34676, i32 34647, i32 34664, i32 34670, i32 34649], [94 x i32] [i32 34643, i32 34659, i32 34666, i32 34821, i32 34722, i32 34719, i32 34690, i32 34735, i32 34763, i32 34749, i32 34752, i32 34768, i32 38614, i32 34731, i32 34756, i32 34739, i32 34759, i32 34758, i32 34747, i32 34799, i32 34802, i32 34784, i32 34831, i32 34829, i32 34814, i32 34806, i32 34807, i32 34830, i32 34770, i32 34833, i32 34838, i32 34837, i32 34850, i32 34849, i32 34865, i32 34870, i32 34873, i32 34855, i32 34875, i32 34884, i32 34882, i32 34898, i32 34905, i32 34910, i32 34914, i32 34923, i32 34945, i32 34942, i32 34974, i32 34933, i32 34941, i32 34997, i32 34930, i32 34946, i32 34967, i32 34962, i32 34990, i32 34969, i32 34978, i32 34957, i32 34980, i32 34992, i32 35007, i32 34993, i32 35011, i32 35012, i32 35028, i32 35032, i32 35033, i32 35037, i32 35065, i32 35074, i32 35068, i32 35060, i32 35048, i32 35058, i32 35076, i32 35084, i32 35082, i32 35091, i32 35139, i32 35102, i32 35109, i32 35114, i32 35115, i32 35137, i32 35140, i32 35131, i32 35126, i32 35128, i32 35148, i32 35101, i32 35168, i32 35166], [94 x i32] [i32 35174, i32 35172, i32 35181, i32 35178, i32 35183, i32 35188, i32 35191, i32 35198, i32 35203, i32 35208, i32 35210, i32 35219, i32 35224, i32 35233, i32 35241, i32 35238, i32 35244, i32 35247, i32 35250, i32 35258, i32 35261, i32 35263, i32 35264, i32 35290, i32 35292, i32 35293, i32 35303, i32 35316, i32 35320, i32 35331, i32 35350, i32 35344, i32 35340, i32 35355, i32 35357, i32 35365, i32 35382, i32 35393, i32 35419, i32 35410, i32 35398, i32 35400, i32 35452, i32 35437, i32 35436, i32 35426, i32 35461, i32 35458, i32 35460, i32 35496, i32 35489, i32 35473, i32 35493, i32 35494, i32 35482, i32 35491, i32 35524, i32 35533, i32 35522, i32 35546, i32 35563, i32 35571, i32 35559, i32 35556, i32 35569, i32 35604, i32 35552, i32 35554, i32 35575, i32 35550, i32 35547, i32 35596, i32 35591, i32 35610, i32 35553, i32 35606, i32 35600, i32 35607, i32 35616, i32 35635, i32 38827, i32 35622, i32 35627, i32 35646, i32 35624, i32 35649, i32 35660, i32 35663, i32 35662, i32 35657, i32 35670, i32 35675, i32 35674, i32 35691], [94 x i32] [i32 35679, i32 35692, i32 35695, i32 35700, i32 35709, i32 35712, i32 35724, i32 35726, i32 35730, i32 35731, i32 35734, i32 35737, i32 35738, i32 35898, i32 35905, i32 35903, i32 35912, i32 35916, i32 35918, i32 35920, i32 35925, i32 35938, i32 35948, i32 35960, i32 35962, i32 35970, i32 35977, i32 35973, i32 35978, i32 35981, i32 35982, i32 35988, i32 35964, i32 35992, i32 25117, i32 36013, i32 36010, i32 36029, i32 36018, i32 36019, i32 36014, i32 36022, i32 36040, i32 36033, i32 36068, i32 36067, i32 36058, i32 36093, i32 36090, i32 36091, i32 36100, i32 36101, i32 36106, i32 36103, i32 36111, i32 36109, i32 36112, i32 40782, i32 36115, i32 36045, i32 36116, i32 36118, i32 36199, i32 36205, i32 36209, i32 36211, i32 36225, i32 36249, i32 36290, i32 36286, i32 36282, i32 36303, i32 36314, i32 36310, i32 36300, i32 36315, i32 36299, i32 36330, i32 36331, i32 36319, i32 36323, i32 36348, i32 36360, i32 36361, i32 36351, i32 36381, i32 36382, i32 36368, i32 36383, i32 36418, i32 36405, i32 36400, i32 36404, i32 36426], [94 x i32] [i32 36423, i32 36425, i32 36428, i32 36432, i32 36424, i32 36441, i32 36452, i32 36448, i32 36394, i32 36451, i32 36437, i32 36470, i32 36466, i32 36476, i32 36481, i32 36487, i32 36485, i32 36484, i32 36491, i32 36490, i32 36499, i32 36497, i32 36500, i32 36505, i32 36522, i32 36513, i32 36524, i32 36528, i32 36550, i32 36529, i32 36542, i32 36549, i32 36552, i32 36555, i32 36571, i32 36579, i32 36604, i32 36603, i32 36587, i32 36606, i32 36618, i32 36613, i32 36629, i32 36626, i32 36633, i32 36627, i32 36636, i32 36639, i32 36635, i32 36620, i32 36646, i32 36659, i32 36667, i32 36665, i32 36677, i32 36674, i32 36670, i32 36684, i32 36681, i32 36678, i32 36686, i32 36695, i32 36700, i32 36706, i32 36707, i32 36708, i32 36764, i32 36767, i32 36771, i32 36781, i32 36783, i32 36791, i32 36826, i32 36837, i32 36834, i32 36842, i32 36847, i32 36999, i32 36852, i32 36869, i32 36857, i32 36858, i32 36881, i32 36885, i32 36897, i32 36877, i32 36894, i32 36886, i32 36875, i32 36903, i32 36918, i32 36917, i32 36921, i32 36856], [94 x i32] [i32 36943, i32 36944, i32 36945, i32 36946, i32 36878, i32 36937, i32 36926, i32 36950, i32 36952, i32 36958, i32 36968, i32 36975, i32 36982, i32 38568, i32 36978, i32 36994, i32 36989, i32 36993, i32 36992, i32 37002, i32 37001, i32 37007, i32 37032, i32 37039, i32 37041, i32 37045, i32 37090, i32 37092, i32 25160, i32 37083, i32 37122, i32 37138, i32 37145, i32 37170, i32 37168, i32 37194, i32 37206, i32 37208, i32 37219, i32 37221, i32 37225, i32 37235, i32 37234, i32 37259, i32 37257, i32 37250, i32 37282, i32 37291, i32 37295, i32 37290, i32 37301, i32 37300, i32 37306, i32 37312, i32 37313, i32 37321, i32 37323, i32 37328, i32 37334, i32 37343, i32 37345, i32 37339, i32 37372, i32 37365, i32 37366, i32 37406, i32 37375, i32 37396, i32 37420, i32 37397, i32 37393, i32 37470, i32 37463, i32 37445, i32 37449, i32 37476, i32 37448, i32 37525, i32 37439, i32 37451, i32 37456, i32 37532, i32 37526, i32 37523, i32 37531, i32 37466, i32 37583, i32 37561, i32 37559, i32 37609, i32 37647, i32 37626, i32 37700, i32 37678], [94 x i32] [i32 37657, i32 37666, i32 37658, i32 37667, i32 37690, i32 37685, i32 37691, i32 37724, i32 37728, i32 37756, i32 37742, i32 37718, i32 37808, i32 37804, i32 37805, i32 37780, i32 37817, i32 37846, i32 37847, i32 37864, i32 37861, i32 37848, i32 37827, i32 37853, i32 37840, i32 37832, i32 37860, i32 37914, i32 37908, i32 37907, i32 37891, i32 37895, i32 37904, i32 37942, i32 37931, i32 37941, i32 37921, i32 37946, i32 37953, i32 37970, i32 37956, i32 37979, i32 37984, i32 37986, i32 37982, i32 37994, i32 37417, i32 38000, i32 38005, i32 38007, i32 38013, i32 37978, i32 38012, i32 38014, i32 38017, i32 38015, i32 38274, i32 38279, i32 38282, i32 38292, i32 38294, i32 38296, i32 38297, i32 38304, i32 38312, i32 38311, i32 38317, i32 38332, i32 38331, i32 38329, i32 38334, i32 38346, i32 28662, i32 38339, i32 38349, i32 38348, i32 38357, i32 38356, i32 38358, i32 38364, i32 38369, i32 38373, i32 38370, i32 38433, i32 38440, i32 38446, i32 38447, i32 38466, i32 38476, i32 38479, i32 38475, i32 38519, i32 38492, i32 38494], [94 x i32] [i32 38493, i32 38495, i32 38502, i32 38514, i32 38508, i32 38541, i32 38552, i32 38549, i32 38551, i32 38570, i32 38567, i32 38577, i32 38578, i32 38576, i32 38580, i32 38582, i32 38584, i32 38585, i32 38606, i32 38603, i32 38601, i32 38605, i32 35149, i32 38620, i32 38669, i32 38613, i32 38649, i32 38660, i32 38662, i32 38664, i32 38675, i32 38670, i32 38673, i32 38671, i32 38678, i32 38681, i32 38692, i32 38698, i32 38704, i32 38713, i32 38717, i32 38718, i32 38724, i32 38726, i32 38728, i32 38722, i32 38729, i32 38748, i32 38752, i32 38756, i32 38758, i32 38760, i32 21202, i32 38763, i32 38769, i32 38777, i32 38789, i32 38780, i32 38785, i32 38778, i32 38790, i32 38795, i32 38799, i32 38800, i32 38812, i32 38824, i32 38822, i32 38819, i32 38835, i32 38836, i32 38851, i32 38854, i32 38856, i32 38859, i32 38876, i32 38893, i32 40783, i32 38898, i32 31455, i32 38902, i32 38901, i32 38927, i32 38924, i32 38968, i32 38948, i32 38945, i32 38967, i32 38973, i32 38982, i32 38991, i32 38987, i32 39019, i32 39023, i32 39024], [94 x i32] [i32 39025, i32 39028, i32 39027, i32 39082, i32 39087, i32 39089, i32 39094, i32 39108, i32 39107, i32 39110, i32 39145, i32 39147, i32 39171, i32 39177, i32 39186, i32 39188, i32 39192, i32 39201, i32 39197, i32 39198, i32 39204, i32 39200, i32 39212, i32 39214, i32 39229, i32 39230, i32 39234, i32 39241, i32 39237, i32 39248, i32 39243, i32 39249, i32 39250, i32 39244, i32 39253, i32 39319, i32 39320, i32 39333, i32 39341, i32 39342, i32 39356, i32 39391, i32 39387, i32 39389, i32 39384, i32 39377, i32 39405, i32 39406, i32 39409, i32 39410, i32 39419, i32 39416, i32 39425, i32 39439, i32 39429, i32 39394, i32 39449, i32 39467, i32 39479, i32 39493, i32 39490, i32 39488, i32 39491, i32 39486, i32 39509, i32 39501, i32 39515, i32 39511, i32 39519, i32 39522, i32 39525, i32 39524, i32 39529, i32 39531, i32 39530, i32 39597, i32 39600, i32 39612, i32 39616, i32 39631, i32 39633, i32 39635, i32 39636, i32 39646, i32 39647, i32 39650, i32 39651, i32 39654, i32 39663, i32 39659, i32 39662, i32 39668, i32 39665, i32 39671], [94 x i32] [i32 39675, i32 39686, i32 39704, i32 39706, i32 39711, i32 39714, i32 39715, i32 39717, i32 39719, i32 39720, i32 39721, i32 39722, i32 39726, i32 39727, i32 39730, i32 39748, i32 39747, i32 39759, i32 39757, i32 39758, i32 39761, i32 39768, i32 39796, i32 39827, i32 39811, i32 39825, i32 39830, i32 39831, i32 39839, i32 39840, i32 39848, i32 39860, i32 39872, i32 39882, i32 39865, i32 39878, i32 39887, i32 39889, i32 39890, i32 39907, i32 39906, i32 39908, i32 39892, i32 39905, i32 39994, i32 39922, i32 39921, i32 39920, i32 39957, i32 39956, i32 39945, i32 39955, i32 39948, i32 39942, i32 39944, i32 39954, i32 39946, i32 39940, i32 39982, i32 39963, i32 39973, i32 39972, i32 39969, i32 39984, i32 40007, i32 39986, i32 40006, i32 39998, i32 40026, i32 40032, i32 40039, i32 40054, i32 40056, i32 40167, i32 40172, i32 40176, i32 40201, i32 40200, i32 40171, i32 40195, i32 40198, i32 40234, i32 40230, i32 40367, i32 40227, i32 40223, i32 40260, i32 40213, i32 40210, i32 40257, i32 40255, i32 40254, i32 40262, i32 40264], [94 x i32] [i32 40285, i32 40286, i32 40292, i32 40273, i32 40272, i32 40281, i32 40306, i32 40329, i32 40327, i32 40363, i32 40303, i32 40314, i32 40346, i32 40356, i32 40361, i32 40370, i32 40388, i32 40385, i32 40379, i32 40376, i32 40378, i32 40390, i32 40399, i32 40386, i32 40409, i32 40403, i32 40440, i32 40422, i32 40429, i32 40431, i32 40445, i32 40474, i32 40475, i32 40478, i32 40565, i32 40569, i32 40573, i32 40577, i32 40584, i32 40587, i32 40588, i32 40594, i32 40597, i32 40593, i32 40605, i32 40613, i32 40617, i32 40632, i32 40618, i32 40621, i32 38753, i32 40652, i32 40654, i32 40655, i32 40656, i32 40660, i32 40668, i32 40670, i32 40669, i32 40672, i32 40677, i32 40680, i32 40687, i32 40692, i32 40694, i32 40695, i32 40697, i32 40699, i32 40700, i32 40701, i32 40711, i32 40712, i32 30391, i32 40725, i32 40737, i32 40748, i32 40766, i32 40778, i32 40786, i32 40788, i32 40803, i32 40799, i32 40800, i32 40801, i32 40806, i32 40807, i32 40812, i32 40810, i32 40823, i32 40818, i32 40822, i32 40853, i32 40860, i32 40864], <{ i32, i32, i32, i32, i32, i32, [88 x i32] }> <{ i32 22575, i32 27079, i32 36953, i32 29796, i32 20956, i32 29081, [88 x i32] zeroinitializer }>, [94 x i32] [i32 13314, i32 131416, i32 20221, i32 20223, i32 20378, i32 20425, i32 20636, i32 20766, i32 20924, i32 13599, i32 21255, i32 21345, i32 21356, i32 35449, i32 134071, i32 21581, i32 21654, i32 21660, i32 21673, i32 21774, i32 21834, i32 22130, i32 22244, i32 22323, i32 22324, i32 64016, i32 22656, i32 23012, i32 23075, i32 23125, i32 23532, i32 64017, i32 14306, i32 24236, i32 24372, i32 24389, i32 22455, i32 24599, i32 64107, i32 24880, i32 26148, i32 26312, i32 26329, i32 26362, i32 26363, i32 26706, i32 40900, i32 26897, i32 26939, i32 27205, i32 27281, i32 27355, i32 144332, i32 144382, i32 144836, i32 27633, i32 27872, i32 27950, i32 64069, i32 28095, i32 28106, i32 28152, i32 64070, i32 28510, i32 28665, i32 28772, i32 64108, i32 148206, i32 28999, i32 29121, i32 29184, i32 29599, i32 29608, i32 29641, i32 29654, i32 29723, i32 29729, i32 64074, i32 29734, i32 29738, i32 29740, i32 29753, i32 29771, i32 16090, i32 30069, i32 30081, i32 30578, i32 16531, i32 30920, i32 30944, i32 31047, i32 31150, i32 40902, i32 16643], <{ [43 x i32], [51 x i32] }> <{ [43 x i32] [i32 40901, i32 31194, i32 31262, i32 31615, i32 31793, i32 16966, i32 32139, i32 32673, i32 33048, i32 33082, i32 64109, i32 33454, i32 33883, i32 34012, i32 34028, i32 34137, i32 34254, i32 34645, i32 34796, i32 34827, i32 35061, i32 35282, i32 35574, i32 36302, i32 36795, i32 36854, i32 37085, i32 37159, i32 37165, i32 37298, i32 37427, i32 37512, i32 37665, i32 37704, i32 38290, i32 38622, i32 39171, i32 39232, i32 39641, i32 39894, i32 40407, i32 40628, i32 40629], [51 x i32] zeroinitializer }>, [94 x i32] zeroinitializer, [94 x i32] zeroinitializer, [94 x i32] zeroinitializer, <{ [84 x i32], [10 x i32] }> <{ [84 x i32] [i32 57545, i32 57546, i32 57547, i32 57548, i32 57549, i32 57550, i32 0, i32 57552, i32 57553, i32 57554, i32 57555, i32 0, i32 0, i32 0, i32 0, i32 57560, i32 57561, i32 0, i32 0, i32 57564, i32 57565, i32 57566, i32 57567, i32 57568, i32 57569, i32 57570, i32 57571, i32 57572, i32 57573, i32 57574, i32 57575, i32 57576, i32 57577, i32 57578, i32 57579, i32 57580, i32 57581, i32 57582, i32 57583, i32 57584, i32 0, i32 0, i32 0, i32 0, i32 9361, i32 9362, i32 9363, i32 57592, i32 57593, i32 57594, i32 57595, i32 57596, i32 57597, i32 57598, i32 57599, i32 57728, i32 57729, i32 57730, i32 57731, i32 57732, i32 57733, i32 57734, i32 57735, i32 57736, i32 57737, i32 57738, i32 57739, i32 57740, i32 57741, i32 57742, i32 57743, i32 57744, i32 57745, i32 57746, i32 57747, i32 57748, i32 57749, i32 57750, i32 57751, i32 57752, i32 57753, i32 57754, i32 12953, i32 57756], [10 x i32] zeroinitializer }>, <{ [49 x i32], [45 x i32] }> <{ [49 x i32] [i32 57767, i32 57768, i32 57769, i32 57770, i32 57771, i32 57772, i32 57773, i32 12306, i32 9960, i32 57776, i32 57777, i32 57778, i32 21325, i32 57780, i32 57781, i32 9964, i32 9832, i32 57784, i32 57785, i32 57786, i32 9875, i32 9992, i32 9968, i32 57790, i32 57791, i32 57792, i32 57793, i32 57794, i32 57795, i32 9401, i32 9416, i32 57798, i32 57799, i32 57800, i32 57801, i32 57802, i32 57803, i32 57804, i32 57805, i32 57806, i32 57807, i32 57808, i32 9742, i32 57810, i32 57811, i32 57812, i32 57813, i32 57814, i32 57815], [45 x i32] zeroinitializer }>, [94 x i32] [i32 10145, i32 11013, i32 11014, i32 11015, i32 11055, i32 11054, i32 24180, i32 26376, i32 26085, i32 20870, i32 13217, i32 13221, i32 13213, i32 13216, i32 13220, i32 57999, i32 9352, i32 9353, i32 9354, i32 9355, i32 9356, i32 9357, i32 9358, i32 9359, i32 9360, i32 58000, i32 58001, i32 58002, i32 58003, i32 58004, i32 58005, i32 58006, i32 58007, i32 58008, i32 58009, i32 58010, i32 58011, i32 58012, i32 58013, i32 58014, i32 58015, i32 12851, i32 12854, i32 12850, i32 12849, i32 12857, i32 58016, i32 9654, i32 9664, i32 12310, i32 12311, i32 58017, i32 178, i32 179, i32 58020, i32 58021, i32 58022, i32 58023, i32 58024, i32 58025, i32 58026, i32 58027, i32 58028, i32 58029, i32 58030, i32 58031, i32 58032, i32 58033, i32 58034, i32 58035, i32 58036, i32 58037, i32 58038, i32 58039, i32 58040, i32 58041, i32 58042, i32 58043, i32 58044, i32 58045, i32 58046, i32 58047, i32 58048, i32 58049, i32 58050, i32 127276, i32 127275, i32 58051, i32 58052, i32 58053, i32 8507, i32 0, i32 0, i32 0], [94 x i32] [i32 12842, i32 12843, i32 12844, i32 12845, i32 12846, i32 12847, i32 12848, i32 12855, i32 13182, i32 13181, i32 13180, i32 13179, i32 8470, i32 8481, i32 12342, i32 58060, i32 58061, i32 58062, i32 58063, i32 58064, i32 58065, i32 58066, i32 58067, i32 58068, i32 58069, i32 58070, i32 58071, i32 58072, i32 58073, i32 58074, i32 58075, i32 58076, i32 58077, i32 58078, i32 58079, i32 58080, i32 58081, i32 58082, i32 8467, i32 13199, i32 13200, i32 13258, i32 13214, i32 13218, i32 13169, i32 0, i32 0, i32 189, i32 58085, i32 8531, i32 8532, i32 188, i32 190, i32 8533, i32 8534, i32 8535, i32 8536, i32 8537, i32 8538, i32 58086, i32 0, i32 58087, i32 58088, i32 9728, i32 9729, i32 9730, i32 9924, i32 9750, i32 9751, i32 9929, i32 9930, i32 9830, i32 9829, i32 9827, i32 9824, i32 9931, i32 10752, i32 8252, i32 8265, i32 9925, i32 9748, i32 9926, i32 9731, i32 9927, i32 9889, i32 9928, i32 0, i32 58105, i32 58106, i32 9836, i32 9742, i32 0, i32 0, i32 0], [94 x i32] [i32 8544, i32 8545, i32 8546, i32 8547, i32 8548, i32 8549, i32 8550, i32 8551, i32 8552, i32 8553, i32 8554, i32 8555, i32 9328, i32 9329, i32 9330, i32 9331, i32 9332, i32 9333, i32 9334, i32 9335, i32 9336, i32 9337, i32 9338, i32 9339, i32 9340, i32 9341, i32 9342, i32 9343, i32 12881, i32 12882, i32 12883, i32 12884, i32 127248, i32 127249, i32 127250, i32 127251, i32 127252, i32 127253, i32 127254, i32 127255, i32 127256, i32 127257, i32 127258, i32 127259, i32 127260, i32 127261, i32 127262, i32 127263, i32 127264, i32 127265, i32 127266, i32 127267, i32 127268, i32 127269, i32 127270, i32 127271, i32 127272, i32 127273, i32 12885, i32 12886, i32 12887, i32 12888, i32 12889, i32 12890, i32 9312, i32 9313, i32 9314, i32 9315, i32 9316, i32 9317, i32 9318, i32 9319, i32 9320, i32 9321, i32 9322, i32 9323, i32 9324, i32 9325, i32 9326, i32 9327, i32 10102, i32 10103, i32 10104, i32 10105, i32 10106, i32 10107, i32 10108, i32 10109, i32 10110, i32 10111, i32 9451, i32 9452, i32 12891, i32 0] }>, align 16
@decoder_private_conv_table = dso_local unnamed_addr constant <{ <{ [84 x i32], [10 x i32] }>, <{ [49 x i32], [45 x i32] }>, [94 x i32], [94 x i32], [94 x i32] }> <{ <{ [84 x i32], [10 x i32] }> <{ [84 x i32] [i32 9932, i32 9933, i32 9934, i32 9935, i32 9936, i32 9937, i32 0, i32 9938, i32 9941, i32 9939, i32 9940, i32 0, i32 0, i32 0, i32 0, i32 127359, i32 127370, i32 0, i32 0, i32 9942, i32 9943, i32 9944, i32 9945, i32 9946, i32 9947, i32 9948, i32 9949, i32 9950, i32 9951, i32 9952, i32 9953, i32 9954, i32 12872, i32 12873, i32 12874, i32 12875, i32 12876, i32 12877, i32 12878, i32 12879, i32 0, i32 0, i32 0, i32 0, i32 9361, i32 9362, i32 9363, i32 127306, i32 127308, i32 127295, i32 127302, i32 127307, i32 127504, i32 127505, i32 127506, i32 127507, i32 127298, i32 127508, i32 127509, i32 127510, i32 127309, i32 127281, i32 127293, i32 11035, i32 11044, i32 127511, i32 127512, i32 127513, i32 127514, i32 127515, i32 9919, i32 127516, i32 127517, i32 127518, i32 127519, i32 127520, i32 127521, i32 127522, i32 127523, i32 127524, i32 127525, i32 127310, i32 12953, i32 127488], [10 x i32] zeroinitializer }>, <{ [49 x i32], [45 x i32] }> <{ [49 x i32] [i32 9955, i32 9956, i32 9957, i32 9958, i32 9959, i32 9747, i32 12939, i32 12306, i32 9960, i32 12870, i32 12869, i32 9961, i32 4054, i32 9962, i32 9963, i32 9964, i32 9832, i32 9965, i32 9966, i32 9967, i32 9875, i32 9992, i32 9968, i32 9969, i32 9970, i32 9971, i32 0, i32 9973, i32 127319, i32 9401, i32 9416, i32 9974, i32 127327, i32 127371, i32 127373, i32 127372, i32 127353, i32 9975, i32 9976, i32 9977, i32 9978, i32 127355, i32 9742, i32 9979, i32 9980, i32 9981, i32 9982, i32 127356, i32 9983], [45 x i32] zeroinitializer }>, [94 x i32] [i32 10145, i32 11013, i32 11014, i32 11015, i32 11055, i32 11054, i32 24180, i32 26376, i32 26085, i32 20870, i32 13217, i32 13221, i32 13213, i32 13216, i32 13220, i32 127232, i32 9352, i32 9353, i32 9354, i32 9355, i32 9356, i32 9357, i32 9358, i32 9359, i32 9360, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 127233, i32 127234, i32 127235, i32 127236, i32 127237, i32 127238, i32 127239, i32 127240, i32 127241, i32 127242, i32 12851, i32 12854, i32 12850, i32 12849, i32 12857, i32 12868, i32 9654, i32 9664, i32 12310, i32 12311, i32 10192, i32 178, i32 179, i32 127277, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 127276, i32 127275, i32 12871, i32 127311, i32 127529, i32 8507, i32 0, i32 0, i32 0], [94 x i32] [i32 12842, i32 12843, i32 12844, i32 12845, i32 12846, i32 12847, i32 12848, i32 12855, i32 13182, i32 13181, i32 13180, i32 13179, i32 8470, i32 8481, i32 12342, i32 9918, i32 127558, i32 127552, i32 127553, i32 127555, i32 127559, i32 127556, i32 127560, i32 127554, i32 127557, i32 127274, i32 127523, i32 127525, i32 127504, i32 127507, i32 127505, i32 127536, i32 127519, i32 127506, i32 127513, i32 127524, i32 127535, i32 127522, i32 8467, i32 13199, i32 13200, i32 13258, i32 13214, i32 13218, i32 13169, i32 0, i32 0, i32 189, i32 8585, i32 8531, i32 8532, i32 188, i32 190, i32 8533, i32 8534, i32 8535, i32 8536, i32 8537, i32 8538, i32 8528, i32 0, i32 8529, i32 8530, i32 9728, i32 9729, i32 9730, i32 9924, i32 9750, i32 9751, i32 9929, i32 9930, i32 9830, i32 9829, i32 9827, i32 9824, i32 9931, i32 10752, i32 8252, i32 8265, i32 9925, i32 9748, i32 9926, i32 9731, i32 9927, i32 9889, i32 9928, i32 0, i32 9886, i32 9887, i32 9836, i32 9742, i32 0, i32 0, i32 0], [94 x i32] [i32 8544, i32 8545, i32 8546, i32 8547, i32 8548, i32 8549, i32 8550, i32 8551, i32 8552, i32 8553, i32 8554, i32 8555, i32 9328, i32 9329, i32 9330, i32 9331, i32 9332, i32 9333, i32 9334, i32 9335, i32 9336, i32 9337, i32 9338, i32 9339, i32 9340, i32 9341, i32 9342, i32 9343, i32 12881, i32 12882, i32 12883, i32 12884, i32 127248, i32 127249, i32 127250, i32 127251, i32 127252, i32 127253, i32 127254, i32 127255, i32 127256, i32 127257, i32 127258, i32 127259, i32 127260, i32 127261, i32 127262, i32 127263, i32 127264, i32 127265, i32 127266, i32 127267, i32 127268, i32 127269, i32 127270, i32 127271, i32 127272, i32 127273, i32 12885, i32 12886, i32 12887, i32 12888, i32 12889, i32 12890, i32 9312, i32 9313, i32 9314, i32 9315, i32 9316, i32 9317, i32 9318, i32 9319, i32 9320, i32 9321, i32 9322, i32 9323, i32 9324, i32 9325, i32 9326, i32 9327, i32 10102, i32 10103, i32 10104, i32 10105, i32 10106, i32 10107, i32 10108, i32 10109, i32 10110, i32 10111, i32 9451, i32 9452, i32 12891, i32 0] }>, align 16
@decoder_alnum_table = dso_local unnamed_addr constant [94 x i32] [i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 165, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 8254], align 16
@decoder_hiragana_table = dso_local unnamed_addr constant [94 x i32] [i32 12353, i32 12354, i32 12355, i32 12356, i32 12357, i32 12358, i32 12359, i32 12360, i32 12361, i32 12362, i32 12363, i32 12364, i32 12365, i32 12366, i32 12367, i32 12368, i32 12369, i32 12370, i32 12371, i32 12372, i32 12373, i32 12374, i32 12375, i32 12376, i32 12377, i32 12378, i32 12379, i32 12380, i32 12381, i32 12382, i32 12383, i32 12384, i32 12385, i32 12386, i32 12387, i32 12388, i32 12389, i32 12390, i32 12391, i32 12392, i32 12393, i32 12394, i32 12395, i32 12396, i32 12397, i32 12398, i32 12399, i32 12400, i32 12401, i32 12402, i32 12403, i32 12404, i32 12405, i32 12406, i32 12407, i32 12408, i32 12409, i32 12410, i32 12411, i32 12412, i32 12413, i32 12414, i32 12415, i32 12416, i32 12417, i32 12418, i32 12419, i32 12420, i32 12421, i32 12422, i32 12423, i32 12424, i32 12425, i32 12426, i32 12427, i32 12428, i32 12429, i32 12430, i32 12431, i32 12432, i32 12433, i32 12434, i32 12435, i32 12288, i32 12288, i32 12288, i32 12445, i32 12446, i32 12540, i32 12290, i32 12300, i32 12301, i32 12289, i32 12539], align 16
@decoder_katakana_table = dso_local unnamed_addr constant [94 x i32] [i32 12449, i32 12450, i32 12451, i32 12452, i32 12453, i32 12454, i32 12455, i32 12456, i32 12457, i32 12458, i32 12459, i32 12460, i32 12461, i32 12462, i32 12463, i32 12464, i32 12465, i32 12466, i32 12467, i32 12468, i32 12469, i32 12470, i32 12471, i32 12472, i32 12473, i32 12474, i32 12475, i32 12476, i32 12477, i32 12478, i32 12479, i32 12480, i32 12481, i32 12482, i32 12483, i32 12484, i32 12485, i32 12486, i32 12487, i32 12488, i32 12489, i32 12490, i32 12491, i32 12492, i32 12493, i32 12494, i32 12495, i32 12496, i32 12497, i32 12498, i32 12499, i32 12500, i32 12501, i32 12502, i32 12503, i32 12504, i32 12505, i32 12506, i32 12507, i32 12508, i32 12509, i32 12510, i32 12511, i32 12512, i32 12513, i32 12514, i32 12515, i32 12516, i32 12517, i32 12518, i32 12519, i32 12520, i32 12521, i32 12522, i32 12523, i32 12524, i32 12525, i32 12526, i32 12527, i32 12528, i32 12529, i32 12530, i32 12531, i32 12532, i32 12533, i32 12534, i32 12541, i32 12542, i32 12540, i32 12290, i32 12300, i32 12301, i32 12289, i32 12539], align 16
@decoder_default_macro_0 = dso_local constant [16 x i8] c"\1B$9\1B)J\1B*0\1B+ p\0F\1B}", align 16
@decoder_default_macro_1 = dso_local constant [16 x i8] c"\1B$9\1B)1\1B*0\1B+ p\0F\1B}", align 16
@decoder_default_macro_2 = dso_local constant [17 x i8] c"\1B$9\1B) @\1B*0\1B+ p\0F\1B}", align 16
@decoder_default_macro_3 = dso_local constant [16 x i8] c"\1B(2\1B)4\1B*5\1B+ p\0F\1B}", align 16
@decoder_default_macro_4 = dso_local constant [16 x i8] c"\1B(2\1B)3\1B*5\1B+ p\0F\1B}", align 16
@decoder_default_macro_5 = dso_local constant [17 x i8] c"\1B(2\1B) @\1B*5\1B+ p\0F\1B}", align 16
@decoder_default_macro_6 = dso_local constant [19 x i8] c"\1B( A\1B) B\1B* C\1B+ p\0F\1B}", align 16
@decoder_default_macro_7 = dso_local constant [19 x i8] c"\1B( D\1B) E\1B* F\1B+ p\0F\1B}", align 16
@decoder_default_macro_8 = dso_local constant [19 x i8] c"\1B( G\1B) H\1B* I\1B+ p\0F\1B}", align 16
@decoder_default_macro_9 = dso_local constant [19 x i8] c"\1B( J\1B) K\1B* L\1B+ p\0F\1B}", align 16
@decoder_default_macro_a = dso_local constant [19 x i8] c"\1B( M\1B) N\1B* O\1B+ p\0F\1B}", align 16
@decoder_default_macro_b = dso_local constant [17 x i8] c"\1B$9\1B) B\1B*0\1B+ p\0F\1B}", align 16
@decoder_default_macro_c = dso_local constant [17 x i8] c"\1B$9\1B) C\1B*0\1B+ p\0F\1B}", align 16
@decoder_default_macro_d = dso_local constant [17 x i8] c"\1B$9\1B) D\1B*0\1B+ p\0F\1B}", align 16
@decoder_default_macro_e = dso_local constant [16 x i8] c"\1B(1\1B)0\1B*J\1B+ p\0F\1B}", align 16
@decoder_default_macro_f = dso_local constant [17 x i8] c"\1B(J\1B)2\1B* A\1B+ p\0F\1B}", align 16
@.str.4 = dso_local unnamed_addr constant [30 x i8] c"could not decode ARIB string:\00", align 1
@.str.5 = dso_local unnamed_addr constant [6 x i8] c"%02x \00", align 1
@.str.6 = dso_local unnamed_addr constant [8 x i8] c"<- here\00", align 1
@switch.table.decoder_handle_default_macro = dso_local unnamed_addr constant [16 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @decoder_default_macro_0, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @decoder_default_macro_1, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @decoder_default_macro_2, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @decoder_default_macro_3, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @decoder_default_macro_4, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @decoder_default_macro_5, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @decoder_default_macro_6, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @decoder_default_macro_7, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @decoder_default_macro_8, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @decoder_default_macro_9, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @decoder_default_macro_a, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @decoder_default_macro_b, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @decoder_default_macro_c, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @decoder_default_macro_d, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @decoder_default_macro_e, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @decoder_default_macro_f, i64 0, i64 0)], align 8
@switch.table.decoder_handle_default_macro.7 = dso_local unnamed_addr constant [16 x i64] [i64 16, i64 16, i64 17, i64 16, i64 16, i64 17, i64 19, i64 19, i64 19, i64 19, i64 19, i64 17, i64 17, i64 17, i64 16, i64 17], align 8
@switch.table.decoder_handle_c1 = dso_local unnamed_addr constant [6 x i32] [i32 1, i32 0, i32 0, i32 0, i32 1, i32 1], align 4
@.str.7 = dso_local unnamed_addr constant [24 x i8] c"arib parser was created\00", align 1
@.str.1.8 = dso_local unnamed_addr constant [37 x i8] c"could not load drcs conversion table\00", align 1
@.str.2 = dso_local unnamed_addr constant [26 x i8] c"arib parser was destroyed\00", align 1
@bs_read.i_mask = dso_local unnamed_addr constant [33 x i32] [i32 0, i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255, i32 511, i32 1023, i32 2047, i32 4095, i32 8191, i32 16383, i32 32767, i32 65535, i32 131071, i32 262143, i32 524287, i32 1048575, i32 2097151, i32 4194303, i32 8388607, i32 16777215, i32 33554431, i32 67108863, i32 134217727, i32 268435455, i32 536870911, i32 1073741823, i32 2147483647, i32 -1], align 16
@.str.15 = dso_local unnamed_addr constant [17 x i8] c"%s/drcs_conv.ini\00", align 1
@.str.1.16 = dso_local unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2.17 = dso_local unnamed_addr constant [3 x i8] c"U+\00", align 1
@.str.3 = dso_local unnamed_addr constant [5 x i8] c"%02x\00", align 1
@.str.4.23 = dso_local unnamed_addr constant [7 x i8] c"1.6.40\00", align 1
@.str.5.20 = dso_local unnamed_addr constant [10 x i8] c"%s/%s.png\00", align 1
@.str.6.21 = dso_local unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.7.22 = dso_local unnamed_addr constant [30 x i8] c"Failed creating image file %s\00", align 1
@.str.8 = dso_local unnamed_addr constant [8 x i8] c"%s/data\00", align 1
@bs_read.i_mask.24 = dso_local unnamed_addr constant [33 x i32] [i32 0, i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255, i32 511, i32 1023, i32 2047, i32 4095, i32 8191, i32 16383, i32 32767, i32 65535, i32 131071, i32 262143, i32 524287, i32 1048575, i32 2097151, i32 4194303, i32 8388607, i32 16777215, i32 33554431, i32 67108863, i32 134217727, i32 268435455, i32 536870911, i32 1073741823, i32 2147483647, i32 -1], align 16
@png_sRGB_table = constant [256 x i16] [i16 0, i16 20, i16 40, i16 60, i16 80, i16 99, i16 119, i16 139, i16 159, i16 179, i16 199, i16 219, i16 241, i16 264, i16 288, i16 313, i16 340, i16 367, i16 396, i16 427, i16 458, i16 491, i16 526, i16 562, i16 599, i16 637, i16 677, i16 718, i16 761, i16 805, i16 851, i16 898, i16 947, i16 997, i16 1048, i16 1101, i16 1156, i16 1212, i16 1270, i16 1330, i16 1391, i16 1453, i16 1517, i16 1583, i16 1651, i16 1720, i16 1790, i16 1863, i16 1937, i16 2013, i16 2090, i16 2170, i16 2250, i16 2333, i16 2418, i16 2504, i16 2592, i16 2681, i16 2773, i16 2866, i16 2961, i16 3058, i16 3157, i16 3258, i16 3360, i16 3464, i16 3570, i16 3678, i16 3788, i16 3900, i16 4014, i16 4129, i16 4247, i16 4366, i16 4488, i16 4611, i16 4736, i16 4864, i16 4993, i16 5124, i16 5257, i16 5392, i16 5530, i16 5669, i16 5810, i16 5953, i16 6099, i16 6246, i16 6395, i16 6547, i16 6700, i16 6856, i16 7014, i16 7174, i16 7335, i16 7500, i16 7666, i16 7834, i16 8004, i16 8177, i16 8352, i16 8528, i16 8708, i16 8889, i16 9072, i16 9258, i16 9445, i16 9635, i16 9828, i16 10022, i16 10219, i16 10417, i16 10619, i16 10822, i16 11028, i16 11235, i16 11446, i16 11658, i16 11873, i16 12090, i16 12309, i16 12530, i16 12754, i16 12980, i16 13209, i16 13440, i16 13673, i16 13909, i16 14146, i16 14387, i16 14629, i16 14874, i16 15122, i16 15371, i16 15623, i16 15878, i16 16135, i16 16394, i16 16656, i16 16920, i16 17187, i16 17456, i16 17727, i16 18001, i16 18277, i16 18556, i16 18837, i16 19121, i16 19407, i16 19696, i16 19987, i16 20281, i16 20577, i16 20876, i16 21177, i16 21481, i16 21787, i16 22096, i16 22407, i16 22721, i16 23038, i16 23357, i16 23678, i16 24002, i16 24329, i16 24658, i16 24990, i16 25325, i16 25662, i16 26001, i16 26344, i16 26688, i16 27036, i16 27386, i16 27739, i16 28094, i16 28452, i16 28813, i16 29176, i16 29542, i16 29911, i16 30282, i16 30656, i16 31033, i16 31412, i16 31794, i16 32179, i16 32567, i16 -32579, i16 -32186, i16 -31791, i16 -31393, i16 -30992, i16 -30588, i16 -30181, i16 -29772, i16 -29360, i16 -28945, i16 -28528, i16 -28107, i16 -27684, i16 -27258, i16 -26830, i16 -26398, i16 -25964, i16 -25527, i16 -25087, i16 -24645, i16 -24199, i16 -23751, i16 -23300, i16 -22846, i16 -22389, i16 -21930, i16 -21467, i16 -21002, i16 -20534, i16 -20063, i16 -19589, i16 -19113, i16 -18633, i16 -18151, i16 -17665, i16 -17177, i16 -16686, i16 -16192, i16 -15695, i16 -15195, i16 -14692, i16 -14187, i16 -13678, i16 -13167, i16 -12652, i16 -12135, i16 -11615, i16 -11091, i16 -10565, i16 -10036, i16 -9504, i16 -8969, i16 -8431, i16 -7890, i16 -7346, i16 -6799, i16 -6249, i16 -5696, i16 -5140, i16 -4581, i16 -4019, i16 -3454, i16 -2886, i16 -2315, i16 -1741, i16 -1164, i16 -584, i16 -1], align 16
@png_sRGB_base = constant [512 x i16] [i16 128, i16 1782, i16 3383, i16 4644, i16 5675, i16 6564, i16 7357, i16 8074, i16 8732, i16 9346, i16 9921, i16 10463, i16 10977, i16 11466, i16 11935, i16 12384, i16 12816, i16 13233, i16 13634, i16 14024, i16 14402, i16 14769, i16 15125, i16 15473, i16 15812, i16 16142, i16 16466, i16 16781, i16 17090, i16 17393, i16 17690, i16 17981, i16 18266, i16 18546, i16 18822, i16 19093, i16 19359, i16 19621, i16 19879, i16 20133, i16 20383, i16 20630, i16 20873, i16 21113, i16 21349, i16 21583, i16 21813, i16 22041, i16 22265, i16 22487, i16 22707, i16 22923, i16 23138, i16 23350, i16 23559, i16 23767, i16 23972, i16 24175, i16 24376, i16 24575, i16 24772, i16 24967, i16 25160, i16 25352, i16 25542, i16 25730, i16 25916, i16 26101, i16 26284, i16 26465, i16 26645, i16 26823, i16 27000, i16 27176, i16 27350, i16 27523, i16 27695, i16 27865, i16 28034, i16 28201, i16 28368, i16 28533, i16 28697, i16 28860, i16 29021, i16 29182, i16 29341, i16 29500, i16 29657, i16 29813, i16 29969, i16 30123, i16 30276, i16 30429, i16 30580, i16 30730, i16 30880, i16 31028, i16 31176, i16 31323, i16 31469, i16 31614, i16 31758, i16 31902, i16 32045, i16 32186, i16 32327, i16 32468, i16 32607, i16 32746, i16 -32652, i16 -32515, i16 -32378, i16 -32242, i16 -32107, i16 -31972, i16 -31839, i16 -31705, i16 -31573, i16 -31441, i16 -31310, i16 -31179, i16 -31050, i16 -30920, i16 -30792, i16 -30663, i16 -30536, i16 -30409, i16 -30283, i16 -30157, i16 -30032, i16 -29907, i16 -29783, i16 -29660, i16 -29537, i16 -29414, i16 -29292, i16 -29171, i16 -29050, i16 -28930, i16 -28810, i16 -28691, i16 -28572, i16 -28453, i16 -28335, i16 -28218, i16 -28101, i16 -27985, i16 -27868, i16 -27753, i16 -27638, i16 -27523, i16 -27409, i16 -27295, i16 -27182, i16 -27069, i16 -26956, i16 -26844, i16 -26733, i16 -26621, i16 -26510, i16 -26400, i16 -26290, i16 -26180, i16 -26071, i16 -25962, i16 -25854, i16 -25746, i16 -25638, i16 -25531, i16 -25424, i16 -25317, i16 -25211, i16 -25105, i16 -24999, i16 -24894, i16 -24789, i16 -24685, i16 -24581, i16 -24477, i16 -24373, i16 -24270, i16 -24167, i16 -24065, i16 -23963, i16 -23861, i16 -23759, i16 -23658, i16 -23557, i16 -23457, i16 -23357, i16 -23257, i16 -23157, i16 -23058, i16 -22959, i16 -22860, i16 -22761, i16 -22663, i16 -22565, i16 -22468, i16 -22371, i16 -22274, i16 -22177, i16 -22080, i16 -21984, i16 -21888, i16 -21793, i16 -21697, i16 -21602, i16 -21508, i16 -21413, i16 -21319, i16 -21225, i16 -21131, i16 -21037, i16 -20944, i16 -20851, i16 -20758, i16 -20666, i16 -20574, i16 -20482, i16 -20390, i16 -20298, i16 -20207, i16 -20116, i16 -20025, i16 -19935, i16 -19844, i16 -19754, i16 -19664, i16 -19575, i16 -19485, i16 -19396, i16 -19307, i16 -19218, i16 -19130, i16 -19042, i16 -18953, i16 -18866, i16 -18778, i16 -18690, i16 -18603, i16 -18516, i16 -18429, i16 -18343, i16 -18256, i16 -18170, i16 -18084, i16 -17998, i16 -17913, i16 -17827, i16 -17742, i16 -17657, i16 -17572, i16 -17488, i16 -17403, i16 -17319, i16 -17235, i16 -17151, i16 -17068, i16 -16984, i16 -16901, i16 -16818, i16 -16735, i16 -16652, i16 -16570, i16 -16488, i16 -16405, i16 -16323, i16 -16242, i16 -16160, i16 -16078, i16 -15997, i16 -15916, i16 -15835, i16 -15754, i16 -15674, i16 -15593, i16 -15513, i16 -15433, i16 -15353, i16 -15273, i16 -15194, i16 -15114, i16 -15035, i16 -14956, i16 -14877, i16 -14798, i16 -14720, i16 -14641, i16 -14563, i16 -14485, i16 -14407, i16 -14329, i16 -14251, i16 -14174, i16 -14097, i16 -14019, i16 -13942, i16 -13865, i16 -13789, i16 -13712, i16 -13636, i16 -13559, i16 -13483, i16 -13407, i16 -13331, i16 -13256, i16 -13180, i16 -13104, i16 -13029, i16 -12954, i16 -12879, i16 -12804, i16 -12729, i16 -12655, i16 -12580, i16 -12506, i16 -12432, i16 -12358, i16 -12284, i16 -12210, i16 -12136, i16 -12063, i16 -11990, i16 -11916, i16 -11843, i16 -11770, i16 -11697, i16 -11625, i16 -11552, i16 -11480, i16 -11407, i16 -11335, i16 -11263, i16 -11191, i16 -11119, i16 -11047, i16 -10976, i16 -10904, i16 -10833, i16 -10762, i16 -10691, i16 -10620, i16 -10549, i16 -10478, i16 -10407, i16 -10337, i16 -10267, i16 -10196, i16 -10126, i16 -10056, i16 -9986, i16 -9916, i16 -9847, i16 -9777, i16 -9708, i16 -9638, i16 -9569, i16 -9500, i16 -9431, i16 -9362, i16 -9293, i16 -9225, i16 -9156, i16 -9088, i16 -9019, i16 -8951, i16 -8883, i16 -8815, i16 -8747, i16 -8679, i16 -8612, i16 -8544, i16 -8477, i16 -8409, i16 -8342, i16 -8275, i16 -8208, i16 -8141, i16 -8074, i16 -8007, i16 -7941, i16 -7874, i16 -7808, i16 -7741, i16 -7675, i16 -7609, i16 -7543, i16 -7477, i16 -7411, i16 -7345, i16 -7280, i16 -7214, i16 -7149, i16 -7083, i16 -7018, i16 -6953, i16 -6888, i16 -6823, i16 -6758, i16 -6693, i16 -6628, i16 -6564, i16 -6499, i16 -6435, i16 -6371, i16 -6306, i16 -6242, i16 -6178, i16 -6114, i16 -6050, i16 -5987, i16 -5923, i16 -5859, i16 -5796, i16 -5732, i16 -5669, i16 -5606, i16 -5543, i16 -5480, i16 -5417, i16 -5354, i16 -5291, i16 -5228, i16 -5166, i16 -5103, i16 -5041, i16 -4978, i16 -4916, i16 -4854, i16 -4792, i16 -4730, i16 -4668, i16 -4606, i16 -4544, i16 -4482, i16 -4421, i16 -4359, i16 -4298, i16 -4236, i16 -4175, i16 -4114, i16 -4053, i16 -3992, i16 -3931, i16 -3870, i16 -3809, i16 -3748, i16 -3688, i16 -3627, i16 -3567, i16 -3506, i16 -3446, i16 -3386, i16 -3325, i16 -3265, i16 -3205, i16 -3145, i16 -3086, i16 -3026, i16 -2966, i16 -2906, i16 -2847, i16 -2787, i16 -2728, i16 -2669, i16 -2609, i16 -2550, i16 -2491, i16 -2432, i16 -2373, i16 -2314, i16 -2255, i16 -2196, i16 -2138, i16 -2079, i16 -2021, i16 -1962, i16 -1904, i16 -1845, i16 -1787, i16 -1729, i16 -1671, i16 -1613, i16 -1555, i16 -1497, i16 -1439, i16 -1381, i16 -1324, i16 -1266, i16 -1208, i16 -1151, i16 -1093, i16 -1036, i16 -979, i16 -922, i16 -864, i16 -807, i16 -750, i16 -693, i16 -636, i16 -580, i16 -523, i16 -466, i16 -410, i16 -353, i16 -297, i16 -240, i16 -184, i16 -127, i16 -71], align 16
@png_sRGB_delta = constant [512 x i8] c"\CF\C9\9E\81qdalign 16
@.str.9 = private unnamed_addr constant [33 x i8] c"Too many bytes for PNG signature\00", align 1
@png_sig_cmp.png_signature = private unnamed_addr constant [8 x i8] c"\89PNG\0D\0A\1A\0A", align 1
@.str.1.10 = private unnamed_addr constant [35 x i8] c"Potential overflow in png_zalloc()\00", align 1
@.str.2.13 = private unnamed_addr constant [11 x i8] c"1.6.38.git\00", align 1
@.str.3.14 = private unnamed_addr constant [31 x i8] c"Application built with libpng-\00", align 1
@.str.4.15 = private unnamed_addr constant [19 x i8] c" but running with \00", align 1
@.str.5.18 = private unnamed_addr constant [42 x i8] c"Unknown freer parameter in png_data_freer\00", align 1
@png_convert_to_rfc1123_buffer.short_months = internal constant [12 x [4 x i8]] [[4 x i8] c"Jan\00", [4 x i8] c"Feb\00", [4 x i8] c"Mar\00", [4 x i8] c"Apr\00", [4 x i8] c"May\00", [4 x i8] c"Jun\00", [4 x i8] c"Jul\00", [4 x i8] c"Aug\00", [4 x i8] c"Sep\00", [4 x i8] c"Oct\00", [4 x i8] c"Nov\00", [4 x i8] c"Dec\00"], align 16
@.str.6.22 = private unnamed_addr constant [7 x i8] c" +0000\00", align 1
@.str.7.23 = private unnamed_addr constant [28 x i8] c"Ignoring invalid time value\00", align 1
@.str.8.24 = private unnamed_addr constant [223 x i8] c"\0Alibpng version 1.6.38.git\0ACopyright (c) 2018-2020 Cosmin Truta\0ACopyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson\0ACopyright (c) 1996-1997 Andreas Dilger\0ACopyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.\0A\00", align 1
@.str.9.25 = private unnamed_addr constant [29 x i8] c" libpng version 1.6.38.git\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [28 x i8] c"unexpected zlib return code\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"unexpected end of LZ stream\00", align 1
@.str.12 = private unnamed_addr constant [22 x i8] c"missing LZ dictionary\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"zlib IO error\00", align 1
@.str.14 = private unnamed_addr constant [23 x i8] c"bad parameters to zlib\00", align 1
@.str.15.26 = private unnamed_addr constant [18 x i8] c"damaged LZ stream\00", align 1
@.str.16 = private unnamed_addr constant [20 x i8] c"insufficient memory\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"truncated\00", align 1
@.str.18 = private unnamed_addr constant [25 x i8] c"unsupported zlib version\00", align 1
@.str.19 = private unnamed_addr constant [23 x i8] c"unexpected zlib return\00", align 1
@.str.20 = private unnamed_addr constant [25 x i8] c"gamma value out of range\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"duplicate\00", align 1
@.str.68 = private unnamed_addr constant [32 x i8] c"gamma value does not match sRGB\00", align 1
@.str.69 = private unnamed_addr constant [43 x i8] c"gamma value does not match libpng estimate\00", align 1
@.str.22 = private unnamed_addr constant [23 x i8] c"invalid chromaticities\00", align 1
@.str.23 = private unnamed_addr constant [39 x i8] c"internal error checking chromaticities\00", align 1
@.str.70 = private unnamed_addr constant [28 x i8] c"inconsistent chromaticities\00", align 1
@sRGB_xy = internal constant %struct.png_xy { i32 64000, i32 33000, i32 30000, i32 60000, i32 15000, i32 6000, i32 31270, i32 32900 }, align 4
@.str.24 = private unnamed_addr constant [19 x i8] c"invalid end points\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"sRGB\00", align 1
@.str.26 = private unnamed_addr constant [30 x i8] c"invalid sRGB rendering intent\00", align 1
@.str.27 = private unnamed_addr constant [31 x i8] c"inconsistent rendering intents\00", align 1
@.str.28 = private unnamed_addr constant [35 x i8] c"duplicate sRGB information ignored\00", align 1
@.str.29 = private unnamed_addr constant [31 x i8] c"cHRM chunk does not match sRGB\00", align 1
@png_colorspace_set_sRGB.sRGB_XYZ = internal constant %struct.png_XYZ { i32 41239, i32 21264, i32 1933, i32 35758, i32 71517, i32 11919, i32 18048, i32 7219, i32 95053 }, align 4
@.str.71 = private unnamed_addr constant [10 x i8] c"profile '\00", align 1
@.str.72 = private unnamed_addr constant [4 x i8] c"': \00", align 1
@.str.73 = private unnamed_addr constant [4 x i8] c"h: \00", align 1
@.str.30 = private unnamed_addr constant [27 x i8] c"exceeds application limits\00", align 1
@.str.74 = private unnamed_addr constant [10 x i8] c"too short\00", align 1
@.str.31 = private unnamed_addr constant [30 x i8] c"length does not match profile\00", align 1
@.str.32 = private unnamed_addr constant [15 x i8] c"invalid length\00", align 1
@.str.33 = private unnamed_addr constant [20 x i8] c"tag count too large\00", align 1
@.str.34 = private unnamed_addr constant [25 x i8] c"invalid rendering intent\00", align 1
@.str.35 = private unnamed_addr constant [29 x i8] c"intent outside defined range\00", align 1
@.str.36 = private unnamed_addr constant [18 x i8] c"invalid signature\00", align 1
@D50_nCIEXYZ = internal constant [12 x i8] c"\00\00\F6\D6\00\01\00\00\00\00\D3-", align 1
@.str.37 = private unnamed_addr constant [26 x i8] c"PCS illuminant is not D50\00", align 1
@.str.38 = private unnamed_addr constant [47 x i8] c"RGB color space not permitted on grayscale PNG\00", align 1
@.str.39 = private unnamed_addr constant [42 x i8] c"Gray color space not permitted on RGB PNG\00", align 1
@.str.40 = private unnamed_addr constant [32 x i8] c"invalid ICC profile color space\00", align 1
@.str.41 = private unnamed_addr constant [38 x i8] c"invalid embedded Abstract ICC profile\00", align 1
@.str.42 = private unnamed_addr constant [40 x i8] c"unexpected DeviceLink ICC profile class\00", align 1
@.str.43 = private unnamed_addr constant [40 x i8] c"unexpected NamedColor ICC profile class\00", align 1
@.str.44 = private unnamed_addr constant [31 x i8] c"unrecognized ICC profile class\00", align 1
@.str.45 = private unnamed_addr constant [28 x i8] c"unexpected ICC PCS encoding\00", align 1
@.str.46 = private unnamed_addr constant [32 x i8] c"ICC profile tag outside profile\00", align 1
@.str.47 = private unnamed_addr constant [42 x i8] c"ICC profile tag start not a multiple of 4\00", align 1
@png_sRGB_checks = internal constant [7 x %struct.anon] [%struct.anon { i32 171956726, i32 998732473, i32 3048, [4 x i32] [i32 704134622, i32 -1343072850, i32 2017655524, i32 -897369843], i8 1, i8 0, i16 0 }, %struct.anon { i32 1225385441, i32 1115601697, i32 3052, [4 x i32] [i32 -916728265, i32 -379745733, i32 234065817, i32 -1053686903], i8 1, i8 0, i16 1 }, %struct.anon { i32 -48151391, i32 812636334, i32 60988, [4 x i32] [i32 -60411016, i32 937592939, i32 -42800765, i32 -2111245896], i8 1, i8 0, i16 0 }, %struct.anon { i32 547108306, i32 -1141934062, i32 60960, [4 x i32] [i32 878062271, i32 -1723020026, i32 1831622433, i32 -791245731], i8 1, i8 0, i16 0 }, %struct.anon { i32 -1605052574, i32 1565600206, i32 3024, [4 x i32] zeroinitializer, i8 0, i8 0, i16 1 }, %struct.anon { i32 -142281733, i32 405710162, i32 3144, [4 x i32] zeroinitializer, i8 0, i8 1, i16 0 }, %struct.anon { i32 60355580, i32 -224505235, i32 3144, [4 x i32] zeroinitializer, i8 0, i8 1, i16 1 }], align 16
@.str.75 = private unnamed_addr constant [29 x i8] c"known incorrect sRGB profile\00", align 1
@.str.76 = private unnamed_addr constant [43 x i8] c"out-of-date sRGB profile with no signature\00", align 1
@.str.77 = private unnamed_addr constant [56 x i8] c"Not recognizing known sRGB profile that has been edited\00", align 1
@.str.48 = private unnamed_addr constant [42 x i8] c"internal error handling cHRM coefficients\00", align 1
@.str.49 = private unnamed_addr constant [34 x i8] c"internal error handling cHRM->XYZ\00", align 1
@.str.50 = private unnamed_addr constant [28 x i8] c"Image width is zero in IHDR\00", align 1
@.str.51 = private unnamed_addr constant [28 x i8] c"Invalid image width in IHDR\00", align 1
@.str.52 = private unnamed_addr constant [39 x i8] c"Image width exceeds user limit in IHDR\00", align 1
@.str.53 = private unnamed_addr constant [29 x i8] c"Image height is zero in IHDR\00", align 1
@.str.54 = private unnamed_addr constant [29 x i8] c"Invalid image height in IHDR\00", align 1
@.str.55 = private unnamed_addr constant [40 x i8] c"Image height exceeds user limit in IHDR\00", align 1
@.str.56 = private unnamed_addr constant [26 x i8] c"Invalid bit depth in IHDR\00", align 1
@.str.57 = private unnamed_addr constant [27 x i8] c"Invalid color type in IHDR\00", align 1
@.str.58 = private unnamed_addr constant [49 x i8] c"Invalid color type/bit depth combination in IHDR\00", align 1
@.str.59 = private unnamed_addr constant [33 x i8] c"Unknown interlace method in IHDR\00", align 1
@.str.60 = private unnamed_addr constant [35 x i8] c"Unknown compression method in IHDR\00", align 1
@.str.61 = private unnamed_addr constant [49 x i8] c"MNG features are not allowed in a PNG datastream\00", align 1
@.str.62 = private unnamed_addr constant [30 x i8] c"Unknown filter method in IHDR\00", align 1
@.str.63 = private unnamed_addr constant [30 x i8] c"Invalid filter method in IHDR\00", align 1
@.str.64 = private unnamed_addr constant [18 x i8] c"Invalid IHDR data\00", align 1
@.str.65 = private unnamed_addr constant [34 x i8] c"ASCII conversion buffer too small\00", align 1
@.str.66 = private unnamed_addr constant [29 x i8] c"fixed point overflow ignored\00", align 1
@.str.67 = private unnamed_addr constant [26 x i8] c"gamma table being rebuilt\00", align 1
@stderr = external global %struct._IO_FILE.1*, align 8
@.str.5.3 = private unnamed_addr constant [10 x i8] c"undefined\00", align 1
@.str.4.4 = private unnamed_addr constant [17 x i8] c"libpng error: %s\00", align 1
@.str.6.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@png_format_number.digits = internal constant [17 x i8] c"0123456789ABCDEF\00", align 16
@.str.7.12 = private unnamed_addr constant [19 x i8] c"libpng warning: %s\00", align 1
@png_formatted_warning.valid_parameters = internal constant [10 x i8] c"123456789\00", align 1
@png_digit = internal constant [16 x i8] c"0123456789ABCDEF", align 16
@.str.78 = private unnamed_addr constant [25 x i8] c"fixed point overflow in \00", align 1
@.str.1.79 = private unnamed_addr constant [31 x i8] c"Libpng jmp_buf still allocated\00", align 1
@.str.2.80 = private unnamed_addr constant [33 x i8] c"Application jmp_buf size changed\00", align 1
@.str.3.83 = private unnamed_addr constant [14 x i8] c"bad longjmp: \00", align 1
@.str.86 = private unnamed_addr constant [47 x i8] c"png_get_eXIf does not work; use png_get_eXIf_1\00", align 1
@.str.1.87 = private unnamed_addr constant [11 x i8] c"sCAL width\00", align 1
@.str.2.88 = private unnamed_addr constant [12 x i8] c"sCAL height\00", align 1
@.str.2.97 = private unnamed_addr constant [14 x i8] c"Out of memory\00", align 1
@.str.98 = private unnamed_addr constant [28 x i8] c"internal error: array alloc\00", align 1
@.str.1.99 = private unnamed_addr constant [30 x i8] c"internal error: array realloc\00", align 1
@.str.3.100 = private unnamed_addr constant [14 x i8] c"Out of Memory\00", align 1
@.str.10.105 = private unnamed_addr constant [27 x i8] c"Not enough compressed data\00", align 1
@.str.11.106 = private unnamed_addr constant [30 x i8] c"No IDAT data (internal error)\00", align 1
@.str.12.107 = private unnamed_addr constant [34 x i8] c"Truncated compressed data in IDAT\00", align 1
@.str.13.108 = private unnamed_addr constant [32 x i8] c"IDAT: ADLER32 checksum mismatch\00", align 1
@.str.14.109 = private unnamed_addr constant [28 x i8] c"Decompression error in IDAT\00", align 1
@.str.15.110 = private unnamed_addr constant [30 x i8] c"Extra compressed data in IDAT\00", align 1
@.str.16.111 = private unnamed_addr constant [31 x i8] c"Extra compression data in IDAT\00", align 1
@.str.17.112 = private unnamed_addr constant [26 x i8] c"bad adaptive filter value\00", align 1
@.str.18.113 = private unnamed_addr constant [25 x i8] c"progressive row overflow\00", align 1
@.str.19.114 = private unnamed_addr constant [48 x i8] c"internal progressive row size calculation error\00", align 1
@png_read_push_finish_row.png_pass_inc = internal constant [7 x i8] c"\08\08\04\04\02\02\01", align 1
@png_read_push_finish_row.png_pass_start = internal constant [7 x i8] c"\00\04\00\02\00\01\00", align 1
@png_read_push_finish_row.png_pass_yinc = internal constant [7 x i8] c"\08\08\08\04\04\02\02", align 1
@png_read_push_finish_row.png_pass_ystart = internal constant [7 x i8] c"\00\00\04\00\02\00\01", align 1
@.str.7.115 = private unnamed_addr constant [34 x i8] c"Potential overflow of save_buffer\00", align 1
@.str.8.116 = private unnamed_addr constant [36 x i8] c"Insufficient memory for save_buffer\00", align 1
@.str.9.117 = private unnamed_addr constant [18 x i8] c"save_buffer error\00", align 1
@.str.3.118 = private unnamed_addr constant [25 x i8] c"Missing IHDR before IDAT\00", align 1
@.str.4.119 = private unnamed_addr constant [25 x i8] c"Missing PLTE before IDAT\00", align 1
@.str.5.120 = private unnamed_addr constant [21 x i8] c"Too many IDATs found\00", align 1
@.str.6.121 = private unnamed_addr constant [20 x i8] c"Invalid IHDR length\00", align 1
@.str.1.122 = private unnamed_addr constant [15 x i8] c"Not a PNG file\00", align 1
@.str.2.123 = private unnamed_addr constant [39 x i8] c"PNG file corrupted by ASCII conversion\00", align 1
@.str.124 = private unnamed_addr constant [74 x i8] c"png_process_data_skip is not implemented in any current version of libpng\00", align 1
@.str.125 = private unnamed_addr constant [25 x i8] c"Missing IHDR before IDAT\00", align 1
@.str.1.126 = private unnamed_addr constant [25 x i8] c"Missing PLTE before IDAT\00", align 1
@.str.2.127 = private unnamed_addr constant [21 x i8] c"Too many IDATs found\00", align 1
@.str.3.128 = private unnamed_addr constant [58 x i8] c"png_read_update_info/png_start_read_image: duplicate call\00", align 1
@.str.4.129 = private unnamed_addr constant [58 x i8] c"png_start_read_image/png_read_update_info: duplicate call\00", align 1
@.str.5.130 = private unnamed_addr constant [33 x i8] c"Invalid attempt to read row data\00", align 1
@.str.6.131 = private unnamed_addr constant [26 x i8] c"bad adaptive filter value\00", align 1
@.str.7.132 = private unnamed_addr constant [24 x i8] c"sequential row overflow\00", align 1
@.str.8.133 = private unnamed_addr constant [47 x i8] c"internal sequential row size calculation error\00", align 1
@.str.9.134 = private unnamed_addr constant [65 x i8] c"Interlace handling should be turned on when using png_read_image\00", align 1
@.str.10.135 = private unnamed_addr constant [41 x i8] c"Read palette index exceeding num_palette\00", align 1
@.str.11.136 = private unnamed_addr constant [22 x i8] c".Too many IDATs found\00", align 1
@.str.12.137 = private unnamed_addr constant [23 x i8] c"..Too many IDATs found\00", align 1
@.str.13.140 = private unnamed_addr constant [49 x i8] c"Image is too high to process with png_read_png()\00", align 1
@.str.14.141 = private unnamed_addr constant [50 x i8] c"png_image_begin_read_from_stdio: invalid argument\00", align 1
@.str.15.142 = private unnamed_addr constant [61 x i8] c"png_image_begin_read_from_stdio: incorrect PNG_IMAGE_VERSION\00", align 1
@.str.26.143 = private unnamed_addr constant [11 x i8] c"1.6.38.git\00", align 1
@.str.27.144 = private unnamed_addr constant [30 x i8] c"png_image_read: out of memory\00", align 1
@.str.28.145 = private unnamed_addr constant [40 x i8] c"png_image_read: opaque pointer not NULL\00", align 1
@.str.16.146 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.17.147 = private unnamed_addr constant [49 x i8] c"png_image_begin_read_from_file: invalid argument\00", align 1
@.str.18.148 = private unnamed_addr constant [60 x i8] c"png_image_begin_read_from_file: incorrect PNG_IMAGE_VERSION\00", align 1
@.str.19.149 = private unnamed_addr constant [51 x i8] c"png_image_begin_read_from_memory: invalid argument\00", align 1
@.str.20.150 = private unnamed_addr constant [62 x i8] c"png_image_begin_read_from_memory: incorrect PNG_IMAGE_VERSION\00", align 1
@.str.29.151 = private unnamed_addr constant [24 x i8] c"read beyond end of data\00", align 1
@.str.30.152 = private unnamed_addr constant [20 x i8] c"invalid memory read\00", align 1
@.str.21.153 = private unnamed_addr constant [47 x i8] c"png_image_finish_read[color-map]: no color-map\00", align 1
@.str.22.154 = private unnamed_addr constant [39 x i8] c"png_image_finish_read: image too large\00", align 1
@.str.23.155 = private unnamed_addr constant [40 x i8] c"png_image_finish_read: invalid argument\00", align 1
@.str.24.156 = private unnamed_addr constant [44 x i8] c"png_image_finish_read: row_stride too large\00", align 1
@.str.25.157 = private unnamed_addr constant [49 x i8] c"png_image_finish_read: damaged PNG_IMAGE_VERSION\00", align 1
@.str.53.158 = private unnamed_addr constant [43 x i8] c"png_read_image: unsupported transformation\00", align 1
@.str.54.159 = private unnamed_addr constant [35 x i8] c"png_image_read: alpha channel lost\00", align 1
@.str.55.160 = private unnamed_addr constant [37 x i8] c"unexpected alpha swap transformation\00", align 1
@.str.56.161 = private unnamed_addr constant [40 x i8] c"png_read_image: invalid transformations\00", align 1
@.str.57.162 = private unnamed_addr constant [17 x i8] c"lost rgb to gray\00", align 1
@.str.58.163 = private unnamed_addr constant [19 x i8] c"unexpected compose\00", align 1
@.str.59.164 = private unnamed_addr constant [21 x i8] c"lost/gained channels\00", align 1
@.str.60.165 = private unnamed_addr constant [32 x i8] c"unexpected 8-bit transformation\00", align 1
@.str.52.166 = private unnamed_addr constant [23 x i8] c"unknown interlace type\00", align 1
@.str.61.167 = private unnamed_addr constant [21 x i8] c"unexpected bit depth\00", align 1
@png_image_skip_unused_chunks.chunks_to_process = internal constant [30 x i8] c"bKGD\00cHRM\00gAMA\00iCCP\00sBIT\00sRGB\00", align 16
@.str.51.168 = private unnamed_addr constant [42 x i8] c"bad color-map processing (internal error)\00", align 1
@.str.31.169 = private unnamed_addr constant [63 x i8] c"background color must be supplied to remove alpha/transparency\00", align 1
@.str.32.170 = private unnamed_addr constant [35 x i8] c"gray[8] color-map: too few entries\00", align 1
@.str.33.171 = private unnamed_addr constant [36 x i8] c"gray[16] color-map: too few entries\00", align 1
@.str.34.172 = private unnamed_addr constant [38 x i8] c"gray+alpha color-map: too few entries\00", align 1
@.str.35.173 = private unnamed_addr constant [38 x i8] c"gray-alpha color-map: too few entries\00", align 1
@.str.36.174 = private unnamed_addr constant [36 x i8] c"ga-alpha color-map: too few entries\00", align 1
@.str.37.175 = private unnamed_addr constant [35 x i8] c"rgb[ga] color-map: too few entries\00", align 1
@.str.38.176 = private unnamed_addr constant [37 x i8] c"rgb[gray] color-map: too few entries\00", align 1
@.str.39.177 = private unnamed_addr constant [37 x i8] c"rgb+alpha color-map: too few entries\00", align 1
@.str.40.178 = private unnamed_addr constant [37 x i8] c"rgb-alpha color-map: too few entries\00", align 1
@.str.41.179 = private unnamed_addr constant [31 x i8] c"rgb color-map: too few entries\00", align 1
@.str.42.180 = private unnamed_addr constant [35 x i8] c"palette color-map: too few entries\00", align 1
@.str.43.181 = private unnamed_addr constant [23 x i8] c"invalid PNG color type\00", align 1
@.str.44.182 = private unnamed_addr constant [33 x i8] c"bad data option (internal error)\00", align 1
@.str.45.183 = private unnamed_addr constant [40 x i8] c"color map overflow (BAD internal error)\00", align 1
@.str.46.184 = private unnamed_addr constant [39 x i8] c"bad processing option (internal error)\00", align 1
@.str.47.185 = private unnamed_addr constant [38 x i8] c"bad background index (internal error)\00", align 1
@.str.50.186 = private unnamed_addr constant [37 x i8] c"unexpected encoding (internal error)\00", align 1
@.str.48.187 = private unnamed_addr constant [29 x i8] c"color-map index out of range\00", align 1
@.str.49.188 = private unnamed_addr constant [30 x i8] c"bad encoding (internal error)\00", align 1
@.str.189 = private unnamed_addr constant [27 x i8] c"Call to NULL read function\00", align 1
@.str.1.190 = private unnamed_addr constant [11 x i8] c"Read Error\00", align 1
@.str.2.193 = private unnamed_addr constant [68 x i8] c"Can't set both read_data_fn and write_data_fn in the same structure\00", align 1
@.str.194 = private unnamed_addr constant [41 x i8] c"Can't discard critical data on CRC error\00", align 1
@.str.1.197 = private unnamed_addr constant [49 x i8] c"Application must supply a known background gamma\00", align 1
@.str.18.198 = private unnamed_addr constant [59 x i8] c"invalid after png_start_read_image or png_read_update_info\00", align 1
@.str.19.199 = private unnamed_addr constant [44 x i8] c"invalid before the PNG header has been read\00", align 1
@.str.2.200 = private unnamed_addr constant [19 x i8] c"png_set_background\00", align 1
@.str.3.209 = private unnamed_addr constant [35 x i8] c"output gamma out of expected range\00", align 1
@.str.4.210 = private unnamed_addr constant [19 x i8] c"invalid alpha mode\00", align 1
@.str.5.211 = private unnamed_addr constant [51 x i8] c"conflicting calls to set alpha mode and background\00", align 1
@.str.20.212 = private unnamed_addr constant [12 x i8] c"gamma value\00", align 1
@.str.6.213 = private unnamed_addr constant [36 x i8] c"invalid file gamma in png_set_gamma\00", align 1
@.str.7.214 = private unnamed_addr constant [38 x i8] c"invalid screen gamma in png_set_gamma\00", align 1
@.str.8.225 = private unnamed_addr constant [36 x i8] c"invalid error action to rgb_to_gray\00", align 1
@.str.9.226 = private unnamed_addr constant [47 x i8] c"ignoring out of range rgb_to_gray coefficients\00", align 1
@.str.10.227 = private unnamed_addr constant [28 x i8] c"rgb to gray red coefficient\00", align 1
@.str.11.228 = private unnamed_addr constant [30 x i8] c"rgb to gray green coefficient\00", align 1
@.str.12.229 = private unnamed_addr constant [53 x i8] c"libpng does not support gamma+background+rgb_to_gray\00", align 1
@.str.13.230 = private unnamed_addr constant [30 x i8] c"invalid background gamma type\00", align 1
@.str.14.235 = private unnamed_addr constant [16 x i8] c"NULL row buffer\00", align 1
@.str.15.236 = private unnamed_addr constant [18 x i8] c"Uninitialized row\00", align 1
@.str.16.237 = private unnamed_addr constant [39 x i8] c"png_do_rgb_to_gray found nongray pixel\00", align 1
@.str.17.238 = private unnamed_addr constant [36 x i8] c"png_do_quantize returned rowbytes=0\00", align 1
@.str.21.239 = private unnamed_addr constant [37 x i8] c"png_do_encode_alpha: unexpected call\00", align 1
@.str.242 = private unnamed_addr constant [34 x i8] c"PNG unsigned integer out of range\00", align 1
@.str.1.245 = private unnamed_addr constant [15 x i8] c"Not a PNG file\00", align 1
@.str.2.246 = private unnamed_addr constant [39 x i8] c"PNG file corrupted by ASCII conversion\00", align 1
@.str.50.253 = private unnamed_addr constant [24 x i8] c"chunk data is too large\00", align 1
@.str.49.254 = private unnamed_addr constant [19 x i8] c"invalid chunk type\00", align 1
@.str.3.259 = private unnamed_addr constant [10 x i8] c"CRC error\00", align 1
@.str.4.262 = private unnamed_addr constant [29 x i8] c"invalid window size (libpng)\00", align 1
@.str.5.265 = private unnamed_addr constant [13 x i8] c"out of place\00", align 1
@.str.6.266 = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.7.269 = private unnamed_addr constant [13 x i8] c"missing IHDR\00", align 1
@.str.8.270 = private unnamed_addr constant [10 x i8] c"duplicate\00", align 1
@.str.9.271 = private unnamed_addr constant [25 x i8] c"ignored in grayscale PNG\00", align 1
@.str.10.272 = private unnamed_addr constant [19 x i8] c"tRNS must be after\00", align 1
@.str.11.273 = private unnamed_addr constant [19 x i8] c"hIST must be after\00", align 1
@.str.12.274 = private unnamed_addr constant [19 x i8] c"bKGD must be after\00", align 1
@.str.59.279 = private unnamed_addr constant [37 x i8] c"PNG fixed point integer out of range\00", align 1
@.str.13.284 = private unnamed_addr constant [15 x i8] c"invalid values\00", align 1
@.str.14.287 = private unnamed_addr constant [18 x i8] c"too many profiles\00", align 1
@.str.15.290 = private unnamed_addr constant [10 x i8] c"too short\00", align 1
@.str.16.291 = private unnamed_addr constant [22 x i8] c"extra compressed data\00", align 1
@.str.17.292 = private unnamed_addr constant [14 x i8] c"out of memory\00", align 1
@.str.18.293 = private unnamed_addr constant [23 x i8] c"bad compression method\00", align 1
@.str.19.294 = private unnamed_addr constant [12 x i8] c"bad keyword\00", align 1
@.str.63.295 = private unnamed_addr constant [34 x i8] c"insufficient memory to read chunk\00", align 1
@.str.62.296 = private unnamed_addr constant [18 x i8] c"zstream unclaimed\00", align 1
@.str.60.297 = private unnamed_addr constant [15 x i8] c" using zstream\00", align 1
@.str.61.298 = private unnamed_addr constant [7 x i8] c"1.2.11\00", align 1
@.str.20.301 = private unnamed_addr constant [33 x i8] c"No space in chunk cache for sPLT\00", align 1
@.str.21.302 = private unnamed_addr constant [21 x i8] c"malformed sPLT chunk\00", align 1
@.str.22.303 = private unnamed_addr constant [26 x i8] c"sPLT chunk has bad length\00", align 1
@.str.23.304 = private unnamed_addr constant [20 x i8] c"sPLT chunk too long\00", align 1
@.str.24.305 = private unnamed_addr constant [36 x i8] c"sPLT chunk requires too much memory\00", align 1
@.str.25.308 = private unnamed_addr constant [27 x i8] c"invalid with alpha channel\00", align 1
@.str.26.311 = private unnamed_addr constant [14 x i8] c"invalid index\00", align 1
@.str.27.312 = private unnamed_addr constant [19 x i8] c"invalid gray level\00", align 1
@.str.28.313 = private unnamed_addr constant [14 x i8] c"invalid color\00", align 1
@.str.29.316 = private unnamed_addr constant [31 x i8] c"incorrect byte-order specifier\00", align 1
@.str.30.325 = private unnamed_addr constant [24 x i8] c"invalid parameter count\00", align 1
@.str.31.326 = private unnamed_addr constant [27 x i8] c"unrecognized equation type\00", align 1
@.str.32.327 = private unnamed_addr constant [13 x i8] c"invalid data\00", align 1
@.str.33.330 = private unnamed_addr constant [13 x i8] c"invalid unit\00", align 1
@.str.34.331 = private unnamed_addr constant [17 x i8] c"bad width format\00", align 1
@.str.35.332 = private unnamed_addr constant [19 x i8] c"non-positive width\00", align 1
@.str.36.333 = private unnamed_addr constant [18 x i8] c"bad height format\00", align 1
@.str.37.334 = private unnamed_addr constant [20 x i8] c"non-positive height\00", align 1
@.str.38.339 = private unnamed_addr constant [24 x i8] c"no space in chunk cache\00", align 1
@.str.39.340 = private unnamed_addr constant [42 x i8] c"Insufficient memory to process text chunk\00", align 1
@.str.40.343 = private unnamed_addr constant [10 x i8] c"truncated\00", align 1
@.str.41.344 = private unnamed_addr constant [25 x i8] c"unknown compression type\00", align 1
@.str.42.345 = private unnamed_addr constant [32 x i8] c"Read failure in png_handle_zTXt\00", align 1
@.str.43.346 = private unnamed_addr constant [20 x i8] c"insufficient memory\00", align 1
@.str.44.349 = private unnamed_addr constant [21 x i8] c"bad compression info\00", align 1
@.str.45.352 = private unnamed_addr constant [20 x i8] c"error in user chunk\00", align 1
@.str.46.353 = private unnamed_addr constant [22 x i8] c"Saving unknown chunk:\00", align 1
@.str.47.354 = private unnamed_addr constant [76 x i8] c"forcing save of an unhandled chunk; please call png_set_keep_unknown_chunks\00", align 1
@.str.48.355 = private unnamed_addr constant [25 x i8] c"unhandled critical chunk\00", align 1
@.str.64.356 = private unnamed_addr constant [36 x i8] c"unknown chunk exceeds memory limits\00", align 1
@.str.51.359 = private unnamed_addr constant [25 x i8] c"internal row logic error\00", align 1
@.str.52.360 = private unnamed_addr constant [36 x i8] c"internal row size calculation error\00", align 1
@.str.53.361 = private unnamed_addr constant [25 x i8] c"internal row width error\00", align 1
@png_combine_row.display_mask = internal constant [2 x [3 x [3 x i32]]] [[3 x [3 x i32]] [[3 x i32] [i32 -252645136, i32 -858993460, i32 -1431655766], [3 x i32] [i32 -16711936, i32 -252645136, i32 -858993460], [3 x i32] [i32 -65536, i32 -16711936, i32 -252645136]], [3 x [3 x i32]] [[3 x i32] [i32 252645135, i32 858993459, i32 1431655765], [3 x i32] [i32 -16711936, i32 252645135, i32 858993459], [3 x i32] [i32 -65536, i32 -16711936, i32 252645135]]], align 16
@png_combine_row.row_mask = internal constant [2 x [3 x [6 x i32]]] [[3 x [6 x i32]] [[6 x i32] [i32 16843009, i32 269488144, i32 286331153, i32 1145324612, i32 1431655765, i32 -1431655766], [6 x i32] [i32 196611, i32 50332416, i32 50529027, i32 808464432, i32 858993459, i32 -858993460], [6 x i32] [i32 15, i32 983040, i32 983055, i32 251662080, i32 252645135, i32 -252645136]], [3 x [6 x i32]] [[6 x i32] [i32 -2139062144, i32 134744072, i32 -2004318072, i32 572662306, i32 -1431655766, i32 1431655765], [6 x i32] [i32 12583104, i32 -1073692672, i32 -1061109568, i32 202116108, i32 -858993460, i32 858993459], [6 x i32] [i32 240, i32 15728640, i32 15728880, i32 -268374016, i32 -252645136, i32 252645135]]], align 16
@.str.54.362 = private unnamed_addr constant [35 x i8] c"invalid user transform pixel depth\00", align 1
@png_do_read_interlace.png_pass_inc = internal constant [7 x i32] [i32 8, i32 8, i32 4, i32 4, i32 2, i32 2, i32 1], align 16
@.str.55.369 = private unnamed_addr constant [22 x i8] c"Not enough image data\00", align 1
@.str.56.370 = private unnamed_addr constant [22 x i8] c"Extra compressed data\00", align 1
@.str.57.371 = private unnamed_addr constant [20 x i8] c"Too much image data\00", align 1
@png_read_finish_row.png_pass_inc = internal constant [7 x i8] c"\08\08\04\04\02\02\01", align 1
@png_read_finish_row.png_pass_start = internal constant [7 x i8] c"\00\04\00\02\00\01\00", align 1
@png_read_finish_row.png_pass_yinc = internal constant [7 x i8] c"\08\08\08\04\04\02\02", align 1
@png_read_finish_row.png_pass_ystart = internal constant [7 x i8] c"\00\00\04\00\02\00\01", align 1
@png_read_start_row.png_pass_yinc = internal constant [7 x i8] c"\08\08\08\04\04\02\02", align 1
@png_read_start_row.png_pass_ystart = internal constant [7 x i8] c"\00\00\04\00\02\00\01", align 1
@png_read_start_row.png_pass_inc = internal constant [7 x i8] c"\08\08\04\04\02\02\01", align 1
@png_read_start_row.png_pass_start = internal constant [7 x i8] c"\00\04\00\02\00\01\00", align 1
@.str.58.378 = private unnamed_addr constant [45 x i8] c"Row has too many bytes to allocate in memory\00", align 1
@.str.381 = private unnamed_addr constant [13 x i8] c"cHRM White X\00", align 1
@.str.1.382 = private unnamed_addr constant [13 x i8] c"cHRM White Y\00", align 1
@.str.2.383 = private unnamed_addr constant [11 x i8] c"cHRM Red X\00", align 1
@.str.3.384 = private unnamed_addr constant [11 x i8] c"cHRM Red Y\00", align 1
@.str.4.385 = private unnamed_addr constant [13 x i8] c"cHRM Green X\00", align 1
@.str.5.386 = private unnamed_addr constant [13 x i8] c"cHRM Green Y\00", align 1
@.str.6.387 = private unnamed_addr constant [12 x i8] c"cHRM Blue X\00", align 1
@.str.7.388 = private unnamed_addr constant [12 x i8] c"cHRM Blue Y\00", align 1
@.str.8.389 = private unnamed_addr constant [11 x i8] c"cHRM Red Z\00", align 1
@.str.9.390 = private unnamed_addr constant [13 x i8] c"cHRM Green Z\00", align 1
@.str.10.391 = private unnamed_addr constant [12 x i8] c"cHRM Blue Z\00", align 1
@.str.11.392 = private unnamed_addr constant [47 x i8] c"png_set_eXIf does not work; use png_set_eXIf_1\00", align 1
@.str.12.395 = private unnamed_addr constant [40 x i8] c"Insufficient memory for eXIf chunk data\00", align 1
@.str.13.396 = private unnamed_addr constant [13 x i8] c"png_set_gAMA\00", align 1
@.str.14.399 = private unnamed_addr constant [46 x i8] c"Invalid palette size, hIST allocation skipped\00", align 1
@.str.15.400 = private unnamed_addr constant [40 x i8] c"Insufficient memory for hIST chunk data\00", align 1
@.str.16.407 = private unnamed_addr constant [27 x i8] c"Invalid pCAL equation type\00", align 1
@.str.17.408 = private unnamed_addr constant [29 x i8] c"Invalid pCAL parameter count\00", align 1
@.str.18.409 = private unnamed_addr constant [34 x i8] c"Invalid format for pCAL parameter\00", align 1
@.str.19.410 = private unnamed_addr constant [37 x i8] c"Insufficient memory for pCAL purpose\00", align 1
@.str.20.411 = private unnamed_addr constant [35 x i8] c"Insufficient memory for pCAL units\00", align 1
@.str.21.412 = private unnamed_addr constant [36 x i8] c"Insufficient memory for pCAL params\00", align 1
@.str.22.413 = private unnamed_addr constant [39 x i8] c"Insufficient memory for pCAL parameter\00", align 1
@.str.23.416 = private unnamed_addr constant [18 x i8] c"Invalid sCAL unit\00", align 1
@.str.24.417 = private unnamed_addr constant [19 x i8] c"Invalid sCAL width\00", align 1
@.str.25.418 = private unnamed_addr constant [20 x i8] c"Invalid sCAL height\00", align 1
@.str.26.419 = private unnamed_addr constant [47 x i8] c"Memory allocation failed while processing sCAL\00", align 1
@.str.27.420 = private unnamed_addr constant [27 x i8] c"Invalid sCAL width ignored\00", align 1
@.str.28.421 = private unnamed_addr constant [28 x i8] c"Invalid sCAL height ignored\00", align 1
@.str.29.426 = private unnamed_addr constant [23 x i8] c"Invalid palette length\00", align 1
@.str.30.427 = private unnamed_addr constant [16 x i8] c"Invalid palette\00", align 1
@.str.31.430 = private unnamed_addr constant [32 x i8] c"Invalid iCCP compression method\00", align 1
@.str.32.431 = private unnamed_addr constant [42 x i8] c"Insufficient memory to process iCCP chunk\00", align 1
@.str.33.432 = private unnamed_addr constant [44 x i8] c"Insufficient memory to process iCCP profile\00", align 1
@.str.34.435 = private unnamed_addr constant [34 x i8] c"Insufficient memory to store text\00", align 1
@.str.35.436 = private unnamed_addr constant [21 x i8] c"too many text chunks\00", align 1
@.str.36.437 = private unnamed_addr constant [38 x i8] c"text compression mode is out of range\00", align 1
@.str.37.438 = private unnamed_addr constant [26 x i8] c"text chunk: out of memory\00", align 1
@.str.38.441 = private unnamed_addr constant [28 x i8] c"Ignoring invalid time value\00", align 1
@.str.39.444 = private unnamed_addr constant [50 x i8] c"tRNS chunk has out-of-range samples for bit_depth\00", align 1
@.str.40.447 = private unnamed_addr constant [21 x i8] c"too many sPLT chunks\00", align 1
@.str.41.448 = private unnamed_addr constant [27 x i8] c"png_set_sPLT: invalid sPLT\00", align 1
@.str.42.449 = private unnamed_addr constant [19 x i8] c"sPLT out of memory\00", align 1
@.str.43.452 = private unnamed_addr constant [24 x i8] c"too many unknown chunks\00", align 1
@.str.44.453 = private unnamed_addr constant [29 x i8] c"unknown chunk: out of memory\00", align 1
@.str.55.454 = private unnamed_addr constant [52 x i8] c"png_set_unknown_chunks now expects a valid location\00", align 1
@.str.56.455 = private unnamed_addr constant [43 x i8] c"invalid location in png_set_unknown_chunks\00", align 1
@.str.45.456 = private unnamed_addr constant [31 x i8] c"invalid unknown chunk location\00", align 1
@.str.46.459 = private unnamed_addr constant [42 x i8] c"png_set_keep_unknown_chunks: invalid keep\00", align 1
@png_set_keep_unknown_chunks.chunks_to_ignore = internal constant [90 x i8] c"bKGD\00cHRM\00eXIf\00gAMA\00hIST\00iCCP\00iTXt\00oFFs\00pCAL\00pHYs\00sBIT\00sCAL\00sPLT\00sTER\00sRGB\00tEXt\00tIME\00zTXt\00", align 16
@.str.47.460 = private unnamed_addr constant [43 x i8] c"png_set_keep_unknown_chunks: no chunk list\00", align 1
@.str.48.461 = private unnamed_addr constant [45 x i8] c"png_set_keep_unknown_chunks: too many chunks\00", align 1
@.str.49.462 = private unnamed_addr constant [32 x i8] c"invalid compression buffer size\00", align 1
@.str.50.463 = private unnamed_addr constant [63 x i8] c"Compression buffer size cannot be changed because it is in use\00", align 1
@.str.51.464 = private unnamed_addr constant [50 x i8] c"Compression buffer size limited to system maximum\00", align 1
@.str.52.465 = private unnamed_addr constant [50 x i8] c"Compression buffer size cannot be reduced below 6\00", align 1
@.str.53.468 = private unnamed_addr constant [18 x i8] c"keyword truncated\00", align 1
@.str.54.469 = private unnamed_addr constant [35 x i8] c"keyword \22@1\22: bad character '0x@2'\00", align 1
@.str.482 = private unnamed_addr constant [56 x i8] c"png_set_filler is invalid for low bit depth gray output\00", align 1
@.str.1.483 = private unnamed_addr constant [41 x i8] c"png_set_filler: inappropriate color type\00", align 1
@onebppswaptable = internal constant [256 x i8] c"\00\80@\C0 \A0`\E0\10\90P\D00\B0p\F0\08\88H\C8(\A8h\E8\18\98X\D88\B8x\F8\04\84D\C4$\A4d\E4\14\94T\D44\B4t\F4\0C\8CL\CC,\ACl\EC\1C\9C\\\DC<\BC|\FC\02\82B\C2\22\A2b\E2\12\92R\D22\B2r\F2\0A\8AJ\CA*\AAj\EA\1A\9AZ\DA:\BAz\FA\06\86F\C6&\A6f\E6\16\96V\D66\B6v\F6\0E\8EN\CE.\AEn\EE\1E\9E^\DE>\BE~\FE\01\81A\C1!\A1a\E1\11\91Q\D11\B1q\F1\09\89I\C9)\A9i\E9\19\99Y\D99\B9y\F9\05\85E\C5%\A5e\E5\15\95U\D55\B5u\F5\0D\8DM\CD-\ADm\ED\1D\9D]\DD=\BD}\FD\03\83C\C3#\A3c\E3\13\93S\D33\B3s\F3\0B\8BK\CB+\ABk\EB\1B\9B[\DB;\BB{\FB\07\87G\C7'\A7g\E7\17\97W\D77\B7w\F7\0F\8FO\CF/\AFo\EF\1F\9F_\DF?\BF\7F\FF", align 16
@twobppswaptable = internal constant [256 x i8] c"\00@\80\C0\10P\90\D0 `\A0\E00p\B0\F0\04D\84\C4\14T\94\D4$d\A4\E44t\B4\F4\08H\88\C8\18X\98\D8(h\A8\E88x\B8\F8\0CL\8C\CC\1C\\\9C\DC,l\AC\EC<|\BC\FC\01A\81\C1\11Q\91\D1!a\A1\E11q\B1\F1\05E\85\C5\15U\95\D5%e\A5\E55u\B5\F5\09I\89\C9\19Y\99\D9)i\A9\E99y\B9\F9\0DM\8D\CD\1D]\9D\DD-m\AD\ED=}\BD\FD\02B\82\C2\12R\92\D2\22b\A2\E22r\B2\F2\06F\86\C6\16V\96\D6&f\A6\E66v\B6\F6\0AJ\8A\CA\1AZ\9A\DA*j\AA\EA:z\BA\FA\0EN\8E\CE\1E^\9E\DE.n\AE\EE>~\BE\FE\03C\83\C3\13S\93\D3#c\A3\E33s\B3\F3\07G\87\C7\17W\97\D7'g\A7\E77w\B7\F7\0BK\8B\CB\1B[\9B\DB+k\AB\EB;{\BB\FB\0FO\8F\CF\1F_\9F\DF/o\AF\EF?\7F\BF\FF", align 16
@fourbppswaptable = internal constant [256 x i8] c"\00\10 0@P`p\80\90\A0\B0\C0\D0\E0\F0\01\11!1AQaq\81\91\A1\B1\C1\D1\E1\F1\02\12\222BRbr\82\92\A2\B2\C2\D2\E2\F2\03\13#3CScs\83\93\A3\B3\C3\D3\E3\F3\04\14$4DTdt\84\94\A4\B4\C4\D4\E4\F4\05\15%5EUeu\85\95\A5\B5\C5\D5\E5\F5\06\16&6FVfv\86\96\A6\B6\C6\D6\E6\F6\07\17'7GWgw\87\97\A7\B7\C7\D7\E7\F7\08\18(8HXhx\88\98\A8\B8\C8\D8\E8\F8\09\19)9IYiy\89\99\A9\B9\C9\D9\E9\F9\0A\1A*:JZjz\8A\9A\AA\BA\CA\DA\EA\FA\0B\1B+;K[k{\8B\9B\AB\BB\CB\DB\EB\FB\0C\1C,<L\\l|\8C\9C\AC\BC\CC\DC\EC\FC\0D\1D-=M]m}\8D\9D\AD\BD\CD\DD\ED\FD\0E\1E.>N^n~\8E\9E\AE\BE\CE\DE\EE\FE\0F\1F/?O_o\7F\8F\9F\AF\BF\CF\DF\EF\FF", align 16
@.str.2.504 = private unnamed_addr constant [63 x i8] c"info change after png_start_read_image or png_read_update_info\00", align 1
@.str.505 = private unnamed_addr constant [28 x i8] c"Call to NULL write function\00", align 1
@.str.1.506 = private unnamed_addr constant [12 x i8] c"Write Error\00", align 1
@.str.2.507 = private unnamed_addr constant [68 x i8] c"Can't set both read_data_fn and write_data_fn in the same structure\00", align 1
@.str.508 = private unnamed_addr constant [49 x i8] c"MNG features are not allowed in a PNG datastream\00", align 1
@.str.1.509 = private unnamed_addr constant [46 x i8] c"profile matches sRGB but writing iCCP instead\00", align 1
@.str.22.510 = private unnamed_addr constant [34 x i8] c"Writing zero-length unknown chunk\00", align 1
@.str.2.511 = private unnamed_addr constant [43 x i8] c"Valid palette required for paletted images\00", align 1
@.str.3.512 = private unnamed_addr constant [27 x i8] c"No IDATs written into file\00", align 1
@.str.4.513 = private unnamed_addr constant [42 x i8] c"Wrote palette index exceeding num_palette\00", align 1
@.str.5.514 = private unnamed_addr constant [53 x i8] c"png_write_info was never called before png_write_row\00", align 1
@.str.6.515 = private unnamed_addr constant [37 x i8] c"internal write transform logic error\00", align 1
@.str.7.518 = private unnamed_addr constant [32 x i8] c"Unknown row filter for method 0\00", align 1
@.str.8.519 = private unnamed_addr constant [57 x i8] c"png_set_filter: UP/AVG/PAETH cannot be added after start\00", align 1
@.str.9.520 = private unnamed_addr constant [29 x i8] c"Unknown custom filter method\00", align 1
@.str.10.521 = private unnamed_addr constant [49 x i8] c"Only compression windows <= 32k supported by PNG\00", align 1
@.str.11.522 = private unnamed_addr constant [49 x i8] c"Only compression windows >= 256 supported by PNG\00", align 1
@.str.12.523 = private unnamed_addr constant [46 x i8] c"Only compression method 8 is supported by PNG\00", align 1
@.str.13.524 = private unnamed_addr constant [37 x i8] c"no rows for png_write_image to write\00", align 1
@.str.14.525 = private unnamed_addr constant [55 x i8] c"PNG_TRANSFORM_STRIP_FILLER: BEFORE+AFTER not supported\00", align 1
@.str.15.526 = private unnamed_addr constant [44 x i8] c"png_image_write_to_memory: invalid argument\00", align 1
@.str.16.527 = private unnamed_addr constant [55 x i8] c"png_image_write_to_memory: incorrect PNG_IMAGE_VERSION\00", align 1
@.str.26.528 = private unnamed_addr constant [23 x i8] c"memory image too large\00", align 1
@.str.27.529 = private unnamed_addr constant [30 x i8] c"supplied row stride too small\00", align 1
@.str.28.530 = private unnamed_addr constant [27 x i8] c"image row stride too large\00", align 1
@.str.29.531 = private unnamed_addr constant [36 x i8] c"no color-map for color-mapped image\00", align 1
@.str.30.532 = private unnamed_addr constant [44 x i8] c"png_write_image: unsupported transformation\00", align 1
@.str.31.533 = private unnamed_addr constant [37 x i8] c"png_write_image: internal call error\00", align 1
@.str.25.534 = private unnamed_addr constant [39 x i8] c"png_image_write_to_memory: PNG too big\00", align 1
@.str.23.535 = private unnamed_addr constant [11 x i8] c"1.6.38.git\00", align 1
@.str.24.536 = private unnamed_addr constant [32 x i8] c"png_image_write_: out of memory\00", align 1
@.str.17.537 = private unnamed_addr constant [43 x i8] c"png_image_write_to_stdio: invalid argument\00", align 1
@.str.18.538 = private unnamed_addr constant [54 x i8] c"png_image_write_to_stdio: incorrect PNG_IMAGE_VERSION\00", align 1
@.str.19.539 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.20.540 = private unnamed_addr constant [42 x i8] c"png_image_write_to_file: invalid argument\00", align 1
@.str.21.541 = private unnamed_addr constant [53 x i8] c"png_image_write_to_file: incorrect PNG_IMAGE_VERSION\00", align 1
@png_write_sig.png_signature = private unnamed_addr constant [8 x i8] c"\89PNG\0D\0A\1A\0A", align 1
@.str.42.550 = private unnamed_addr constant [27 x i8] c"length exceeds PNG maximum\00", align 1
@.str.555 = private unnamed_addr constant [38 x i8] c"Invalid bit depth for grayscale image\00", align 1
@.str.1.556 = private unnamed_addr constant [32 x i8] c"Invalid bit depth for RGB image\00", align 1
@.str.2.557 = private unnamed_addr constant [37 x i8] c"Invalid bit depth for paletted image\00", align 1
@.str.3.558 = private unnamed_addr constant [44 x i8] c"Invalid bit depth for grayscale+alpha image\00", align 1
@.str.4.559 = private unnamed_addr constant [33 x i8] c"Invalid bit depth for RGBA image\00", align 1
@.str.5.560 = private unnamed_addr constant [35 x i8] c"Invalid image color type specified\00", align 1
@.str.6.561 = private unnamed_addr constant [35 x i8] c"Invalid compression type specified\00", align 1
@.str.7.562 = private unnamed_addr constant [30 x i8] c"Invalid filter type specified\00", align 1
@.str.8.563 = private unnamed_addr constant [33 x i8] c"Invalid interlace type specified\00", align 1
@.str.9.566 = private unnamed_addr constant [36 x i8] c"Invalid number of colors in palette\00", align 1
@.str.10.567 = private unnamed_addr constant [56 x i8] c"Ignoring request to write a PLTE chunk in grayscale PNG\00", align 1
@.str.11.570 = private unnamed_addr constant [35 x i8] c"Z_OK on Z_FINISH with output space\00", align 1
@.str.43.571 = private unnamed_addr constant [15 x i8] c" using zstream\00", align 1
@.str.44.572 = private unnamed_addr constant [28 x i8] c"deflateEnd failed (ignored)\00", align 1
@.str.45.573 = private unnamed_addr constant [7 x i8] c"1.2.11\00", align 1
@.str.12.580 = private unnamed_addr constant [40 x i8] c"Invalid sRGB rendering intent specified\00", align 1
@.str.13.583 = private unnamed_addr constant [26 x i8] c"No profile for iCCP chunk\00", align 1
@.str.14.584 = private unnamed_addr constant [22 x i8] c"ICC profile too short\00", align 1
@.str.15.585 = private unnamed_addr constant [49 x i8] c"ICC profile length invalid (not a multiple of 4)\00", align 1
@.str.16.586 = private unnamed_addr constant [38 x i8] c"Profile length does not match profile\00", align 1
@.str.17.587 = private unnamed_addr constant [22 x i8] c"iCCP: invalid keyword\00", align 1
@.str.47.588 = private unnamed_addr constant [48 x i8] c"error writing ancillary chunked compressed data\00", align 1
@.str.46.589 = private unnamed_addr constant [25 x i8] c"compressed data too long\00", align 1
@.str.18.592 = private unnamed_addr constant [22 x i8] c"sPLT: invalid keyword\00", align 1
@.str.19.595 = private unnamed_addr constant [29 x i8] c"Invalid sBIT depth specified\00", align 1
@.str.20.600 = private unnamed_addr constant [47 x i8] c"Invalid number of transparent colors specified\00", align 1
@.str.21.601 = private unnamed_addr constant [64 x i8] c"Ignoring attempt to write tRNS chunk out-of-range for bit_depth\00", align 1
@.str.22.602 = private unnamed_addr constant [64 x i8] c"Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8\00", align 1
@.str.23.603 = private unnamed_addr constant [39 x i8] c"Can't write tRNS with an alpha channel\00", align 1
@.str.24.606 = private unnamed_addr constant [33 x i8] c"Invalid background palette index\00", align 1
@.str.25.607 = private unnamed_addr constant [64 x i8] c"Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8\00", align 1
@.str.26.608 = private unnamed_addr constant [64 x i8] c"Ignoring attempt to write bKGD chunk out-of-range for bit_depth\00", align 1
@.str.27.613 = private unnamed_addr constant [46 x i8] c"Invalid number of histogram entries specified\00", align 1
@.str.28.616 = private unnamed_addr constant [22 x i8] c"tEXt: invalid keyword\00", align 1
@.str.29.617 = private unnamed_addr constant [20 x i8] c"tEXt: text too long\00", align 1
@.str.30.620 = private unnamed_addr constant [31 x i8] c"zTXt: invalid compression type\00", align 1
@.str.31.621 = private unnamed_addr constant [22 x i8] c"zTXt: invalid keyword\00", align 1
@.str.32.624 = private unnamed_addr constant [22 x i8] c"iTXt: invalid keyword\00", align 1
@.str.33.625 = private unnamed_addr constant [26 x i8] c"iTXt: invalid compression\00", align 1
@.str.34.626 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.35.627 = private unnamed_addr constant [33 x i8] c"iTXt: uncompressed text too long\00", align 1
@.str.36.630 = private unnamed_addr constant [38 x i8] c"Unrecognized unit type for oFFs chunk\00", align 1
@.str.37.633 = private unnamed_addr constant [42 x i8] c"Unrecognized equation type for pCAL chunk\00", align 1
@.str.38.634 = private unnamed_addr constant [22 x i8] c"pCAL: invalid keyword\00", align 1
@.str.39.637 = private unnamed_addr constant [36 x i8] c"Can't write sCAL (buffer too small)\00", align 1
@.str.40.640 = private unnamed_addr constant [38 x i8] c"Unrecognized unit type for pHYs chunk\00", align 1
@.str.41.643 = private unnamed_addr constant [38 x i8] c"Invalid time specified for tIME chunk\00", align 1
@png_write_start_row.png_pass_yinc = internal constant [7 x i8] c"\08\08\08\04\04\02\02", align 1
@png_write_start_row.png_pass_ystart = internal constant [7 x i8] c"\00\00\04\00\02\00\01", align 1
@png_write_start_row.png_pass_inc = internal constant [7 x i8] c"\08\08\04\04\02\02\01", align 1
@png_write_start_row.png_pass_start = internal constant [7 x i8] c"\00\04\00\02\00\01\00", align 1
@png_write_finish_row.png_pass_inc = internal constant [7 x i8] c"\08\08\04\04\02\02\01", align 1
@png_write_finish_row.png_pass_start = internal constant [7 x i8] c"\00\04\00\02\00\01\00", align 1
@png_write_finish_row.png_pass_yinc = internal constant [7 x i8] c"\08\08\08\04\04\02\02", align 1
@png_write_finish_row.png_pass_ystart = internal constant [7 x i8] c"\00\00\04\00\02\00\01", align 1
@png_do_write_interlace.png_pass_start = internal constant [7 x i8] c"\00\04\00\02\00\01\00", align 1
@png_do_write_interlace.png_pass_inc = internal constant [7 x i8] c"\08\08\04\04\02\02\01", align 1

; Function Attrs: sspstrong uwtable
define dso_local fastcc void @main(%struct.arib_instance_t* noundef %0, i8* noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i8* noundef %5) unnamed_addr #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca %struct.stat, align 8
  %10 = alloca %struct.stat, align 8
  %11 = alloca i8*, align 8
  %12 = alloca %struct.png_struct_def*, align 8
  %13 = alloca %struct.png_info_def*, align 8
  %14 = alloca [1 x i8], align 1
  %15 = alloca [2 x %struct.png_color_struct], align 1
  %16 = getelementptr inbounds %struct.arib_instance_t, %struct.arib_instance_t* %0, i64 0, i32 3
  %17 = load %struct.arib_instance_private_t*, %struct.arib_instance_private_t** %16, align 8, !tbaa !8
  %18 = getelementptr inbounds %struct.arib_instance_private_t, %struct.arib_instance_private_t* %17, i64 0, i32 4
  %19 = load i8*, i8** %18, align 8, !tbaa !14
  %20 = icmp eq i8* %19, null
  br i1 %20, label %208, label %21

21:                                               ; preds = %6
  %22 = bitcast %struct.stat* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %22) #22
  %23 = call i32 @stat(i8* noundef nonnull %19, %struct.stat* noundef nonnull %9) #22
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %21
  %26 = call i32 @mkdir(i8* noundef nonnull %19, i32 noundef 448) #22
  br label %27

27:                                               ; preds = %25, %21
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %22) #22
  %28 = load %struct.arib_instance_private_t*, %struct.arib_instance_private_t** %16, align 8, !tbaa !8
  %29 = getelementptr inbounds %struct.arib_instance_private_t, %struct.arib_instance_private_t* %28, i64 0, i32 4
  %30 = load i8*, i8** %29, align 8, !tbaa !14
  %31 = icmp eq i8* %30, null
  br i1 %31, label %208, label %32

32:                                               ; preds = %27
  %33 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #22
  %34 = call i32 (i8**, i32, i8*, ...) @__asprintf_chk(i8** noundef nonnull %8, i32 noundef 1, i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0), i8* noundef nonnull %30) #22
  %35 = icmp slt i32 %34, 0
  %36 = load i8*, i8** %8, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #22
  %37 = icmp eq i8* %36, null
  %38 = select i1 %35, i1 true, i1 %37
  br i1 %38, label %208, label %39

39:                                               ; preds = %32
  %40 = bitcast %struct.stat* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %40) #22
  %41 = call i32 @stat(i8* noundef nonnull %36, %struct.stat* noundef nonnull %10) #22
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = call i32 @mkdir(i8* noundef nonnull %36, i32 noundef 448) #22
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %43
  call void @free(i8* noundef nonnull %36) #22
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %40) #22
  br label %208

47:                                               ; preds = %43, %39
  call void @free(i8* noundef nonnull %36) #22
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %40) #22
  %48 = load %struct.arib_instance_private_t*, %struct.arib_instance_private_t** %16, align 8, !tbaa !8
  %49 = getelementptr inbounds %struct.arib_instance_private_t, %struct.arib_instance_private_t* %48, i64 0, i32 4
  %50 = load i8*, i8** %49, align 8, !tbaa !14
  %51 = icmp eq i8* %50, null
  br i1 %51, label %208, label %52

52:                                               ; preds = %47
  %53 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #22
  %54 = call i32 (i8**, i32, i8*, ...) @__asprintf_chk(i8** noundef nonnull %7, i32 noundef 1, i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0), i8* noundef nonnull %50) #22
  %55 = icmp slt i32 %54, 0
  %56 = load i8*, i8** %7, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #22
  %57 = icmp eq i8* %56, null
  %58 = select i1 %55, i1 true, i1 %57
  br i1 %58, label %208, label %59

59:                                               ; preds = %52
  %60 = bitcast i8** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %60) #22
  %61 = call i32 (i8**, i32, i8*, ...) @__asprintf_chk(i8** noundef nonnull %11, i32 noundef 1, i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5.20, i64 0, i64 0), i8* noundef nonnull %56, i8* noundef %1) #22
  %62 = icmp slt i32 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %59
  store i8* null, i8** %11, align 8, !tbaa !17
  br label %64

64:                                               ; preds = %63, %59
  call void @free(i8* noundef nonnull %56) #22
  %65 = load i8*, i8** %11, align 8, !tbaa !17
  %66 = icmp eq i8* %65, null
  br i1 %66, label %67, label %68

67:                                               ; preds = %64
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %60) #22
  br label %208

68:                                               ; preds = %64
  %69 = call i32 (i8*, i32, ...) @open(i8* noundef nonnull %65, i32 noundef 193, i32 noundef 420)
  %70 = icmp eq i32 %69, -1
  br i1 %70, label %77, label %71

71:                                               ; preds = %68
  %72 = call noalias %struct._IO_FILE* @fdopen(i32 noundef %69, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6.21, i64 0, i64 0)) #22
  %73 = icmp eq %struct._IO_FILE* %72, null
  %74 = load i8*, i8** %11, align 8, !tbaa !17
  br i1 %73, label %75, label %79

75:                                               ; preds = %71
  call void (%struct.arib_instance_t*, i8*, ...) @arib_log(%struct.arib_instance_t* noundef nonnull %0, i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7.22, i64 0, i64 0), i8* noundef %74)
  %76 = call i32 @close(i32 noundef %69)
  br label %77

77:                                               ; preds = %75, %68
  %78 = load i8*, i8** %11, align 8, !tbaa !17
  call void @free(i8* noundef %78) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %60) #22
  br label %208

79:                                               ; preds = %71
  call void @free(i8* noundef %74) #22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %60) #22
  %80 = bitcast %struct.png_struct_def** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %80) #22
  %81 = call noalias %struct.png_struct_def* @png_create_write_struct(i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4.23, i64 0, i64 0), i8* noundef null, void (%struct.png_struct_def*, i8*)* noundef null, void (%struct.png_struct_def*, i8*)* noundef null)
  store %struct.png_struct_def* %81, %struct.png_struct_def** %12, align 8, !tbaa !17
  %82 = icmp eq %struct.png_struct_def* %81, null
  br i1 %82, label %206, label %83

83:                                               ; preds = %79
  %84 = call noalias %struct.png_info_def* @png_create_info_struct(%struct.png_struct_def* noundef nonnull %81)
  store %struct.png_info_def* %84, %struct.png_info_def** %13, align 8, !tbaa !17
  %85 = icmp eq %struct.png_info_def* %84, null
  br i1 %85, label %205, label %86

86:                                               ; preds = %83
  %87 = call [1 x %struct.__jmp_buf_tag]* @png_set_longjmp_fn(%struct.png_struct_def* noundef nonnull %81, void (%struct.__jmp_buf_tag*, i32)* noundef nonnull @__longjmp_chk, i64 noundef 200)
  %88 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %87, i64 0, i64 0
  %89 = call i32 @_setjmp(%struct.__jmp_buf_tag* noundef %88) #23
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %205

91:                                               ; preds = %86
  call void @png_set_IHDR(%struct.png_struct_def* noundef nonnull %81, %struct.png_info_def* noundef nonnull %84, i32 noundef %2, i32 noundef %3, i32 noundef 1, i32 noundef 3, i32 noundef 0, i32 noundef 0, i32 noundef 0)
  %92 = sext i32 %3 to i64
  %93 = shl nsw i64 %92, 3
  %94 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* noundef nonnull %81, i64 noundef %93)
  %95 = bitcast i8* %94 to i8**
  %96 = icmp sgt i32 %3, 0
  br i1 %96, label %97, label %100

97:                                               ; preds = %91
  %98 = sext i32 %2 to i64
  %99 = zext i32 %3 to i64
  br label %115

.loopexit11:                                      ; preds = %115
  br label %100

100:                                              ; preds = %.loopexit11, %91
  %101 = sitofp i32 %4 to double
  %102 = call double @log2(double noundef %101) #22
  %103 = call double @llvm.ceil.f64(double %102)
  %104 = fptosi double %103 to i32
  %105 = mul nsw i32 %3, %2
  %106 = mul nsw i32 %105, %104
  %107 = sdiv i32 %106, 8
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %5, i64 %108
  br i1 %96, label %110, label %127

110:                                              ; preds = %100
  %111 = icmp sgt i32 %2, 0
  %112 = icmp sgt i32 %104, 0
  %113 = zext i32 %3 to i64
  %114 = zext i32 %2 to i64
  br label %121

115:                                              ; preds = %115, %97
  %116 = phi i64 [ 0, %97 ], [ %119, %115 ]
  %117 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* noundef nonnull %81, i64 noundef %98)
  %118 = shl nuw nsw i64 %116, 3
  %scevgep13 = getelementptr i8, i8* %94, i64 %118
  %scevgep1314 = bitcast i8* %scevgep13 to i8**
  store i8* %117, i8** %scevgep1314, align 8, !tbaa !17
  %119 = add nuw nsw i64 %116, 1
  %120 = icmp eq i64 %99, %119
  br i1 %120, label %.loopexit11, label %115, !llvm.loop !18

121:                                              ; preds = %138, %110
  %122 = phi i64 [ 0, %110 ], [ %141, %138 ]
  %123 = phi i64 [ 8, %110 ], [ %140, %138 ]
  %124 = phi i8* [ %5, %110 ], [ %139, %138 ]
  br i1 %111, label %125, label %138

125:                                              ; preds = %121
  %126 = getelementptr inbounds i8*, i8** %95, i64 %122
  br label %143

.loopexit10:                                      ; preds = %138
  br label %127

127:                                              ; preds = %.loopexit10, %100
  %128 = getelementptr inbounds [1 x i8], [1 x i8]* %14, i64 0, i64 0
  store i8 0, i8* %128, align 1, !tbaa !20
  %129 = load %struct.png_struct_def*, %struct.png_struct_def** %12, align 8, !tbaa !17
  %130 = load %struct.png_info_def*, %struct.png_info_def** %13, align 8, !tbaa !17
  call void @png_set_tRNS(%struct.png_struct_def* noundef %129, %struct.png_info_def* noundef %130, i8* noundef nonnull %128, i32 noundef 1, %struct.png_color_16_struct* noundef null)
  %131 = getelementptr inbounds [2 x %struct.png_color_struct], [2 x %struct.png_color_struct]* %15, i64 0, i64 0, i32 0
  store i8 -1, i8* %131, align 1, !tbaa !21
  %132 = getelementptr inbounds [2 x %struct.png_color_struct], [2 x %struct.png_color_struct]* %15, i64 0, i64 0, i32 1
  store i8 -1, i8* %132, align 1, !tbaa !23
  %133 = getelementptr inbounds [2 x %struct.png_color_struct], [2 x %struct.png_color_struct]* %15, i64 0, i64 0, i32 2
  store i8 -1, i8* %133, align 1, !tbaa !24
  %134 = getelementptr inbounds [2 x %struct.png_color_struct], [2 x %struct.png_color_struct]* %15, i64 0, i64 1, i32 0
  store i8 0, i8* %134, align 1, !tbaa !21
  %135 = getelementptr inbounds [2 x %struct.png_color_struct], [2 x %struct.png_color_struct]* %15, i64 0, i64 1, i32 1
  store i8 0, i8* %135, align 1, !tbaa !23
  %136 = getelementptr inbounds [2 x %struct.png_color_struct], [2 x %struct.png_color_struct]* %15, i64 0, i64 1, i32 2
  store i8 0, i8* %136, align 1, !tbaa !24
  %137 = getelementptr inbounds [2 x %struct.png_color_struct], [2 x %struct.png_color_struct]* %15, i64 0, i64 0
  call void @png_set_PLTE(%struct.png_struct_def* noundef %129, %struct.png_info_def* noundef %130, %struct.png_color_struct* noundef nonnull %137, i32 noundef 2)
  call void bitcast (void (%struct.png_struct_def*, %struct._IO_FILE.1*)* @png_init_io to void (%struct.png_struct_def*, %struct._IO_FILE*)*)(%struct.png_struct_def* noundef %129, %struct._IO_FILE* noundef nonnull %72)
  call void @png_write_info(%struct.png_struct_def* noundef %129, %struct.png_info_def* noundef %130)
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_packing to void (%struct.png_struct_def*)*)(%struct.png_struct_def* noundef %129)
  call void @png_write_image(%struct.png_struct_def* noundef %129, i8** noundef %95)
  call void @png_write_end(%struct.png_struct_def* noundef %129, %struct.png_info_def* noundef %130)
  br i1 %96, label %196, label %198

.loopexit7:                                       ; preds = %185
  %.ph8 = phi i8* [ %186, %185 ]
  %.ph9 = phi i64 [ %187, %185 ]
  br label %138

138:                                              ; preds = %.loopexit7, %121
  %139 = phi i8* [ %124, %121 ], [ %.ph8, %.loopexit7 ]
  %140 = phi i64 [ %123, %121 ], [ %.ph9, %.loopexit7 ]
  %141 = add nuw nsw i64 %122, 1
  %142 = icmp eq i64 %141, %113
  br i1 %142, label %.loopexit10, label %121, !llvm.loop !25

143:                                              ; preds = %185, %125
  %144 = phi i64 [ 0, %125 ], [ %194, %185 ]
  %145 = phi i64 [ %123, %125 ], [ %187, %185 ]
  %146 = phi i8* [ %124, %125 ], [ %186, %185 ]
  br i1 %112, label %.preheader, label %185

.preheader:                                       ; preds = %143
  br label %147

147:                                              ; preds = %.preheader, %172
  %148 = phi i8* [ %183, %172 ], [ %146, %.preheader ]
  %149 = phi i64 [ 8, %172 ], [ %145, %.preheader ]
  %150 = phi i32 [ %180, %172 ], [ 0, %.preheader ]
  %151 = phi i32 [ %182, %172 ], [ %104, %.preheader ]
  %152 = icmp ult i8* %148, %109
  br i1 %152, label %153, label %..loopexit4_crit_edge

153:                                              ; preds = %147
  %154 = zext i32 %151 to i64
  %155 = sub nsw i64 %149, %154
  %156 = trunc i64 %155 to i32
  %157 = icmp sgt i32 %156, -1
  br i1 %157, label %158, label %172

158:                                              ; preds = %153
  %.lcssa3 = phi i64 [ %155, %153 ]
  %.lcssa2 = phi i8* [ %148, %153 ]
  %.lcssa1 = phi i32 [ %150, %153 ]
  %.lcssa = phi i32 [ %151, %153 ]
  %159 = zext i32 %.lcssa to i64
  %160 = trunc i64 %.lcssa3 to i32
  %161 = load i8, i8* %.lcssa2, align 1, !tbaa !20
  %162 = zext i8 %161 to i32
  %163 = lshr i32 %162, %160
  %164 = getelementptr inbounds [33 x i32], [33 x i32]* @bs_read.i_mask.24, i64 0, i64 %159
  %165 = load i32, i32* %164, align 4, !tbaa !26
  %166 = and i32 %163, %165
  %167 = or i32 %166, %.lcssa1
  %168 = icmp eq i64 %.lcssa3, 0
  %169 = zext i1 %168 to i64
  %170 = getelementptr i8, i8* %.lcssa2, i64 %169
  %171 = select i1 %168, i64 8, i64 %.lcssa3
  br label %185

172:                                              ; preds = %153
  %173 = load i8, i8* %148, align 1, !tbaa !20
  %174 = zext i8 %173 to i32
  %175 = getelementptr inbounds [33 x i32], [33 x i32]* @bs_read.i_mask.24, i64 0, i64 %149
  %176 = load i32, i32* %175, align 4, !tbaa !26
  %177 = and i32 %176, %174
  %178 = sub nsw i32 0, %156
  %179 = shl i32 %177, %178
  %180 = or i32 %179, %150
  %181 = trunc i64 %149 to i32
  %182 = sub i32 %151, %181
  %183 = getelementptr inbounds i8, i8* %148, i64 1
  %184 = icmp sgt i32 %182, 0
  br i1 %184, label %147, label %.loopexit4split, !llvm.loop !27

.loopexit4split:                                  ; preds = %172
  br label %.loopexit4

..loopexit4_crit_edge:                            ; preds = %147
  br label %.loopexit4

.loopexit4:                                       ; preds = %.loopexit4split, %..loopexit4_crit_edge
  %.ph = phi i8* [ %148, %..loopexit4_crit_edge ], [ %183, %.loopexit4split ]
  %.ph5 = phi i64 [ %149, %..loopexit4_crit_edge ], [ 8, %.loopexit4split ]
  %.ph6 = phi i32 [ %150, %..loopexit4_crit_edge ], [ %180, %.loopexit4split ]
  br label %185

185:                                              ; preds = %.loopexit4, %158, %143
  %186 = phi i8* [ %146, %143 ], [ %170, %158 ], [ %.ph, %.loopexit4 ]
  %187 = phi i64 [ %145, %143 ], [ %171, %158 ], [ %.ph5, %.loopexit4 ]
  %188 = phi i32 [ 0, %143 ], [ %167, %158 ], [ %.ph6, %.loopexit4 ]
  %189 = and i32 %188, 255
  %190 = icmp ne i32 %189, 0
  %191 = zext i1 %190 to i8
  %192 = load i8*, i8** %126, align 8, !tbaa !17
  %193 = getelementptr inbounds i8, i8* %192, i64 %144
  store i8 %191, i8* %193, align 1, !tbaa !20
  %194 = add nuw nsw i64 %144, 1
  %195 = icmp eq i64 %194, %114
  br i1 %195, label %.loopexit7, label %143, !llvm.loop !28

196:                                              ; preds = %127
  %197 = zext i32 %3 to i64
  br label %199

.loopexit:                                        ; preds = %199
  br label %198

198:                                              ; preds = %.loopexit, %127
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* noundef %129, i8* noundef %94)
  br label %205

199:                                              ; preds = %199, %196
  %200 = phi i64 [ 0, %196 ], [ %203, %199 ]
  %201 = shl nuw nsw i64 %200, 3
  %scevgep = getelementptr i8, i8* %94, i64 %201
  %scevgep12 = bitcast i8* %scevgep to i8**
  %202 = load i8*, i8** %scevgep12, align 8, !tbaa !17
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* noundef %129, i8* noundef %202)
  %203 = add nuw nsw i64 %200, 1
  %204 = icmp eq i64 %197, %203
  br i1 %204, label %.loopexit, label %199, !llvm.loop !29

205:                                              ; preds = %198, %86, %83
  call void @png_destroy_write_struct(%struct.png_struct_def** noundef nonnull %12, %struct.png_info_def** noundef nonnull %13)
  br label %206

206:                                              ; preds = %205, %79
  %207 = call i32 @fclose(%struct._IO_FILE* noundef nonnull %72)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %80) #22
  br label %208

208:                                              ; preds = %206, %77, %67, %52, %47, %46, %32, %27, %6
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind nonlazybind
declare noundef i32 @stat(i8* nocapture noundef readonly, %struct.stat* nocapture noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind nonlazybind
declare noundef i32 @mkdir(i8* nocapture noundef readonly, i32 noundef) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind nonlazybind
declare i32 @__asprintf_chk(i8** noundef, i32 noundef, i8* noundef, ...) local_unnamed_addr #3

; Function Attrs: inaccessiblemem_or_argmemonly mustprogress nounwind nonlazybind willreturn
declare void @free(i8* nocapture noundef) #4

; Function Attrs: nofree nonlazybind
declare noundef i32 @open(i8* nocapture noundef readonly, i32 noundef, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind nonlazybind
declare noalias noundef %struct._IO_FILE* @fdopen(i32 noundef, i8* nocapture noundef readonly) local_unnamed_addr #2

; Function Attrs: sspstrong uwtable
declare hidden void @arib_log(%struct.arib_instance_t* nocapture noundef readonly, i8* noundef, ...) local_unnamed_addr #0

; Function Attrs: nonlazybind
declare i32 @close(i32 noundef) local_unnamed_addr #6

; Function Attrs: noreturn nounwind nonlazybind
declare void @__longjmp_chk(%struct.__jmp_buf_tag* noundef, i32 noundef) #7

; Function Attrs: nounwind nonlazybind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag* noundef) #8

; Function Attrs: mustprogress nofree nounwind nonlazybind willreturn writeonly
declare double @log2(double noundef) local_unnamed_addr #9

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.ceil.f64(double) #10

; Function Attrs: nofree nounwind nonlazybind
declare noundef i32 @fclose(%struct._IO_FILE* nocapture noundef) #2

; Function Attrs: noinline nounwind uwtable
define void @png_set_sig_bytes(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = icmp slt i32 %1, 0
  %spec.select = select i1 %5, i32 0, i32 %1
  %6 = icmp ugt i32 %spec.select, 8
  br i1 %6, label %7, label %8

7:                                                ; preds = %4
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.9, i32 0, i32 0)) #24
  unreachable

8:                                                ; preds = %4
  %9 = trunc i32 %spec.select to i8
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 67
  store i8 %9, i8* %10, align 1
  br label %11

11:                                               ; preds = %2, %8
  ret void
}

; Function Attrs: noinline noreturn nounwind uwtable
define void @png_error(%struct.png_struct_def* noalias %0, i8* %1) #12 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  br i1 %3, label %4, label %14

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 4
  %6 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %5, align 8
  %7 = icmp ne void (%struct.png_struct_def*, i8*)* %6, null
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 4
  %10 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %9, align 8
  %11 = bitcast %struct.png_struct_def* %0 to i8*
  %12 = ptrtoint i8* %11 to i64
  %13 = inttoptr i64 %12 to %struct.png_struct_def*
  call void %10(%struct.png_struct_def* %13, i8* %1)
  br label %14

14:                                               ; preds = %8, %4, %2
  call void @png_default_error(%struct.png_struct_def* %0, i8* %1) #24
  unreachable
}

; Function Attrs: noinline noreturn nounwind uwtable
define internal void @png_default_error(%struct.png_struct_def* noalias %0, i8* %1) #12 {
  %3 = load %struct._IO_FILE.1*, %struct._IO_FILE.1** @stderr, align 8
  %4 = icmp ne i8* %1, null
  %. = select i1 %4, i8* %1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5.3, i32 0, i32 0)
  %5 = call i32 (%struct._IO_FILE.1*, i8*, ...) @fprintf(%struct._IO_FILE.1* %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.4, i32 0, i32 0), i8* %.)
  %6 = load %struct._IO_FILE.1*, %struct._IO_FILE.1** @stderr, align 8
  %7 = call i32 (%struct._IO_FILE.1*, i8*, ...) @fprintf(%struct._IO_FILE.1* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6.5, i32 0, i32 0))
  call void @png_longjmp(%struct.png_struct_def* %0, i32 1) #24
  unreachable
}

declare i32 @fprintf(%struct._IO_FILE.1*, i8*, ...) #13

; Function Attrs: noinline noreturn nounwind uwtable
define void @png_longjmp(%struct.png_struct_def* noalias %0, i32 %1) #12 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  br i1 %3, label %4, label %18

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 1
  %6 = load void (%struct.__jmp_buf_tag*, i32)*, void (%struct.__jmp_buf_tag*, i32)** %5, align 8
  %7 = icmp ne void (%struct.__jmp_buf_tag*, i32)* %6, null
  br i1 %7, label %8, label %18

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 2
  %10 = load [1 x %struct.__jmp_buf_tag]*, [1 x %struct.__jmp_buf_tag]** %9, align 8
  %11 = icmp ne [1 x %struct.__jmp_buf_tag]* %10, null
  br i1 %11, label %12, label %18

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 1
  %14 = load void (%struct.__jmp_buf_tag*, i32)*, void (%struct.__jmp_buf_tag*, i32)** %13, align 8
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 2
  %16 = load [1 x %struct.__jmp_buf_tag]*, [1 x %struct.__jmp_buf_tag]** %15, align 8
  %17 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %16, i32 0, i32 0
  call void %14(%struct.__jmp_buf_tag* %17, i32 %1)
  br label %18

18:                                               ; preds = %12, %8, %4, %2
  call void @abort() #25
  unreachable
}

; Function Attrs: noreturn nounwind
declare void @abort() #14

; Function Attrs: noinline nounwind uwtable
define i32 @png_sig_cmp(i8* %0, i64 %1, i64 %2) #11 {
  %4 = alloca [8 x i8], align 1
  %5 = bitcast [8 x i8]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @png_sig_cmp.png_signature, i32 0, i32 0), i64 8, i1 false)
  %6 = icmp ugt i64 %2, 8
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = icmp ult i64 %2, 1
  br i1 %8, label %18, label %9

9:                                                ; preds = %7, %3
  %.01 = phi i64 [ 8, %3 ], [ %2, %7 ]
  %10 = icmp ugt i64 %1, 7
  br i1 %10, label %18, label %11

11:                                               ; preds = %9
  %12 = add i64 %1, %.01
  %13 = icmp ugt i64 %12, 8
  %14 = sub i64 8, %1
  %spec.select = select i1 %13, i64 %14, i64 %.01
  %15 = getelementptr inbounds i8, i8* %0, i64 %1
  %16 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 %1
  %17 = call i32 @memcmp(i8* %15, i8* %16, i64 %spec.select) #26
  br label %18

18:                                               ; preds = %9, %7, %11
  %.0 = phi i32 [ %17, %11 ], [ -1, %7 ], [ -1, %9 ]
  ret i32 %.0
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #15

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8*, i8*, i64) #16

; Function Attrs: noinline nounwind uwtable
define noalias i8* @png_zalloc(i8* %0, i32 %1, i32 %2) #11 {
  %4 = zext i32 %2 to i64
  %5 = icmp eq i8* %0, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %3
  %7 = zext i32 %1 to i64
  %8 = zext i32 %2 to i64
  %9 = udiv i64 -1, %8
  %10 = icmp uge i64 %7, %9
  br i1 %10, label %11, label %13

11:                                               ; preds = %6
  %12 = bitcast i8* %0 to %struct.png_struct_def*
  call void @png_warning(%struct.png_struct_def* %12, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1.10, i32 0, i32 0))
  br label %18

13:                                               ; preds = %6
  %14 = zext i32 %1 to i64
  %15 = mul i64 %4, %14
  %16 = bitcast i8* %0 to %struct.png_struct_def*
  %17 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %16, i64 %15)
  br label %18

18:                                               ; preds = %3, %13, %11
  %.0 = phi i8* [ null, %11 ], [ %17, %13 ], [ null, %3 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_warning(%struct.png_struct_def* noalias %0, i8* %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  br i1 %3, label %4, label %13

4:                                                ; preds = %2
  %5 = load i8, i8* %1, align 1
  %6 = sext i8 %5 to i32
  %7 = icmp eq i32 %6, 35
  br i1 %7, label %.preheader, label %13

.preheader:                                       ; preds = %4
  br label %8

8:                                                ; preds = %.preheader, %12
  %indvars.iv = phi i64 [ 1, %.preheader ], [ %indvars.iv.next, %12 ]
  %scevgep = getelementptr i8, i8* %1, i64 %indvars.iv
  %9 = load i8, i8* %scevgep, align 1
  %10 = sext i8 %9 to i32
  %11 = icmp eq i32 %10, 32
  br i1 %11, label %..loopexit_crit_edge, label %12

12:                                               ; preds = %8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 15
  br i1 %exitcond, label %8, label %.loopexitsplit

.loopexitsplit:                                   ; preds = %12
  br label %.loopexit

..loopexit_crit_edge:                             ; preds = %8
  %tmp = trunc i64 %indvars.iv to i32
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexitsplit, %..loopexit_crit_edge
  %.2.ph = phi i32 [ %tmp, %..loopexit_crit_edge ], [ 15, %.loopexitsplit ]
  br label %13

13:                                               ; preds = %.loopexit, %4, %2
  %.2 = phi i32 [ 0, %2 ], [ 0, %4 ], [ %.2.ph, %.loopexit ]
  %14 = icmp ne %struct.png_struct_def* %0, null
  br i1 %14, label %15, label %27

15:                                               ; preds = %13
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 5
  %17 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %16, align 8
  %18 = icmp ne void (%struct.png_struct_def*, i8*)* %17, null
  br i1 %18, label %19, label %27

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 5
  %21 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %20, align 8
  %22 = bitcast %struct.png_struct_def* %0 to i8*
  %23 = ptrtoint i8* %22 to i64
  %24 = inttoptr i64 %23 to %struct.png_struct_def*
  %25 = sext i32 %.2 to i64
  %26 = getelementptr inbounds i8, i8* %1, i64 %25
  call void %21(%struct.png_struct_def* %24, i8* %26)
  br label %30

27:                                               ; preds = %15, %13
  %28 = sext i32 %.2 to i64
  %29 = getelementptr inbounds i8, i8* %1, i64 %28
  call void @png_default_warning(%struct.png_struct_def* %0, i8* %29)
  br label %30

30:                                               ; preds = %27, %19
  ret void
}

; Function Attrs: noinline nounwind uwtable
define noalias i8* @png_malloc_warn(%struct.png_struct_def.60* noalias %0, i64 %1) #11 {
  %3 = icmp ne %struct.png_struct_def.60* %0, null
  br i1 %3, label %4, label %8

4:                                                ; preds = %2
  %5 = call noalias i8* @png_malloc_base(%struct.png_struct_def.60* %0, i64 %1)
  %6 = icmp ne i8* %5, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %4
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2.97, i32 0, i32 0))
  br label %8

8:                                                ; preds = %2, %7, %4
  %.0 = phi i8* [ %5, %4 ], [ null, %7 ], [ null, %2 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define noalias i8* @png_malloc_base(%struct.png_struct_def.60* noalias %0, i64 %1) #11 {
  %3 = icmp ugt i64 %1, 0
  br i1 %3, label %4, label %19

4:                                                ; preds = %2
  %5 = icmp ne %struct.png_struct_def.60* %0, null
  br i1 %5, label %6, label %17

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 125
  %8 = load i8* (%struct.png_struct_def.60*, i64)*, i8* (%struct.png_struct_def.60*, i64)** %7, align 8
  %9 = icmp ne i8* (%struct.png_struct_def.60*, i64)* %8, null
  br i1 %9, label %10, label %17

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 125
  %12 = load i8* (%struct.png_struct_def.60*, i64)*, i8* (%struct.png_struct_def.60*, i64)** %11, align 8
  %13 = bitcast %struct.png_struct_def.60* %0 to i8*
  %14 = ptrtoint i8* %13 to i64
  %15 = inttoptr i64 %14 to %struct.png_struct_def.60*
  %16 = call i8* %12(%struct.png_struct_def.60* %15, i64 %1)
  br label %19

17:                                               ; preds = %6, %4
  %18 = call noalias i8* @malloc(i64 %1) #22
  br label %19

19:                                               ; preds = %2, %17, %10
  %.0 = phi i8* [ %16, %10 ], [ %18, %17 ], [ null, %2 ]
  ret i8* %.0
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #17

; Function Attrs: noinline nounwind uwtable
define internal void @png_default_warning(%struct.png_struct_def* noalias %0, i8* %1) #11 {
  %3 = load %struct._IO_FILE.1*, %struct._IO_FILE.1** @stderr, align 8
  %4 = call i32 (%struct._IO_FILE.1*, i8*, ...) @fprintf(%struct._IO_FILE.1* %3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7.12, i32 0, i32 0), i8* %1)
  %5 = load %struct._IO_FILE.1*, %struct._IO_FILE.1** @stderr, align 8
  %6 = call i32 (%struct._IO_FILE.1*, i8*, ...) @fprintf(%struct._IO_FILE.1* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6.5, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_zfree(i8* %0, i8* %1) #11 {
  %3 = bitcast i8* %0 to %struct.png_struct_def*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %3, i8* %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_free(%struct.png_struct_def.60* noalias %0, i8* %1) #11 {
  %3 = icmp eq %struct.png_struct_def.60* %0, null
  %4 = icmp eq i8* %1, null
  %or.cond = select i1 %3, i1 true, i1 %4
  br i1 %or.cond, label %16, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 126
  %7 = load void (%struct.png_struct_def.60*, i8*)*, void (%struct.png_struct_def.60*, i8*)** %6, align 8
  %8 = icmp ne void (%struct.png_struct_def.60*, i8*)* %7, null
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 126
  %11 = load void (%struct.png_struct_def.60*, i8*)*, void (%struct.png_struct_def.60*, i8*)** %10, align 8
  %12 = bitcast %struct.png_struct_def.60* %0 to i8*
  %13 = ptrtoint i8* %12 to i64
  %14 = inttoptr i64 %13 to %struct.png_struct_def.60*
  call void %11(%struct.png_struct_def.60* %14, i8* %1)
  br label %16

15:                                               ; preds = %5
  call void @png_free_default(%struct.png_struct_def.60* %0, i8* %1)
  br label %16

16:                                               ; preds = %2, %15, %9
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_free_default(%struct.png_struct_def.60* noalias %0, i8* %1) #11 {
  %3 = icmp eq %struct.png_struct_def.60* %0, null
  %4 = icmp eq i8* %1, null
  %or.cond = select i1 %3, i1 true, i1 %4
  br i1 %or.cond, label %6, label %5

5:                                                ; preds = %2
  call void @free(i8* %1) #22
  br label %6

6:                                                ; preds = %2, %5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_reset_crc(%struct.png_struct_def* noalias %0) #11 {
  %2 = call i64 @crc32(i64 0, i8* null, i32 0)
  %3 = trunc i64 %2 to i32
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 51
  store i32 %3, i32* %4, align 4
  ret void
}

declare i64 @crc32(i64, i8*, i32) #13

; Function Attrs: noinline nounwind uwtable
define void @png_calculate_crc(%struct.png_struct_def* noalias %0, i8* %1, i64 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %5 = load i32, i32* %4, align 8
  %6 = lshr i32 %5, 29
  %7 = and i32 1, %6
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 768
  %13 = icmp eq i32 %12, 768
  %spec.select = select i1 %13, i32 0, i32 1
  br label %19

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %16 = load i32, i32* %15, align 8
  %17 = and i32 %16, 2048
  %18 = icmp ne i32 %17, 0
  %spec.select5 = select i1 %18, i32 0, i32 1
  br label %19

19:                                               ; preds = %14, %9
  %.2 = phi i32 [ %spec.select, %9 ], [ %spec.select5, %14 ]
  %20 = icmp ne i32 %.2, 0
  %21 = icmp ugt i64 %2, 0
  %or.cond = select i1 %20, i1 %21, i1 false
  br i1 %or.cond, label %22, label %38

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 51
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  br label %26

26:                                               ; preds = %26, %22
  %.04 = phi i64 [ %25, %22 ], [ %29, %26 ]
  %.02 = phi i64 [ %2, %22 ], [ %33, %26 ]
  %.01 = phi i8* [ %1, %22 ], [ %31, %26 ]
  %27 = trunc i64 %.02 to i32
  %28 = icmp eq i32 %27, 0
  %spec.select6 = select i1 %28, i32 -1, i32 %27
  %29 = call i64 @crc32(i64 %.04, i8* %.01, i32 %spec.select6)
  %30 = zext i32 %spec.select6 to i64
  %31 = getelementptr inbounds i8, i8* %.01, i64 %30
  %32 = zext i32 %spec.select6 to i64
  %33 = sub i64 %.02, %32
  %34 = icmp ugt i64 %33, 0
  br i1 %34, label %26, label %35

35:                                               ; preds = %26
  %.lcssa = phi i64 [ %29, %26 ]
  %36 = trunc i64 %.lcssa to i32
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 51
  store i32 %36, i32* %37, align 4
  br label %38

38:                                               ; preds = %35, %19
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_user_version_check(%struct.png_struct_def* noalias %0, i8* %1) #11 {
  %3 = alloca [128 x i8], align 16
  %4 = icmp ne i8* %1, null
  br i1 %4, label %.preheader, label %26

.preheader:                                       ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  br label %6

6:                                                ; preds = %.preheader, %25
  %lsr.iv = phi i64 [ 0, %.preheader ], [ %lsr.iv.next, %25 ]
  %.01 = phi i32 [ %spec.select, %25 ], [ 0, %.preheader ]
  %scevgep6 = getelementptr i8, i8* %1, i64 %lsr.iv
  %7 = load i8, i8* %scevgep6, align 1
  %8 = sext i8 %7 to i32
  %scevgep7 = getelementptr [11 x i8], [11 x i8]* @.str.2.13, i64 0, i64 %lsr.iv
  %9 = load i8, i8* %scevgep7, align 1
  %10 = sext i8 %9 to i32
  %11 = icmp ne i32 %8, %10
  br i1 %11, label %12, label %15

12:                                               ; preds = %6
  %13 = load i32, i32* %5, align 8
  %14 = or i32 %13, 131072
  store i32 %14, i32* %5, align 8
  br label %15

15:                                               ; preds = %12, %6
  %scevgep5 = getelementptr i8, i8* %1, i64 %lsr.iv
  %16 = load i8, i8* %scevgep5, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp eq i32 %17, 46
  %19 = add nsw i32 %.01, 1
  %spec.select = select i1 %18, i32 %19, i32 %.01
  %20 = icmp slt i32 %spec.select, 2
  br i1 %20, label %21, label %.critedge.loopexit

21:                                               ; preds = %15
  %scevgep = getelementptr i8, i8* %1, i64 %lsr.iv
  %22 = load i8, i8* %scevgep, align 1
  %23 = sext i8 %22 to i32
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %.critedge.loopexit

25:                                               ; preds = %21
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 1
  %exitcond = icmp ne i64 %lsr.iv.next, 11
  br i1 %exitcond, label %6, label %.critedge.loopexit

26:                                               ; preds = %2
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %28 = load i32, i32* %27, align 8
  %29 = or i32 %28, 131072
  store i32 %29, i32* %27, align 8
  br label %.critedge

.critedge.loopexit:                               ; preds = %25, %21, %15
  br label %.critedge

.critedge:                                        ; preds = %.critedge.loopexit, %26
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %31 = load i32, i32* %30, align 8
  %32 = and i32 %31, 131072
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %44

34:                                               ; preds = %.critedge
  %35 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i32 0, i32 0
  %36 = call i64 @png_safecat(i8* %35, i64 128, i64 0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3.14, i32 0, i32 0))
  %37 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i32 0, i32 0
  %38 = call i64 @png_safecat(i8* %37, i64 128, i64 %36, i8* %1)
  %39 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i32 0, i32 0
  %40 = call i64 @png_safecat(i8* %39, i64 128, i64 %38, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4.15, i32 0, i32 0))
  %41 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i32 0, i32 0
  %42 = call i64 @png_safecat(i8* %41, i64 128, i64 %40, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2.13, i32 0, i32 0))
  %43 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i32 0, i32 0
  call void @png_warning(%struct.png_struct_def* %0, i8* %43)
  br label %44

44:                                               ; preds = %.critedge, %34
  %.0 = phi i32 [ 0, %34 ], [ 1, %.critedge ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i64 @png_safecat(i8* %0, i64 %1, i64 %2, i8* %3) #11 {
  %5 = icmp ne i8* %0, null
  %6 = icmp ult i64 %2, %1
  %or.cond = select i1 %5, i1 %6, i1 false
  br i1 %or.cond, label %7, label %26

7:                                                ; preds = %4
  %8 = icmp ne i8* %3, null
  br i1 %8, label %.preheader, label %24

.preheader:                                       ; preds = %7
  %9 = sub i64 %1, 1
  %10 = load i8, i8* %3, align 1
  %11 = sext i8 %10 to i32
  %12 = icmp ne i32 %11, 0
  %13 = icmp ult i64 %2, %9
  %14 = select i1 %12, i1 %13, i1 false
  br i1 %14, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  %scevgep = getelementptr i8, i8* %3, i64 1
  br label %15

15:                                               ; preds = %.lr.ph, %15
  %lsr.iv = phi i8* [ %scevgep, %.lr.ph ], [ %scevgep4, %15 ]
  %.012 = phi i64 [ %2, %.lr.ph ], [ %17, %15 ]
  %scevgep5 = getelementptr i8, i8* %lsr.iv, i64 -1
  %16 = load i8, i8* %scevgep5, align 1
  %17 = add nuw i64 %.012, 1
  %18 = add i64 %.012, 1
  %scevgep6 = getelementptr i8, i8* %0, i64 %.012
  store i8 %16, i8* %scevgep6, align 1
  %19 = load i8, i8* %lsr.iv, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp ne i32 %20, 0
  %22 = icmp ult i64 %18, %9
  %23 = select i1 %21, i1 %22, i1 false
  %scevgep4 = getelementptr i8, i8* %lsr.iv, i64 1
  br i1 %23, label %15, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %15
  %split = phi i64 [ %17, %15 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader
  %.1.ph = phi i64 [ %split, %..loopexit_crit_edge ], [ %2, %.preheader ]
  br label %24

24:                                               ; preds = %.loopexit, %7
  %.1 = phi i64 [ %2, %7 ], [ %.1.ph, %.loopexit ]
  %25 = getelementptr inbounds i8, i8* %0, i64 %.1
  store i8 0, i8* %25, align 1
  br label %26

26:                                               ; preds = %24, %4
  %.2 = phi i64 [ %.1, %24 ], [ %2, %4 ]
  ret i64 %.2
}

; Function Attrs: noinline nounwind uwtable
define noalias %struct.png_struct_def* @png_create_png_struct(i8* %0, i8* %1, void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)* %3, i8* %4, i8* (%struct.png_struct_def*, i64)* %5, void (%struct.png_struct_def*, i8*)* %6) #11 {
  %8 = alloca %struct.png_struct_def, align 8
  %9 = alloca [1 x %struct.__jmp_buf_tag], align 16
  %10 = bitcast %struct.png_struct_def* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 1256, i1 false)
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 132
  store i32 1000000, i32* %11, align 4
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 133
  store i32 1000000, i32* %12, align 8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 134
  store i32 1000, i32* %13, align 4
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 135
  store i64 8000000, i64* %14, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*, i8* (%struct.png_struct_def.60*, i64)*, void (%struct.png_struct_def.60*, i8*)*)* @png_set_mem_fn to void (%struct.png_struct_def*, i8*, i8* (%struct.png_struct_def*, i64)*, void (%struct.png_struct_def*, i8*)*)*)(%struct.png_struct_def* %8, i8* %4, i8* (%struct.png_struct_def*, i64)* %5, void (%struct.png_struct_def*, i8*)* %6)
  call void @png_set_error_fn(%struct.png_struct_def* %8, i8* %1, void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)* %3)
  %15 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %9, i32 0, i32 0
  %16 = call i32 @_setjmp(%struct.__jmp_buf_tag* %15) #23
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %41, label %18

18:                                               ; preds = %7
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 2
  store [1 x %struct.__jmp_buf_tag]* %9, [1 x %struct.__jmp_buf_tag]** %19, align 8
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 3
  store i64 0, i64* %20, align 8
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 1
  store void (%struct.__jmp_buf_tag*, i32)* @longjmp, void (%struct.__jmp_buf_tag*, i32)** %21, align 8
  %22 = call i32 @png_user_version_check(%struct.png_struct_def* %8, i8* %0)
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %41

24:                                               ; preds = %18
  %25 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %8, i64 1256)
  %26 = bitcast i8* %25 to %struct.png_struct_def*
  %27 = icmp ne %struct.png_struct_def* %26, null
  br i1 %27, label %28, label %41

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 19
  %30 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %29, i32 0, i32 8
  store i8* (i8*, i32, i32)* @png_zalloc, i8* (i8*, i32, i32)** %30, align 8
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 19
  %32 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %31, i32 0, i32 9
  store void (i8*, i8*)* @png_zfree, void (i8*, i8*)** %32, align 8
  %33 = bitcast %struct.png_struct_def* %26 to i8*
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 19
  %35 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %34, i32 0, i32 10
  store i8* %33, i8** %35, align 8
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 2
  store [1 x %struct.__jmp_buf_tag]* null, [1 x %struct.__jmp_buf_tag]** %36, align 8
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 3
  store i64 0, i64* %37, align 8
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 1
  store void (%struct.__jmp_buf_tag*, i32)* null, void (%struct.__jmp_buf_tag*, i32)** %38, align 8
  %39 = bitcast %struct.png_struct_def* %26 to i8*
  %40 = bitcast %struct.png_struct_def* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 1256, i1 false)
  br label %41

41:                                               ; preds = %7, %24, %18, %28
  %.0 = phi %struct.png_struct_def* [ %26, %28 ], [ null, %18 ], [ null, %24 ], [ null, %7 ]
  ret %struct.png_struct_def* %.0
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #18

; Function Attrs: noinline nounwind uwtable
define void @png_set_mem_fn(%struct.png_struct_def.60* noalias %0, i8* %1, i8* (%struct.png_struct_def.60*, i64)* %2, void (%struct.png_struct_def.60*, i8*)* %3) #11 {
  %5 = icmp ne %struct.png_struct_def.60* %0, null
  br i1 %5, label %6, label %10

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 124
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 125
  store i8* (%struct.png_struct_def.60*, i64)* %2, i8* (%struct.png_struct_def.60*, i64)** %8, align 8
  %9 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 126
  store void (%struct.png_struct_def.60*, i8*)* %3, void (%struct.png_struct_def.60*, i8*)** %9, align 8
  br label %10

10:                                               ; preds = %6, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_error_fn(%struct.png_struct_def* noalias %0, i8* %1, void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)* %3) #11 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 6
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 4
  store void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)** %8, align 8
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 5
  store void (%struct.png_struct_def*, i8*)* %3, void (%struct.png_struct_def*, i8*)** %9, align 8
  br label %10

10:                                               ; preds = %4, %6
  ret void
}

; Function Attrs: noreturn nounwind
declare void @longjmp(%struct.__jmp_buf_tag*, i32) #14

; Function Attrs: noinline nounwind uwtable
define noalias %struct.png_info_def* @png_create_info_struct(%struct.png_struct_def* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_base to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 360)
  %5 = bitcast i8* %4 to %struct.png_info_def*
  %6 = icmp ne %struct.png_info_def* %5, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = bitcast %struct.png_info_def* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 360, i1 false)
  br label %9

9:                                                ; preds = %3, %7, %1
  %.0 = phi %struct.png_info_def* [ null, %1 ], [ %5, %7 ], [ %5, %3 ]
  ret %struct.png_info_def* %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_destroy_info_struct(%struct.png_struct_def* noalias %0, %struct.png_info_def** %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %13, label %4

4:                                                ; preds = %2
  %5 = icmp ne %struct.png_info_def** %1, null
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = load %struct.png_info_def*, %struct.png_info_def** %1, align 8
  br label %8

8:                                                ; preds = %6, %4
  %.0 = phi %struct.png_info_def* [ %7, %6 ], [ null, %4 ]
  %9 = icmp ne %struct.png_info_def* %.0, null
  br i1 %9, label %10, label %13

10:                                               ; preds = %8
  store %struct.png_info_def* null, %struct.png_info_def** %1, align 8
  call void @png_free_data(%struct.png_struct_def* %0, %struct.png_info_def* %.0, i32 65535, i32 -1)
  %11 = bitcast %struct.png_info_def* %.0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 360, i1 false)
  %12 = bitcast %struct.png_info_def* %.0 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %12)
  br label %13

13:                                               ; preds = %2, %10, %8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_free_data(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2, i32 %3) #11 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %5, i1 true, i1 %6
  br i1 %or.cond, label %323, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %9 = load %struct.png_text_struct*, %struct.png_text_struct** %8, align 8
  %10 = icmp ne %struct.png_text_struct* %9, null
  br i1 %10, label %11, label %49

11:                                               ; preds = %7
  %12 = and i32 %2, 16384
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %12, %14
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %49

17:                                               ; preds = %11
  %18 = icmp ne i32 %3, -1
  br i1 %18, label %23, label %.preheader9

.preheader9:                                      ; preds = %17
  %19 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 20
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %21 = load i32, i32* %19, align 4
  %22 = icmp slt i32 0, %21
  br i1 %22, label %.lr.ph31, label %42

.lr.ph31:                                         ; preds = %.preheader9
  br label %35

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %25 = load %struct.png_text_struct*, %struct.png_text_struct** %24, align 8
  %26 = sext i32 %3 to i64
  %27 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %25, i64 %26
  %28 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %27, i32 0, i32 1
  %29 = load i8*, i8** %28, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %29)
  %30 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %31 = load %struct.png_text_struct*, %struct.png_text_struct** %30, align 8
  %32 = sext i32 %3 to i64
  %33 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %31, i64 %32
  %34 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %33, i32 0, i32 1
  store i8* null, i8** %34, align 8
  br label %49

35:                                               ; preds = %.lr.ph31, %35
  %lsr.iv46 = phi i64 [ 8, %.lr.ph31 ], [ %lsr.iv.next47, %35 ]
  %indvars.iv33 = phi i64 [ 0, %.lr.ph31 ], [ %indvars.iv.next34, %35 ]
  %36 = load %struct.png_text_struct*, %struct.png_text_struct** %20, align 8
  %37 = bitcast %struct.png_text_struct* %36 to i8*
  %uglygep48 = getelementptr i8, i8* %37, i64 %lsr.iv46
  %uglygep4849 = bitcast i8* %uglygep48 to i8**
  %38 = load i8*, i8** %uglygep4849, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %38)
  %indvars.iv.next34 = add nuw nsw i64 %indvars.iv33, 1
  %39 = load i32, i32* %19, align 4
  %40 = sext i32 %39 to i64
  %lsr.iv.next47 = add nuw nsw i64 %lsr.iv46, 56
  %41 = icmp slt i64 %indvars.iv.next34, %40
  br i1 %41, label %35, label %._crit_edge32

._crit_edge32:                                    ; preds = %35
  br label %42

42:                                               ; preds = %._crit_edge32, %.preheader9
  %43 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %44 = load %struct.png_text_struct*, %struct.png_text_struct** %43, align 8
  %45 = bitcast %struct.png_text_struct* %44 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %45)
  %46 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  store %struct.png_text_struct* null, %struct.png_text_struct** %46, align 8
  %47 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 20
  store i32 0, i32* %47, align 4
  %48 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 21
  store i32 0, i32* %48, align 8
  br label %49

49:                                               ; preds = %23, %42, %11, %7
  %50 = and i32 %2, 8192
  %51 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %52 = load i32, i32* %51, align 4
  %53 = and i32 %50, %52
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %63

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %57 = load i32, i32* %56, align 8
  %58 = and i32 %57, -17
  store i32 %58, i32* %56, align 8
  %59 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 25
  %60 = load i8*, i8** %59, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %60)
  %61 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 25
  store i8* null, i8** %61, align 8
  %62 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 6
  store i16 0, i16* %62, align 2
  br label %63

63:                                               ; preds = %55, %49
  %64 = and i32 %2, 256
  %65 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %66 = load i32, i32* %65, align 4
  %67 = and i32 %64, %66
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %69, label %79

69:                                               ; preds = %63
  %70 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 51
  %71 = load i8*, i8** %70, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %71)
  %72 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 52
  %73 = load i8*, i8** %72, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %73)
  %74 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 51
  store i8* null, i8** %74, align 8
  %75 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 52
  store i8* null, i8** %75, align 8
  %76 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %77 = load i32, i32* %76, align 8
  %78 = and i32 %77, -16385
  store i32 %78, i32* %76, align 8
  br label %79

79:                                               ; preds = %69, %63
  %80 = and i32 %2, 128
  %81 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %82 = load i32, i32* %81, align 4
  %83 = and i32 %80, %82
  %84 = icmp ne i32 %83, 0
  br i1 %84, label %85, label %116

85:                                               ; preds = %79
  %86 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 38
  %87 = load i8*, i8** %86, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %87)
  %88 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 41
  %89 = load i8*, i8** %88, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %89)
  %90 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 38
  store i8* null, i8** %90, align 8
  %91 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 41
  store i8* null, i8** %91, align 8
  %92 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 42
  %93 = load i8**, i8*** %92, align 8
  %94 = icmp ne i8** %93, null
  br i1 %94, label %.preheader8, label %112

.preheader8:                                      ; preds = %85
  %95 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 44
  %96 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 42
  %97 = load i8, i8* %95, align 1
  %98 = zext i8 %97 to i32
  %99 = icmp slt i32 0, %98
  br i1 %99, label %.lr.ph25, label %107

.lr.ph25:                                         ; preds = %.preheader8
  br label %100

100:                                              ; preds = %.lr.ph25, %100
  %indvars.iv27 = phi i64 [ 0, %.lr.ph25 ], [ %indvars.iv.next28, %100 ]
  %101 = load i8**, i8*** %96, align 8
  %scevgep45 = getelementptr i8*, i8** %101, i64 %indvars.iv27
  %102 = load i8*, i8** %scevgep45, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %102)
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 1
  %103 = load i8, i8* %95, align 1
  %104 = zext i8 %103 to i32
  %105 = zext i32 %104 to i64
  %106 = icmp ult i64 %indvars.iv.next28, %105
  br i1 %106, label %100, label %._crit_edge26

._crit_edge26:                                    ; preds = %100
  br label %107

107:                                              ; preds = %._crit_edge26, %.preheader8
  %108 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 42
  %109 = load i8**, i8*** %108, align 8
  %110 = bitcast i8** %109 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %110)
  %111 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 42
  store i8** null, i8*** %111, align 8
  br label %112

112:                                              ; preds = %107, %85
  %113 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %114 = load i32, i32* %113, align 8
  %115 = and i32 %114, -1025
  store i32 %115, i32* %113, align 8
  br label %116

116:                                              ; preds = %112, %79
  %117 = and i32 %2, 16
  %118 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %119 = load i32, i32* %118, align 4
  %120 = and i32 %117, %119
  %121 = icmp ne i32 %120, 0
  br i1 %121, label %122, label %132

122:                                              ; preds = %116
  %123 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 17
  %124 = load i8*, i8** %123, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %124)
  %125 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 18
  %126 = load i8*, i8** %125, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %126)
  %127 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 17
  store i8* null, i8** %127, align 8
  %128 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 18
  store i8* null, i8** %128, align 8
  %129 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %130 = load i32, i32* %129, align 8
  %131 = and i32 %130, -4097
  store i32 %131, i32* %129, align 8
  br label %132

132:                                              ; preds = %122, %116
  %133 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 48
  %134 = load %struct.png_sPLT_struct*, %struct.png_sPLT_struct** %133, align 8
  %135 = icmp ne %struct.png_sPLT_struct* %134, null
  br i1 %135, label %136, label %192

136:                                              ; preds = %132
  %137 = and i32 %2, 32
  %138 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %139 = load i32, i32* %138, align 4
  %140 = and i32 %137, %139
  %141 = icmp ne i32 %140, 0
  br i1 %141, label %142, label %192

142:                                              ; preds = %136
  %143 = icmp ne i32 %3, -1
  br i1 %143, label %149, label %.preheader7

.preheader7:                                      ; preds = %142
  %144 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 49
  %145 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 48
  %146 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 48
  %147 = load i32, i32* %144, align 8
  %148 = icmp slt i32 0, %147
  br i1 %148, label %.lr.ph19, label %183

.lr.ph19:                                         ; preds = %.preheader7
  br label %173

149:                                              ; preds = %142
  %150 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 48
  %151 = load %struct.png_sPLT_struct*, %struct.png_sPLT_struct** %150, align 8
  %152 = sext i32 %3 to i64
  %153 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %151, i64 %152
  %154 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %153, i32 0, i32 0
  %155 = load i8*, i8** %154, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %155)
  %156 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 48
  %157 = load %struct.png_sPLT_struct*, %struct.png_sPLT_struct** %156, align 8
  %158 = sext i32 %3 to i64
  %159 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %157, i64 %158
  %160 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %159, i32 0, i32 2
  %161 = load %struct.png_sPLT_entry_struct*, %struct.png_sPLT_entry_struct** %160, align 8
  %162 = bitcast %struct.png_sPLT_entry_struct* %161 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %162)
  %163 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 48
  %164 = load %struct.png_sPLT_struct*, %struct.png_sPLT_struct** %163, align 8
  %165 = sext i32 %3 to i64
  %166 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %164, i64 %165
  %167 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %166, i32 0, i32 0
  store i8* null, i8** %167, align 8
  %168 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 48
  %169 = load %struct.png_sPLT_struct*, %struct.png_sPLT_struct** %168, align 8
  %170 = sext i32 %3 to i64
  %171 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %169, i64 %170
  %172 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %171, i32 0, i32 2
  store %struct.png_sPLT_entry_struct* null, %struct.png_sPLT_entry_struct** %172, align 8
  br label %192

173:                                              ; preds = %.lr.ph19, %173
  %lsr.iv38 = phi i64 [ 0, %.lr.ph19 ], [ %lsr.iv.next39, %173 ]
  %indvars.iv21 = phi i64 [ 0, %.lr.ph19 ], [ %indvars.iv.next22, %173 ]
  %174 = load %struct.png_sPLT_struct*, %struct.png_sPLT_struct** %145, align 8
  %175 = bitcast %struct.png_sPLT_struct* %174 to i8*
  %uglygep = getelementptr i8, i8* %175, i64 %lsr.iv38
  %uglygep40 = bitcast i8* %uglygep to i8**
  %176 = load i8*, i8** %uglygep40, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %176)
  %177 = load %struct.png_sPLT_struct*, %struct.png_sPLT_struct** %146, align 8
  %scevgep41 = getelementptr %struct.png_sPLT_struct, %struct.png_sPLT_struct* %177, i64 0, i32 2
  %scevgep4142 = bitcast %struct.png_sPLT_entry_struct** %scevgep41 to i8*
  %uglygep43 = getelementptr i8, i8* %scevgep4142, i64 %lsr.iv38
  %uglygep4344 = bitcast i8* %uglygep43 to %struct.png_sPLT_entry_struct**
  %178 = load %struct.png_sPLT_entry_struct*, %struct.png_sPLT_entry_struct** %uglygep4344, align 8
  %179 = bitcast %struct.png_sPLT_entry_struct* %178 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %179)
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
  %180 = load i32, i32* %144, align 8
  %181 = sext i32 %180 to i64
  %lsr.iv.next39 = add nuw nsw i64 %lsr.iv38, 32
  %182 = icmp slt i64 %indvars.iv.next22, %181
  br i1 %182, label %173, label %._crit_edge20

._crit_edge20:                                    ; preds = %173
  br label %183

183:                                              ; preds = %._crit_edge20, %.preheader7
  %184 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 48
  %185 = load %struct.png_sPLT_struct*, %struct.png_sPLT_struct** %184, align 8
  %186 = bitcast %struct.png_sPLT_struct* %185 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %186)
  %187 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 48
  store %struct.png_sPLT_struct* null, %struct.png_sPLT_struct** %187, align 8
  %188 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 49
  store i32 0, i32* %188, align 8
  %189 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %190 = load i32, i32* %189, align 8
  %191 = and i32 %190, -8193
  store i32 %191, i32* %189, align 8
  br label %192

192:                                              ; preds = %149, %183, %136, %132
  %193 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 46
  %194 = load %struct.png_unknown_chunk_t*, %struct.png_unknown_chunk_t** %193, align 8
  %195 = icmp ne %struct.png_unknown_chunk_t* %194, null
  br i1 %195, label %196, label %232

196:                                              ; preds = %192
  %197 = and i32 %2, 512
  %198 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %199 = load i32, i32* %198, align 4
  %200 = and i32 %197, %199
  %201 = icmp ne i32 %200, 0
  br i1 %201, label %202, label %232

202:                                              ; preds = %196
  %203 = icmp ne i32 %3, -1
  br i1 %203, label %208, label %.preheader6

.preheader6:                                      ; preds = %202
  %204 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 47
  %205 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 46
  %206 = load i32, i32* %204, align 8
  %207 = icmp slt i32 0, %206
  br i1 %207, label %.lr.ph13, label %226

.lr.ph13:                                         ; preds = %.preheader6
  br label %220

208:                                              ; preds = %202
  %209 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 46
  %210 = load %struct.png_unknown_chunk_t*, %struct.png_unknown_chunk_t** %209, align 8
  %211 = sext i32 %3 to i64
  %212 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %210, i64 %211
  %213 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %212, i32 0, i32 1
  %214 = load i8*, i8** %213, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %214)
  %215 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 46
  %216 = load %struct.png_unknown_chunk_t*, %struct.png_unknown_chunk_t** %215, align 8
  %217 = sext i32 %3 to i64
  %218 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %216, i64 %217
  %219 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %218, i32 0, i32 1
  store i8* null, i8** %219, align 8
  br label %232

220:                                              ; preds = %.lr.ph13, %220
  %lsr.iv = phi i64 [ 8, %.lr.ph13 ], [ %lsr.iv.next, %220 ]
  %indvars.iv15 = phi i64 [ 0, %.lr.ph13 ], [ %indvars.iv.next16, %220 ]
  %221 = load %struct.png_unknown_chunk_t*, %struct.png_unknown_chunk_t** %205, align 8
  %scevgep36 = getelementptr %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %221, i64 0, i32 0, i64 %lsr.iv
  %scevgep3637 = bitcast i8* %scevgep36 to i8**
  %222 = load i8*, i8** %scevgep3637, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %222)
  %indvars.iv.next16 = add nuw nsw i64 %indvars.iv15, 1
  %223 = load i32, i32* %204, align 8
  %224 = sext i32 %223 to i64
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 32
  %225 = icmp slt i64 %indvars.iv.next16, %224
  br i1 %225, label %220, label %._crit_edge14

._crit_edge14:                                    ; preds = %220
  br label %226

226:                                              ; preds = %._crit_edge14, %.preheader6
  %227 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 46
  %228 = load %struct.png_unknown_chunk_t*, %struct.png_unknown_chunk_t** %227, align 8
  %229 = bitcast %struct.png_unknown_chunk_t* %228 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %229)
  %230 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 46
  store %struct.png_unknown_chunk_t* null, %struct.png_unknown_chunk_t** %230, align 8
  %231 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 47
  store i32 0, i32* %231, align 8
  br label %232

232:                                              ; preds = %208, %226, %196, %192
  %233 = and i32 %2, 32768
  %234 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %235 = load i32, i32* %234, align 4
  %236 = and i32 %233, %235
  %237 = icmp ne i32 %236, 0
  br i1 %237, label %238, label %258

238:                                              ; preds = %232
  call void (...) @magma_bug006()
  %239 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 36
  %240 = load i8*, i8** %239, align 8
  %241 = icmp ne i8* %240, null
  br i1 %241, label %242, label %246

242:                                              ; preds = %238
  %243 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 36
  %244 = load i8*, i8** %243, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %244)
  %245 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 36
  store i8* null, i8** %245, align 8
  br label %246

246:                                              ; preds = %242, %238
  %247 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 35
  %248 = load i8*, i8** %247, align 8
  %249 = icmp ne i8* %248, null
  br i1 %249, label %250, label %254

250:                                              ; preds = %246
  %251 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 35
  %252 = load i8*, i8** %251, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %252)
  %253 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 35
  store i8* null, i8** %253, align 8
  br label %254

254:                                              ; preds = %250, %246
  %255 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %256 = load i32, i32* %255, align 8
  %257 = and i32 %256, -65537
  store i32 %257, i32* %255, align 8
  br label %258

258:                                              ; preds = %254, %232
  %259 = and i32 %2, 8
  %260 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %261 = load i32, i32* %260, align 4
  %262 = and i32 %259, %261
  %263 = icmp ne i32 %262, 0
  br i1 %263, label %264, label %272

264:                                              ; preds = %258
  %265 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 37
  %266 = load i16*, i16** %265, align 8
  %267 = bitcast i16* %266 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %267)
  %268 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 37
  store i16* null, i16** %268, align 8
  %269 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %270 = load i32, i32* %269, align 8
  %271 = and i32 %270, -65
  store i32 %271, i32* %269, align 8
  br label %272

272:                                              ; preds = %264, %258
  %273 = and i32 %2, 4096
  %274 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %275 = load i32, i32* %274, align 4
  %276 = and i32 %273, %275
  %277 = icmp ne i32 %276, 0
  br i1 %277, label %278, label %287

278:                                              ; preds = %272
  %279 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 4
  %280 = load %struct.png_color_struct*, %struct.png_color_struct** %279, align 8
  %281 = bitcast %struct.png_color_struct* %280 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %281)
  %282 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 4
  store %struct.png_color_struct* null, %struct.png_color_struct** %282, align 8
  %283 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %284 = load i32, i32* %283, align 8
  %285 = and i32 %284, -9
  store i32 %285, i32* %283, align 8
  %286 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 5
  store i16 0, i16* %286, align 8
  br label %287

287:                                              ; preds = %278, %272
  %288 = and i32 %2, 64
  %289 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %290 = load i32, i32* %289, align 4
  %291 = and i32 %288, %290
  %292 = icmp ne i32 %291, 0
  br i1 %292, label %293, label %316

293:                                              ; preds = %287
  %294 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 53
  %295 = load i8**, i8*** %294, align 8
  %296 = icmp ne i8** %295, null
  br i1 %296, label %.preheader, label %312

.preheader:                                       ; preds = %293
  %297 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 1
  %298 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 53
  %299 = load i32, i32* %297, align 4
  %300 = icmp ult i32 0, %299
  br i1 %300, label %.lr.ph, label %307

.lr.ph:                                           ; preds = %.preheader
  br label %301

301:                                              ; preds = %.lr.ph, %301
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %301 ]
  %302 = load i8**, i8*** %298, align 8
  %scevgep = getelementptr i8*, i8** %302, i64 %indvars.iv
  %303 = load i8*, i8** %scevgep, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %303)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %304 = load i32, i32* %297, align 4
  %305 = zext i32 %304 to i64
  %306 = icmp ult i64 %indvars.iv.next, %305
  br i1 %306, label %301, label %._crit_edge

._crit_edge:                                      ; preds = %301
  br label %307

307:                                              ; preds = %._crit_edge, %.preheader
  %308 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 53
  %309 = load i8**, i8*** %308, align 8
  %310 = bitcast i8** %309 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %310)
  %311 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 53
  store i8** null, i8*** %311, align 8
  br label %312

312:                                              ; preds = %307, %293
  %313 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %314 = load i32, i32* %313, align 8
  %315 = and i32 %314, -32769
  store i32 %315, i32* %313, align 8
  br label %316

316:                                              ; preds = %312, %287
  %317 = icmp ne i32 %3, -1
  %318 = and i32 %2, -16929
  %spec.select = select i1 %317, i32 %318, i32 %2
  %319 = xor i32 %spec.select, -1
  %320 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %321 = load i32, i32* %320, align 4
  %322 = and i32 %321, %319
  store i32 %322, i32* %320, align 4
  br label %323

323:                                              ; preds = %4, %316
  ret void
}

declare void @magma_bug006(...) #13

; Function Attrs: noinline nounwind uwtable
define void @png_info_init_3(%struct.png_info_def** %0, i64 %1) #11 {
  %3 = load %struct.png_info_def*, %struct.png_info_def** %0, align 8
  %4 = icmp eq %struct.png_info_def* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %2
  %6 = icmp ugt i64 360, %1
  br i1 %6, label %7, label %13

7:                                                ; preds = %5
  store %struct.png_info_def* null, %struct.png_info_def** %0, align 8
  %8 = bitcast %struct.png_info_def* %3 to i8*
  call void @free(i8* %8) #22
  %9 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_base to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* null, i64 360)
  %10 = bitcast i8* %9 to %struct.png_info_def*
  %11 = icmp eq %struct.png_info_def* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %7
  store %struct.png_info_def* %10, %struct.png_info_def** %0, align 8
  br label %13

13:                                               ; preds = %12, %5
  %.0 = phi %struct.png_info_def* [ %10, %12 ], [ %3, %5 ]
  %14 = bitcast %struct.png_info_def* %.0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 360, i1 false)
  br label %15

15:                                               ; preds = %7, %2, %13
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_data_freer(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2, i32 %3) #11 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %5, i1 true, i1 %6
  br i1 %or.cond, label %18, label %7

7:                                                ; preds = %4
  switch i32 %2, label %17 [
    i32 1, label %8
    i32 2, label %12
  ]

8:                                                ; preds = %7
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %10 = load i32, i32* %9, align 4
  %11 = or i32 %10, %3
  store i32 %11, i32* %9, align 4
  br label %18

12:                                               ; preds = %7
  %13 = xor i32 %3, -1
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %15, %13
  store i32 %16, i32* %14, align 4
  br label %18

17:                                               ; preds = %7
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5.18, i32 0, i32 0)) #24
  unreachable

18:                                               ; preds = %4, %12, %8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i8* @png_get_io_ptr(%struct.png_struct_def* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 9
  %5 = load i8*, i8** %4, align 8
  br label %6

6:                                                ; preds = %1, %3
  %.0 = phi i8* [ %5, %3 ], [ null, %1 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_init_io(%struct.png_struct_def* noalias %0, %struct._IO_FILE.1* %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %2
  %5 = bitcast %struct._IO_FILE.1* %1 to i8*
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 9
  store i8* %5, i8** %6, align 8
  br label %7

7:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_save_int_32(i8* %0, i32 %1) #11 {
  call void @png_save_uint_32(i8* %0, i32 %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_save_uint_32(i8* %0, i32 %1) #11 {
  %3 = lshr i32 %1, 24
  %4 = and i32 %3, 255
  %5 = trunc i32 %4 to i8
  %6 = getelementptr inbounds i8, i8* %0, i64 0
  store i8 %5, i8* %6, align 1
  %7 = lshr i32 %1, 16
  %8 = and i32 %7, 255
  %9 = trunc i32 %8 to i8
  %10 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %9, i8* %10, align 1
  %11 = lshr i32 %1, 8
  %12 = and i32 %11, 255
  %13 = trunc i32 %12 to i8
  %14 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %13, i8* %14, align 1
  %15 = and i32 %1, 255
  %16 = trunc i32 %15 to i8
  %17 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %16, i8* %17, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_convert_to_rfc1123_buffer(i8* %0, %struct.png_time_struct* %1) #11 {
  %3 = alloca [5 x i8], align 1
  %4 = icmp eq i8* %0, null
  br i1 %4, label %124, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 0
  %7 = load i16, i16* %6, align 2
  %8 = zext i16 %7 to i32
  %9 = icmp sgt i32 %8, 9999
  br i1 %9, label %124, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 1
  %12 = load i8, i8* %11, align 2
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %124, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 1
  %17 = load i8, i8* %16, align 2
  %18 = zext i8 %17 to i32
  %19 = icmp sgt i32 %18, 12
  br i1 %19, label %124, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 2
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %124, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = icmp sgt i32 %28, 31
  br i1 %29, label %124, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 3
  %32 = load i8, i8* %31, align 2
  %33 = zext i8 %32 to i32
  %34 = icmp sgt i32 %33, 23
  br i1 %34, label %124, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 4
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = icmp sgt i32 %38, 59
  br i1 %39, label %124, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 5
  %42 = load i8, i8* %41, align 2
  %43 = zext i8 %42 to i32
  %44 = icmp sgt i32 %43, 60
  br i1 %44, label %124, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %47 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %48 = getelementptr inbounds i8, i8* %47, i64 5
  %49 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 2
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = zext i32 %51 to i64
  %53 = call i8* @png_format_number(i8* %46, i8* %48, i32 1, i64 %52)
  %54 = call i64 @png_safecat(i8* %0, i64 29, i64 0, i8* %53)
  %55 = icmp ult i64 %54, 28
  br i1 %55, label %56, label %59

56:                                               ; preds = %45
  %57 = add i64 %54, 1
  %58 = getelementptr inbounds i8, i8* %0, i64 %54
  store i8 32, i8* %58, align 1
  br label %59

59:                                               ; preds = %56, %45
  %.01 = phi i64 [ %57, %56 ], [ %54, %45 ]
  %60 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 1
  %61 = load i8, i8* %60, align 2
  %62 = zext i8 %61 to i32
  %63 = sub nsw i32 %62, 1
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [12 x [4 x i8]], [12 x [4 x i8]]* @png_convert_to_rfc1123_buffer.short_months, i64 0, i64 %64
  %66 = getelementptr inbounds [4 x i8], [4 x i8]* %65, i32 0, i32 0
  %67 = call i64 @png_safecat(i8* %0, i64 29, i64 %.01, i8* %66)
  %68 = icmp ult i64 %67, 28
  br i1 %68, label %69, label %72

69:                                               ; preds = %59
  %70 = add i64 %67, 1
  %71 = getelementptr inbounds i8, i8* %0, i64 %67
  store i8 32, i8* %71, align 1
  br label %72

72:                                               ; preds = %69, %59
  %.1 = phi i64 [ %70, %69 ], [ %67, %59 ]
  %73 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %74 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %75 = getelementptr inbounds i8, i8* %74, i64 5
  %76 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 0
  %77 = load i16, i16* %76, align 2
  %78 = zext i16 %77 to i64
  %79 = call i8* @png_format_number(i8* %73, i8* %75, i32 1, i64 %78)
  %80 = call i64 @png_safecat(i8* %0, i64 29, i64 %.1, i8* %79)
  %81 = icmp ult i64 %80, 28
  br i1 %81, label %82, label %85

82:                                               ; preds = %72
  %83 = add i64 %80, 1
  %84 = getelementptr inbounds i8, i8* %0, i64 %80
  store i8 32, i8* %84, align 1
  br label %85

85:                                               ; preds = %82, %72
  %.2 = phi i64 [ %83, %82 ], [ %80, %72 ]
  %86 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %87 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %88 = getelementptr inbounds i8, i8* %87, i64 5
  %89 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 3
  %90 = load i8, i8* %89, align 2
  %91 = zext i8 %90 to i32
  %92 = zext i32 %91 to i64
  %93 = call i8* @png_format_number(i8* %86, i8* %88, i32 2, i64 %92)
  %94 = call i64 @png_safecat(i8* %0, i64 29, i64 %.2, i8* %93)
  %95 = icmp ult i64 %94, 28
  br i1 %95, label %96, label %99

96:                                               ; preds = %85
  %97 = add i64 %94, 1
  %98 = getelementptr inbounds i8, i8* %0, i64 %94
  store i8 58, i8* %98, align 1
  br label %99

99:                                               ; preds = %96, %85
  %.3 = phi i64 [ %97, %96 ], [ %94, %85 ]
  %100 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %101 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %102 = getelementptr inbounds i8, i8* %101, i64 5
  %103 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 4
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = zext i32 %105 to i64
  %107 = call i8* @png_format_number(i8* %100, i8* %102, i32 2, i64 %106)
  %108 = call i64 @png_safecat(i8* %0, i64 29, i64 %.3, i8* %107)
  %109 = icmp ult i64 %108, 28
  br i1 %109, label %110, label %113

110:                                              ; preds = %99
  %111 = add i64 %108, 1
  %112 = getelementptr inbounds i8, i8* %0, i64 %108
  store i8 58, i8* %112, align 1
  br label %113

113:                                              ; preds = %110, %99
  %.4 = phi i64 [ %111, %110 ], [ %108, %99 ]
  %114 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %115 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %116 = getelementptr inbounds i8, i8* %115, i64 5
  %117 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 5
  %118 = load i8, i8* %117, align 2
  %119 = zext i8 %118 to i32
  %120 = zext i32 %119 to i64
  %121 = call i8* @png_format_number(i8* %114, i8* %116, i32 2, i64 %120)
  %122 = call i64 @png_safecat(i8* %0, i64 29, i64 %.4, i8* %121)
  %123 = call i64 @png_safecat(i8* %0, i64 29, i64 %122, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6.22, i32 0, i32 0))
  br label %124

124:                                              ; preds = %5, %10, %15, %20, %25, %30, %35, %40, %2, %113
  %.0 = phi i32 [ 1, %113 ], [ 0, %2 ], [ 0, %40 ], [ 0, %35 ], [ 0, %30 ], [ 0, %25 ], [ 0, %20 ], [ 0, %15 ], [ 0, %10 ], [ 0, %5 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i8* @png_format_number(i8* %0, i8* %1, i32 %2, i64 %3) #11 {
  %5 = getelementptr inbounds i8, i8* %1, i32 -1
  store i8 0, i8* %5, align 1
  %6 = icmp eq i32 %2, 5
  %7 = icmp ugt i8* %5, %0
  br i1 %7, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %4
  br label %8

8:                                                ; preds = %.lr.ph, %48
  %.018 = phi i32 [ 0, %.lr.ph ], [ %.2, %48 ]
  %.0117 = phi i8* [ %5, %.lr.ph ], [ %.5, %48 ]
  %.0416 = phi i32 [ 1, %.lr.ph ], [ %.37, %48 ]
  %.0815 = phi i64 [ %3, %.lr.ph ], [ %.19, %48 ]
  %.01014 = phi i32 [ 0, %.lr.ph ], [ %50, %48 ]
  %9 = icmp ne i64 %.0815, 0
  %10 = icmp slt i32 %.01014, %.0416
  %spec.select = select i1 %9, i1 true, i1 %10
  br i1 %spec.select, label %11, label %..critedge_crit_edge19

11:                                               ; preds = %8
  switch i32 %2, label %37 [
    i32 5, label %12
    i32 2, label %23
    i32 1, label %24
    i32 4, label %30
    i32 3, label %31
  ]

12:                                               ; preds = %11
  %13 = icmp ne i32 %.018, 0
  %14 = urem i64 %.0815, 10
  %15 = icmp ne i64 %14, 0
  %or.cond = select i1 %13, i1 true, i1 %15
  br i1 %or.cond, label %16, label %21

16:                                               ; preds = %12
  %17 = urem i64 %.0815, 10
  %18 = getelementptr inbounds [17 x i8], [17 x i8]* @png_format_number.digits, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds i8, i8* %.0117, i32 -1
  store i8 %19, i8* %20, align 1
  br label %21

21:                                               ; preds = %12, %16
  %.12 = phi i8* [ %20, %16 ], [ %.0117, %12 ]
  %.1 = phi i32 [ 1, %16 ], [ %.018, %12 ]
  %22 = udiv i64 %.0815, 10
  br label %37

23:                                               ; preds = %11
  br label %24

24:                                               ; preds = %11, %23
  %.15 = phi i32 [ %.0416, %11 ], [ 2, %23 ]
  %25 = urem i64 %.0815, 10
  %26 = getelementptr inbounds [17 x i8], [17 x i8]* @png_format_number.digits, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds i8, i8* %.0117, i32 -1
  store i8 %27, i8* %28, align 1
  %29 = udiv i64 %.0815, 10
  br label %37

30:                                               ; preds = %11
  br label %31

31:                                               ; preds = %11, %30
  %.26 = phi i32 [ %.0416, %11 ], [ 2, %30 ]
  %32 = and i64 %.0815, 15
  %33 = getelementptr inbounds [17 x i8], [17 x i8]* @png_format_number.digits, i64 0, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds i8, i8* %.0117, i32 -1
  store i8 %34, i8* %35, align 1
  %36 = lshr i64 %.0815, 4
  br label %37

37:                                               ; preds = %11, %31, %24, %21
  %.19 = phi i64 [ %36, %31 ], [ %29, %24 ], [ %22, %21 ], [ 0, %11 ]
  %.37 = phi i32 [ %.26, %31 ], [ %.15, %24 ], [ 5, %21 ], [ %.0416, %11 ]
  %.23 = phi i8* [ %35, %31 ], [ %28, %24 ], [ %.12, %21 ], [ %.0117, %11 ]
  %.2 = phi i32 [ %.018, %31 ], [ %.018, %24 ], [ %.1, %21 ], [ %.018, %11 ]
  %38 = icmp eq i32 %.01014, 4
  %or.cond12 = select i1 %6, i1 %38, i1 false
  %39 = icmp ugt i8* %.23, %0
  %or.cond13 = select i1 %or.cond12, i1 %39, i1 false
  br i1 %or.cond13, label %40, label %48

40:                                               ; preds = %37
  %41 = icmp ne i32 %.2, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %40
  %43 = getelementptr inbounds i8, i8* %.23, i32 -1
  store i8 46, i8* %43, align 1
  br label %48

44:                                               ; preds = %40
  %45 = icmp eq i64 %.19, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %44
  %47 = getelementptr inbounds i8, i8* %.23, i32 -1
  store i8 48, i8* %47, align 1
  br label %48

48:                                               ; preds = %42, %46, %44, %37
  %.5 = phi i8* [ %.23, %37 ], [ %43, %42 ], [ %47, %46 ], [ %.23, %44 ]
  %49 = icmp ugt i8* %.5, %0
  %50 = add nuw nsw i32 %.01014, 1
  br i1 %49, label %8, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %48
  %split = phi i8* [ %.5, %48 ]
  br label %.critedge

..critedge_crit_edge19:                           ; preds = %8
  %split20 = phi i8* [ %.0117, %8 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge19, %..critedge_crit_edge, %4
  %.01.lcssa = phi i8* [ %split, %..critedge_crit_edge ], [ %split20, %..critedge_crit_edge19 ], [ %5, %4 ]
  ret i8* %.01.lcssa
}

; Function Attrs: noinline nounwind uwtable
define i8* @png_convert_to_rfc1123(%struct.png_struct_def* noalias %0, %struct.png_time_struct* %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  br i1 %3, label %4, label %13

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 111
  %6 = getelementptr inbounds [29 x i8], [29 x i8]* %5, i32 0, i32 0
  %7 = call i32 @png_convert_to_rfc1123_buffer(i8* %6, %struct.png_time_struct* %1)
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7.23, i32 0, i32 0))
  br label %13

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 111
  %12 = getelementptr inbounds [29 x i8], [29 x i8]* %11, i32 0, i32 0
  br label %13

13:                                               ; preds = %2, %9, %10
  %.0 = phi i8* [ %12, %10 ], [ null, %9 ], [ null, %2 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define i8* @png_get_copyright(%struct.png_struct_def* noalias %0) #11 {
  ret i8* getelementptr inbounds ([223 x i8], [223 x i8]* @.str.8.24, i32 0, i32 0)
}

; Function Attrs: noinline nounwind uwtable
define i8* @png_get_libpng_ver(%struct.png_struct_def* noalias %0) #11 {
  %2 = call i8* @png_get_header_ver(%struct.png_struct_def* %0)
  ret i8* %2
}

; Function Attrs: noinline nounwind uwtable
define i8* @png_get_header_ver(%struct.png_struct_def* noalias %0) #11 {
  ret i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2.13, i32 0, i32 0)
}

; Function Attrs: noinline nounwind uwtable
define i8* @png_get_header_version(%struct.png_struct_def* noalias %0) #11 {
  ret i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9.25, i32 0, i32 0)
}

; Function Attrs: noinline nounwind uwtable
define void @png_build_grayscale_palette(i32 %0, %struct.png_color_struct* %1) #11 {
  %3 = icmp eq %struct.png_color_struct* %1, null
  br i1 %3, label %20, label %4

4:                                                ; preds = %2
  switch i32 %0, label %8 [
    i32 1, label %9
    i32 2, label %5
    i32 4, label %6
    i32 8, label %7
  ]

5:                                                ; preds = %4
  br label %9

6:                                                ; preds = %4
  br label %9

7:                                                ; preds = %4
  br label %9

8:                                                ; preds = %4
  br label %9

9:                                                ; preds = %4, %8, %7, %6, %5
  %.03 = phi i32 [ 0, %8 ], [ 1, %7 ], [ 17, %6 ], [ 85, %5 ], [ 255, %4 ]
  %.02 = phi i32 [ 0, %8 ], [ 256, %7 ], [ 16, %6 ], [ 4, %5 ], [ 2, %4 ]
  %10 = icmp slt i32 0, %.02
  br i1 %10, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %9
  %wide.trip.count = zext i32 %.02 to i64
  %scevgep = getelementptr %struct.png_color_struct, %struct.png_color_struct* %1, i64 0, i32 2
  %11 = mul nuw nsw i64 %wide.trip.count, 3
  br label %12

12:                                               ; preds = %.lr.ph, %12
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %12 ]
  %.05 = phi i32 [ 0, %.lr.ph ], [ %19, %12 ]
  %13 = and i32 %.05, 255
  %14 = trunc i32 %13 to i8
  %scevgep7 = getelementptr i8, i8* %scevgep, i64 %lsr.iv
  %scevgep8 = getelementptr i8, i8* %scevgep7, i64 -2
  store i8 %14, i8* %scevgep8, align 1
  %15 = and i32 %.05, 255
  %16 = trunc i32 %15 to i8
  %scevgep9 = getelementptr i8, i8* %scevgep, i64 %lsr.iv
  %scevgep10 = getelementptr i8, i8* %scevgep9, i64 -1
  store i8 %16, i8* %scevgep10, align 1
  %17 = and i32 %.05, 255
  %18 = trunc i32 %17 to i8
  %scevgep11 = getelementptr i8, i8* %scevgep, i64 %lsr.iv
  store i8 %18, i8* %scevgep11, align 1
  %19 = add nuw nsw i32 %.05, %.03
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 3
  %exitcond = icmp ne i64 %11, %lsr.iv.next
  br i1 %exitcond, label %12, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %12
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %9
  br label %20

20:                                               ; preds = %.loopexit, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_handle_as_unknown(%struct.png_struct_def* noalias %0, i8* %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  %4 = icmp eq i8* %1, null
  %or.cond = select i1 %3, i1 true, i1 %4
  br i1 %or.cond, label %27, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 116
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %27, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 117
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 116
  %13 = load i32, i32* %12, align 4
  %14 = mul i32 %13, 5
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %11, i64 %15
  br label %17

17:                                               ; preds = %25, %9
  %.01 = phi i8* [ %16, %9 ], [ %18, %25 ]
  %18 = getelementptr inbounds i8, i8* %.01, i64 -5
  %scevgep = getelementptr i8, i8* %.01, i64 -5
  %19 = call i32 @memcmp(i8* %1, i8* %scevgep, i64 4) #26
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %25

21:                                               ; preds = %17
  %.lcssa = phi i8* [ %scevgep, %17 ]
  %22 = getelementptr inbounds i8, i8* %.lcssa, i64 4
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  br label %27

25:                                               ; preds = %17
  %26 = icmp ugt i8* %18, %11
  br i1 %26, label %17, label %.loopexit

.loopexit:                                        ; preds = %25
  %.0.ph = phi i32 [ 0, %25 ]
  br label %27

27:                                               ; preds = %.loopexit, %2, %5, %21
  %.0 = phi i32 [ %24, %21 ], [ 0, %5 ], [ 0, %2 ], [ %.0.ph, %.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_chunk_unknown_handling(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = alloca [5 x i8], align 1
  %4 = lshr i32 %1, 24
  %5 = and i32 %4, 255
  %6 = trunc i32 %5 to i8
  %7 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %8 = getelementptr inbounds i8, i8* %7, i64 0
  store i8 %6, i8* %8, align 1
  %9 = lshr i32 %1, 16
  %10 = and i32 %9, 255
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8 %11, i8* %13, align 1
  %14 = lshr i32 %1, 8
  %15 = and i32 %14, 255
  %16 = trunc i32 %15 to i8
  %17 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %18 = getelementptr inbounds i8, i8* %17, i64 2
  store i8 %16, i8* %18, align 1
  %19 = and i32 %1, 255
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %22 = getelementptr inbounds i8, i8* %21, i64 3
  store i8 %20, i8* %22, align 1
  %23 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %24 = getelementptr inbounds i8, i8* %23, i64 4
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i32 0, i32 0
  %26 = call i32 @png_handle_as_unknown(%struct.png_struct_def* %0, i8* %25)
  ret i32 %26
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_reset_zstream(%struct.png_struct_def* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %5 = call i32 @inflateReset(%struct.z_stream_s* %4)
  br label %6

6:                                                ; preds = %1, %3
  %.0 = phi i32 [ %5, %3 ], [ -2, %1 ]
  ret i32 %.0
}

declare i32 @inflateReset(%struct.z_stream_s*) #13

; Function Attrs: noinline nounwind uwtable
define i32 @png_access_version_number() #11 {
  ret i32 10638
}

; Function Attrs: noinline nounwind uwtable
define void @png_zstream_error(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %4 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %3, i32 0, i32 6
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %38

7:                                                ; preds = %2
  switch i32 %1, label %8 [
    i32 -7, label %35
    i32 1, label %11
    i32 2, label %14
    i32 -1, label %17
    i32 -2, label %20
    i32 -3, label %23
    i32 -4, label %26
    i32 -5, label %29
    i32 -6, label %32
  ]

8:                                                ; preds = %7
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %10 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %9, i32 0, i32 6
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.10, i32 0, i32 0), i8** %10, align 8
  br label %38

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %13 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %12, i32 0, i32 6
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i32 0, i32 0), i8** %13, align 8
  br label %38

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %16 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %15, i32 0, i32 6
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i32 0, i32 0), i8** %16, align 8
  br label %38

17:                                               ; preds = %7
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %19 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %18, i32 0, i32 6
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0), i8** %19, align 8
  br label %38

20:                                               ; preds = %7
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %22 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %21, i32 0, i32 6
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14, i32 0, i32 0), i8** %22, align 8
  br label %38

23:                                               ; preds = %7
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %25 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %24, i32 0, i32 6
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.15.26, i32 0, i32 0), i8** %25, align 8
  br label %38

26:                                               ; preds = %7
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %28 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %27, i32 0, i32 6
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i32 0, i32 0), i8** %28, align 8
  br label %38

29:                                               ; preds = %7
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %31 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %30, i32 0, i32 6
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i32 0, i32 0), i8** %31, align 8
  br label %38

32:                                               ; preds = %7
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %34 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %33, i32 0, i32 6
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.18, i32 0, i32 0), i8** %34, align 8
  br label %38

35:                                               ; preds = %7
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %37 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %36, i32 0, i32 6
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19, i32 0, i32 0), i8** %37, align 8
  br label %38

38:                                               ; preds = %8, %11, %14, %17, %20, %23, %26, %29, %32, %35, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_colorspace_set_gamma(%struct.png_struct_def* noalias %0, %struct.png_colorspace* noalias %1, i32 %2) #11 {
  %4 = icmp slt i32 %2, 16
  %5 = icmp sgt i32 %2, 625000000
  %or.cond = or i1 %4, %5
  br i1 %or.cond, label %33, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 32768
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %13 = load i16, i16* %12, align 2
  %14 = zext i16 %13 to i32
  %15 = and i32 %14, 8
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %33, label %17

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = and i32 %20, 32768
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %39, label %23

23:                                               ; preds = %17
  %24 = call i32 @png_colorspace_check_gamma(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i32 %2, i32 1)
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %39

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 0
  store i32 %2, i32* %27, align 4
  %28 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = or i32 %30, 9
  %32 = trunc i32 %31 to i16
  store i16 %32, i16* %28, align 2
  br label %39

33:                                               ; preds = %11, %3
  %.0 = phi i8* [ getelementptr inbounds ([25 x i8], [25 x i8]* @.str.20, i32 0, i32 0), %3 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), %11 ]
  %34 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = or i32 %36, 32768
  %38 = trunc i32 %37 to i16
  store i16 %38, i16* %34, align 2
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* %.0, i32 1)
  br label %39

39:                                               ; preds = %23, %26, %17, %33
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_colorspace_check_gamma(%struct.png_struct_def* noalias %0, %struct.png_colorspace* noalias %1, i32 %2, i32 %3) #11 {
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %7 = load i16, i16* %6, align 2
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 1
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %33

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = call i32 @png_muldiv(i32* %5, i32 %13, i32 100000, i32 %2)
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %11
  %17 = load i32, i32* %5, align 4
  %18 = call i32 @png_gamma_significant(i32 %17)
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %33

20:                                               ; preds = %16, %11
  %21 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = and i32 %23, 32
  %25 = icmp ne i32 %24, 0
  %26 = icmp eq i32 %3, 2
  %or.cond = select i1 %25, i1 true, i1 %26
  br i1 %or.cond, label %27, label %30

27:                                               ; preds = %20
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.68, i32 0, i32 0), i32 2)
  %28 = icmp eq i32 %3, 2
  %29 = zext i1 %28 to i32
  br label %33

30:                                               ; preds = %20
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.69, i32 0, i32 0), i32 0)
  %31 = icmp eq i32 %3, 1
  %32 = zext i1 %31 to i32
  br label %33

33:                                               ; preds = %4, %16, %30, %27
  %.0 = phi i32 [ %29, %27 ], [ %32, %30 ], [ 1, %16 ], [ 1, %4 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_chunk_report(%struct.png_struct_def* noalias %0, i8* %1, i32 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 32768
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = icmp slt i32 %2, 2
  br i1 %9, label %10, label %11

10:                                               ; preds = %8
  call void @png_chunk_warning(%struct.png_struct_def* %0, i8* %1)
  br label %21

11:                                               ; preds = %8
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* %1)
  br label %21

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 32768
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %21

17:                                               ; preds = %12
  %18 = icmp slt i32 %2, 1
  br i1 %18, label %19, label %20

19:                                               ; preds = %17
  call void @png_app_warning(%struct.png_struct_def* %0, i8* %1)
  br label %21

20:                                               ; preds = %17
  call void @png_app_error(%struct.png_struct_def* %0, i8* %1)
  br label %21

21:                                               ; preds = %12, %20, %19, %10, %11
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_chunk_warning(%struct.png_struct_def* noalias %0, i8* %1) #11 {
  %3 = alloca [214 x i8], align 16
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  call void @png_warning(%struct.png_struct_def* %0, i8* %1)
  br label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i32 0, i32 0
  call void @png_format_buffer(%struct.png_struct_def* %0, i8* %7, i8* %1)
  %8 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i32 0, i32 0
  call void @png_warning(%struct.png_struct_def* %0, i8* %8)
  br label %9

9:                                                ; preds = %6, %5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_chunk_benign_error(%struct.png_struct_def* noalias %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 1048576
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  call void @png_chunk_warning(%struct.png_struct_def* %0, i8* %1)
  ret void

8:                                                ; preds = %2
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* %1) #24
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define void @png_app_warning(%struct.png_struct_def* noalias %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 2097152
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  call void @png_warning(%struct.png_struct_def* %0, i8* %1)
  ret void

8:                                                ; preds = %2
  call void @png_error(%struct.png_struct_def* %0, i8* %1) #24
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define void @png_app_error(%struct.png_struct_def* noalias %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 4194304
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  call void @png_warning(%struct.png_struct_def* %0, i8* %1)
  ret void

8:                                                ; preds = %2
  call void @png_error(%struct.png_struct_def* %0, i8* %1) #24
  unreachable
}

; Function Attrs: noinline noreturn nounwind uwtable
define void @png_chunk_error(%struct.png_struct_def* noalias %0, i8* %1) #12 {
  %3 = alloca [214 x i8], align 16
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  call void @png_error(%struct.png_struct_def* %0, i8* %1) #24
  unreachable

6:                                                ; preds = %2
  %7 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i32 0, i32 0
  call void @png_format_buffer(%struct.png_struct_def* %0, i8* %7, i8* %1)
  %8 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i32 0, i32 0
  call void @png_error(%struct.png_struct_def* %0, i8* %8) #24
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_format_buffer(%struct.png_struct_def* noalias %0, i8* %1, i8* %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %5 = load i32, i32* %4, align 8
  br label %6

6:                                                ; preds = %3, %46
  %.0111 = phi i32 [ 24, %3 ], [ %9, %46 ]
  %.0210 = phi i32 [ 0, %3 ], [ %.1, %46 ]
  %7 = lshr i32 %5, %.0111
  %8 = and i32 %7, 255
  %9 = sub nsw i32 %.0111, 8
  %10 = icmp slt i32 %8, 65
  %11 = icmp sgt i32 %8, 122
  %or.cond = or i1 %10, %11
  br i1 %or.cond, label %15, label %12

12:                                               ; preds = %6
  %13 = icmp sgt i32 %8, 90
  %14 = icmp slt i32 %8, 97
  %spec.select = select i1 %13, i1 %14, i1 false
  br label %15

15:                                               ; preds = %12, %6
  %16 = phi i1 [ true, %6 ], [ %spec.select, %12 ]
  %17 = zext i1 %16 to i32
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %41

19:                                               ; preds = %15
  %20 = add nsw i32 %.0210, 1
  %21 = sext i32 %.0210 to i64
  %22 = getelementptr inbounds i8, i8* %1, i64 %21
  store i8 91, i8* %22, align 1
  %23 = and i32 %8, 240
  %24 = ashr i32 %23, 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* @png_digit, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = add nsw i32 %20, 1
  %29 = sext i32 %20 to i64
  %30 = getelementptr inbounds i8, i8* %1, i64 %29
  store i8 %27, i8* %30, align 1
  %31 = and i32 %8, 15
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* @png_digit, i64 0, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = add nsw i32 %28, 1
  %36 = sext i32 %28 to i64
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  store i8 %34, i8* %37, align 1
  %38 = add nsw i32 %35, 1
  %39 = sext i32 %35 to i64
  %40 = getelementptr inbounds i8, i8* %1, i64 %39
  store i8 93, i8* %40, align 1
  br label %46

41:                                               ; preds = %15
  %42 = trunc i32 %8 to i8
  %43 = add nsw i32 %.0210, 1
  %44 = sext i32 %.0210 to i64
  %45 = getelementptr inbounds i8, i8* %1, i64 %44
  store i8 %42, i8* %45, align 1
  br label %46

46:                                               ; preds = %41, %19
  %.1 = phi i32 [ %38, %19 ], [ %43, %41 ]
  %47 = icmp sge i32 %9, 0
  br i1 %47, label %6, label %48

48:                                               ; preds = %46
  %.02.lcssa = phi i32 [ %.1, %46 ]
  %49 = icmp eq i8* %2, null
  br i1 %49, label %50, label %53

50:                                               ; preds = %48
  %51 = sext i32 %.02.lcssa to i64
  %52 = getelementptr inbounds i8, i8* %1, i64 %51
  store i8 0, i8* %52, align 1
  br label %72

53:                                               ; preds = %48
  %54 = add nsw i32 %.02.lcssa, 1
  %55 = sext i32 %.02.lcssa to i64
  %56 = getelementptr inbounds i8, i8* %1, i64 %55
  store i8 58, i8* %56, align 1
  %57 = add i32 %54, 1
  %58 = sext i32 %54 to i64
  %59 = getelementptr inbounds i8, i8* %1, i64 %58
  store i8 32, i8* %59, align 1
  %60 = sext i32 %57 to i64
  %61 = add i32 %.02.lcssa, 197
  %scevgep = getelementptr i8, i8* %1, i64 %60
  br label %62

62:                                               ; preds = %53, %66
  %indvars.iv = phi i64 [ 0, %53 ], [ %indvars.iv.next, %66 ]
  %scevgep13 = getelementptr i8, i8* %2, i64 %indvars.iv
  %63 = load i8, i8* %scevgep13, align 1
  %64 = sext i8 %63 to i32
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %66, label %..critedge_crit_edge

66:                                               ; preds = %62
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep14 = getelementptr i8, i8* %2, i64 %indvars.iv
  %67 = load i8, i8* %scevgep14, align 1
  %scevgep12 = getelementptr i8, i8* %scevgep, i64 %indvars.iv
  store i8 %67, i8* %scevgep12, align 1
  %exitcond = icmp ne i64 %indvars.iv.next, 195
  br i1 %exitcond, label %62, label %.critedgesplit

.critedgesplit:                                   ; preds = %66
  br label %.critedge

..critedge_crit_edge:                             ; preds = %62
  %68 = zext i32 %57 to i64
  %69 = add i64 %68, %indvars.iv
  %tmp = trunc i64 %69 to i32
  br label %.critedge

.critedge:                                        ; preds = %.critedgesplit, %..critedge_crit_edge
  %.2.lcssa = phi i32 [ %tmp, %..critedge_crit_edge ], [ %61, %.critedgesplit ]
  %70 = sext i32 %.2.lcssa to i64
  %71 = getelementptr inbounds i8, i8* %1, i64 %70
  store i8 0, i8* %71, align 1
  br label %72

72:                                               ; preds = %.critedge, %50
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_muldiv(i32* %0, i32 %1, i32 %2, i32 %3) #11 {
  %5 = icmp ne i32 %3, 0
  br i1 %5, label %6, label %22

6:                                                ; preds = %4
  %7 = icmp eq i32 %1, 0
  %8 = icmp eq i32 %2, 0
  %or.cond = select i1 %7, i1 true, i1 %8
  br i1 %or.cond, label %9, label %10

9:                                                ; preds = %6
  store i32 0, i32* %0, align 4
  br label %22

10:                                               ; preds = %6
  %11 = sitofp i32 %1 to double
  %12 = sitofp i32 %2 to double
  %13 = fmul double %11, %12
  %14 = sitofp i32 %3 to double
  %15 = fdiv double %13, %14
  %16 = fadd double %15, 5.000000e-01
  %17 = call double @llvm.floor.f64(double %16)
  %18 = fcmp ole double %17, 0x41DFFFFFFFC00000
  %19 = fcmp oge double %17, 0xC1E0000000000000
  %or.cond1 = and i1 %18, %19
  br i1 %or.cond1, label %20, label %22

20:                                               ; preds = %10
  %21 = fptosi double %17 to i32
  store i32 %21, i32* %0, align 4
  br label %22

22:                                               ; preds = %4, %10, %20, %9
  %.0 = phi i32 [ 1, %9 ], [ 1, %20 ], [ 0, %10 ], [ 0, %4 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_gamma_significant(i32 %0) #11 {
  %2 = icmp slt i32 %0, 95000
  %3 = icmp sgt i32 %0, 105000
  %spec.select = select i1 %2, i1 true, i1 %3
  %4 = zext i1 %spec.select to i32
  ret i32 %4
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #10

; Function Attrs: noinline nounwind uwtable
define void @png_colorspace_sync_info(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %4 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %3, i32 0, i32 4
  %5 = load i16, i16* %4, align 2
  %6 = zext i16 %5 to i32
  %7 = and i32 %6, 32768
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, -6150
  store i32 %12, i32* %10, align 8
  call void @png_free_data(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 16, i32 -1)
  br label %58

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %15 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %14, i32 0, i32 4
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = and i32 %17, 128
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = or i32 %22, 2048
  store i32 %23, i32* %21, align 8
  br label %28

24:                                               ; preds = %13
  %25 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %26 = load i32, i32* %25, align 8
  %27 = and i32 %26, -2049
  store i32 %27, i32* %25, align 8
  br label %28

28:                                               ; preds = %24, %20
  %29 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %30 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %29, i32 0, i32 4
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = and i32 %32, 2
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %28
  %36 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %37 = load i32, i32* %36, align 8
  %38 = or i32 %37, 4
  store i32 %38, i32* %36, align 8
  br label %43

39:                                               ; preds = %28
  %40 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %41 = load i32, i32* %40, align 8
  %42 = and i32 %41, -5
  store i32 %42, i32* %40, align 8
  br label %43

43:                                               ; preds = %39, %35
  %44 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %45 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %44, i32 0, i32 4
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = and i32 %47, 1
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %52 = load i32, i32* %51, align 8
  %53 = or i32 %52, 1
  store i32 %53, i32* %51, align 8
  br label %58

54:                                               ; preds = %43
  %55 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %56 = load i32, i32* %55, align 8
  %57 = and i32 %56, -2
  store i32 %57, i32* %55, align 8
  br label %58

58:                                               ; preds = %50, %54, %9
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_colorspace_sync(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp eq %struct.png_info_def* %1, null
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %7 = bitcast %struct.png_colorspace* %5 to i8*
  %8 = bitcast %struct.png_colorspace* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 8 %8, i64 76, i1 false)
  call void @png_colorspace_sync_info(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %9

9:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_colorspace_set_chromaticities(%struct.png_struct_def* noalias %0, %struct.png_colorspace* noalias %1, %struct.png_xy* %2, i32 %3) #11 {
  %5 = alloca %struct.png_XYZ, align 4
  %6 = call i32 @png_colorspace_check_xy(%struct.png_XYZ* %5, %struct.png_xy* %2)
  switch i32 %6, label %15 [
    i32 0, label %7
    i32 1, label %9
  ]

7:                                                ; preds = %4
  %8 = call i32 @png_colorspace_set_xy_and_XYZ(%struct.png_struct_def* %0, %struct.png_colorspace* %1, %struct.png_xy* %2, %struct.png_XYZ* %5, i32 %3)
  br label %21

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = or i32 %12, 32768
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %10, align 2
  call void @png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22, i32 0, i32 0))
  br label %21

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = or i32 %18, 32768
  %20 = trunc i32 %19 to i16
  store i16 %20, i16* %16, align 2
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.23, i32 0, i32 0)) #24
  unreachable

21:                                               ; preds = %9, %7
  %.0 = phi i32 [ 0, %9 ], [ %8, %7 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_colorspace_check_xy(%struct.png_XYZ* %0, %struct.png_xy* %1) #11 {
  %3 = alloca %struct.png_xy, align 4
  %4 = call i32 @png_XYZ_from_xy(%struct.png_XYZ* %0, %struct.png_xy* %1)
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = call i32 @png_xy_from_XYZ(%struct.png_xy* %3, %struct.png_XYZ* %0)
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %6
  %10 = call i32 @png_colorspace_endpoints_match(%struct.png_xy* %1, %struct.png_xy* %3, i32 5)
  %11 = icmp ne i32 %10, 0
  %. = select i1 %11, i32 0, i32 1
  br label %12

12:                                               ; preds = %9, %6, %2
  %.0 = phi i32 [ %4, %2 ], [ %7, %6 ], [ %., %9 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_colorspace_set_xy_and_XYZ(%struct.png_struct_def* noalias %0, %struct.png_colorspace* noalias %1, %struct.png_xy* %2, %struct.png_XYZ* %3, i32 %4) #11 {
  %6 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %7 = load i16, i16* %6, align 2
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 32768
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %57, label %11

11:                                               ; preds = %5
  %12 = icmp slt i32 %4, 2
  br i1 %12, label %13, label %31

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = and i32 %16, 2
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %31

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 1
  %21 = call i32 @png_colorspace_endpoints_match(%struct.png_xy* %2, %struct.png_xy* %20, i32 100)
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %29

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = or i32 %26, 32768
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %24, align 2
  call void @png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.70, i32 0, i32 0))
  br label %57

29:                                               ; preds = %19
  %30 = icmp eq i32 %4, 0
  br i1 %30, label %57, label %31

31:                                               ; preds = %29, %13, %11
  %32 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 1
  %33 = bitcast %struct.png_xy* %32 to i8*
  %34 = bitcast %struct.png_xy* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %34, i64 32, i1 false)
  %35 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 2
  %36 = bitcast %struct.png_XYZ* %35 to i8*
  %37 = bitcast %struct.png_XYZ* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %37, i64 36, i1 false)
  %38 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = or i32 %40, 2
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %38, align 2
  %43 = call i32 @png_colorspace_endpoints_match(%struct.png_xy* %2, %struct.png_xy* @sRGB_xy, i32 1000)
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %45, label %51

45:                                               ; preds = %31
  %46 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = or i32 %48, 64
  %50 = trunc i32 %49 to i16
  store i16 %50, i16* %46, align 2
  br label %57

51:                                               ; preds = %31
  %52 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = and i32 %54, 65471
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %52, align 2
  br label %57

57:                                               ; preds = %45, %51, %29, %5, %23
  %.0 = phi i32 [ 0, %23 ], [ 0, %5 ], [ 1, %29 ], [ 2, %51 ], [ 2, %45 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_benign_error(%struct.png_struct_def* noalias %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 1048576
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %18

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 32768
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %14 = load i32, i32* %13, align 8
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  call void @png_chunk_warning(%struct.png_struct_def* %0, i8* %1)
  br label %29

17:                                               ; preds = %12, %7
  call void @png_warning(%struct.png_struct_def* %0, i8* %1)
  br label %29

18:                                               ; preds = %2
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %20, 32768
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %28

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %25 = load i32, i32* %24, align 8
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* %1) #24
  unreachable

28:                                               ; preds = %23, %18
  call void @png_error(%struct.png_struct_def* %0, i8* %1) #24
  unreachable

29:                                               ; preds = %16, %17
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_colorspace_endpoints_match(%struct.png_xy* %0, %struct.png_xy* %1, i32 %2) #11 {
  %4 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 6
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 6
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %7, %2
  %9 = icmp slt i32 %5, %8
  br i1 %9, label %115, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 6
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 6
  %14 = load i32, i32* %13, align 4
  %15 = add nsw i32 %14, %2
  %16 = icmp sgt i32 %12, %15
  br i1 %16, label %115, label %17

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 7
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 7
  %21 = load i32, i32* %20, align 4
  %22 = sub nsw i32 %21, %2
  %23 = icmp slt i32 %19, %22
  br i1 %23, label %115, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 7
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 7
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %28, %2
  %30 = icmp sgt i32 %26, %29
  br i1 %30, label %115, label %31

31:                                               ; preds = %24
  %32 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = sub nsw i32 %35, %2
  %37 = icmp slt i32 %33, %36
  br i1 %37, label %115, label %38

38:                                               ; preds = %31
  %39 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = add nsw i32 %42, %2
  %44 = icmp sgt i32 %40, %43
  br i1 %44, label %115, label %45

45:                                               ; preds = %38
  %46 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = sub nsw i32 %49, %2
  %51 = icmp slt i32 %47, %50
  br i1 %51, label %115, label %52

52:                                               ; preds = %45
  %53 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = add nsw i32 %56, %2
  %58 = icmp sgt i32 %54, %57
  br i1 %58, label %115, label %59

59:                                               ; preds = %52
  %60 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 2
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 2
  %63 = load i32, i32* %62, align 4
  %64 = sub nsw i32 %63, %2
  %65 = icmp slt i32 %61, %64
  br i1 %65, label %115, label %66

66:                                               ; preds = %59
  %67 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 2
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 2
  %70 = load i32, i32* %69, align 4
  %71 = add nsw i32 %70, %2
  %72 = icmp sgt i32 %68, %71
  br i1 %72, label %115, label %73

73:                                               ; preds = %66
  %74 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 3
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 3
  %77 = load i32, i32* %76, align 4
  %78 = sub nsw i32 %77, %2
  %79 = icmp slt i32 %75, %78
  br i1 %79, label %115, label %80

80:                                               ; preds = %73
  %81 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 3
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 3
  %84 = load i32, i32* %83, align 4
  %85 = add nsw i32 %84, %2
  %86 = icmp sgt i32 %82, %85
  br i1 %86, label %115, label %87

87:                                               ; preds = %80
  %88 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 4
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 4
  %91 = load i32, i32* %90, align 4
  %92 = sub nsw i32 %91, %2
  %93 = icmp slt i32 %89, %92
  br i1 %93, label %115, label %94

94:                                               ; preds = %87
  %95 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 4
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 4
  %98 = load i32, i32* %97, align 4
  %99 = add nsw i32 %98, %2
  %100 = icmp sgt i32 %96, %99
  br i1 %100, label %115, label %101

101:                                              ; preds = %94
  %102 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 5
  %103 = load i32, i32* %102, align 4
  %104 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 5
  %105 = load i32, i32* %104, align 4
  %106 = sub nsw i32 %105, %2
  %107 = icmp slt i32 %103, %106
  br i1 %107, label %115, label %108

108:                                              ; preds = %101
  %109 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 5
  %110 = load i32, i32* %109, align 4
  %111 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 5
  %112 = load i32, i32* %111, align 4
  %113 = add nsw i32 %112, %2
  %114 = icmp sgt i32 %110, %113
  %spec.select = select i1 %114, i32 0, i32 1
  br label %115

115:                                              ; preds = %108, %3, %10, %17, %24, %31, %38, %45, %52, %59, %66, %73, %80, %87, %94, %101
  %.0 = phi i32 [ 0, %101 ], [ 0, %94 ], [ 0, %87 ], [ 0, %80 ], [ 0, %73 ], [ 0, %66 ], [ 0, %59 ], [ 0, %52 ], [ 0, %45 ], [ 0, %38 ], [ 0, %31 ], [ 0, %24 ], [ 0, %17 ], [ 0, %10 ], [ 0, %3 ], [ %spec.select, %108 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_XYZ_from_xy(%struct.png_XYZ* %0, %struct.png_xy* %1) #11 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %272, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, 100000
  br i1 %13, label %272, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %272, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = sub nsw i32 100000, %22
  %24 = icmp sgt i32 %20, %23
  br i1 %24, label %272, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %272, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = icmp sgt i32 %31, 100000
  br i1 %32, label %272, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 3
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %272, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 3
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 2
  %41 = load i32, i32* %40, align 4
  %42 = sub nsw i32 100000, %41
  %43 = icmp sgt i32 %39, %42
  br i1 %43, label %272, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 4
  %46 = load i32, i32* %45, align 4
  %47 = icmp slt i32 %46, 0
  br i1 %47, label %272, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 4
  %50 = load i32, i32* %49, align 4
  %51 = icmp sgt i32 %50, 100000
  br i1 %51, label %272, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 5
  %54 = load i32, i32* %53, align 4
  %55 = icmp slt i32 %54, 0
  br i1 %55, label %272, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 5
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 4
  %60 = load i32, i32* %59, align 4
  %61 = sub nsw i32 100000, %60
  %62 = icmp sgt i32 %58, %61
  br i1 %62, label %272, label %63

63:                                               ; preds = %56
  %64 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 6
  %65 = load i32, i32* %64, align 4
  %66 = icmp slt i32 %65, 0
  br i1 %66, label %272, label %67

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 6
  %69 = load i32, i32* %68, align 4
  %70 = icmp sgt i32 %69, 100000
  br i1 %70, label %272, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 7
  %73 = load i32, i32* %72, align 4
  %74 = icmp slt i32 %73, 5
  br i1 %74, label %272, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 7
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 6
  %79 = load i32, i32* %78, align 4
  %80 = sub nsw i32 100000, %79
  %81 = icmp sgt i32 %77, %80
  br i1 %81, label %272, label %82

82:                                               ; preds = %75
  %83 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 2
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 4
  %86 = load i32, i32* %85, align 4
  %87 = sub nsw i32 %84, %86
  %88 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 5
  %91 = load i32, i32* %90, align 4
  %92 = sub nsw i32 %89, %91
  %93 = call i32 @png_muldiv(i32* %5, i32 %87, i32 %92, i32 7)
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %272, label %95

95:                                               ; preds = %82
  %96 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 3
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 5
  %99 = load i32, i32* %98, align 4
  %100 = sub nsw i32 %97, %99
  %101 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 0
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 4
  %104 = load i32, i32* %103, align 4
  %105 = sub nsw i32 %102, %104
  %106 = call i32 @png_muldiv(i32* %6, i32 %100, i32 %105, i32 7)
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %272, label %108

108:                                              ; preds = %95
  %109 = load i32, i32* %5, align 4
  %110 = load i32, i32* %6, align 4
  %111 = sub nsw i32 %109, %110
  %112 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 2
  %113 = load i32, i32* %112, align 4
  %114 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 4
  %115 = load i32, i32* %114, align 4
  %116 = sub nsw i32 %113, %115
  %117 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 7
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 5
  %120 = load i32, i32* %119, align 4
  %121 = sub nsw i32 %118, %120
  %122 = call i32 @png_muldiv(i32* %5, i32 %116, i32 %121, i32 7)
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %272, label %124

124:                                              ; preds = %108
  %125 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 3
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 5
  %128 = load i32, i32* %127, align 4
  %129 = sub nsw i32 %126, %128
  %130 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 6
  %131 = load i32, i32* %130, align 4
  %132 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 4
  %133 = load i32, i32* %132, align 4
  %134 = sub nsw i32 %131, %133
  %135 = call i32 @png_muldiv(i32* %6, i32 %129, i32 %134, i32 7)
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %272, label %137

137:                                              ; preds = %124
  %138 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 7
  %139 = load i32, i32* %138, align 4
  %140 = load i32, i32* %5, align 4
  %141 = load i32, i32* %6, align 4
  %142 = sub nsw i32 %140, %141
  %143 = call i32 @png_muldiv(i32* %3, i32 %139, i32 %111, i32 %142)
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %272, label %145

145:                                              ; preds = %137
  %146 = load i32, i32* %3, align 4
  %147 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 7
  %148 = load i32, i32* %147, align 4
  %149 = icmp sle i32 %146, %148
  br i1 %149, label %272, label %150

150:                                              ; preds = %145
  %151 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 1
  %152 = load i32, i32* %151, align 4
  %153 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 5
  %154 = load i32, i32* %153, align 4
  %155 = sub nsw i32 %152, %154
  %156 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 6
  %157 = load i32, i32* %156, align 4
  %158 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 4
  %159 = load i32, i32* %158, align 4
  %160 = sub nsw i32 %157, %159
  %161 = call i32 @png_muldiv(i32* %5, i32 %155, i32 %160, i32 7)
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %272, label %163

163:                                              ; preds = %150
  %164 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 0
  %165 = load i32, i32* %164, align 4
  %166 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 4
  %167 = load i32, i32* %166, align 4
  %168 = sub nsw i32 %165, %167
  %169 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 7
  %170 = load i32, i32* %169, align 4
  %171 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 5
  %172 = load i32, i32* %171, align 4
  %173 = sub nsw i32 %170, %172
  %174 = call i32 @png_muldiv(i32* %6, i32 %168, i32 %173, i32 7)
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %272, label %176

176:                                              ; preds = %163
  %177 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 7
  %178 = load i32, i32* %177, align 4
  %179 = load i32, i32* %5, align 4
  %180 = load i32, i32* %6, align 4
  %181 = sub nsw i32 %179, %180
  %182 = call i32 @png_muldiv(i32* %4, i32 %178, i32 %111, i32 %181)
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %272, label %184

184:                                              ; preds = %176
  %185 = load i32, i32* %4, align 4
  %186 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 7
  %187 = load i32, i32* %186, align 4
  %188 = icmp sle i32 %185, %187
  br i1 %188, label %272, label %189

189:                                              ; preds = %184
  %190 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 7
  %191 = load i32, i32* %190, align 4
  %192 = call i32 @png_reciprocal(i32 %191)
  %193 = load i32, i32* %3, align 4
  %194 = call i32 @png_reciprocal(i32 %193)
  %195 = sub nsw i32 %192, %194
  %196 = load i32, i32* %4, align 4
  %197 = call i32 @png_reciprocal(i32 %196)
  %198 = sub nsw i32 %195, %197
  %199 = icmp sle i32 %198, 0
  br i1 %199, label %272, label %200

200:                                              ; preds = %189
  %201 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 0
  %202 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 0
  %203 = load i32, i32* %202, align 4
  %204 = load i32, i32* %3, align 4
  %205 = call i32 @png_muldiv(i32* %201, i32 %203, i32 100000, i32 %204)
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %272, label %207

207:                                              ; preds = %200
  %208 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 1
  %209 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 1
  %210 = load i32, i32* %209, align 4
  %211 = load i32, i32* %3, align 4
  %212 = call i32 @png_muldiv(i32* %208, i32 %210, i32 100000, i32 %211)
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %272, label %214

214:                                              ; preds = %207
  %215 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 2
  %216 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 0
  %217 = load i32, i32* %216, align 4
  %218 = sub nsw i32 100000, %217
  %219 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 1
  %220 = load i32, i32* %219, align 4
  %221 = sub nsw i32 %218, %220
  %222 = load i32, i32* %3, align 4
  %223 = call i32 @png_muldiv(i32* %215, i32 %221, i32 100000, i32 %222)
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %272, label %225

225:                                              ; preds = %214
  %226 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 3
  %227 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 2
  %228 = load i32, i32* %227, align 4
  %229 = load i32, i32* %4, align 4
  %230 = call i32 @png_muldiv(i32* %226, i32 %228, i32 100000, i32 %229)
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %272, label %232

232:                                              ; preds = %225
  %233 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 4
  %234 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 3
  %235 = load i32, i32* %234, align 4
  %236 = load i32, i32* %4, align 4
  %237 = call i32 @png_muldiv(i32* %233, i32 %235, i32 100000, i32 %236)
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %272, label %239

239:                                              ; preds = %232
  %240 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 5
  %241 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 2
  %242 = load i32, i32* %241, align 4
  %243 = sub nsw i32 100000, %242
  %244 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 3
  %245 = load i32, i32* %244, align 4
  %246 = sub nsw i32 %243, %245
  %247 = load i32, i32* %4, align 4
  %248 = call i32 @png_muldiv(i32* %240, i32 %246, i32 100000, i32 %247)
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %272, label %250

250:                                              ; preds = %239
  %251 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 6
  %252 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 4
  %253 = load i32, i32* %252, align 4
  %254 = call i32 @png_muldiv(i32* %251, i32 %253, i32 %198, i32 100000)
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %272, label %256

256:                                              ; preds = %250
  %257 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 7
  %258 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 5
  %259 = load i32, i32* %258, align 4
  %260 = call i32 @png_muldiv(i32* %257, i32 %259, i32 %198, i32 100000)
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %272, label %262

262:                                              ; preds = %256
  %263 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 8
  %264 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 4
  %265 = load i32, i32* %264, align 4
  %266 = sub nsw i32 100000, %265
  %267 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 5
  %268 = load i32, i32* %267, align 4
  %269 = sub nsw i32 %266, %268
  %270 = call i32 @png_muldiv(i32* %263, i32 %269, i32 %198, i32 100000)
  %271 = icmp eq i32 %270, 0
  %. = select i1 %271, i32 1, i32 0
  br label %272

272:                                              ; preds = %262, %256, %250, %239, %232, %225, %214, %207, %200, %189, %176, %184, %163, %150, %137, %145, %124, %108, %95, %82, %71, %75, %63, %67, %52, %56, %44, %48, %33, %37, %25, %29, %14, %18, %2, %10
  %.0 = phi i32 [ 1, %10 ], [ 1, %2 ], [ 1, %18 ], [ 1, %14 ], [ 1, %29 ], [ 1, %25 ], [ 1, %37 ], [ 1, %33 ], [ 1, %48 ], [ 1, %44 ], [ 1, %56 ], [ 1, %52 ], [ 1, %67 ], [ 1, %63 ], [ 1, %75 ], [ 1, %71 ], [ 2, %82 ], [ 2, %95 ], [ 2, %108 ], [ 2, %124 ], [ 1, %145 ], [ 1, %137 ], [ 2, %150 ], [ 2, %163 ], [ 1, %184 ], [ 1, %176 ], [ 1, %189 ], [ 1, %200 ], [ 1, %207 ], [ 1, %214 ], [ 1, %225 ], [ 1, %232 ], [ 1, %239 ], [ 1, %250 ], [ 1, %256 ], [ %., %262 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_xy_from_XYZ(%struct.png_xy* %0, %struct.png_XYZ* %1) #11 {
  %3 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = add nsw i32 %4, %6
  %8 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %7, %9
  %11 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 0
  %12 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = call i32 @png_muldiv(i32* %11, i32 %13, i32 100000, i32 %10)
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %88, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 1
  %18 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = call i32 @png_muldiv(i32* %17, i32 %19, i32 100000, i32 %10)
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %88, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = add nsw i32 %28, %30
  %32 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 5
  %33 = load i32, i32* %32, align 4
  %34 = add nsw i32 %31, %33
  %35 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 2
  %36 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 3
  %37 = load i32, i32* %36, align 4
  %38 = call i32 @png_muldiv(i32* %35, i32 %37, i32 100000, i32 %34)
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %88, label %40

40:                                               ; preds = %22
  %41 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 3
  %42 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 4
  %43 = load i32, i32* %42, align 4
  %44 = call i32 @png_muldiv(i32* %41, i32 %43, i32 100000, i32 %34)
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %88, label %46

46:                                               ; preds = %40
  %47 = add nsw i32 %10, %34
  %48 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 3
  %49 = load i32, i32* %48, align 4
  %50 = add nsw i32 %24, %49
  %51 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 4
  %52 = load i32, i32* %51, align 4
  %53 = add nsw i32 %26, %52
  %54 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 6
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 7
  %57 = load i32, i32* %56, align 4
  %58 = add nsw i32 %55, %57
  %59 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 8
  %60 = load i32, i32* %59, align 4
  %61 = add nsw i32 %58, %60
  %62 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 4
  %63 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 6
  %64 = load i32, i32* %63, align 4
  %65 = call i32 @png_muldiv(i32* %62, i32 %64, i32 100000, i32 %61)
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %88, label %67

67:                                               ; preds = %46
  %68 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 5
  %69 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 7
  %70 = load i32, i32* %69, align 4
  %71 = call i32 @png_muldiv(i32* %68, i32 %70, i32 100000, i32 %61)
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %88, label %73

73:                                               ; preds = %67
  %74 = add nsw i32 %47, %61
  %75 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 6
  %76 = load i32, i32* %75, align 4
  %77 = add nsw i32 %50, %76
  %78 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i32 0, i32 7
  %79 = load i32, i32* %78, align 4
  %80 = add nsw i32 %53, %79
  %81 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 6
  %82 = call i32 @png_muldiv(i32* %81, i32 %77, i32 100000, i32 %74)
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %88, label %84

84:                                               ; preds = %73
  %85 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i32 0, i32 7
  %86 = call i32 @png_muldiv(i32* %85, i32 %80, i32 100000, i32 %74)
  %87 = icmp eq i32 %86, 0
  %. = select i1 %87, i32 1, i32 0
  br label %88

88:                                               ; preds = %84, %73, %67, %46, %40, %22, %16, %2
  %.0 = phi i32 [ 1, %2 ], [ 1, %16 ], [ 1, %22 ], [ 1, %40 ], [ 1, %46 ], [ 1, %67 ], [ 1, %73 ], [ %., %84 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_reciprocal(i32 %0) #11 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double 1.000000e+10, %2
  %4 = fadd double %3, 5.000000e-01
  %5 = call double @llvm.floor.f64(double %4)
  %6 = fcmp ole double %5, 0x41DFFFFFFFC00000
  %7 = fcmp oge double %5, 0xC1E0000000000000
  %or.cond = and i1 %6, %7
  %8 = fptosi double %5 to i32
  %.0 = select i1 %or.cond, i32 %8, i32 0
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_colorspace_set_endpoints(%struct.png_struct_def* noalias %0, %struct.png_colorspace* noalias %1, %struct.png_XYZ* %2, i32 %3) #11 {
  %5 = alloca %struct.png_XYZ, align 4
  %6 = alloca %struct.png_xy, align 4
  %7 = bitcast %struct.png_XYZ* %5 to i8*
  %8 = bitcast %struct.png_XYZ* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 36, i1 false)
  %9 = call i32 @png_colorspace_check_XYZ(%struct.png_xy* %6, %struct.png_XYZ* %5)
  switch i32 %9, label %18 [
    i32 0, label %10
    i32 1, label %12
  ]

10:                                               ; preds = %4
  %11 = call i32 @png_colorspace_set_xy_and_XYZ(%struct.png_struct_def* %0, %struct.png_colorspace* %1, %struct.png_xy* %6, %struct.png_XYZ* %5, i32 %3)
  br label %24

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = or i32 %15, 32768
  %17 = trunc i32 %16 to i16
  store i16 %17, i16* %13, align 2
  call void @png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.24, i32 0, i32 0))
  br label %24

18:                                               ; preds = %4
  %19 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i32
  %22 = or i32 %21, 32768
  %23 = trunc i32 %22 to i16
  store i16 %23, i16* %19, align 2
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.23, i32 0, i32 0)) #24
  unreachable

24:                                               ; preds = %12, %10
  %.0 = phi i32 [ 0, %12 ], [ %11, %10 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_colorspace_check_XYZ(%struct.png_xy* %0, %struct.png_XYZ* %1) #11 {
  %3 = alloca %struct.png_XYZ, align 4
  %4 = call i32 @png_XYZ_normalize(%struct.png_XYZ* %1)
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = call i32 @png_xy_from_XYZ(%struct.png_xy* %0, %struct.png_XYZ* %1)
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %6
  %10 = bitcast %struct.png_XYZ* %3 to i8*
  %11 = bitcast %struct.png_XYZ* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %10, i8* align 4 %11, i64 36, i1 false)
  %12 = call i32 @png_colorspace_check_xy(%struct.png_XYZ* %3, %struct.png_xy* %0)
  br label %13

13:                                               ; preds = %6, %2, %9
  %.0 = phi i32 [ %12, %9 ], [ %4, %2 ], [ %7, %6 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_XYZ_normalize(%struct.png_XYZ* %0) #11 {
  %2 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %112, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %112, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 7
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %112, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %112, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 3
  %19 = load i32, i32* %18, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %112, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 6
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %112, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %112, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 5
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %112, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 8
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %112, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = sub nsw i32 2147483647, %39
  %41 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %40, %42
  br i1 %43, label %112, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 4
  %46 = load i32, i32* %45, align 4
  %47 = add nsw i32 %39, %46
  %48 = sub nsw i32 2147483647, %47
  %49 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 6
  %50 = load i32, i32* %49, align 4
  %51 = icmp slt i32 %48, %50
  br i1 %51, label %112, label %52

52:                                               ; preds = %44
  %53 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 7
  %54 = load i32, i32* %53, align 4
  %55 = add nsw i32 %47, %54
  %56 = icmp ne i32 %55, 100000
  br i1 %56, label %57, label %111

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 0
  %59 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = call i32 @png_muldiv(i32* %58, i32 %60, i32 100000, i32 %55)
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %112, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 1
  %65 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = call i32 @png_muldiv(i32* %64, i32 %66, i32 100000, i32 %55)
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %112, label %69

69:                                               ; preds = %63
  %70 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 2
  %71 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 2
  %72 = load i32, i32* %71, align 4
  %73 = call i32 @png_muldiv(i32* %70, i32 %72, i32 100000, i32 %55)
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %112, label %75

75:                                               ; preds = %69
  %76 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 3
  %77 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 3
  %78 = load i32, i32* %77, align 4
  %79 = call i32 @png_muldiv(i32* %76, i32 %78, i32 100000, i32 %55)
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %112, label %81

81:                                               ; preds = %75
  %82 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 4
  %83 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 4
  %84 = load i32, i32* %83, align 4
  %85 = call i32 @png_muldiv(i32* %82, i32 %84, i32 100000, i32 %55)
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %112, label %87

87:                                               ; preds = %81
  %88 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 5
  %89 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 5
  %90 = load i32, i32* %89, align 4
  %91 = call i32 @png_muldiv(i32* %88, i32 %90, i32 100000, i32 %55)
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %112, label %93

93:                                               ; preds = %87
  %94 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 6
  %95 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 6
  %96 = load i32, i32* %95, align 4
  %97 = call i32 @png_muldiv(i32* %94, i32 %96, i32 100000, i32 %55)
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %112, label %99

99:                                               ; preds = %93
  %100 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 7
  %101 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 7
  %102 = load i32, i32* %101, align 4
  %103 = call i32 @png_muldiv(i32* %100, i32 %102, i32 100000, i32 %55)
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %112, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 8
  %107 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i32 0, i32 8
  %108 = load i32, i32* %107, align 4
  %109 = call i32 @png_muldiv(i32* %106, i32 %108, i32 100000, i32 %55)
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %112, label %111

111:                                              ; preds = %105, %52
  br label %112

112:                                              ; preds = %105, %99, %93, %87, %81, %75, %69, %63, %57, %44, %37, %1, %5, %9, %13, %17, %21, %25, %29, %33, %111
  %.0 = phi i32 [ 0, %111 ], [ 1, %33 ], [ 1, %29 ], [ 1, %25 ], [ 1, %21 ], [ 1, %17 ], [ 1, %13 ], [ 1, %9 ], [ 1, %5 ], [ 1, %1 ], [ 1, %37 ], [ 1, %44 ], [ 1, %57 ], [ 1, %63 ], [ 1, %69 ], [ 1, %75 ], [ 1, %81 ], [ 1, %87 ], [ 1, %93 ], [ 1, %99 ], [ 1, %105 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_colorspace_set_sRGB(%struct.png_struct_def* noalias %0, %struct.png_colorspace* noalias %1, i32 %2) #11 {
  %4 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %5 = load i16, i16* %4, align 2
  %6 = zext i16 %5 to i32
  %7 = and i32 %6, 32768
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %76, label %9

9:                                                ; preds = %3
  %10 = icmp slt i32 %2, 0
  %11 = icmp sge i32 %2, 4
  %or.cond = or i1 %10, %11
  br i1 %or.cond, label %12, label %15

12:                                               ; preds = %9
  %13 = sext i32 %2 to i64
  %14 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), i64 %13, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.26, i32 0, i32 0))
  br label %76

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = and i32 %18, 4
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %29

21:                                               ; preds = %15
  %22 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 3
  %23 = load i16, i16* %22, align 4
  %24 = zext i16 %23 to i32
  %25 = icmp ne i32 %24, %2
  br i1 %25, label %26, label %29

26:                                               ; preds = %21
  %27 = sext i32 %2 to i64
  %28 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), i64 %27, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.27, i32 0, i32 0))
  br label %76

29:                                               ; preds = %21, %15
  %30 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = and i32 %32, 32
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %29
  call void @png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.28, i32 0, i32 0))
  br label %76

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = and i32 %39, 2
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %42, label %47

42:                                               ; preds = %36
  %43 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 1
  %44 = call i32 @png_colorspace_endpoints_match(%struct.png_xy* @sRGB_xy, %struct.png_xy* %43, i32 100)
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %47, label %46

46:                                               ; preds = %42
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.29, i32 0, i32 0), i32 2)
  br label %47

47:                                               ; preds = %46, %42, %36
  %48 = call i32 @png_colorspace_check_gamma(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i32 45455, i32 2)
  %49 = trunc i32 %2 to i16
  %50 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 3
  store i16 %49, i16* %50, align 4
  %51 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i32
  %54 = or i32 %53, 4
  %55 = trunc i32 %54 to i16
  store i16 %55, i16* %51, align 2
  %56 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 1
  %57 = bitcast %struct.png_xy* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %57, i8* align 4 bitcast (%struct.png_xy* @sRGB_xy to i8*), i64 32, i1 false)
  %58 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 2
  %59 = bitcast %struct.png_XYZ* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 bitcast (%struct.png_XYZ* @png_colorspace_set_sRGB.sRGB_XYZ to i8*), i64 36, i1 false)
  %60 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = or i32 %62, 66
  %64 = trunc i32 %63 to i16
  store i16 %64, i16* %60, align 2
  %65 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 0
  store i32 45455, i32* %65, align 4
  %66 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = or i32 %68, 1
  %70 = trunc i32 %69 to i16
  store i16 %70, i16* %66, align 2
  %71 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %72 = load i16, i16* %71, align 2
  %73 = zext i16 %72 to i32
  %74 = or i32 %73, 160
  %75 = trunc i32 %74 to i16
  store i16 %75, i16* %71, align 2
  br label %76

76:                                               ; preds = %3, %47, %35, %26, %12
  %.0 = phi i32 [ %14, %12 ], [ %28, %26 ], [ 0, %35 ], [ 1, %47 ], [ 0, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_icc_profile_error(%struct.png_struct_def* noalias %0, %struct.png_colorspace* noalias %1, i8* %2, i64 %3, i8* %4) #11 {
  %6 = alloca [196 x i8], align 16
  %7 = alloca [24 x i8], align 16
  %8 = icmp ne %struct.png_colorspace* %1, null
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i32
  %13 = or i32 %12, 32768
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %10, align 2
  br label %15

15:                                               ; preds = %9, %5
  %16 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i32 0, i32 0
  %17 = call i64 @png_safecat(i8* %16, i64 196, i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i32 0, i32 0))
  %18 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i32 0, i32 0
  %19 = add i64 %17, 79
  %20 = call i64 @png_safecat(i8* %18, i64 %19, i64 %17, i8* %2)
  %21 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i32 0, i32 0
  %22 = call i64 @png_safecat(i8* %21, i64 196, i64 %20, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.72, i32 0, i32 0))
  %23 = call i32 @is_ICC_signature(i64 %3)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %34

25:                                               ; preds = %15
  %26 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i32 0, i32 0
  %27 = getelementptr inbounds i8, i8* %26, i64 %22
  %28 = trunc i64 %3 to i32
  call void @png_icc_tag_name(i8* %27, i32 %28)
  %29 = add i64 %22, 6
  %30 = add i64 %29, 1
  %31 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %29
  store i8 58, i8* %31, align 1
  %32 = add i64 %30, 1
  %33 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %30
  store i8 32, i8* %33, align 1
  br label %43

34:                                               ; preds = %15
  %35 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i32 0, i32 0
  %36 = getelementptr inbounds [24 x i8], [24 x i8]* %7, i32 0, i32 0
  %37 = getelementptr inbounds [24 x i8], [24 x i8]* %7, i32 0, i32 0
  %38 = getelementptr inbounds i8, i8* %37, i64 24
  %39 = call i8* @png_format_number(i8* %36, i8* %38, i32 3, i64 %3)
  %40 = call i64 @png_safecat(i8* %35, i64 196, i64 %22, i8* %39)
  %41 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i32 0, i32 0
  %42 = call i64 @png_safecat(i8* %41, i64 196, i64 %40, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.73, i32 0, i32 0))
  br label %43

43:                                               ; preds = %34, %25
  %.0 = phi i64 [ %32, %25 ], [ %42, %34 ]
  %44 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i32 0, i32 0
  %45 = call i64 @png_safecat(i8* %44, i64 196, i64 %.0, i8* %4)
  %46 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i32 0, i32 0
  %47 = icmp ne %struct.png_colorspace* %1, null
  %48 = zext i1 %47 to i64
  %49 = select i1 %47, i32 2, i32 1
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* %46, i32 %49)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @is_ICC_signature(i64 %0) #11 {
  %2 = lshr i64 %0, 24
  %3 = call i32 @is_ICC_signature_char(i64 %2)
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %5, label %19

5:                                                ; preds = %1
  %6 = lshr i64 %0, 16
  %7 = and i64 %6, 255
  %8 = call i32 @is_ICC_signature_char(i64 %7)
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %19

10:                                               ; preds = %5
  %11 = lshr i64 %0, 8
  %12 = and i64 %11, 255
  %13 = call i32 @is_ICC_signature_char(i64 %12)
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %10
  %16 = and i64 %0, 255
  %17 = call i32 @is_ICC_signature_char(i64 %16)
  %18 = icmp ne i32 %17, 0
  br label %19

19:                                               ; preds = %15, %10, %5, %1
  %20 = phi i1 [ false, %10 ], [ false, %5 ], [ false, %1 ], [ %18, %15 ]
  %21 = zext i1 %20 to i32
  ret i32 %21
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_icc_tag_name(i8* %0, i32 %1) #11 {
  %3 = getelementptr inbounds i8, i8* %0, i64 0
  store i8 39, i8* %3, align 1
  %4 = lshr i32 %1, 24
  %5 = call signext i8 @png_icc_tag_char(i32 %4)
  %6 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %5, i8* %6, align 1
  %7 = lshr i32 %1, 16
  %8 = call signext i8 @png_icc_tag_char(i32 %7)
  %9 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %8, i8* %9, align 1
  %10 = lshr i32 %1, 8
  %11 = call signext i8 @png_icc_tag_char(i32 %10)
  %12 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %11, i8* %12, align 1
  %13 = call signext i8 @png_icc_tag_char(i32 %1)
  %14 = getelementptr inbounds i8, i8* %0, i64 4
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds i8, i8* %0, i64 5
  store i8 39, i8* %15, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal signext i8 @png_icc_tag_char(i32 %0) #11 {
  %2 = and i32 %0, 255
  %3 = icmp uge i32 %2, 32
  %4 = icmp ule i32 %2, 126
  %or.cond = and i1 %3, %4
  %5 = trunc i32 %2 to i8
  %.0 = select i1 %or.cond, i8 %5, i8 63
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @is_ICC_signature_char(i64 %0) #11 {
  %2 = icmp eq i64 %0, 32
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = icmp uge i64 %0, 48
  %5 = icmp ule i64 %0, 57
  %or.cond = and i1 %4, %5
  br i1 %or.cond, label %12, label %6

6:                                                ; preds = %3
  %7 = icmp uge i64 %0, 65
  %8 = icmp ule i64 %0, 90
  %or.cond1 = and i1 %7, %8
  br i1 %or.cond1, label %12, label %9

9:                                                ; preds = %6
  %10 = icmp uge i64 %0, 97
  %11 = icmp ule i64 %0, 122
  %spec.select = select i1 %10, i1 %11, i1 false
  br label %12

12:                                               ; preds = %6, %3, %9, %1
  %13 = phi i1 [ true, %1 ], [ %spec.select, %9 ], [ true, %3 ], [ true, %6 ]
  %14 = zext i1 %13 to i32
  ret i32 %14
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_icc_check_length(%struct.png_struct_def* noalias %0, %struct.png_colorspace* noalias %1, i8* %2, i32 %3) #11 {
  %5 = call i32 @icc_check_length(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i32 %3)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %19

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 135
  %9 = load i64, i64* %8, align 8
  %10 = icmp ugt i64 %9, 0
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 135
  %13 = load i64, i64* %12, align 8
  %14 = zext i32 %3 to i64
  %15 = icmp ult i64 %13, %14
  br i1 %15, label %16, label %19

16:                                               ; preds = %11
  %17 = zext i32 %3 to i64
  %18 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %17, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.30, i32 0, i32 0))
  br label %19

19:                                               ; preds = %11, %7, %4, %16
  %.0 = phi i32 [ %18, %16 ], [ 0, %4 ], [ 1, %7 ], [ 1, %11 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @icc_check_length(%struct.png_struct_def* noalias %0, %struct.png_colorspace* noalias %1, i8* %2, i32 %3) #11 {
  %5 = icmp ult i32 %3, 132
  br i1 %5, label %6, label %9

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %7, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.74, i32 0, i32 0))
  br label %9

9:                                                ; preds = %4, %6
  %.0 = phi i32 [ %8, %6 ], [ 1, %4 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_icc_check_header(%struct.png_struct_def* noalias %0, %struct.png_colorspace* noalias %1, i8* %2, i32 %3, i8* %4, i32 %5) #11 {
  %7 = load i8, i8* %4, align 1
  %8 = zext i8 %7 to i32
  %9 = shl i32 %8, 24
  %10 = getelementptr inbounds i8, i8* %4, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = shl i32 %12, 16
  %14 = add i32 %9, %13
  %15 = getelementptr inbounds i8, i8* %4, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = shl i32 %17, 8
  %19 = add i32 %14, %18
  %20 = getelementptr inbounds i8, i8* %4, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = add i32 %19, %22
  %24 = icmp ne i32 %23, %3
  br i1 %24, label %25, label %28

25:                                               ; preds = %6
  %26 = zext i32 %23 to i64
  %27 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %26, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.31, i32 0, i32 0))
  br label %227

28:                                               ; preds = %6
  %29 = getelementptr inbounds i8, i8* %4, i64 8
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = icmp ugt i32 %31, 3
  %33 = and i32 %3, 3
  %34 = icmp ne i32 %33, 0
  %or.cond = select i1 %32, i1 %34, i1 false
  br i1 %or.cond, label %35, label %38

35:                                               ; preds = %28
  %36 = zext i32 %3 to i64
  %37 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %36, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.32, i32 0, i32 0))
  br label %227

38:                                               ; preds = %28
  %39 = getelementptr inbounds i8, i8* %4, i64 128
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = shl i32 %41, 24
  %43 = getelementptr inbounds i8, i8* %4, i64 128
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = shl i32 %46, 16
  %48 = add i32 %42, %47
  %49 = getelementptr inbounds i8, i8* %4, i64 128
  %50 = getelementptr inbounds i8, i8* %49, i64 2
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = shl i32 %52, 8
  %54 = add i32 %48, %53
  %55 = getelementptr inbounds i8, i8* %4, i64 128
  %56 = getelementptr inbounds i8, i8* %55, i64 3
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = add i32 %54, %58
  %60 = icmp ugt i32 %59, 357913930
  br i1 %60, label %65, label %61

61:                                               ; preds = %38
  %62 = mul i32 12, %59
  %63 = add i32 132, %62
  %64 = icmp ult i32 %3, %63
  br i1 %64, label %65, label %68

65:                                               ; preds = %61, %38
  %66 = zext i32 %59 to i64
  %67 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %66, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.33, i32 0, i32 0))
  br label %227

68:                                               ; preds = %61
  %69 = getelementptr inbounds i8, i8* %4, i64 64
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = shl i32 %71, 24
  %73 = getelementptr inbounds i8, i8* %4, i64 64
  %74 = getelementptr inbounds i8, i8* %73, i64 1
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = shl i32 %76, 16
  %78 = add i32 %72, %77
  %79 = getelementptr inbounds i8, i8* %4, i64 64
  %80 = getelementptr inbounds i8, i8* %79, i64 2
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = shl i32 %82, 8
  %84 = add i32 %78, %83
  %85 = getelementptr inbounds i8, i8* %4, i64 64
  %86 = getelementptr inbounds i8, i8* %85, i64 3
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = add i32 %84, %88
  %90 = icmp uge i32 %89, 65535
  br i1 %90, label %91, label %94

91:                                               ; preds = %68
  %92 = zext i32 %89 to i64
  %93 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %92, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.34, i32 0, i32 0))
  br label %227

94:                                               ; preds = %68
  %95 = icmp uge i32 %89, 4
  br i1 %95, label %96, label %99

96:                                               ; preds = %94
  %97 = zext i32 %89 to i64
  %98 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* null, i8* %2, i64 %97, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.35, i32 0, i32 0))
  br label %99

99:                                               ; preds = %96, %94
  %100 = getelementptr inbounds i8, i8* %4, i64 36
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = shl i32 %102, 24
  %104 = getelementptr inbounds i8, i8* %4, i64 36
  %105 = getelementptr inbounds i8, i8* %104, i64 1
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = shl i32 %107, 16
  %109 = add i32 %103, %108
  %110 = getelementptr inbounds i8, i8* %4, i64 36
  %111 = getelementptr inbounds i8, i8* %110, i64 2
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = shl i32 %113, 8
  %115 = add i32 %109, %114
  %116 = getelementptr inbounds i8, i8* %4, i64 36
  %117 = getelementptr inbounds i8, i8* %116, i64 3
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = add i32 %115, %119
  %121 = icmp ne i32 %120, 1633907568
  br i1 %121, label %122, label %125

122:                                              ; preds = %99
  %123 = zext i32 %120 to i64
  %124 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %123, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.36, i32 0, i32 0))
  br label %227

125:                                              ; preds = %99
  %126 = getelementptr inbounds i8, i8* %4, i64 68
  %127 = call i32 @memcmp(i8* %126, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @D50_nCIEXYZ, i32 0, i32 0), i64 12) #26
  %128 = icmp ne i32 %127, 0
  br i1 %128, label %129, label %131

129:                                              ; preds = %125
  %130 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* null, i8* %2, i64 0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.37, i32 0, i32 0))
  br label %131

131:                                              ; preds = %129, %125
  %132 = getelementptr inbounds i8, i8* %4, i64 16
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = shl i32 %134, 24
  %136 = getelementptr inbounds i8, i8* %4, i64 16
  %137 = getelementptr inbounds i8, i8* %136, i64 1
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = shl i32 %139, 16
  %141 = add i32 %135, %140
  %142 = getelementptr inbounds i8, i8* %4, i64 16
  %143 = getelementptr inbounds i8, i8* %142, i64 2
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = shl i32 %145, 8
  %147 = add i32 %141, %146
  %148 = getelementptr inbounds i8, i8* %4, i64 16
  %149 = getelementptr inbounds i8, i8* %148, i64 3
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = add i32 %147, %151
  switch i32 %152, label %165 [
    i32 1380401696, label %153
    i32 1196573017, label %159
  ]

153:                                              ; preds = %131
  %154 = and i32 %5, 2
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %168

156:                                              ; preds = %153
  %157 = zext i32 %152 to i64
  %158 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %157, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.38, i32 0, i32 0))
  br label %227

159:                                              ; preds = %131
  %160 = and i32 %5, 2
  %161 = icmp ne i32 %160, 0
  br i1 %161, label %162, label %168

162:                                              ; preds = %159
  %163 = zext i32 %152 to i64
  %164 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %163, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.39, i32 0, i32 0))
  br label %227

165:                                              ; preds = %131
  %166 = zext i32 %152 to i64
  %167 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %166, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.40, i32 0, i32 0))
  br label %227

168:                                              ; preds = %159, %153
  %169 = getelementptr inbounds i8, i8* %4, i64 12
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = shl i32 %171, 24
  %173 = getelementptr inbounds i8, i8* %4, i64 12
  %174 = getelementptr inbounds i8, i8* %173, i64 1
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = shl i32 %176, 16
  %178 = add i32 %172, %177
  %179 = getelementptr inbounds i8, i8* %4, i64 12
  %180 = getelementptr inbounds i8, i8* %179, i64 2
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = shl i32 %182, 8
  %184 = add i32 %178, %183
  %185 = getelementptr inbounds i8, i8* %4, i64 12
  %186 = getelementptr inbounds i8, i8* %185, i64 3
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i32
  %189 = add i32 %184, %188
  switch i32 %189, label %199 [
    i32 1935896178, label %202
    i32 1835955314, label %202
    i32 1886549106, label %202
    i32 1936744803, label %202
    i32 1633842036, label %190
    i32 1818848875, label %193
    i32 1852662636, label %196
  ]

190:                                              ; preds = %168
  %191 = zext i32 %189 to i64
  %192 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %191, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.41, i32 0, i32 0))
  br label %227

193:                                              ; preds = %168
  %194 = zext i32 %189 to i64
  %195 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %194, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.42, i32 0, i32 0))
  br label %227

196:                                              ; preds = %168
  %197 = zext i32 %189 to i64
  %198 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* null, i8* %2, i64 %197, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.43, i32 0, i32 0))
  br label %202

199:                                              ; preds = %168
  %200 = zext i32 %189 to i64
  %201 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* null, i8* %2, i64 %200, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.44, i32 0, i32 0))
  br label %202

202:                                              ; preds = %168, %168, %168, %168, %199, %196
  %203 = getelementptr inbounds i8, i8* %4, i64 20
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = shl i32 %205, 24
  %207 = getelementptr inbounds i8, i8* %4, i64 20
  %208 = getelementptr inbounds i8, i8* %207, i64 1
  %209 = load i8, i8* %208, align 1
  %210 = zext i8 %209 to i32
  %211 = shl i32 %210, 16
  %212 = add i32 %206, %211
  %213 = getelementptr inbounds i8, i8* %4, i64 20
  %214 = getelementptr inbounds i8, i8* %213, i64 2
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i32
  %217 = shl i32 %216, 8
  %218 = add i32 %212, %217
  %219 = getelementptr inbounds i8, i8* %4, i64 20
  %220 = getelementptr inbounds i8, i8* %219, i64 3
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i32
  %223 = add i32 %218, %222
  switch i32 %223, label %224 [
    i32 1482250784, label %227
    i32 1281450528, label %227
  ]

224:                                              ; preds = %202
  %225 = zext i32 %223 to i64
  %226 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %225, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.45, i32 0, i32 0))
  br label %227

227:                                              ; preds = %202, %202, %224, %193, %190, %165, %162, %156, %122, %91, %65, %35, %25
  %.0 = phi i32 [ %27, %25 ], [ %37, %35 ], [ %67, %65 ], [ %93, %91 ], [ %124, %122 ], [ %167, %165 ], [ %164, %162 ], [ %226, %224 ], [ %195, %193 ], [ %192, %190 ], [ %158, %156 ], [ 1, %202 ], [ 1, %202 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_icc_check_tag_table(%struct.png_struct_def* noalias %0, %struct.png_colorspace* noalias %1, i8* %2, i32 %3, i8* %4) #11 {
  %6 = getelementptr inbounds i8, i8* %4, i64 128
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = shl i32 %8, 24
  %10 = getelementptr inbounds i8, i8* %4, i64 128
  %11 = getelementptr inbounds i8, i8* %10, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = shl i32 %13, 16
  %15 = add i32 %9, %14
  %16 = getelementptr inbounds i8, i8* %4, i64 128
  %17 = getelementptr inbounds i8, i8* %16, i64 2
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = shl i32 %19, 8
  %21 = add i32 %15, %20
  %22 = getelementptr inbounds i8, i8* %4, i64 128
  %23 = getelementptr inbounds i8, i8* %22, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = add i32 %21, %25
  %27 = getelementptr inbounds i8, i8* %4, i64 132
  %28 = icmp ult i32 0, %26
  br i1 %28, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %5
  br label %29

29:                                               ; preds = %.lr.ph, %84
  %lsr.iv = phi i32 [ %26, %.lr.ph ], [ %lsr.iv.next, %84 ]
  %.015 = phi i8* [ %27, %.lr.ph ], [ %scevgep16, %84 ]
  %30 = load i8, i8* %.015, align 1
  %31 = zext i8 %30 to i32
  %32 = shl i32 %31, 24
  %scevgep = getelementptr i8, i8* %.015, i64 1
  %33 = load i8, i8* %scevgep, align 1
  %34 = zext i8 %33 to i32
  %35 = shl i32 %34, 16
  %36 = add i32 %32, %35
  %scevgep6 = getelementptr i8, i8* %.015, i64 2
  %37 = load i8, i8* %scevgep6, align 1
  %38 = zext i8 %37 to i32
  %39 = shl i32 %38, 8
  %40 = add i32 %36, %39
  %scevgep7 = getelementptr i8, i8* %.015, i64 3
  %41 = load i8, i8* %scevgep7, align 1
  %42 = zext i8 %41 to i32
  %43 = add i32 %40, %42
  %scevgep8 = getelementptr i8, i8* %.015, i64 4
  %44 = load i8, i8* %scevgep8, align 1
  %45 = zext i8 %44 to i32
  %46 = shl i32 %45, 24
  %scevgep9 = getelementptr i8, i8* %.015, i64 5
  %47 = load i8, i8* %scevgep9, align 1
  %48 = zext i8 %47 to i32
  %49 = shl i32 %48, 16
  %50 = add i32 %46, %49
  %scevgep10 = getelementptr i8, i8* %.015, i64 6
  %51 = load i8, i8* %scevgep10, align 1
  %52 = zext i8 %51 to i32
  %53 = shl i32 %52, 8
  %54 = add i32 %50, %53
  %scevgep11 = getelementptr i8, i8* %.015, i64 7
  %55 = load i8, i8* %scevgep11, align 1
  %56 = zext i8 %55 to i32
  %57 = add i32 %54, %56
  %scevgep12 = getelementptr i8, i8* %.015, i64 8
  %58 = load i8, i8* %scevgep12, align 1
  %59 = zext i8 %58 to i32
  %60 = shl i32 %59, 24
  %scevgep13 = getelementptr i8, i8* %.015, i64 9
  %61 = load i8, i8* %scevgep13, align 1
  %62 = zext i8 %61 to i32
  %63 = shl i32 %62, 16
  %64 = add i32 %60, %63
  %scevgep14 = getelementptr i8, i8* %.015, i64 10
  %65 = load i8, i8* %scevgep14, align 1
  %66 = zext i8 %65 to i32
  %67 = shl i32 %66, 8
  %68 = add i32 %64, %67
  %scevgep15 = getelementptr i8, i8* %.015, i64 11
  %69 = load i8, i8* %scevgep15, align 1
  %70 = zext i8 %69 to i32
  %71 = add i32 %68, %70
  %72 = icmp ugt i32 %57, %3
  %73 = sub i32 %3, %57
  %74 = icmp ugt i32 %71, %73
  %or.cond = select i1 %72, i1 true, i1 %74
  br i1 %or.cond, label %75, label %78

75:                                               ; preds = %29
  %.lcssa = phi i32 [ %43, %29 ]
  %76 = zext i32 %.lcssa to i64
  %77 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %76, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.46, i32 0, i32 0))
  br label %85

78:                                               ; preds = %29
  %79 = and i32 %57, 3
  %80 = icmp ne i32 %79, 0
  br i1 %80, label %81, label %84

81:                                               ; preds = %78
  %82 = zext i32 %43 to i64
  %83 = call i32 @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* null, i8* %2, i64 %82, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.47, i32 0, i32 0))
  br label %84

84:                                               ; preds = %78, %81
  %lsr.iv.next = add i32 %lsr.iv, -1
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  %scevgep16 = getelementptr i8, i8* %.015, i64 12
  br i1 %exitcond, label %29, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %84
  %split = phi i32 [ 1, %84 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %5
  %.0.ph = phi i32 [ %split, %..loopexit_crit_edge ], [ 1, %5 ]
  br label %85

85:                                               ; preds = %.loopexit, %75
  %.0 = phi i32 [ %77, %75 ], [ %.0.ph, %.loopexit ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_icc_set_sRGB(%struct.png_struct_def* noalias %0, %struct.png_colorspace* noalias %1, i8* %2, i64 %3) #11 {
  %5 = call i32 @png_compare_ICC_profile_with_sRGB(%struct.png_struct_def* %0, i8* %2, i64 %3)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %2, i64 64
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = shl i32 %10, 24
  %12 = getelementptr inbounds i8, i8* %2, i64 64
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = shl i32 %15, 16
  %17 = add i32 %11, %16
  %18 = getelementptr inbounds i8, i8* %2, i64 64
  %19 = getelementptr inbounds i8, i8* %18, i64 2
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = shl i32 %21, 8
  %23 = add i32 %17, %22
  %24 = getelementptr inbounds i8, i8* %2, i64 64
  %25 = getelementptr inbounds i8, i8* %24, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = add i32 %23, %27
  %29 = call i32 @png_colorspace_set_sRGB(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i32 %28)
  br label %30

30:                                               ; preds = %7, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_compare_ICC_profile_with_sRGB(%struct.png_struct_def* noalias %0, i8* %1, i64 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 110
  %5 = load i32, i32* %4, align 8
  %6 = lshr i32 %5, 4
  %7 = and i32 %6, 3
  %8 = icmp eq i32 %7, 3
  br i1 %8, label %204, label %.preheader

.preheader:                                       ; preds = %3
  %9 = getelementptr inbounds i8, i8* %1, i64 84
  %10 = getelementptr inbounds i8, i8* %1, i64 84
  %11 = getelementptr inbounds i8, i8* %10, i64 1
  %12 = getelementptr inbounds i8, i8* %1, i64 84
  %13 = getelementptr inbounds i8, i8* %12, i64 2
  %14 = getelementptr inbounds i8, i8* %1, i64 84
  %15 = getelementptr inbounds i8, i8* %14, i64 3
  %16 = getelementptr inbounds i8, i8* %1, i64 88
  %17 = getelementptr inbounds i8, i8* %1, i64 88
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  %19 = getelementptr inbounds i8, i8* %1, i64 88
  %20 = getelementptr inbounds i8, i8* %19, i64 2
  %21 = getelementptr inbounds i8, i8* %1, i64 88
  %22 = getelementptr inbounds i8, i8* %21, i64 3
  %23 = getelementptr inbounds i8, i8* %1, i64 92
  %24 = getelementptr inbounds i8, i8* %1, i64 92
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  %26 = getelementptr inbounds i8, i8* %1, i64 92
  %27 = getelementptr inbounds i8, i8* %26, i64 2
  %28 = getelementptr inbounds i8, i8* %1, i64 92
  %29 = getelementptr inbounds i8, i8* %28, i64 3
  %30 = getelementptr inbounds i8, i8* %1, i64 96
  %31 = getelementptr inbounds i8, i8* %1, i64 96
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  %33 = getelementptr inbounds i8, i8* %1, i64 96
  %34 = getelementptr inbounds i8, i8* %33, i64 2
  %35 = getelementptr inbounds i8, i8* %1, i64 96
  %36 = getelementptr inbounds i8, i8* %35, i64 3
  %37 = getelementptr inbounds i8, i8* %1, i64 1
  %38 = getelementptr inbounds i8, i8* %1, i64 2
  %39 = getelementptr inbounds i8, i8* %1, i64 3
  %40 = getelementptr inbounds i8, i8* %1, i64 64
  %41 = getelementptr inbounds i8, i8* %1, i64 64
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  %43 = getelementptr inbounds i8, i8* %1, i64 64
  %44 = getelementptr inbounds i8, i8* %43, i64 2
  %45 = getelementptr inbounds i8, i8* %1, i64 64
  %46 = getelementptr inbounds i8, i8* %45, i64 3
  br label %47

47:                                               ; preds = %.preheader, %202
  %lsr.iv = phi [7 x %struct.anon]* [ bitcast (i32* getelementptr inbounds ([7 x %struct.anon], [7 x %struct.anon]* @png_sRGB_checks, i64 0, i64 0, i32 2) to [7 x %struct.anon]*), %.preheader ], [ %203, %202 ]
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %202 ]
  %.049 = phi i32 [ 0, %.preheader ], [ %.2, %202 ]
  %.058 = phi i32 [ 65536, %.preheader ], [ %.27, %202 ]
  %lsr.iv13 = bitcast [7 x %struct.anon]* %lsr.iv to i32*
  %lsr.iv18 = bitcast [7 x %struct.anon]* %lsr.iv to i16*
  %48 = load i8, i8* %9, align 1
  %49 = zext i8 %48 to i32
  %50 = shl i32 %49, 24
  %51 = load i8, i8* %11, align 1
  %52 = zext i8 %51 to i32
  %53 = shl i32 %52, 16
  %54 = add i32 %50, %53
  %55 = load i8, i8* %13, align 1
  %56 = zext i8 %55 to i32
  %57 = shl i32 %56, 8
  %58 = add i32 %54, %57
  %59 = load i8, i8* %15, align 1
  %60 = zext i8 %59 to i32
  %61 = add i32 %58, %60
  %scevgep14 = getelementptr i32, i32* %lsr.iv13, i64 1
  %62 = load i32, i32* %scevgep14, align 4
  %63 = icmp eq i32 %61, %62
  br i1 %63, label %64, label %202

64:                                               ; preds = %47
  %65 = load i8, i8* %16, align 1
  %66 = zext i8 %65 to i32
  %67 = shl i32 %66, 24
  %68 = load i8, i8* %18, align 1
  %69 = zext i8 %68 to i32
  %70 = shl i32 %69, 16
  %71 = add i32 %67, %70
  %72 = load i8, i8* %20, align 1
  %73 = zext i8 %72 to i32
  %74 = shl i32 %73, 8
  %75 = add i32 %71, %74
  %76 = load i8, i8* %22, align 1
  %77 = zext i8 %76 to i32
  %78 = add i32 %75, %77
  %scevgep15 = getelementptr i32, i32* %lsr.iv13, i64 2
  %79 = load i32, i32* %scevgep15, align 4
  %80 = icmp eq i32 %78, %79
  br i1 %80, label %81, label %202

81:                                               ; preds = %64
  %82 = load i8, i8* %23, align 1
  %83 = zext i8 %82 to i32
  %84 = shl i32 %83, 24
  %85 = load i8, i8* %25, align 1
  %86 = zext i8 %85 to i32
  %87 = shl i32 %86, 16
  %88 = add i32 %84, %87
  %89 = load i8, i8* %27, align 1
  %90 = zext i8 %89 to i32
  %91 = shl i32 %90, 8
  %92 = add i32 %88, %91
  %93 = load i8, i8* %29, align 1
  %94 = zext i8 %93 to i32
  %95 = add i32 %92, %94
  %scevgep16 = getelementptr i32, i32* %lsr.iv13, i64 3
  %96 = load i32, i32* %scevgep16, align 4
  %97 = icmp eq i32 %95, %96
  br i1 %97, label %98, label %202

98:                                               ; preds = %81
  %99 = load i8, i8* %30, align 1
  %100 = zext i8 %99 to i32
  %101 = shl i32 %100, 24
  %102 = load i8, i8* %32, align 1
  %103 = zext i8 %102 to i32
  %104 = shl i32 %103, 16
  %105 = add i32 %101, %104
  %106 = load i8, i8* %34, align 1
  %107 = zext i8 %106 to i32
  %108 = shl i32 %107, 8
  %109 = add i32 %105, %108
  %110 = load i8, i8* %36, align 1
  %111 = zext i8 %110 to i32
  %112 = add i32 %109, %111
  %scevgep17 = getelementptr i32, i32* %lsr.iv13, i64 4
  %113 = load i32, i32* %scevgep17, align 4
  %114 = icmp eq i32 %112, %113
  br i1 %114, label %115, label %202

115:                                              ; preds = %98
  %116 = icmp eq i32 %.049, 0
  br i1 %116, label %117, label %146

117:                                              ; preds = %115
  %118 = load i8, i8* %1, align 1
  %119 = zext i8 %118 to i32
  %120 = shl i32 %119, 24
  %121 = load i8, i8* %37, align 1
  %122 = zext i8 %121 to i32
  %123 = shl i32 %122, 16
  %124 = add i32 %120, %123
  %125 = load i8, i8* %38, align 1
  %126 = zext i8 %125 to i32
  %127 = shl i32 %126, 8
  %128 = add i32 %124, %127
  %129 = load i8, i8* %39, align 1
  %130 = zext i8 %129 to i32
  %131 = add i32 %128, %130
  %132 = load i8, i8* %40, align 1
  %133 = zext i8 %132 to i32
  %134 = shl i32 %133, 24
  %135 = load i8, i8* %42, align 1
  %136 = zext i8 %135 to i32
  %137 = shl i32 %136, 16
  %138 = add i32 %134, %137
  %139 = load i8, i8* %44, align 1
  %140 = zext i8 %139 to i32
  %141 = shl i32 %140, 8
  %142 = add i32 %138, %141
  %143 = load i8, i8* %46, align 1
  %144 = zext i8 %143 to i32
  %145 = add i32 %142, %144
  br label %146

146:                                              ; preds = %117, %115
  %.16 = phi i32 [ %145, %117 ], [ %.058, %115 ]
  %.1 = phi i32 [ %131, %117 ], [ %.049, %115 ]
  %147 = load i32, i32* %lsr.iv13, align 8
  %148 = icmp eq i32 %.1, %147
  br i1 %148, label %149, label %202

149:                                              ; preds = %146
  %scevgep19 = getelementptr i16, i16* %lsr.iv18, i64 11
  %150 = load i16, i16* %scevgep19, align 2
  %151 = zext i16 %150 to i32
  %152 = icmp eq i32 %.16, %151
  br i1 %152, label %153, label %202

153:                                              ; preds = %149
  %.1.lcssa = phi i32 [ %.1, %149 ]
  %.01.lcssa.wide = phi i64 [ %indvars.iv, %149 ]
  %154 = trunc i64 %.01.lcssa.wide to i32
  %155 = icmp eq i64 %2, 0
  br i1 %155, label %156, label %159

156:                                              ; preds = %153
  %157 = call i64 @adler32(i64 0, i8* null, i32 0)
  %158 = call i64 @adler32(i64 %157, i8* %1, i32 %.1.lcssa)
  br label %159

159:                                              ; preds = %156, %153
  %.03 = phi i64 [ %158, %156 ], [ %2, %153 ]
  %160 = zext i32 %154 to i64
  %161 = getelementptr inbounds [7 x %struct.anon], [7 x %struct.anon]* @png_sRGB_checks, i64 0, i64 %160
  %162 = getelementptr inbounds %struct.anon, %struct.anon* %161, i32 0, i32 0
  %163 = load i32, i32* %162, align 16
  %164 = zext i32 %163 to i64
  %165 = icmp eq i64 %.03, %164
  br i1 %165, label %166, label %201

166:                                              ; preds = %159
  %167 = icmp eq i64 0, 0
  br i1 %167, label %168, label %171

168:                                              ; preds = %166
  %169 = call i64 @crc32(i64 0, i8* null, i32 0)
  %170 = call i64 @crc32(i64 %169, i8* %1, i32 %.1.lcssa)
  br label %171

171:                                              ; preds = %168, %166
  %.02 = phi i64 [ %170, %168 ], [ 0, %166 ]
  %172 = zext i32 %154 to i64
  %173 = getelementptr inbounds [7 x %struct.anon], [7 x %struct.anon]* @png_sRGB_checks, i64 0, i64 %172
  %174 = getelementptr inbounds %struct.anon, %struct.anon* %173, i32 0, i32 1
  %175 = load i32, i32* %174, align 4
  %176 = zext i32 %175 to i64
  %177 = icmp eq i64 %.02, %176
  br i1 %177, label %178, label %201

178:                                              ; preds = %171
  %179 = zext i32 %154 to i64
  %180 = getelementptr inbounds [7 x %struct.anon], [7 x %struct.anon]* @png_sRGB_checks, i64 0, i64 %179
  %181 = getelementptr inbounds %struct.anon, %struct.anon* %180, i32 0, i32 5
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = icmp ne i32 %183, 0
  br i1 %184, label %185, label %186

185:                                              ; preds = %178
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.75, i32 0, i32 0), i32 2)
  br label %194

186:                                              ; preds = %178
  %187 = zext i32 %154 to i64
  %188 = getelementptr inbounds [7 x %struct.anon], [7 x %struct.anon]* @png_sRGB_checks, i64 0, i64 %187
  %189 = getelementptr inbounds %struct.anon, %struct.anon* %188, i32 0, i32 4
  %190 = load i8, i8* %189, align 4
  %191 = zext i8 %190 to i32
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %194

193:                                              ; preds = %186
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.76, i32 0, i32 0), i32 0)
  br label %194

194:                                              ; preds = %186, %193, %185
  %195 = zext i32 %154 to i64
  %196 = getelementptr inbounds [7 x %struct.anon], [7 x %struct.anon]* @png_sRGB_checks, i64 0, i64 %195
  %197 = getelementptr inbounds %struct.anon, %struct.anon* %196, i32 0, i32 5
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i32
  %200 = add nsw i32 1, %199
  br label %204

201:                                              ; preds = %171, %159
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.77, i32 0, i32 0), i32 0)
  br label %204

202:                                              ; preds = %47, %64, %81, %98, %149, %146
  %.27 = phi i32 [ %.058, %98 ], [ %.058, %81 ], [ %.058, %64 ], [ %.058, %47 ], [ %.16, %149 ], [ %.16, %146 ]
  %.2 = phi i32 [ %.049, %98 ], [ %.049, %81 ], [ %.049, %64 ], [ %.049, %47 ], [ %.1, %149 ], [ %.1, %146 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep = getelementptr [7 x %struct.anon], [7 x %struct.anon]* %lsr.iv, i64 0, i64 1
  %203 = bitcast %struct.anon* %scevgep to [7 x %struct.anon]*
  %exitcond = icmp ne i64 %indvars.iv.next, 7
  br i1 %exitcond, label %47, label %.loopexit

.loopexit:                                        ; preds = %202
  %.0.ph = phi i32 [ 0, %202 ]
  br label %204

204:                                              ; preds = %.loopexit, %201, %3, %194
  %.0 = phi i32 [ %200, %194 ], [ 0, %3 ], [ 0, %201 ], [ %.0.ph, %.loopexit ]
  ret i32 %.0
}

declare i64 @adler32(i64, i8*, i32) #13

; Function Attrs: noinline nounwind uwtable
define i32 @png_colorspace_set_ICC(%struct.png_struct_def* noalias %0, %struct.png_colorspace* noalias %1, i8* %2, i32 %3, i8* %4, i32 %5) #11 {
  %7 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i32 0, i32 4
  %8 = load i16, i16* %7, align 2
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 32768
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %22, label %12

12:                                               ; preds = %6
  %13 = call i32 @icc_check_length(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i32 %3)
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = call i32 @png_icc_check_header(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i32 %3, i8* %4, i32 %5)
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %22

18:                                               ; preds = %15
  %19 = call i32 @png_icc_check_tag_table(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i32 %3, i8* %4)
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  call void @png_icc_set_sRGB(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %4, i64 0)
  br label %22

22:                                               ; preds = %12, %15, %18, %6, %21
  %.0 = phi i32 [ 1, %21 ], [ 0, %6 ], [ 0, %18 ], [ 0, %15 ], [ 0, %12 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_colorspace_set_rgb_coefficients(%struct.png_struct_def* noalias %0) #11 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 119
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %129

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %11 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %10, i32 0, i32 4
  %12 = load i16, i16* %11, align 2
  %13 = zext i16 %12 to i32
  %14 = and i32 %13, 2
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %129

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %18 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %17, i32 0, i32 2
  %19 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %18, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  store i32 %20, i32* %2, align 4
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %22 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %21, i32 0, i32 2
  %23 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %22, i32 0, i32 4
  %24 = load i32, i32* %23, align 4
  store i32 %24, i32* %3, align 4
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %26 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %25, i32 0, i32 2
  %27 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %26, i32 0, i32 7
  %28 = load i32, i32* %27, align 4
  store i32 %28, i32* %4, align 4
  %29 = load i32, i32* %2, align 4
  %30 = load i32, i32* %3, align 4
  %31 = add nsw i32 %29, %30
  %32 = load i32, i32* %4, align 4
  %33 = add nsw i32 %31, %32
  %34 = icmp sgt i32 %33, 0
  %35 = load i32, i32* %2, align 4
  %36 = icmp sge i32 %35, 0
  %or.cond = select i1 %34, i1 %36, i1 false
  br i1 %or.cond, label %37, label %128

37:                                               ; preds = %16
  %38 = load i32, i32* %2, align 4
  %39 = call i32 @png_muldiv(i32* %2, i32 %38, i32 32768, i32 %33)
  %40 = icmp ne i32 %39, 0
  %41 = load i32, i32* %2, align 4
  %42 = icmp sge i32 %41, 0
  %or.cond3 = select i1 %40, i1 %42, i1 false
  %43 = load i32, i32* %2, align 4
  %44 = icmp sle i32 %43, 32768
  %or.cond5 = select i1 %or.cond3, i1 %44, i1 false
  %45 = load i32, i32* %3, align 4
  %46 = icmp sge i32 %45, 0
  %or.cond7 = select i1 %or.cond5, i1 %46, i1 false
  br i1 %or.cond7, label %47, label %128

47:                                               ; preds = %37
  %48 = load i32, i32* %3, align 4
  %49 = call i32 @png_muldiv(i32* %3, i32 %48, i32 32768, i32 %33)
  %50 = icmp ne i32 %49, 0
  %51 = load i32, i32* %3, align 4
  %52 = icmp sge i32 %51, 0
  %or.cond9 = select i1 %50, i1 %52, i1 false
  %53 = load i32, i32* %3, align 4
  %54 = icmp sle i32 %53, 32768
  %or.cond11 = select i1 %or.cond9, i1 %54, i1 false
  %55 = load i32, i32* %4, align 4
  %56 = icmp sge i32 %55, 0
  %or.cond13 = select i1 %or.cond11, i1 %56, i1 false
  br i1 %or.cond13, label %57, label %128

57:                                               ; preds = %47
  %58 = load i32, i32* %4, align 4
  %59 = call i32 @png_muldiv(i32* %4, i32 %58, i32 32768, i32 %33)
  %60 = icmp ne i32 %59, 0
  %61 = load i32, i32* %4, align 4
  %62 = icmp sge i32 %61, 0
  %or.cond15 = select i1 %60, i1 %62, i1 false
  %63 = load i32, i32* %4, align 4
  %64 = icmp sle i32 %63, 32768
  %or.cond17 = select i1 %or.cond15, i1 %64, i1 false
  br i1 %or.cond17, label %65, label %128

65:                                               ; preds = %57
  %66 = load i32, i32* %2, align 4
  %67 = load i32, i32* %3, align 4
  %68 = add nsw i32 %66, %67
  %69 = load i32, i32* %4, align 4
  %70 = add nsw i32 %68, %69
  %71 = icmp sle i32 %70, 32769
  br i1 %71, label %72, label %128

72:                                               ; preds = %65
  %73 = load i32, i32* %2, align 4
  %74 = load i32, i32* %3, align 4
  %75 = add nsw i32 %73, %74
  %76 = load i32, i32* %4, align 4
  %77 = add nsw i32 %75, %76
  %78 = icmp sgt i32 %77, 32768
  br i1 %78, label %86, label %79

79:                                               ; preds = %72
  %80 = load i32, i32* %2, align 4
  %81 = load i32, i32* %3, align 4
  %82 = add nsw i32 %80, %81
  %83 = load i32, i32* %4, align 4
  %84 = add nsw i32 %82, %83
  %85 = icmp slt i32 %84, 32768
  %spec.select = select i1 %85, i32 1, i32 0
  br label %86

86:                                               ; preds = %72, %79
  %.1 = phi i32 [ %spec.select, %79 ], [ -1, %72 ]
  %87 = icmp ne i32 %.1, 0
  br i1 %87, label %88, label %113

88:                                               ; preds = %86
  %89 = load i32, i32* %3, align 4
  %90 = load i32, i32* %2, align 4
  %91 = icmp sge i32 %89, %90
  br i1 %91, label %92, label %99

92:                                               ; preds = %88
  %93 = load i32, i32* %3, align 4
  %94 = load i32, i32* %4, align 4
  %95 = icmp sge i32 %93, %94
  br i1 %95, label %96, label %99

96:                                               ; preds = %92
  %97 = load i32, i32* %3, align 4
  %98 = add nsw i32 %97, %.1
  store i32 %98, i32* %3, align 4
  br label %113

99:                                               ; preds = %92, %88
  %100 = load i32, i32* %2, align 4
  %101 = load i32, i32* %3, align 4
  %102 = icmp sge i32 %100, %101
  br i1 %102, label %103, label %110

103:                                              ; preds = %99
  %104 = load i32, i32* %2, align 4
  %105 = load i32, i32* %4, align 4
  %106 = icmp sge i32 %104, %105
  br i1 %106, label %107, label %110

107:                                              ; preds = %103
  %108 = load i32, i32* %2, align 4
  %109 = add nsw i32 %108, %.1
  store i32 %109, i32* %2, align 4
  br label %113

110:                                              ; preds = %103, %99
  %111 = load i32, i32* %4, align 4
  %112 = add nsw i32 %111, %.1
  store i32 %112, i32* %4, align 4
  br label %113

113:                                              ; preds = %96, %110, %107, %86
  %114 = load i32, i32* %2, align 4
  %115 = load i32, i32* %3, align 4
  %116 = add nsw i32 %114, %115
  %117 = load i32, i32* %4, align 4
  %118 = add nsw i32 %116, %117
  %119 = icmp ne i32 %118, 32768
  br i1 %119, label %120, label %121

120:                                              ; preds = %113
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.48, i32 0, i32 0)) #24
  unreachable

121:                                              ; preds = %113
  %122 = load i32, i32* %2, align 4
  %123 = trunc i32 %122 to i16
  %124 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 120
  store i16 %123, i16* %124, align 2
  %125 = load i32, i32* %3, align 4
  %126 = trunc i32 %125 to i16
  %127 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 121
  store i16 %126, i16* %127, align 4
  br label %129

128:                                              ; preds = %65, %57, %47, %37, %16
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.49, i32 0, i32 0)) #24
  unreachable

129:                                              ; preds = %121, %9, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_check_IHDR(%struct.png_struct_def* noalias %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7) #11 {
  %9 = icmp eq i32 %1, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %8
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.50, i32 0, i32 0))
  br label %11

11:                                               ; preds = %10, %8
  %.0 = phi i32 [ 1, %10 ], [ 0, %8 ]
  %12 = icmp ugt i32 %1, 2147483647
  br i1 %12, label %13, label %14

13:                                               ; preds = %11
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.51, i32 0, i32 0))
  br label %14

14:                                               ; preds = %13, %11
  %.1 = phi i32 [ 1, %13 ], [ %.0, %11 ]
  %15 = add i32 %1, 7
  %16 = and i32 %15, -8
  %17 = zext i32 %16 to i64
  %18 = call i32 @png_gt(i64 %17, i64 2305843009213693944)
  %19 = icmp ne i32 %18, 0
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 132
  %21 = load i32, i32* %20, align 4
  %22 = icmp ugt i32 %1, %21
  br i1 %22, label %23, label %24

23:                                               ; preds = %14
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.52, i32 0, i32 0))
  br label %24

24:                                               ; preds = %23, %14
  %.2 = phi i32 [ 1, %23 ], [ %.1, %14 ]
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %24
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.53, i32 0, i32 0))
  br label %27

27:                                               ; preds = %26, %24
  %.3 = phi i32 [ 1, %26 ], [ %.2, %24 ]
  %28 = icmp ugt i32 %2, 2147483647
  br i1 %28, label %29, label %30

29:                                               ; preds = %27
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.54, i32 0, i32 0))
  br label %30

30:                                               ; preds = %29, %27
  %.4 = phi i32 [ 1, %29 ], [ %.3, %27 ]
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 133
  %32 = load i32, i32* %31, align 8
  %33 = icmp ugt i32 %2, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %30
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.55, i32 0, i32 0))
  br label %35

35:                                               ; preds = %34, %30
  %.5 = phi i32 [ 1, %34 ], [ %.4, %30 ]
  switch i32 %3, label %36 [
    i32 1, label %37
    i32 2, label %37
    i32 4, label %37
    i32 8, label %37
    i32 16, label %37
  ]

36:                                               ; preds = %35
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.56, i32 0, i32 0))
  br label %37

37:                                               ; preds = %35, %35, %35, %35, %35, %36
  %.6 = phi i32 [ 1, %36 ], [ %.5, %35 ], [ %.5, %35 ], [ %.5, %35 ], [ %.5, %35 ], [ %.5, %35 ]
  %38 = icmp slt i32 %4, 0
  %39 = icmp eq i32 %4, 1
  %or.cond = or i1 %38, %39
  %40 = icmp eq i32 %4, 5
  %or.cond1 = or i1 %or.cond, %40
  %41 = icmp sgt i32 %4, 6
  %or.cond2 = or i1 %or.cond1, %41
  br i1 %or.cond2, label %42, label %43

42:                                               ; preds = %37
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.57, i32 0, i32 0))
  br label %43

43:                                               ; preds = %37, %42
  %.7 = phi i32 [ 1, %42 ], [ %.6, %37 ]
  %44 = icmp eq i32 %4, 3
  %45 = icmp sgt i32 %3, 8
  %or.cond3 = select i1 %44, i1 %45, i1 false
  br i1 %or.cond3, label %49, label %46

46:                                               ; preds = %43
  switch i32 %4, label %50 [
    i32 2, label %47
    i32 4, label %47
    i32 6, label %47
  ]

47:                                               ; preds = %46, %46, %46
  %48 = icmp slt i32 %3, 8
  br i1 %48, label %49, label %50

49:                                               ; preds = %43, %47
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.58, i32 0, i32 0))
  br label %50

50:                                               ; preds = %46, %49, %47
  %.8 = phi i32 [ 1, %49 ], [ %.7, %47 ], [ %.7, %46 ]
  %51 = icmp sge i32 %5, 2
  br i1 %51, label %52, label %53

52:                                               ; preds = %50
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.59, i32 0, i32 0))
  br label %53

53:                                               ; preds = %52, %50
  %.9 = phi i32 [ 1, %52 ], [ %.8, %50 ]
  %54 = icmp ne i32 %6, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %53
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.60, i32 0, i32 0))
  br label %56

56:                                               ; preds = %55, %53
  %.10 = phi i32 [ 1, %55 ], [ %.9, %53 ]
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %58 = load i32, i32* %57, align 4
  %59 = and i32 %58, 4096
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %66

61:                                               ; preds = %56
  %62 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 122
  %63 = load i32, i32* %62, align 8
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %61
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.61, i32 0, i32 0))
  br label %66

66:                                               ; preds = %65, %61, %56
  %67 = icmp ne i32 %7, 0
  br i1 %67, label %68, label %87

68:                                               ; preds = %66
  %69 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 122
  %70 = load i32, i32* %69, align 8
  %71 = and i32 %70, 4
  %72 = icmp ne i32 %71, 0
  %73 = icmp eq i32 %7, 64
  %or.cond4 = select i1 %72, i1 %73, i1 false
  br i1 %or.cond4, label %74, label %80

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %76 = load i32, i32* %75, align 4
  %77 = and i32 %76, 4096
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %74
  switch i32 %4, label %80 [
    i32 2, label %81
    i32 6, label %81
  ]

80:                                               ; preds = %79, %74, %68
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.62, i32 0, i32 0))
  br label %81

81:                                               ; preds = %79, %79, %80
  %.11 = phi i32 [ %.10, %79 ], [ 1, %80 ], [ %.10, %79 ]
  %82 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %83 = load i32, i32* %82, align 4
  %84 = and i32 %83, 4096
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %86, label %87

86:                                               ; preds = %81
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.63, i32 0, i32 0))
  br label %87

87:                                               ; preds = %81, %86, %66
  %.13 = phi i32 [ %.10, %66 ], [ 1, %86 ], [ %.11, %81 ]
  %88 = icmp eq i32 %.13, 1
  br i1 %88, label %89, label %90

89:                                               ; preds = %87
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.64, i32 0, i32 0)) #24
  unreachable

90:                                               ; preds = %87
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_gt(i64 %0, i64 %1) #11 {
  %3 = icmp ugt i64 %0, %1
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_check_fp_number(i8* %0, i64 %1, i32* %2, i64* %3) #11 {
  %5 = load i32, i32* %2, align 4
  %6 = load i64, i64* %3, align 8
  %7 = icmp ult i64 %6, %1
  br i1 %7, label %.lr.ph, label %66

.lr.ph:                                           ; preds = %4
  br label %8

8:                                                ; preds = %.lr.ph, %64
  %.014 = phi i64 [ %6, %.lr.ph ], [ %65, %64 ]
  %.023 = phi i32 [ %5, %.lr.ph ], [ %.3, %64 ]
  %scevgep = getelementptr i8, i8* %0, i64 %.014
  %9 = load i8, i8* %scevgep, align 1
  %10 = sext i8 %9 to i32
  switch i32 %10, label %._crit_edge25 [
    i32 43, label %16
    i32 45, label %11
    i32 46, label %12
    i32 48, label %13
    i32 49, label %14
    i32 50, label %14
    i32 51, label %14
    i32 52, label %14
    i32 53, label %14
    i32 54, label %14
    i32 55, label %14
    i32 56, label %14
    i32 57, label %14
    i32 69, label %15
    i32 101, label %15
  ]

11:                                               ; preds = %8
  br label %16

12:                                               ; preds = %8
  br label %16

13:                                               ; preds = %8
  br label %16

14:                                               ; preds = %8, %8, %8, %8, %8, %8, %8, %8, %8
  br label %16

15:                                               ; preds = %8, %8
  br label %16

16:                                               ; preds = %8, %15, %14, %13, %12, %11
  %.0 = phi i32 [ 32, %15 ], [ 264, %14 ], [ 8, %13 ], [ 16, %12 ], [ 132, %11 ], [ 4, %8 ]
  %17 = and i32 %.023, 3
  %18 = and i32 %.0, 60
  %19 = add nsw i32 %17, %18
  switch i32 %19, label %._crit_edge7 [
    i32 4, label %20
    i32 16, label %25
    i32 8, label %35
    i32 32, label %42
    i32 9, label %48
    i32 33, label %51
    i32 6, label %57
    i32 10, label %62
  ]

20:                                               ; preds = %16
  %21 = and i32 %.023, 60
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %._crit_edge22, label %23

23:                                               ; preds = %20
  %24 = or i32 %.023, %.0
  br label %64

25:                                               ; preds = %16
  %26 = and i32 %.023, 16
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %._crit_edge19, label %28

28:                                               ; preds = %25
  %29 = and i32 %.023, 8
  %30 = icmp ne i32 %29, 0
  %31 = or i32 %.023, %.0
  %32 = or i32 1, %.0
  %33 = and i32 %.023, 448
  %34 = or i32 %32, %33
  %.1 = select i1 %30, i32 %31, i32 %34
  br label %64

35:                                               ; preds = %16
  %36 = and i32 %.023, 16
  %37 = icmp ne i32 %36, 0
  %38 = and i32 %.023, 448
  %39 = or i32 17, %38
  %.2 = select i1 %37, i32 %39, i32 %.023
  %40 = or i32 %.0, 64
  %41 = or i32 %.2, %40
  br label %64

42:                                               ; preds = %16
  %43 = and i32 %.023, 8
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %._crit_edge16, label %45

45:                                               ; preds = %42
  %46 = and i32 %.023, 448
  %47 = or i32 2, %46
  br label %64

48:                                               ; preds = %16
  %49 = or i32 %.0, 64
  %50 = or i32 %.023, %49
  br label %64

51:                                               ; preds = %16
  %52 = and i32 %.023, 8
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %._crit_edge13, label %54

54:                                               ; preds = %51
  %55 = and i32 %.023, 448
  %56 = or i32 2, %55
  br label %64

57:                                               ; preds = %16
  %58 = and i32 %.023, 60
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %._crit_edge10, label %60

60:                                               ; preds = %57
  %61 = or i32 %.023, 4
  br label %64

62:                                               ; preds = %16
  %63 = or i32 %.023, 72
  br label %64

64:                                               ; preds = %62, %60, %54, %48, %45, %35, %28, %23
  %.3 = phi i32 [ %63, %62 ], [ %61, %60 ], [ %56, %54 ], [ %50, %48 ], [ %47, %45 ], [ %41, %35 ], [ %.1, %28 ], [ %24, %23 ]
  %65 = add nuw i64 %.014, 1
  %exitcond = icmp ne i64 %1, %65
  br i1 %exitcond, label %8, label %._crit_edge

._crit_edge:                                      ; preds = %64
  %split = phi i32 [ %.3, %64 ]
  br label %66

._crit_edge7:                                     ; preds = %16
  %split8 = phi i32 [ %.023, %16 ]
  %split9 = phi i64 [ %.014, %16 ]
  br label %66

._crit_edge10:                                    ; preds = %57
  %split11 = phi i32 [ %.023, %57 ]
  %split12 = phi i64 [ %.014, %57 ]
  br label %66

._crit_edge13:                                    ; preds = %51
  %split14 = phi i32 [ %.023, %51 ]
  %split15 = phi i64 [ %.014, %51 ]
  br label %66

._crit_edge16:                                    ; preds = %42
  %split17 = phi i32 [ %.023, %42 ]
  %split18 = phi i64 [ %.014, %42 ]
  br label %66

._crit_edge19:                                    ; preds = %25
  %split20 = phi i32 [ %.023, %25 ]
  %split21 = phi i64 [ %.014, %25 ]
  br label %66

._crit_edge22:                                    ; preds = %20
  %split23 = phi i32 [ %.023, %20 ]
  %split24 = phi i64 [ %.014, %20 ]
  br label %66

._crit_edge25:                                    ; preds = %8
  %split26 = phi i32 [ %.023, %8 ]
  %split27 = phi i64 [ %.014, %8 ]
  br label %66

66:                                               ; preds = %._crit_edge25, %._crit_edge22, %._crit_edge19, %._crit_edge16, %._crit_edge13, %._crit_edge10, %._crit_edge7, %._crit_edge, %4
  %.02.lcssa = phi i32 [ %split, %._crit_edge ], [ %split8, %._crit_edge7 ], [ %split11, %._crit_edge10 ], [ %split14, %._crit_edge13 ], [ %split17, %._crit_edge16 ], [ %split20, %._crit_edge19 ], [ %split23, %._crit_edge22 ], [ %split26, %._crit_edge25 ], [ %5, %4 ]
  %.01.lcssa = phi i64 [ %1, %._crit_edge ], [ %split9, %._crit_edge7 ], [ %split12, %._crit_edge10 ], [ %split15, %._crit_edge13 ], [ %split18, %._crit_edge16 ], [ %split21, %._crit_edge19 ], [ %split24, %._crit_edge22 ], [ %split27, %._crit_edge25 ], [ %6, %4 ]
  store i32 %.02.lcssa, i32* %2, align 4
  store i64 %.01.lcssa, i64* %3, align 8
  %67 = and i32 %.02.lcssa, 8
  %68 = icmp ne i32 %67, 0
  %69 = zext i1 %68 to i32
  ret i32 %69
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_check_fp_string(i8* %0, i64 %1) #11 {
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i64 0, i64* %4, align 8
  %5 = call i32 @png_check_fp_number(i8* %0, i64 %1, i32* %3, i64* %4)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %18

7:                                                ; preds = %2
  %8 = load i64, i64* %4, align 8
  %9 = icmp eq i64 %8, %1
  br i1 %9, label %16, label %10

10:                                               ; preds = %7
  %11 = load i64, i64* %4, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %10, %7
  %17 = load i32, i32* %3, align 4
  br label %18

18:                                               ; preds = %2, %10, %16
  %.0 = phi i32 [ %17, %16 ], [ 0, %10 ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_ascii_from_fp(%struct.png_struct_def* noalias %0, i8* %1, i64 %2, double %3, i32 %4) #11 {
  %6 = alloca i32, align 4
  %7 = alloca [10 x i8], align 1
  %8 = alloca double, align 8
  %9 = icmp ult i32 %4, 1
  %spec.select = select i1 %9, i32 15, i32 %4
  %10 = icmp ugt i32 %spec.select, 16
  %.131 = select i1 %10, i32 16, i32 %spec.select
  %11 = add i32 %.131, 5
  %12 = zext i32 %11 to i64
  %13 = icmp uge i64 %2, %12
  br i1 %13, label %14, label %231

14:                                               ; preds = %5
  %15 = fcmp olt double %3, 0.000000e+00
  br i1 %15, label %16, label %20

16:                                               ; preds = %14
  %17 = fsub double -0.000000e+00, %3
  %18 = getelementptr inbounds i8, i8* %1, i32 1
  store i8 45, i8* %1, align 1
  %19 = add i64 %2, -1
  br label %20

20:                                               ; preds = %16, %14
  %.026 = phi double [ %17, %16 ], [ %3, %14 ]
  %.04 = phi i64 [ %19, %16 ], [ %2, %14 ]
  %.01 = phi i8* [ %18, %16 ], [ %1, %14 ]
  %21 = fcmp oge double %.026, 0x10000000000000
  %22 = fcmp ole double %.026, 0x7FEFFFFFFFFFFFFF
  %or.cond = and i1 %21, %22
  br i1 %or.cond, label %23, label %223

23:                                               ; preds = %20
  %24 = call double @frexp(double %.026, i32* %6) #22
  %25 = load i32, i32* %6, align 4
  %26 = mul nsw i32 %25, 77
  %27 = ashr i32 %26, 8
  store i32 %27, i32* %6, align 4
  %28 = load i32, i32* %6, align 4
  %29 = call double @png_pow10(i32 %28)
  %30 = fcmp olt double %29, 0x10000000000000
  %31 = fcmp olt double %29, %.026
  %32 = select i1 %30, i1 true, i1 %31
  br i1 %32, label %.lr.ph103, label %44

.lr.ph103:                                        ; preds = %23
  br label %33

33:                                               ; preds = %.lr.ph103, %38
  %.032101 = phi double [ %29, %.lr.ph103 ], [ %36, %38 ]
  %34 = load i32, i32* %6, align 4
  %35 = add nsw i32 %34, 1
  %36 = call double @png_pow10(i32 %35)
  %37 = fcmp ole double %36, 0x7FEFFFFFFFFFFFFF
  br i1 %37, label %38, label %._crit_edge104

38:                                               ; preds = %33
  %39 = load i32, i32* %6, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %6, align 4
  %41 = fcmp olt double %36, 0x10000000000000
  %42 = fcmp olt double %36, %.026
  %43 = select i1 %41, i1 true, i1 %42
  br i1 %43, label %33, label %._crit_edge106

._crit_edge104:                                   ; preds = %33
  %split105 = phi double [ %.032101, %33 ]
  br label %44

._crit_edge106:                                   ; preds = %38
  %split107 = phi double [ %36, %38 ]
  br label %44

44:                                               ; preds = %._crit_edge106, %._crit_edge104, %23
  %.032.lcssa = phi double [ %split105, %._crit_edge104 ], [ %split107, %._crit_edge106 ], [ %29, %23 ]
  %45 = fdiv double %.026, %.032.lcssa
  %.promoted = load i32, i32* %6, align 4
  %46 = fcmp oge double %45, 1.000000e+00
  br i1 %46, label %.lr.ph98, label %51

.lr.ph98:                                         ; preds = %44
  %47 = add i32 %.promoted, 1
  br label %48

48:                                               ; preds = %.lr.ph98, %48
  %lsr.iv = phi i32 [ %47, %.lr.ph98 ], [ %lsr.iv.next, %48 ]
  %.12796 = phi double [ %45, %.lr.ph98 ], [ %49, %48 ]
  %49 = fdiv double %.12796, 1.000000e+01
  store i32 %lsr.iv, i32* %6, align 4
  %50 = fcmp oge double %49, 1.000000e+00
  %lsr.iv.next = add i32 %lsr.iv, 1
  br i1 %50, label %48, label %._crit_edge99

._crit_edge99:                                    ; preds = %48
  %split100 = phi double [ %49, %48 ]
  br label %51

51:                                               ; preds = %._crit_edge99, %44
  %.127.lcssa = phi double [ %split100, %._crit_edge99 ], [ %45, %44 ]
  %52 = load i32, i32* %6, align 4
  %53 = icmp slt i32 %52, 0
  %54 = load i32, i32* %6, align 4
  %55 = icmp sgt i32 %54, -3
  %or.cond58 = select i1 %53, i1 %55, i1 false
  br i1 %or.cond58, label %56, label %59

56:                                               ; preds = %51
  %57 = load i32, i32* %6, align 4
  %58 = sub i32 0, %57
  store i32 0, i32* %6, align 4
  br label %59

59:                                               ; preds = %51, %56
  %.035 = phi i32 [ %58, %56 ], [ 0, %51 ]
  br label %60

60:                                               ; preds = %170, %59
  %.049 = phi i32 [ 0, %59 ], [ %.554, %170 ]
  %.042 = phi i32 [ %.035, %59 ], [ %.648, %170 ]
  %.136 = phi i32 [ %.035, %59 ], [ %.641, %170 ]
  %.228 = phi double [ %.127.lcssa, %59 ], [ %.329, %170 ]
  %.19 = phi i64 [ %.04, %59 ], [ %.1624, %170 ]
  %.12 = phi i8* [ %.01, %59 ], [ %.15, %170 ]
  %61 = fmul double %.228, 1.000000e+01
  %62 = add i32 %.049, %.136
  %63 = add i32 %62, 1
  %64 = add i32 %.131, %.042
  %65 = icmp ult i32 %63, %64
  br i1 %65, label %66, label %68

66:                                               ; preds = %60
  %67 = call double @modf(double %61, double* %8) #22
  br label %124

68:                                               ; preds = %60
  %69 = fadd double %61, 5.000000e-01
  %70 = call double @llvm.floor.f64(double %69)
  store double %70, double* %8, align 8
  %71 = load double, double* %8, align 8
  %72 = fcmp ogt double %71, 9.000000e+00
  br i1 %72, label %73, label %124

73:                                               ; preds = %68
  %74 = icmp ugt i32 %.136, 0
  br i1 %74, label %79, label %.preheader65

.preheader65:                                     ; preds = %73
  %75 = icmp ugt i32 %.049, 0
  %76 = load double, double* %8, align 8
  %77 = fcmp ogt double %76, 9.000000e+00
  %78 = select i1 %75, i1 %77, i1 false
  br i1 %78, label %.lr.ph82, label %107

.lr.ph82:                                         ; preds = %.preheader65
  br label %83

79:                                               ; preds = %73
  %80 = add i32 %.136, -1
  store double 1.000000e+00, double* %8, align 8
  %81 = icmp eq i32 %.049, 0
  %82 = add i32 %.042, -1
  %spec.select59 = select i1 %81, i32 %82, i32 %.042
  br label %124

83:                                               ; preds = %.lr.ph82, %99
  %.281 = phi i8* [ %.12, %.lr.ph82 ], [ %.4, %99 ]
  %.21080 = phi i64 [ %.19, %.lr.ph82 ], [ %.412, %99 ]
  %.15079 = phi i32 [ %.049, %.lr.ph82 ], [ %100, %99 ]
  %84 = getelementptr inbounds i8, i8* %.281, i32 -1
  %85 = load i8, i8* %84, align 1
  %86 = sext i8 %85 to i32
  %87 = load i32, i32* %6, align 4
  %88 = icmp ne i32 %87, -1
  br i1 %88, label %89, label %92

89:                                               ; preds = %83
  %90 = load i32, i32* %6, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %6, align 4
  br label %99

92:                                               ; preds = %83
  %93 = icmp eq i32 %86, 46
  br i1 %93, label %94, label %99

94:                                               ; preds = %92
  %95 = getelementptr inbounds i8, i8* %84, i32 -1
  %96 = load i8, i8* %95, align 1
  %97 = sext i8 %96 to i32
  %98 = add i64 %.21080, 1
  store i32 1, i32* %6, align 4
  br label %99

99:                                               ; preds = %92, %94, %89
  %.134 = phi i32 [ %86, %89 ], [ %97, %94 ], [ %86, %92 ]
  %.412 = phi i64 [ %.21080, %89 ], [ %98, %94 ], [ %.21080, %92 ]
  %.4 = phi i8* [ %84, %89 ], [ %95, %94 ], [ %84, %92 ]
  %100 = add i32 %.15079, -1
  %101 = sub nsw i32 %.134, 47
  %102 = sitofp i32 %101 to double
  store double %102, double* %8, align 8
  %103 = icmp ugt i32 %100, 0
  %104 = load double, double* %8, align 8
  %105 = fcmp ogt double %104, 9.000000e+00
  %106 = select i1 %103, i1 %105, i1 false
  br i1 %106, label %83, label %._crit_edge83

._crit_edge83:                                    ; preds = %99
  %split84 = phi i32 [ %100, %99 ]
  %split85 = phi i64 [ %.412, %99 ]
  %split86 = phi i8* [ %.4, %99 ]
  br label %107

107:                                              ; preds = %._crit_edge83, %.preheader65
  %.150.lcssa = phi i32 [ %split84, %._crit_edge83 ], [ %.049, %.preheader65 ]
  %.210.lcssa = phi i64 [ %split85, %._crit_edge83 ], [ %.19, %.preheader65 ]
  %.2.lcssa = phi i8* [ %split86, %._crit_edge83 ], [ %.12, %.preheader65 ]
  %108 = load double, double* %8, align 8
  %109 = fcmp ogt double %108, 9.000000e+00
  br i1 %109, label %110, label %124

110:                                              ; preds = %107
  %111 = load i32, i32* %6, align 4
  %112 = icmp eq i32 %111, -1
  br i1 %112, label %113, label %120

113:                                              ; preds = %110
  %114 = getelementptr inbounds i8, i8* %.2.lcssa, i32 -1
  %115 = load i8, i8* %114, align 1
  %116 = sext i8 %115 to i32
  %117 = icmp eq i32 %116, 46
  br i1 %117, label %118, label %123

118:                                              ; preds = %113
  %119 = add i64 %.210.lcssa, 1
  store i32 1, i32* %6, align 4
  br label %123

120:                                              ; preds = %110
  %121 = load i32, i32* %6, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %6, align 4
  br label %123

123:                                              ; preds = %113, %118, %120
  %.614 = phi i64 [ %.210.lcssa, %120 ], [ %119, %118 ], [ %.210.lcssa, %113 ]
  %.5 = phi i8* [ %.2.lcssa, %120 ], [ %114, %118 ], [ %114, %113 ]
  store double 1.000000e+00, double* %8, align 8
  br label %124

124:                                              ; preds = %68, %107, %123, %79, %66
  %.453 = phi i32 [ %.049, %66 ], [ %.049, %68 ], [ %.049, %79 ], [ %.150.lcssa, %123 ], [ %.150.lcssa, %107 ]
  %.446 = phi i32 [ %.042, %66 ], [ %.042, %68 ], [ %spec.select59, %79 ], [ %.042, %123 ], [ %.042, %107 ]
  %.439 = phi i32 [ %.136, %66 ], [ %.136, %68 ], [ %80, %79 ], [ %.136, %123 ], [ %.136, %107 ]
  %.329 = phi double [ %67, %66 ], [ 0.000000e+00, %79 ], [ 0.000000e+00, %123 ], [ 0.000000e+00, %107 ], [ 0.000000e+00, %68 ]
  %.1018 = phi i64 [ %.19, %66 ], [ %.19, %68 ], [ %.19, %79 ], [ %.614, %123 ], [ %.210.lcssa, %107 ]
  %.9 = phi i8* [ %.12, %66 ], [ %.12, %68 ], [ %.12, %79 ], [ %.5, %123 ], [ %.2.lcssa, %107 ]
  %125 = load double, double* %8, align 8
  %126 = fcmp oeq double %125, 0.000000e+00
  br i1 %126, label %127, label %131

127:                                              ; preds = %124
  %128 = add i32 %.439, 1
  %129 = icmp eq i32 %.453, 0
  %130 = add i32 %.446, 1
  %spec.select60 = select i1 %129, i32 %130, i32 %.446
  br label %170

131:                                              ; preds = %124
  %132 = sub i32 %.439, %.446
  %133 = add i32 %.453, %132
  %134 = icmp ugt i32 %.439, 0
  br i1 %134, label %.lr.ph91, label %151

.lr.ph91:                                         ; preds = %131
  br label %135

135:                                              ; preds = %.lr.ph91, %147
  %.1089 = phi i8* [ %.9, %.lr.ph91 ], [ %148, %147 ]
  %.111988 = phi i64 [ %.1018, %.lr.ph91 ], [ %.1321, %147 ]
  %.54087 = phi i32 [ %.439, %.lr.ph91 ], [ %149, %147 ]
  %136 = load i32, i32* %6, align 4
  %137 = icmp ne i32 %136, -1
  br i1 %137, label %138, label %147

138:                                              ; preds = %135
  %139 = load i32, i32* %6, align 4
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %144

141:                                              ; preds = %138
  %142 = getelementptr inbounds i8, i8* %.1089, i32 1
  store i8 46, i8* %.1089, align 1
  %143 = add i64 %.111988, -1
  br label %144

144:                                              ; preds = %141, %138
  %.1220 = phi i64 [ %143, %141 ], [ %.111988, %138 ]
  %.11 = phi i8* [ %142, %141 ], [ %.1089, %138 ]
  %145 = load i32, i32* %6, align 4
  %146 = add nsw i32 %145, -1
  store i32 %146, i32* %6, align 4
  br label %147

147:                                              ; preds = %144, %135
  %.1321 = phi i64 [ %.1220, %144 ], [ %.111988, %135 ]
  %.123 = phi i8* [ %.11, %144 ], [ %.1089, %135 ]
  %148 = getelementptr inbounds i8, i8* %.123, i32 1
  store i8 48, i8* %.123, align 1
  %149 = add i32 %.54087, -1
  %150 = icmp ugt i32 %149, 0
  br i1 %150, label %135, label %._crit_edge92

._crit_edge92:                                    ; preds = %147
  %split94 = phi i64 [ %.1321, %147 ]
  %split95 = phi i8* [ %148, %147 ]
  br label %151

151:                                              ; preds = %._crit_edge92, %131
  %.540.lcssa = phi i32 [ 0, %._crit_edge92 ], [ %.439, %131 ]
  %.1119.lcssa = phi i64 [ %split94, %._crit_edge92 ], [ %.1018, %131 ]
  %.10.lcssa = phi i8* [ %split95, %._crit_edge92 ], [ %.9, %131 ]
  %152 = load i32, i32* %6, align 4
  %153 = icmp ne i32 %152, -1
  br i1 %153, label %154, label %163

154:                                              ; preds = %151
  %155 = load i32, i32* %6, align 4
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %160

157:                                              ; preds = %154
  %158 = getelementptr inbounds i8, i8* %.10.lcssa, i32 1
  store i8 46, i8* %.10.lcssa, align 1
  %159 = add i64 %.1119.lcssa, -1
  br label %160

160:                                              ; preds = %157, %154
  %.1422 = phi i64 [ %159, %157 ], [ %.1119.lcssa, %154 ]
  %.13 = phi i8* [ %158, %157 ], [ %.10.lcssa, %154 ]
  %161 = load i32, i32* %6, align 4
  %162 = add nsw i32 %161, -1
  store i32 %162, i32* %6, align 4
  br label %163

163:                                              ; preds = %160, %151
  %.1523 = phi i64 [ %.1422, %160 ], [ %.1119.lcssa, %151 ]
  %.14 = phi i8* [ %.13, %160 ], [ %.10.lcssa, %151 ]
  %164 = load double, double* %8, align 8
  %165 = fptosi double %164 to i32
  %166 = add nsw i32 48, %165
  %167 = trunc i32 %166 to i8
  %168 = getelementptr inbounds i8, i8* %.14, i32 1
  store i8 %167, i8* %.14, align 1
  %169 = add i32 %133, 1
  br label %170

170:                                              ; preds = %127, %163
  %.554 = phi i32 [ %.453, %127 ], [ %169, %163 ]
  %.648 = phi i32 [ %spec.select60, %127 ], [ 0, %163 ]
  %.641 = phi i32 [ %128, %127 ], [ %.540.lcssa, %163 ]
  %.1624 = phi i64 [ %.1018, %127 ], [ %.1523, %163 ]
  %.15 = phi i8* [ %.9, %127 ], [ %168, %163 ]
  %171 = add i32 %.554, %.641
  %172 = add i32 %.131, %.648
  %173 = icmp ult i32 %171, %172
  %174 = fcmp ogt double %.329, 0x10000000000000
  %spec.select61 = select i1 %173, i1 %174, i1 false
  br i1 %spec.select61, label %60, label %175

175:                                              ; preds = %170
  %.554.lcssa = phi i32 [ %.554, %170 ]
  %.1624.lcssa = phi i64 [ %.1624, %170 ]
  %.15.lcssa = phi i8* [ %.15, %170 ]
  %176 = load i32, i32* %6, align 4
  %177 = icmp sge i32 %176, -1
  %178 = load i32, i32* %6, align 4
  %179 = icmp sle i32 %178, 2
  %or.cond63 = select i1 %177, i1 %179, i1 false
  br i1 %or.cond63, label %.preheader, label %189

.preheader:                                       ; preds = %175
  %180 = load i32, i32* %6, align 4
  %181 = add nsw i32 %180, -1
  store i32 %181, i32* %6, align 4
  %182 = icmp sgt i32 %180, 0
  br i1 %182, label %.lr.ph, label %188

.lr.ph:                                           ; preds = %.preheader
  br label %183

183:                                              ; preds = %.lr.ph, %183
  %.1666 = phi i8* [ %.15.lcssa, %.lr.ph ], [ %184, %183 ]
  %184 = getelementptr inbounds i8, i8* %.1666, i32 1
  store i8 48, i8* %.1666, align 1
  %185 = load i32, i32* %6, align 4
  %186 = add nsw i32 %185, -1
  store i32 %186, i32* %6, align 4
  %187 = icmp sgt i32 %185, 0
  br i1 %187, label %183, label %._crit_edge

._crit_edge:                                      ; preds = %183
  %split = phi i8* [ %184, %183 ]
  br label %188

188:                                              ; preds = %._crit_edge, %.preheader
  %.16.lcssa = phi i8* [ %split, %._crit_edge ], [ %.15.lcssa, %.preheader ]
  store i8 0, i8* %.16.lcssa, align 1
  br label %232

189:                                              ; preds = %175
  %190 = zext i32 %.554.lcssa to i64
  %191 = sub i64 %.1624.lcssa, %190
  %192 = getelementptr inbounds i8, i8* %.15.lcssa, i32 1
  store i8 69, i8* %.15.lcssa, align 1
  %193 = add i64 %191, -1
  %194 = load i32, i32* %6, align 4
  %195 = icmp slt i32 %194, 0
  br i1 %195, label %196, label %201

196:                                              ; preds = %189
  %197 = getelementptr inbounds i8, i8* %192, i32 1
  store i8 45, i8* %192, align 1
  %198 = add i64 %193, -1
  %199 = load i32, i32* %6, align 4
  %200 = sub i32 0, %199
  br label %204

201:                                              ; preds = %189
  %202 = load i32, i32* %6, align 4
  %203 = add i32 0, %202
  br label %204

204:                                              ; preds = %201, %196
  %.1725 = phi i64 [ %198, %196 ], [ %193, %201 ]
  %.17 = phi i8* [ %197, %196 ], [ %192, %201 ]
  %.0 = phi i32 [ %200, %196 ], [ %203, %201 ]
  %205 = icmp ugt i32 %.0, 0
  br i1 %205, label %.lr.ph76, label %215

.lr.ph76:                                         ; preds = %204
  br label %206

206:                                              ; preds = %.lr.ph76, %206
  %.174 = phi i32 [ %.0, %.lr.ph76 ], [ %213, %206 ]
  %.65573 = phi i32 [ 0, %.lr.ph76 ], [ %210, %206 ]
  %207 = urem i32 %.174, 10
  %208 = add i32 48, %207
  %209 = trunc i32 %208 to i8
  %210 = add i32 %.65573, 1
  %211 = zext i32 %.65573 to i64
  %212 = getelementptr inbounds [10 x i8], [10 x i8]* %7, i64 0, i64 %211
  store i8 %209, i8* %212, align 1
  %213 = udiv i32 %.174, 10
  %214 = icmp ugt i32 %213, 0
  br i1 %214, label %206, label %._crit_edge77

._crit_edge77:                                    ; preds = %206
  %split78 = phi i32 [ %210, %206 ]
  br label %215

215:                                              ; preds = %._crit_edge77, %204
  %.655.lcssa = phi i32 [ %split78, %._crit_edge77 ], [ 0, %204 ]
  %216 = zext i32 %.655.lcssa to i64
  %217 = icmp ugt i64 %.1725, %216
  br i1 %217, label %.preheader64, label %231

.preheader64:                                     ; preds = %215
  %218 = icmp ugt i32 %.655.lcssa, 0
  br i1 %218, label %.lr.ph69, label %222

.lr.ph69:                                         ; preds = %.preheader64
  %scevgep = getelementptr [10 x i8], [10 x i8]* %7, i64 0, i64 -1
  br label %219

219:                                              ; preds = %.lr.ph69, %219
  %indvars.iv = phi i64 [ %216, %.lr.ph69 ], [ %indvars.iv.next, %219 ]
  %.1868 = phi i8* [ %.17, %.lr.ph69 ], [ %221, %219 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %scevgep108 = getelementptr i8, i8* %scevgep, i64 %indvars.iv
  %220 = load i8, i8* %scevgep108, align 1
  %221 = getelementptr inbounds i8, i8* %.1868, i32 1
  store i8 %220, i8* %.1868, align 1
  %.wide = icmp ugt i64 %indvars.iv.next, 0
  br i1 %.wide, label %219, label %._crit_edge70

._crit_edge70:                                    ; preds = %219
  %split71 = phi i8* [ %221, %219 ]
  br label %222

222:                                              ; preds = %._crit_edge70, %.preheader64
  %.18.lcssa = phi i8* [ %split71, %._crit_edge70 ], [ %.17, %.preheader64 ]
  store i8 0, i8* %.18.lcssa, align 1
  br label %232

223:                                              ; preds = %20
  %224 = fcmp oge double %.026, 0x10000000000000
  br i1 %224, label %227, label %225

225:                                              ; preds = %223
  %226 = getelementptr inbounds i8, i8* %.01, i32 1
  store i8 48, i8* %.01, align 1
  store i8 0, i8* %226, align 1
  br label %232

227:                                              ; preds = %223
  %228 = getelementptr inbounds i8, i8* %.01, i32 1
  store i8 105, i8* %.01, align 1
  %229 = getelementptr inbounds i8, i8* %228, i32 1
  store i8 110, i8* %228, align 1
  %230 = getelementptr inbounds i8, i8* %229, i32 1
  store i8 102, i8* %229, align 1
  store i8 0, i8* %230, align 1
  br label %232

231:                                              ; preds = %215, %5
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.65, i32 0, i32 0)) #24
  unreachable

232:                                              ; preds = %227, %225, %222, %188
  ret void
}

; Function Attrs: nounwind
declare double @frexp(double, i32*) #17

; Function Attrs: noinline nounwind uwtable
define internal double @png_pow10(i32 %0) #11 {
  %2 = icmp slt i32 %0, 0
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = icmp slt i32 %0, -307
  br i1 %4, label %19, label %5

5:                                                ; preds = %3
  %6 = sub nsw i32 0, %0
  br label %7

7:                                                ; preds = %5, %1
  %.02 = phi i32 [ 1, %5 ], [ 0, %1 ]
  %.01 = phi i32 [ %6, %5 ], [ %0, %1 ]
  %8 = icmp sgt i32 %.01, 0
  br i1 %8, label %.preheader, label %19

.preheader:                                       ; preds = %7
  br label %9

9:                                                ; preds = %.preheader, %9
  %.05 = phi double [ %13, %9 ], [ 1.000000e+01, %.preheader ]
  %.03 = phi double [ %spec.select, %9 ], [ 1.000000e+00, %.preheader ]
  %.1 = phi i32 [ %14, %9 ], [ %.01, %.preheader ]
  %10 = and i32 %.1, 1
  %11 = icmp ne i32 %10, 0
  %12 = fmul double %.03, %.05
  %spec.select = select i1 %11, double %12, double %.03
  %13 = fmul double %.05, %.05
  %14 = ashr i32 %.1, 1
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %9, label %16

16:                                               ; preds = %9
  %spec.select.lcssa = phi double [ %spec.select, %9 ]
  %17 = icmp ne i32 %.02, 0
  %18 = fdiv double 1.000000e+00, %spec.select.lcssa
  %.2 = select i1 %17, double %18, double %spec.select.lcssa
  br label %19

19:                                               ; preds = %7, %16, %3
  %.0 = phi double [ 0.000000e+00, %3 ], [ %.2, %16 ], [ 1.000000e+00, %7 ]
  ret double %.0
}

; Function Attrs: nounwind
declare double @modf(double, double*) #17

; Function Attrs: noinline nounwind uwtable
define void @png_ascii_from_fixed(%struct.png_struct_def* noalias %0, i8* %1, i64 %2, i32 %3) #11 {
  %5 = alloca [10 x i8], align 1
  %6 = icmp ugt i64 %2, 12
  br i1 %6, label %7, label %55

7:                                                ; preds = %4
  %8 = icmp slt i32 %3, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %7
  %10 = getelementptr inbounds i8, i8* %1, i32 1
  store i8 45, i8* %1, align 1
  %11 = sub nsw i32 0, %3
  br label %12

12:                                               ; preds = %7, %9
  %.07 = phi i32 [ %11, %9 ], [ %3, %7 ]
  %.01 = phi i8* [ %10, %9 ], [ %1, %7 ]
  %13 = icmp ule i32 %.07, -2147483648
  br i1 %13, label %.preheader10, label %55

.preheader10:                                     ; preds = %12
  %14 = icmp ne i32 %.07, 0
  br i1 %14, label %.lr.ph27, label %27

.lr.ph27:                                         ; preds = %.preheader10
  br label %15

15:                                               ; preds = %.lr.ph27, %15
  %.0226 = phi i32 [ 16, %.lr.ph27 ], [ %.13, %15 ]
  %.0425 = phi i32 [ 0, %.lr.ph27 ], [ %21, %15 ]
  %.1824 = phi i32 [ %.07, %.lr.ph27 ], [ %16, %15 ]
  %16 = udiv i32 %.1824, 10
  %17 = mul i32 %16, 10
  %18 = sub nuw i32 %.1824, %17
  %19 = add i32 48, %18
  %20 = trunc i32 %19 to i8
  %21 = add i32 %.0425, 1
  %22 = zext i32 %.0425 to i64
  %23 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 %22
  store i8 %20, i8* %23, align 1
  %24 = icmp eq i32 %.0226, 16
  %25 = icmp ugt i32 %18, 0
  %or.cond = select i1 %24, i1 %25, i1 false
  %.13 = select i1 %or.cond, i32 %21, i32 %.0226
  %26 = icmp ne i32 %16, 0
  br i1 %26, label %15, label %._crit_edge28

._crit_edge28:                                    ; preds = %15
  %split29 = phi i32 [ %21, %15 ]
  %split30 = phi i32 [ %.13, %15 ]
  br label %27

27:                                               ; preds = %._crit_edge28, %.preheader10
  %.04.lcssa = phi i32 [ %split29, %._crit_edge28 ], [ 0, %.preheader10 ]
  %.02.lcssa = phi i32 [ %split30, %._crit_edge28 ], [ 16, %.preheader10 ]
  %28 = icmp ugt i32 %.04.lcssa, 0
  br i1 %28, label %.preheader9, label %52

.preheader9:                                      ; preds = %27
  %29 = icmp ugt i32 %.04.lcssa, 5
  br i1 %29, label %.lr.ph20, label %35

.lr.ph20:                                         ; preds = %.preheader9
  %30 = zext i32 %.04.lcssa to i64
  %scevgep = getelementptr [10 x i8], [10 x i8]* %5, i64 0, i64 -1
  br label %31

31:                                               ; preds = %.lr.ph20, %31
  %indvars.iv = phi i64 [ %30, %.lr.ph20 ], [ %indvars.iv.next, %31 ]
  %.119 = phi i8* [ %.01, %.lr.ph20 ], [ %33, %31 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %scevgep31 = getelementptr i8, i8* %scevgep, i64 %indvars.iv
  %32 = load i8, i8* %scevgep31, align 1
  %33 = getelementptr inbounds i8, i8* %.119, i32 1
  store i8 %32, i8* %.119, align 1
  %.wide = icmp ugt i64 %indvars.iv.next, 5
  br i1 %.wide, label %31, label %._crit_edge

._crit_edge:                                      ; preds = %31
  %split21.wide = phi i64 [ %indvars.iv.next, %31 ]
  %split22 = phi i8* [ %33, %31 ]
  %34 = trunc i64 %split21.wide to i32
  br label %35

35:                                               ; preds = %._crit_edge, %.preheader9
  %.15.lcssa = phi i32 [ %34, %._crit_edge ], [ %.04.lcssa, %.preheader9 ]
  %.1.lcssa = phi i8* [ %split22, %._crit_edge ], [ %.01, %.preheader9 ]
  %36 = icmp ule i32 %.02.lcssa, 5
  br i1 %36, label %37, label %54

37:                                               ; preds = %35
  %38 = getelementptr inbounds i8, i8* %.1.lcssa, i32 1
  store i8 46, i8* %.1.lcssa, align 1
  %39 = icmp ult i32 %.15.lcssa, 5
  br i1 %39, label %.lr.ph15, label %.preheader

.lr.ph15:                                         ; preds = %37
  br label %41

..preheader_crit_edge:                            ; preds = %41
  %split16 = phi i32 [ %.15.lcssa, %41 ]
  %split17 = phi i8* [ %42, %41 ]
  br label %.preheader

.preheader:                                       ; preds = %..preheader_crit_edge, %37
  %.26.ph = phi i32 [ %split16, %..preheader_crit_edge ], [ %.15.lcssa, %37 ]
  %.3.ph = phi i8* [ %split17, %..preheader_crit_edge ], [ %38, %37 ]
  %40 = icmp uge i32 %.26.ph, %.02.lcssa
  br i1 %40, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  br label %45

41:                                               ; preds = %.lr.ph15, %41
  %.014 = phi i32 [ 5, %.lr.ph15 ], [ %43, %41 ]
  %.213 = phi i8* [ %38, %.lr.ph15 ], [ %42, %41 ]
  %42 = getelementptr inbounds i8, i8* %.213, i32 1
  store i8 48, i8* %.213, align 1
  %43 = add nsw i32 %.014, -1
  %44 = icmp ult i32 %.15.lcssa, %43
  br i1 %44, label %41, label %..preheader_crit_edge

45:                                               ; preds = %.lr.ph, %45
  %.312 = phi i8* [ %.3.ph, %.lr.ph ], [ %50, %45 ]
  %.2611 = phi i32 [ %.26.ph, %.lr.ph ], [ %46, %45 ]
  %46 = add i32 %.2611, -1
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = getelementptr inbounds i8, i8* %.312, i32 1
  store i8 %49, i8* %.312, align 1
  %51 = icmp uge i32 %46, %.02.lcssa
  br i1 %51, label %45, label %..loopexit_crit_edge

52:                                               ; preds = %27
  %53 = getelementptr inbounds i8, i8* %.01, i32 1
  store i8 48, i8* %.01, align 1
  br label %54

..loopexit_crit_edge:                             ; preds = %45
  %split = phi i8* [ %50, %45 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader
  %.5.ph = phi i8* [ %split, %..loopexit_crit_edge ], [ %.3.ph, %.preheader ]
  br label %54

54:                                               ; preds = %.loopexit, %35, %52
  %.5 = phi i8* [ %53, %52 ], [ %.1.lcssa, %35 ], [ %.5.ph, %.loopexit ]
  store i8 0, i8* %.5, align 1
  ret void

55:                                               ; preds = %12, %4
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.65, i32 0, i32 0)) #24
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_fixed(%struct.png_struct_def* noalias %0, double %1, i8* %2) #11 {
  %4 = fmul double 1.000000e+05, %1
  %5 = fadd double %4, 5.000000e-01
  %6 = call double @llvm.floor.f64(double %5)
  %7 = fcmp ogt double %6, 0x41DFFFFFFFC00000
  %8 = fcmp olt double %6, 0xC1E0000000000000
  %or.cond = or i1 %7, %8
  br i1 %or.cond, label %9, label %10

9:                                                ; preds = %3
  call void @png_fixed_error(%struct.png_struct_def* %0, i8* %2) #24
  unreachable

10:                                               ; preds = %3
  %11 = fptosi double %6 to i32
  ret i32 %11
}

; Function Attrs: noinline noreturn nounwind uwtable
define void @png_fixed_error(%struct.png_struct_def* noalias %0, i8* %1) #12 {
  %3 = alloca [220 x i8], align 16
  %4 = getelementptr inbounds [220 x i8], [220 x i8]* %3, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %4, i8* align 1 getelementptr inbounds ([25 x i8], [25 x i8]* @.str.78, i32 0, i32 0), i64 24, i1 false)
  %5 = icmp ne i8* %1, null
  br i1 %5, label %.preheader, label %.critedge

.preheader:                                       ; preds = %2
  br label %6

6:                                                ; preds = %.preheader, %12
  %.01 = phi i32 [ 0, %.preheader ], [ %19, %12 ]
  %7 = zext i32 %.01 to i64
  %8 = getelementptr inbounds i8, i8* %1, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i32
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %..critedge.loopexit_crit_edge

12:                                               ; preds = %6
  %13 = zext i32 %.01 to i64
  %14 = getelementptr inbounds i8, i8* %1, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i32 %.01 to i64
  %17 = add i64 24, %16
  %18 = getelementptr inbounds [220 x i8], [220 x i8]* %3, i64 0, i64 %17
  store i8 %15, i8* %18, align 1
  %19 = add nsw i32 %.01, 1
  %exitcond = icmp ne i32 %19, 195
  br i1 %exitcond, label %6, label %.critedge.loopexitsplit

.critedge.loopexitsplit:                          ; preds = %12
  br label %.critedge.loopexit

..critedge.loopexit_crit_edge:                    ; preds = %6
  br label %.critedge.loopexit

.critedge.loopexit:                               ; preds = %.critedge.loopexitsplit, %..critedge.loopexit_crit_edge
  %.1.ph = phi i32 [ %.01, %..critedge.loopexit_crit_edge ], [ 195, %.critedge.loopexitsplit ]
  br label %.critedge

.critedge:                                        ; preds = %.critedge.loopexit, %2
  %.1 = phi i32 [ 0, %2 ], [ %.1.ph, %.critedge.loopexit ]
  %20 = zext i32 %.1 to i64
  %21 = add i64 24, %20
  %22 = getelementptr inbounds [220 x i8], [220 x i8]* %3, i64 0, i64 %21
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds [220 x i8], [220 x i8]* %3, i32 0, i32 0
  call void @png_error(%struct.png_struct_def* %0, i8* %23) #24
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_muldiv_warn(%struct.png_struct_def* noalias %0, i32 %1, i32 %2, i32 %3) #11 {
  %5 = alloca i32, align 4
  %6 = call i32 @png_muldiv(i32* %5, i32 %1, i32 %2, i32 %3)
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = load i32, i32* %5, align 4
  br label %11

10:                                               ; preds = %4
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.66, i32 0, i32 0))
  br label %11

11:                                               ; preds = %10, %8
  %.0 = phi i32 [ %9, %8 ], [ 0, %10 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_reciprocal2(i32 %0, i32 %1) #11 {
  %3 = icmp ne i32 %0, 0
  %4 = icmp ne i32 %1, 0
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %15

5:                                                ; preds = %2
  %6 = sitofp i32 %0 to double
  %7 = fdiv double 1.000000e+15, %6
  %8 = sitofp i32 %1 to double
  %9 = fdiv double %7, %8
  %10 = fadd double %9, 5.000000e-01
  %11 = call double @llvm.floor.f64(double %10)
  %12 = fcmp ole double %11, 0x41DFFFFFFFC00000
  %13 = fcmp oge double %11, 0xC1E0000000000000
  %or.cond1 = and i1 %12, %13
  %14 = fptosi double %11 to i32
  %spec.select = select i1 %or.cond1, i32 %14, i32 0
  br label %15

15:                                               ; preds = %5, %2
  %.0 = phi i32 [ 0, %2 ], [ %spec.select, %5 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define zeroext i8 @png_gamma_8bit_correct(i32 %0, i32 %1) #11 {
  %3 = icmp ugt i32 %0, 0
  %4 = icmp ult i32 %0, 255
  %or.cond = and i1 %3, %4
  br i1 %or.cond, label %5, label %15

5:                                                ; preds = %2
  %6 = sitofp i32 %0 to double
  %7 = fdiv double %6, 2.550000e+02
  %8 = sitofp i32 %1 to double
  %9 = fmul double %8, 1.000000e-05
  %10 = call double @pow(double %7, double %9) #22
  %11 = fmul double 2.550000e+02, %10
  %12 = fadd double %11, 5.000000e-01
  %13 = call double @llvm.floor.f64(double %12)
  %14 = fptoui double %13 to i8
  br label %18

15:                                               ; preds = %2
  %16 = and i32 %0, 255
  %17 = trunc i32 %16 to i8
  br label %18

18:                                               ; preds = %15, %5
  %.0 = phi i8 [ %14, %5 ], [ %17, %15 ]
  ret i8 %.0
}

; Function Attrs: nounwind
declare double @pow(double, double) #17

; Function Attrs: noinline nounwind uwtable
define zeroext i16 @png_gamma_16bit_correct(i32 %0, i32 %1) #11 {
  %3 = icmp ugt i32 %0, 0
  %4 = icmp ult i32 %0, 65535
  %or.cond = and i1 %3, %4
  br i1 %or.cond, label %5, label %15

5:                                                ; preds = %2
  %6 = sitofp i32 %0 to double
  %7 = fdiv double %6, 6.553500e+04
  %8 = sitofp i32 %1 to double
  %9 = fmul double %8, 1.000000e-05
  %10 = call double @pow(double %7, double %9) #22
  %11 = fmul double 6.553500e+04, %10
  %12 = fadd double %11, 5.000000e-01
  %13 = call double @llvm.floor.f64(double %12)
  %14 = fptoui double %13 to i16
  br label %17

15:                                               ; preds = %2
  %16 = trunc i32 %0 to i16
  br label %17

17:                                               ; preds = %15, %5
  %.0 = phi i16 [ %14, %5 ], [ %16, %15 ]
  ret i16 %.0
}

; Function Attrs: noinline nounwind uwtable
define zeroext i16 @png_gamma_correct(%struct.png_struct_def* noalias %0, i32 %1, i32 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = icmp eq i32 %6, 8
  br i1 %7, label %8, label %11

8:                                                ; preds = %3
  %9 = call zeroext i8 @png_gamma_8bit_correct(i32 %1, i32 %2)
  %10 = zext i8 %9 to i16
  br label %13

11:                                               ; preds = %3
  %12 = call zeroext i16 @png_gamma_16bit_correct(i32 %1, i32 %2)
  br label %13

13:                                               ; preds = %11, %8
  %.0 = phi i16 [ %10, %8 ], [ %12, %11 ]
  ret i16 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_destroy_gamma_table(%struct.png_struct_def* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 81
  %3 = load i8*, i8** %2, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %3)
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 81
  store i8* null, i8** %4, align 8
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 82
  %6 = load i16**, i16*** %5, align 8
  %7 = icmp ne i16** %6, null
  br i1 %7, label %8, label %24

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 79
  %10 = load i32, i32* %9, align 8
  %11 = sub nsw i32 8, %10
  %12 = shl i32 1, %11
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 82
  %14 = icmp slt i32 0, %12
  br i1 %14, label %.lr.ph16, label %19

.lr.ph16:                                         ; preds = %8
  %wide.trip.count21 = zext i32 %12 to i64
  br label %15

15:                                               ; preds = %.lr.ph16, %15
  %indvars.iv18 = phi i64 [ 0, %.lr.ph16 ], [ %indvars.iv.next19, %15 ]
  %16 = load i16**, i16*** %13, align 8
  %scevgep24 = getelementptr i16*, i16** %16, i64 %indvars.iv18
  %17 = load i16*, i16** %scevgep24, align 8
  %18 = bitcast i16* %17 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %18)
  %indvars.iv.next19 = add nuw nsw i64 %indvars.iv18, 1
  %exitcond22 = icmp ne i64 %wide.trip.count21, %indvars.iv.next19
  br i1 %exitcond22, label %15, label %._crit_edge17

._crit_edge17:                                    ; preds = %15
  br label %19

19:                                               ; preds = %._crit_edge17, %8
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 82
  %21 = load i16**, i16*** %20, align 8
  %22 = bitcast i16** %21 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %22)
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 82
  store i16** null, i16*** %23, align 8
  br label %24

24:                                               ; preds = %19, %1
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 83
  %26 = load i8*, i8** %25, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %26)
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 83
  store i8* null, i8** %27, align 8
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 84
  %29 = load i8*, i8** %28, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %29)
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 84
  store i8* null, i8** %30, align 8
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 85
  %32 = load i16**, i16*** %31, align 8
  %33 = icmp ne i16** %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %24
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 79
  %36 = load i32, i32* %35, align 8
  %37 = sub nsw i32 8, %36
  %38 = shl i32 1, %37
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 85
  %40 = icmp slt i32 0, %38
  br i1 %40, label %.lr.ph7, label %45

.lr.ph7:                                          ; preds = %34
  %wide.trip.count12 = zext i32 %38 to i64
  br label %41

41:                                               ; preds = %.lr.ph7, %41
  %indvars.iv9 = phi i64 [ 0, %.lr.ph7 ], [ %indvars.iv.next10, %41 ]
  %42 = load i16**, i16*** %39, align 8
  %scevgep23 = getelementptr i16*, i16** %42, i64 %indvars.iv9
  %43 = load i16*, i16** %scevgep23, align 8
  %44 = bitcast i16* %43 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %44)
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1
  %exitcond13 = icmp ne i64 %wide.trip.count12, %indvars.iv.next10
  br i1 %exitcond13, label %41, label %._crit_edge8

._crit_edge8:                                     ; preds = %41
  br label %45

45:                                               ; preds = %._crit_edge8, %34
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 85
  %47 = load i16**, i16*** %46, align 8
  %48 = bitcast i16** %47 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %48)
  %49 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 85
  store i16** null, i16*** %49, align 8
  br label %50

50:                                               ; preds = %45, %24
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 86
  %52 = load i16**, i16*** %51, align 8
  %53 = icmp ne i16** %52, null
  br i1 %53, label %54, label %70

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 79
  %56 = load i32, i32* %55, align 8
  %57 = sub nsw i32 8, %56
  %58 = shl i32 1, %57
  %59 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 86
  %60 = icmp slt i32 0, %58
  br i1 %60, label %.lr.ph, label %65

.lr.ph:                                           ; preds = %54
  %wide.trip.count = zext i32 %58 to i64
  br label %61

61:                                               ; preds = %.lr.ph, %61
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %61 ]
  %62 = load i16**, i16*** %59, align 8
  %scevgep = getelementptr i16*, i16** %62, i64 %indvars.iv
  %63 = load i16*, i16** %scevgep, align 8
  %64 = bitcast i16* %63 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %64)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %wide.trip.count, %indvars.iv.next
  br i1 %exitcond, label %61, label %._crit_edge

._crit_edge:                                      ; preds = %61
  br label %65

65:                                               ; preds = %._crit_edge, %54
  %66 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 86
  %67 = load i16**, i16*** %66, align 8
  %68 = bitcast i16** %67 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %68)
  %69 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 86
  store i16** null, i16*** %69, align 8
  br label %70

70:                                               ; preds = %65, %50
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_build_gamma_table(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 81
  %4 = load i8*, i8** %3, align 8
  %5 = icmp ne i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 82
  %8 = load i16**, i16*** %7, align 8
  %9 = icmp ne i16** %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %6, %2
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.67, i32 0, i32 0))
  call void @png_destroy_gamma_table(%struct.png_struct_def* %0)
  br label %11

11:                                               ; preds = %10, %6
  %12 = icmp sle i32 %1, 8
  br i1 %12, label %13, label %51

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 81
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %16 = load i32, i32* %15, align 4
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %25

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %20 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %19, i32 0, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %23 = load i32, i32* %22, align 4
  %24 = call i32 @png_reciprocal2(i32 %21, i32 %23)
  br label %25

25:                                               ; preds = %13, %18
  %26 = phi i32 [ %24, %18 ], [ 100000, %13 ]
  call void @png_build_8bit_table(%struct.png_struct_def* %0, i8** %14, i32 %26)
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %28, 6291584
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %166

31:                                               ; preds = %25
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 84
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %34 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %33, i32 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = call i32 @png_reciprocal(i32 %35)
  call void @png_build_8bit_table(%struct.png_struct_def* %0, i8** %32, i32 %36)
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 83
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %39 = load i32, i32* %38, align 4
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %45

41:                                               ; preds = %31
  %42 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %43 = load i32, i32* %42, align 4
  %44 = call i32 @png_reciprocal(i32 %43)
  br label %49

45:                                               ; preds = %31
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %47 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %46, i32 0, i32 0
  %48 = load i32, i32* %47, align 8
  br label %49

49:                                               ; preds = %45, %41
  %50 = phi i32 [ %44, %41 ], [ %48, %45 ]
  call void @png_build_8bit_table(%struct.png_struct_def* %0, i8** %37, i32 %50)
  br label %166

51:                                               ; preds = %11
  %52 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = and i32 %54, 2
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %57, label %82

57:                                               ; preds = %51
  %58 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %59 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %58, i32 0, i32 0
  %60 = load i8, i8* %59, align 8
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %62 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %61, i32 0, i32 1
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = zext i8 %60 to i32
  %66 = icmp sgt i32 %64, %65
  br i1 %66, label %67, label %71

67:                                               ; preds = %57
  %68 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %69 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %68, i32 0, i32 1
  %70 = load i8, i8* %69, align 1
  br label %71

71:                                               ; preds = %67, %57
  %.0 = phi i8 [ %70, %67 ], [ %60, %57 ]
  %72 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %73 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %72, i32 0, i32 2
  %74 = load i8, i8* %73, align 2
  %75 = zext i8 %74 to i32
  %76 = zext i8 %.0 to i32
  %77 = icmp sgt i32 %75, %76
  br i1 %77, label %78, label %86

78:                                               ; preds = %71
  %79 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %80 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %79, i32 0, i32 2
  %81 = load i8, i8* %80, align 2
  br label %86

82:                                               ; preds = %51
  %83 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %84 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %83, i32 0, i32 3
  %85 = load i8, i8* %84, align 1
  br label %86

86:                                               ; preds = %71, %78, %82
  %.2 = phi i8 [ %85, %82 ], [ %81, %78 ], [ %.0, %71 ]
  %87 = zext i8 %.2 to i32
  %88 = icmp sgt i32 %87, 0
  %89 = zext i8 %.2 to i32
  %90 = icmp ult i32 %89, 16
  %or.cond = and i1 %88, %90
  %91 = zext i8 %.2 to i32
  %92 = sub i32 16, %91
  %93 = and i32 %92, 255
  %94 = trunc i32 %93 to i8
  %.01 = select i1 %or.cond, i8 %94, i8 0
  %95 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %96 = load i32, i32* %95, align 4
  %97 = and i32 %96, 67109888
  %98 = icmp ne i32 %97, 0
  %99 = zext i8 %.01 to i32
  %100 = icmp ult i32 %99, 5
  %spec.select = select i1 %100, i8 5, i8 %.01
  %.23 = select i1 %98, i8 %spec.select, i8 %.01
  %101 = zext i8 %.23 to i32
  %102 = icmp ugt i32 %101, 8
  %.3 = select i1 %102, i8 8, i8 %.23
  %103 = zext i8 %.3 to i32
  %104 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 79
  store i32 %103, i32* %104, align 8
  %105 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %106 = load i32, i32* %105, align 4
  %107 = and i32 %106, 67109888
  %108 = icmp ne i32 %107, 0
  br i1 %108, label %109, label %124

109:                                              ; preds = %86
  %110 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 82
  %111 = zext i8 %.3 to i32
  %112 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %113 = load i32, i32* %112, align 4
  %114 = icmp sgt i32 %113, 0
  br i1 %114, label %115, label %122

115:                                              ; preds = %109
  %116 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %117 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %116, i32 0, i32 0
  %118 = load i32, i32* %117, align 8
  %119 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %120 = load i32, i32* %119, align 4
  %121 = call i32 @png_product2(i32 %118, i32 %120)
  br label %122

122:                                              ; preds = %109, %115
  %123 = phi i32 [ %121, %115 ], [ 100000, %109 ]
  call void @png_build_16to8_table(%struct.png_struct_def* %0, i16*** %110, i32 %111, i32 %123)
  br label %139

124:                                              ; preds = %86
  %125 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 82
  %126 = zext i8 %.3 to i32
  %127 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %128 = load i32, i32* %127, align 4
  %129 = icmp sgt i32 %128, 0
  br i1 %129, label %130, label %137

130:                                              ; preds = %124
  %131 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %132 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %131, i32 0, i32 0
  %133 = load i32, i32* %132, align 8
  %134 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %135 = load i32, i32* %134, align 4
  %136 = call i32 @png_reciprocal2(i32 %133, i32 %135)
  br label %137

137:                                              ; preds = %124, %130
  %138 = phi i32 [ %136, %130 ], [ 100000, %124 ]
  call void @png_build_16bit_table(%struct.png_struct_def* %0, i16*** %125, i32 %126, i32 %138)
  br label %139

139:                                              ; preds = %137, %122
  %140 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %141 = load i32, i32* %140, align 4
  %142 = and i32 %141, 6291584
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %144, label %166

144:                                              ; preds = %139
  %145 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 86
  %146 = zext i8 %.3 to i32
  %147 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %148 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %147, i32 0, i32 0
  %149 = load i32, i32* %148, align 8
  %150 = call i32 @png_reciprocal(i32 %149)
  call void @png_build_16bit_table(%struct.png_struct_def* %0, i16*** %145, i32 %146, i32 %150)
  %151 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 85
  %152 = zext i8 %.3 to i32
  %153 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %154 = load i32, i32* %153, align 4
  %155 = icmp sgt i32 %154, 0
  br i1 %155, label %156, label %160

156:                                              ; preds = %144
  %157 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %158 = load i32, i32* %157, align 4
  %159 = call i32 @png_reciprocal(i32 %158)
  br label %164

160:                                              ; preds = %144
  %161 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %162 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %161, i32 0, i32 0
  %163 = load i32, i32* %162, align 8
  br label %164

164:                                              ; preds = %160, %156
  %165 = phi i32 [ %159, %156 ], [ %163, %160 ]
  call void @png_build_16bit_table(%struct.png_struct_def* %0, i16*** %151, i32 %152, i32 %165)
  br label %166

166:                                              ; preds = %139, %164, %25, %49
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_build_8bit_table(%struct.png_struct_def* noalias %0, i8** %1, i32 %2) #11 {
  %4 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 256)
  store i8* %4, i8** %1, align 8
  %5 = call i32 @png_gamma_significant(i32 %2)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %.preheader, label %.preheader1

.preheader1:                                      ; preds = %3
  br label %9

.preheader:                                       ; preds = %3
  br label %7

7:                                                ; preds = %.preheader, %7
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %7 ]
  %tmp = trunc i64 %indvars.iv to i32
  %8 = call zeroext i8 @png_gamma_8bit_correct(i32 %tmp, i32 %2)
  %scevgep = getelementptr i8, i8* %4, i64 %indvars.iv
  store i8 %8, i8* %scevgep, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %7, label %.loopexit

9:                                                ; preds = %.preheader1, %9
  %indvars.iv6 = phi i64 [ 0, %.preheader1 ], [ %indvars.iv.next7, %9 ]
  %scevgep11 = getelementptr i8, i8* %4, i64 %indvars.iv6
  %tmp10 = trunc i64 %indvars.iv6 to i8
  store i8 %tmp10, i8* %scevgep11, align 1
  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1
  %exitcond9 = icmp ne i64 %indvars.iv.next7, 256
  br i1 %exitcond9, label %9, label %.loopexit2

.loopexit:                                        ; preds = %7
  br label %10

.loopexit2:                                       ; preds = %9
  br label %10

10:                                               ; preds = %.loopexit2, %.loopexit
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_product2(i32 %0, i32 %1) #11 {
  %3 = sitofp i32 %0 to double
  %4 = fmul double %3, 1.000000e-05
  %5 = sitofp i32 %1 to double
  %6 = fmul double %4, %5
  %7 = fadd double %6, 5.000000e-01
  %8 = call double @llvm.floor.f64(double %7)
  %9 = fcmp ole double %8, 0x41DFFFFFFFC00000
  %10 = fcmp oge double %8, 0xC1E0000000000000
  %or.cond = and i1 %9, %10
  %11 = fptosi double %8 to i32
  %.0 = select i1 %or.cond, i32 %11, i32 0
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_build_16to8_table(%struct.png_struct_def* noalias %0, i16*** %1, i32 %2, i32 %3) #11 {
  %5 = sub i32 8, %2
  %6 = shl i32 1, %5
  %7 = sub i32 16, %2
  %8 = shl i32 1, %7
  %9 = zext i32 %6 to i64
  %10 = mul i64 %9, 8
  %11 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_calloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %10)
  %12 = bitcast i8* %11 to i16**
  store i16** %12, i16*** %1, align 8
  %umax = call i32 @llvm.umax.i32(i32 %6, i32 1)
  %wide.trip.count = zext i32 %umax to i64
  br label %16

.preheader3:                                      ; preds = %16
  %.12.ph = phi i32 [ 0, %16 ]
  %.0.ph = phi i32 [ 0, %16 ]
  %13 = sub i32 %8, 1
  %14 = lshr i32 255, %2
  %15 = sub i32 8, %2
  br label %24

16:                                               ; preds = %4, %16
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %16 ]
  %17 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 512)
  %18 = bitcast i8* %17 to i16*
  %19 = shl nuw nsw i64 %indvars.iv, 3
  %scevgep = getelementptr i8, i8* %11, i64 %19
  %scevgep16 = bitcast i8* %scevgep to i16**
  store i16* %18, i16** %scevgep16, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond15 = icmp ne i64 %wide.trip.count, %indvars.iv.next
  br i1 %exitcond15, label %16, label %.preheader3

.preheader:                                       ; preds = %45
  %.2.ph = phi i32 [ %.1.lcssa, %45 ]
  %20 = shl i32 %6, 8
  %21 = ashr i32 255, %2
  %22 = sub i32 8, %2
  %23 = icmp ult i32 %.2.ph, %20
  br i1 %23, label %.lr.ph, label %56

.lr.ph:                                           ; preds = %.preheader
  br label %47

24:                                               ; preds = %.preheader3, %45
  %.011 = phi i32 [ %.0.ph, %.preheader3 ], [ %.1.lcssa, %45 ]
  %.1210 = phi i32 [ %.12.ph, %.preheader3 ], [ %46, %45 ]
  %25 = mul nuw nsw i32 %.1210, 257
  %26 = trunc i32 %25 to i16
  %27 = zext i16 %26 to i32
  %28 = add i32 %27, 128
  %29 = call zeroext i16 @png_gamma_16bit_correct(i32 %28, i32 %3)
  %30 = zext i16 %29 to i32
  %31 = mul i32 %30, %13
  %32 = add i32 %31, 32768
  %33 = udiv i32 %32, 65535
  %34 = add i32 %33, 1
  %35 = icmp ult i32 %.011, %34
  br i1 %35, label %.lr.ph7, label %45

.lr.ph7:                                          ; preds = %24
  br label %36

36:                                               ; preds = %.lr.ph7, %36
  %.15 = phi i32 [ %.011, %.lr.ph7 ], [ %44, %36 ]
  %37 = and i32 %.15, %14
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i16*, i16** %12, i64 %38
  %40 = load i16*, i16** %39, align 8
  %41 = lshr i32 %.15, %15
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i16, i16* %40, i64 %42
  store i16 %26, i16* %43, align 2
  %44 = add nuw nsw i32 %.15, 1
  %exitcond9 = icmp ne i32 %34, %44
  br i1 %exitcond9, label %36, label %._crit_edge8

._crit_edge8:                                     ; preds = %36
  %split = phi i32 [ %44, %36 ]
  br label %45

45:                                               ; preds = %._crit_edge8, %24
  %.1.lcssa = phi i32 [ %split, %._crit_edge8 ], [ %.011, %24 ]
  %46 = add nuw nsw i32 %.1210, 1
  %exitcond12 = icmp ne i32 %46, 255
  br i1 %exitcond12, label %24, label %.preheader

47:                                               ; preds = %.lr.ph, %47
  %.24 = phi i32 [ %.2.ph, %.lr.ph ], [ %55, %47 ]
  %48 = and i32 %.24, %21
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i16*, i16** %12, i64 %49
  %51 = load i16*, i16** %50, align 8
  %52 = lshr i32 %.24, %22
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16* %51, i64 %53
  store i16 -1, i16* %54, align 2
  %55 = add nuw i32 %.24, 1
  %exitcond = icmp ne i32 %20, %55
  br i1 %exitcond, label %47, label %._crit_edge

._crit_edge:                                      ; preds = %47
  br label %56

56:                                               ; preds = %._crit_edge, %.preheader
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_build_16bit_table(%struct.png_struct_def* noalias %0, i16*** %1, i32 %2, i32 %3) #11 {
  %5 = sub i32 8, %2
  %6 = shl i32 1, %5
  %7 = sub i32 16, %2
  %8 = shl i32 1, %7
  %9 = sub nsw i32 %8, 1
  %10 = sitofp i32 %9 to double
  %11 = fdiv double 1.000000e+00, %10
  %12 = sub i32 16, %2
  %13 = shl i32 1, %12
  %14 = sub i32 %13, 1
  %15 = sub i32 15, %2
  %16 = shl i32 1, %15
  %17 = zext i32 %6 to i64
  %18 = mul i64 %17, 8
  %19 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_calloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %18)
  %20 = bitcast i8* %19 to i16**
  store i16** %20, i16*** %1, align 8
  %21 = sub i32 8, %2
  %22 = icmp ne i32 %2, 0
  %23 = sub i32 8, %2
  %24 = sitofp i32 %3 to double
  %25 = fmul double %24, 1.000000e-05
  br label %26

26:                                               ; preds = %4, %54
  %.0313 = phi i32 [ 0, %4 ], [ %55, %54 ]
  %27 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 512)
  %28 = bitcast i8* %27 to i16*
  %29 = zext i32 %.0313 to i64
  %30 = getelementptr inbounds i16*, i16** %20, i64 %29
  store i16* %28, i16** %30, align 8
  %31 = call i32 @png_gamma_significant(i32 %3)
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %.preheader, label %.preheader4

.preheader4:                                      ; preds = %26
  br label %44

.preheader:                                       ; preds = %26
  br label %33

33:                                               ; preds = %.preheader, %33
  %indvars.iv9 = phi i64 [ 0, %.preheader ], [ %indvars.iv.next10, %33 ]
  %tmp16 = trunc i64 %indvars.iv9 to i32
  %34 = shl i32 %tmp16, %23
  %35 = add i32 %34, %.0313
  %36 = uitofp i32 %35 to double
  %37 = fmul double %36, %11
  %38 = call double @pow(double %37, double %25) #22
  %39 = fmul double 6.553500e+04, %38
  %40 = fadd double %39, 5.000000e-01
  %41 = call double @llvm.floor.f64(double %40)
  %42 = fptoui double %41 to i16
  %43 = shl nuw nsw i64 %indvars.iv9, 1
  %scevgep17 = getelementptr i8, i8* %27, i64 %43
  %scevgep1718 = bitcast i8* %scevgep17 to i16*
  store i16 %42, i16* %scevgep1718, align 2
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1
  %exitcond12 = icmp ne i64 %indvars.iv.next10, 256
  br i1 %exitcond12, label %33, label %.loopexit

44:                                               ; preds = %.preheader4, %51
  %indvars.iv = phi i64 [ 0, %.preheader4 ], [ %indvars.iv.next, %51 ]
  %tmp = trunc i64 %indvars.iv to i32
  %45 = shl i32 %tmp, %21
  %46 = add i32 %45, %.0313
  br i1 %22, label %47, label %51

47:                                               ; preds = %44
  %48 = mul i32 %46, 65535
  %49 = add i32 %48, %16
  %50 = udiv i32 %49, %14
  br label %51

51:                                               ; preds = %47, %44
  %.0 = phi i32 [ %50, %47 ], [ %46, %44 ]
  %52 = trunc i32 %.0 to i16
  %53 = shl nuw nsw i64 %indvars.iv, 1
  %scevgep = getelementptr i8, i8* %27, i64 %53
  %scevgep15 = bitcast i8* %scevgep to i16*
  store i16 %52, i16* %scevgep15, align 2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 256
  br i1 %exitcond, label %44, label %.loopexit5

.loopexit:                                        ; preds = %33
  br label %54

.loopexit5:                                       ; preds = %51
  br label %54

54:                                               ; preds = %.loopexit5, %.loopexit
  %.0314 = phi i32 [ %.0313, %.loopexit5 ], [ %.0313, %.loopexit ]
  %55 = add i32 %.0314, 1
  %56 = icmp ult i32 %55, %6
  br i1 %56, label %26, label %57

57:                                               ; preds = %54
  ret void
}

; Function Attrs: noinline nounwind uwtable
define noalias i8* @png_calloc(%struct.png_struct_def.60* noalias %0, i64 %1) #11 {
  %3 = call noalias i8* @png_malloc(%struct.png_struct_def.60* %0, i64 %1)
  %4 = icmp ne i8* %3, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 0, i64 %1, i1 false)
  br label %6

6:                                                ; preds = %5, %2
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define noalias i8* @png_malloc(%struct.png_struct_def.60* noalias %0, i64 %1) #11 {
  %3 = icmp eq %struct.png_struct_def.60* %0, null
  br i1 %3, label %8, label %4

4:                                                ; preds = %2
  %5 = call noalias i8* @png_malloc_base(%struct.png_struct_def.60* %0, i64 %1)
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %4
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2.97, i32 0, i32 0)) #24
  unreachable

8:                                                ; preds = %4, %2
  %.0 = phi i8* [ null, %2 ], [ %5, %4 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_set_option(%struct.png_struct_def* noalias %0, i32 %1, i32 %2) #11 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp sge i32 %1, 0
  %or.cond = select i1 %4, i1 %5, i1 false
  %6 = icmp slt i32 %1, 12
  %or.cond1 = select i1 %or.cond, i1 %6, i1 false
  %7 = and i32 %1, 1
  %8 = icmp eq i32 %7, 0
  %or.cond3 = select i1 %or.cond1, i1 %8, i1 false
  br i1 %or.cond3, label %9, label %23

9:                                                ; preds = %3
  %10 = shl i32 3, %1
  %11 = icmp ne i32 %2, 0
  %12 = zext i1 %11 to i32
  %13 = add i32 2, %12
  %14 = shl i32 %13, %1
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 110
  %16 = load i32, i32* %15, align 8
  %17 = xor i32 %10, -1
  %18 = and i32 %16, %17
  %19 = or i32 %18, %14
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 110
  store i32 %19, i32* %20, align 8
  %21 = and i32 %16, %10
  %22 = ashr i32 %21, %1
  br label %23

23:                                               ; preds = %3, %9
  %.0 = phi i32 [ %22, %9 ], [ 1, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_image_free(%struct.png_image* %0) #11 {
  %2 = icmp ne %struct.png_image* %0, null
  br i1 %2, label %3, label %17

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 0
  %5 = load %struct.png_control*, %struct.png_control** %4, align 8
  %6 = icmp ne %struct.png_control* %5, null
  br i1 %6, label %7, label %17

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 0
  %9 = load %struct.png_control*, %struct.png_control** %8, align 8
  %10 = getelementptr inbounds %struct.png_control, %struct.png_control* %9, i32 0, i32 2
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %13, label %17

13:                                               ; preds = %7
  %14 = bitcast %struct.png_image* %0 to i8*
  %15 = call i32 @png_safe_execute(%struct.png_image* %0, i32 (i8*)* @png_image_free_function, i8* %14)
  %16 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 0
  store %struct.png_control* null, %struct.png_control** %16, align 8
  br label %17

17:                                               ; preds = %13, %7, %3, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_image_free_function(i8* %0) #11 {
  %2 = alloca %struct.png_control, align 8
  %3 = bitcast i8* %0 to %struct.png_image*
  %4 = getelementptr inbounds %struct.png_image, %struct.png_image* %3, i32 0, i32 0
  %5 = load %struct.png_control*, %struct.png_control** %4, align 8
  %6 = getelementptr inbounds %struct.png_control, %struct.png_control* %5, i32 0, i32 0
  %7 = load %struct.png_struct_def*, %struct.png_struct_def** %6, align 8
  %8 = icmp eq %struct.png_struct_def* %7, null
  br i1 %8, label %53, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.png_control, %struct.png_control* %5, i32 0, i32 5
  %11 = load i8, i8* %10, align 8
  %12 = lshr i8 %11, 1
  %13 = and i8 %12, 1
  %14 = zext i8 %13 to i32
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %31

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.png_control, %struct.png_control* %5, i32 0, i32 0
  %18 = load %struct.png_struct_def*, %struct.png_struct_def** %17, align 8
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %18, i32 0, i32 9
  %20 = load i8*, i8** %19, align 8
  %21 = bitcast i8* %20 to %struct._IO_FILE.1*
  %22 = getelementptr inbounds %struct.png_control, %struct.png_control* %5, i32 0, i32 5
  %23 = load i8, i8* %22, align 8
  %24 = and i8 %23, -3
  store i8 %24, i8* %22, align 8
  %25 = icmp ne %struct._IO_FILE.1* %21, null
  br i1 %25, label %26, label %31

26:                                               ; preds = %16
  %27 = getelementptr inbounds %struct.png_control, %struct.png_control* %5, i32 0, i32 0
  %28 = load %struct.png_struct_def*, %struct.png_struct_def** %27, align 8
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %28, i32 0, i32 9
  store i8* null, i8** %29, align 8
  %30 = call i32 bitcast (i32 (%struct._IO_FILE*)* @fclose to i32 (%struct._IO_FILE.1*)*)(%struct._IO_FILE.1* %21)
  br label %31

31:                                               ; preds = %16, %26, %9
  %32 = bitcast %struct.png_control* %2 to i8*
  %33 = bitcast %struct.png_control* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 48, i1 false)
  %34 = getelementptr inbounds %struct.png_image, %struct.png_image* %3, i32 0, i32 0
  store %struct.png_control* %2, %struct.png_control** %34, align 8
  %35 = getelementptr inbounds %struct.png_control, %struct.png_control* %2, i32 0, i32 0
  %36 = load %struct.png_struct_def*, %struct.png_struct_def** %35, align 8
  %37 = bitcast %struct.png_control* %5 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %36, i8* %37)
  %38 = getelementptr inbounds %struct.png_control, %struct.png_control* %2, i32 0, i32 5
  %39 = load i8, i8* %38, align 8
  %40 = and i8 %39, 1
  %41 = zext i8 %40 to i32
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %43, label %46

43:                                               ; preds = %31
  %44 = getelementptr inbounds %struct.png_control, %struct.png_control* %2, i32 0, i32 0
  %45 = getelementptr inbounds %struct.png_control, %struct.png_control* %2, i32 0, i32 1
  call void @png_destroy_write_struct(%struct.png_struct_def** %44, %struct.png_info_def** %45)
  br label %49

46:                                               ; preds = %31
  %47 = getelementptr inbounds %struct.png_control, %struct.png_control* %2, i32 0, i32 0
  %48 = getelementptr inbounds %struct.png_control, %struct.png_control* %2, i32 0, i32 1
  call void @png_destroy_read_struct(%struct.png_struct_def** %47, %struct.png_info_def** %48, %struct.png_info_def** null)
  br label %49

49:                                               ; preds = %46, %43
  %50 = getelementptr inbounds %struct.png_image, %struct.png_image* %3, i32 0, i32 5
  %51 = load i32, i32* %50, align 8
  %52 = or i32 %51, 8
  store i32 %52, i32* %50, align 8
  br label %53

53:                                               ; preds = %1, %49
  %.0 = phi i32 [ 1, %49 ], [ 0, %1 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_safe_execute(%struct.png_image* %0, i32 (i8*)* %1, i8* %2) #11 {
  %4 = alloca %struct.png_image*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca [1 x %struct.__jmp_buf_tag], align 16
  store volatile %struct.png_image* %0, %struct.png_image** %4, align 8
  %8 = load volatile %struct.png_image*, %struct.png_image** %4, align 8
  %9 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 0
  %10 = load %struct.png_control*, %struct.png_control** %9, align 8
  %11 = getelementptr inbounds %struct.png_control, %struct.png_control* %10, i32 0, i32 2
  %12 = load i8*, i8** %11, align 8
  store volatile i8* %12, i8** %6, align 8
  %13 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %7, i32 0, i32 0
  %14 = call i32 @_setjmp(%struct.__jmp_buf_tag* %13) #23
  %15 = icmp eq i32 %14, 0
  %16 = zext i1 %15 to i32
  store volatile i32 %16, i32* %5, align 4
  %17 = load volatile i32, i32* %5, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %27

19:                                               ; preds = %3
  %20 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %7, i32 0, i32 0
  %21 = bitcast %struct.__jmp_buf_tag* %20 to i8*
  %22 = load volatile %struct.png_image*, %struct.png_image** %4, align 8
  %23 = getelementptr inbounds %struct.png_image, %struct.png_image* %22, i32 0, i32 0
  %24 = load %struct.png_control*, %struct.png_control** %23, align 8
  %25 = getelementptr inbounds %struct.png_control, %struct.png_control* %24, i32 0, i32 2
  store i8* %21, i8** %25, align 8
  %26 = call i32 %1(i8* %2)
  store volatile i32 %26, i32* %5, align 4
  br label %27

27:                                               ; preds = %19, %3
  call void (...) @magma_bug002()
  %28 = load volatile i8*, i8** %6, align 8
  %29 = load volatile %struct.png_image*, %struct.png_image** %4, align 8
  %30 = getelementptr inbounds %struct.png_image, %struct.png_image* %29, i32 0, i32 0
  %31 = load %struct.png_control*, %struct.png_control** %30, align 8
  %32 = getelementptr inbounds %struct.png_control, %struct.png_control* %31, i32 0, i32 2
  store i8* %28, i8** %32, align 8
  %33 = load volatile i32, i32* %5, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %27
  %36 = load volatile %struct.png_image*, %struct.png_image** %4, align 8
  call void @png_image_free(%struct.png_image* %36)
  br label %37

37:                                               ; preds = %35, %27
  %38 = load volatile i32, i32* %5, align 4
  ret i32 %38
}

declare void @magma_bug002(...) #13

; Function Attrs: noinline nounwind uwtable
define void @png_destroy_write_struct(%struct.png_struct_def** %0, %struct.png_info_def** %1) #11 {
  %3 = icmp ne %struct.png_struct_def** %0, null
  br i1 %3, label %4, label %8

4:                                                ; preds = %2
  %5 = load %struct.png_struct_def*, %struct.png_struct_def** %0, align 8
  %6 = icmp ne %struct.png_struct_def* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %4
  call void @png_destroy_info_struct(%struct.png_struct_def* %5, %struct.png_info_def** %1)
  store %struct.png_struct_def* null, %struct.png_struct_def** %0, align 8
  call void @png_write_destroy(%struct.png_struct_def* %5)
  call void bitcast (void (%struct.png_struct_def.60*)* @png_destroy_png_struct to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %5)
  br label %8

8:                                                ; preds = %4, %7, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_destroy_read_struct(%struct.png_struct_def** %0, %struct.png_info_def** %1, %struct.png_info_def** %2) #11 {
  %4 = icmp ne %struct.png_struct_def** %0, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = load %struct.png_struct_def*, %struct.png_struct_def** %0, align 8
  br label %7

7:                                                ; preds = %5, %3
  %.0 = phi %struct.png_struct_def* [ %6, %5 ], [ null, %3 ]
  %8 = icmp eq %struct.png_struct_def* %.0, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %7
  call void @png_destroy_info_struct(%struct.png_struct_def* %.0, %struct.png_info_def** %2)
  call void @png_destroy_info_struct(%struct.png_struct_def* %.0, %struct.png_info_def** %1)
  store %struct.png_struct_def* null, %struct.png_struct_def** %0, align 8
  call void @png_read_destroy(%struct.png_struct_def* %.0)
  call void bitcast (void (%struct.png_struct_def.60*)* @png_destroy_png_struct to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %.0)
  br label %10

10:                                               ; preds = %7, %9
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_read_destroy(%struct.png_struct_def* noalias %0) #11 {
  call void @png_destroy_gamma_table(%struct.png_struct_def* %0)
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 127
  %3 = load i8*, i8** %2, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %3)
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 127
  store i8* null, i8** %4, align 8
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 142
  %6 = load i8*, i8** %5, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %6)
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 142
  store i8* null, i8** %7, align 8
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  %9 = load i8*, i8** %8, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %9)
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  store i8* null, i8** %10, align 8
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 108
  %12 = load i8*, i8** %11, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %12)
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 108
  store i8* null, i8** %13, align 8
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 109
  %15 = load i8*, i8** %14, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %15)
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 109
  store i8* null, i8** %16, align 8
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 112
  %18 = load i32, i32* %17, align 4
  %19 = and i32 %18, 4096
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %27

21:                                               ; preds = %1
  %22 = bitcast %struct.png_struct_def* %0 to i8*
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %24 = load %struct.png_color_struct*, %struct.png_color_struct** %23, align 8
  %25 = bitcast %struct.png_color_struct* %24 to i8*
  call void @png_zfree(i8* %22, i8* %25)
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  store %struct.png_color_struct* null, %struct.png_color_struct** %26, align 8
  br label %27

27:                                               ; preds = %21, %1
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 112
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, -4097
  store i32 %30, i32* %28, align 4
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 112
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, 8192
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %27
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %37 = load i8*, i8** %36, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %37)
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  store i8* null, i8** %38, align 8
  br label %39

39:                                               ; preds = %35, %27
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 112
  %41 = load i32, i32* %40, align 4
  %42 = and i32 %41, -8193
  store i32 %42, i32* %40, align 4
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %44 = call i32 @inflateEnd(%struct.z_stream_s* %43)
  %45 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 97
  %46 = load i8*, i8** %45, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %46)
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 97
  store i8* null, i8** %47, align 8
  %48 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %49 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %48, i32 0, i32 1
  %50 = load i8*, i8** %49, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %50)
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %52 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %51, i32 0, i32 1
  store i8* null, i8** %52, align 8
  %53 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 117
  %54 = load i8*, i8** %53, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %54)
  %55 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 117
  store i8* null, i8** %55, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_destroy_png_struct(%struct.png_struct_def.60* noalias %0) #11 {
  %2 = alloca %struct.png_struct_def.60, align 8
  %3 = icmp ne %struct.png_struct_def.60* %0, null
  br i1 %3, label %4, label %9

4:                                                ; preds = %1
  %5 = bitcast %struct.png_struct_def.60* %2 to i8*
  %6 = bitcast %struct.png_struct_def.60* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 1256, i1 false)
  %7 = bitcast %struct.png_struct_def.60* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 1256, i1 false)
  %8 = bitcast %struct.png_struct_def.60* %0 to i8*
  call void @png_free(%struct.png_struct_def.60* %2, i8* %8)
  call void bitcast (void (%struct.png_struct_def*)* @png_free_jmpbuf to void (%struct.png_struct_def.60*)*)(%struct.png_struct_def.60* %2)
  br label %9

9:                                                ; preds = %4, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_free_jmpbuf(%struct.png_struct_def* noalias %0) #11 {
  %2 = alloca [1 x %struct.__jmp_buf_tag], align 16
  %3 = icmp ne %struct.png_struct_def* %0, null
  br i1 %3, label %4, label %27

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 2
  %6 = load [1 x %struct.__jmp_buf_tag]*, [1 x %struct.__jmp_buf_tag]** %5, align 8
  %7 = icmp ne [1 x %struct.__jmp_buf_tag]* %6, null
  br i1 %7, label %8, label %23

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = icmp ugt i64 %10, 0
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 0
  %13 = icmp ne [1 x %struct.__jmp_buf_tag]* %6, %12
  %or.cond = select i1 %11, i1 %13, i1 false
  br i1 %or.cond, label %14, label %23

14:                                               ; preds = %8
  %15 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %2, i32 0, i32 0
  %16 = call i32 @_setjmp(%struct.__jmp_buf_tag* %15) #23
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 2
  store [1 x %struct.__jmp_buf_tag]* %2, [1 x %struct.__jmp_buf_tag]** %19, align 8
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 3
  store i64 0, i64* %20, align 8
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 1
  store void (%struct.__jmp_buf_tag*, i32)* @longjmp, void (%struct.__jmp_buf_tag*, i32)** %21, align 8
  %22 = bitcast [1 x %struct.__jmp_buf_tag]* %6 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %22)
  br label %23

23:                                               ; preds = %18, %14, %8, %4
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 3
  store i64 0, i64* %24, align 8
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 2
  store [1 x %struct.__jmp_buf_tag]* null, [1 x %struct.__jmp_buf_tag]** %25, align 8
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 1
  store void (%struct.__jmp_buf_tag*, i32)* null, void (%struct.__jmp_buf_tag*, i32)** %26, align 8
  br label %27

27:                                               ; preds = %23, %1
  ret void
}

declare i32 @inflateEnd(%struct.z_stream_s*) #13

; Function Attrs: noinline nounwind uwtable
define internal void @png_write_destroy(%struct.png_struct_def* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 2
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %8 = call i32 @deflateEnd(%struct.z_stream_s* %7)
  br label %9

9:                                                ; preds = %6, %1
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 20
  call void bitcast (void (%struct.png_struct_def.60*, %struct.png_compression_buffer**)* @png_free_buffer_list to void (%struct.png_struct_def*, %struct.png_compression_buffer**)*)(%struct.png_struct_def* %0, %struct.png_compression_buffer** %10)
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %12 = load i8*, i8** %11, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %12)
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  store i8* null, i8** %13, align 8
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 45
  %15 = load i8*, i8** %14, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %15)
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 47
  %17 = load i8*, i8** %16, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %17)
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 48
  %19 = load i8*, i8** %18, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %19)
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 45
  store i8* null, i8** %20, align 8
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 47
  store i8* null, i8** %21, align 8
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 48
  store i8* null, i8** %22, align 8
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 117
  %24 = load i8*, i8** %23, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %24)
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 117
  store i8* null, i8** %25, align 8
  ret void
}

declare i32 @deflateEnd(%struct.z_stream_s*) #13

; Function Attrs: noinline nounwind uwtable
define void @png_free_buffer_list(%struct.png_struct_def.60* noalias %0, %struct.png_compression_buffer** %1) #11 {
  %3 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %1, align 8
  %4 = icmp ne %struct.png_compression_buffer* %3, null
  br i1 %4, label %5, label %11

5:                                                ; preds = %2
  store %struct.png_compression_buffer* null, %struct.png_compression_buffer** %1, align 8
  br label %6

6:                                                ; preds = %6, %5
  %.0 = phi %struct.png_compression_buffer* [ %3, %5 ], [ %8, %6 ]
  %7 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %.0, i32 0, i32 0
  %8 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %7, align 8
  %9 = bitcast %struct.png_compression_buffer* %.0 to i8*
  call void @png_free(%struct.png_struct_def.60* %0, i8* %9)
  %10 = icmp ne %struct.png_compression_buffer* %8, null
  br i1 %10, label %6, label %.loopexit

.loopexit:                                        ; preds = %6
  br label %11

11:                                               ; preds = %.loopexit, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_image_error(%struct.png_image* %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 8
  %4 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  %5 = call i64 @png_safecat(i8* %4, i64 64, i64 0, i8* %1)
  %6 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 7
  %7 = load i32, i32* %6, align 8
  %8 = or i32 %7, 2
  store i32 %8, i32* %6, align 8
  call void @png_image_free(%struct.png_image* %0)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define void @png_warning_parameter([32 x i8]* %0, i32 %1, i8* %2) #11 {
  %4 = icmp sgt i32 %1, 0
  %5 = icmp sle i32 %1, 8
  %or.cond = and i1 %4, %5
  br i1 %or.cond, label %6, label %12

6:                                                ; preds = %3
  %7 = sub nsw i32 %1, 1
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds [32 x i8], [32 x i8]* %0, i64 %8
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i32 0, i32 0
  %11 = call i64 @png_safecat(i8* %10, i64 32, i64 0, i8* %2)
  br label %12

12:                                               ; preds = %6, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_warning_parameter_unsigned([32 x i8]* %0, i32 %1, i32 %2, i64 %3) #11 {
  %5 = alloca [24 x i8], align 16
  %6 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i32 0, i32 0
  %7 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i32 0, i32 0
  %8 = getelementptr inbounds i8, i8* %7, i64 24
  %9 = call i8* @png_format_number(i8* %6, i8* %8, i32 %2, i64 %3)
  call void @png_warning_parameter([32 x i8]* %0, i32 %1, i8* %9)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_warning_parameter_signed([32 x i8]* %0, i32 %1, i32 %2, i32 %3) #11 {
  %5 = alloca [24 x i8], align 16
  %6 = sext i32 %3 to i64
  %7 = icmp slt i32 %3, 0
  %8 = xor i64 %6, -1
  %9 = add i64 %8, 1
  %.01 = select i1 %7, i64 %9, i64 %6
  %10 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i32 0, i32 0
  %11 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i32 0, i32 0
  %12 = getelementptr inbounds i8, i8* %11, i64 24
  %13 = call i8* @png_format_number(i8* %10, i8* %12, i32 %2, i64 %.01)
  %14 = icmp slt i32 %3, 0
  %15 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i32 0, i32 0
  %16 = icmp ugt i8* %13, %15
  %or.cond = select i1 %14, i1 %16, i1 false
  br i1 %or.cond, label %17, label %19

17:                                               ; preds = %4
  %18 = getelementptr inbounds i8, i8* %13, i32 -1
  store i8 45, i8* %18, align 1
  br label %19

19:                                               ; preds = %17, %4
  %.0 = phi i8* [ %18, %17 ], [ %13, %4 ]
  call void @png_warning_parameter([32 x i8]* %0, i32 %1, i8* %.0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_formatted_warning(%struct.png_struct_def* noalias %0, [32 x i8]* %1, i8* %2) #11 {
  %4 = alloca [192 x i8], align 16
  %5 = icmp ne [32 x i8]* %1, null
  br label %6

6:                                                ; preds = %3, %.backedge
  %.0219 = phi i8* [ %2, %3 ], [ %.02.be, %.backedge ]
  %.0317 = phi i64 [ 0, %3 ], [ %.03.be, %.backedge ]
  %7 = load i8, i8* %.0219, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %.critedge

10:                                               ; preds = %6
  br i1 %5, label %11, label %52

11:                                               ; preds = %10
  %12 = load i8, i8* %.0219, align 1
  %13 = sext i8 %12 to i32
  %14 = icmp eq i32 %13, 64
  br i1 %14, label %15, label %52

15:                                               ; preds = %11
  %16 = getelementptr inbounds i8, i8* %.0219, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i32
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %52

20:                                               ; preds = %15
  %21 = getelementptr inbounds i8, i8* %.0219, i32 1
  %22 = load i8, i8* %21, align 1
  %23 = sext i8 %22 to i32
  %24 = icmp ne i32 49, %23
  br i1 %24, label %.lr.ph, label %.critedge5

.lr.ph:                                           ; preds = %20
  br label %25

25:                                               ; preds = %.lr.ph, %26
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %26 ]
  %exitcond = icmp ne i64 %indvars.iv, 9
  br i1 %exitcond, label %26, label %..critedge5_crit_edge8

26:                                               ; preds = %25
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep = getelementptr [10 x i8], [10 x i8]* @png_formatted_warning.valid_parameters, i64 0, i64 %indvars.iv
  %scevgep20 = getelementptr i8, i8* %scevgep, i64 1
  %27 = load i8, i8* %scevgep20, align 1
  %28 = sext i8 %27 to i32
  %29 = icmp ne i32 %28, %23
  br i1 %29, label %25, label %..critedge5_crit_edge

..critedge5_crit_edge:                            ; preds = %26
  %split.wide = phi i64 [ %indvars.iv.next, %26 ]
  %30 = trunc i64 %split.wide to i32
  br label %.critedge5

..critedge5_crit_edge8:                           ; preds = %25
  br label %.critedge5

.critedge5:                                       ; preds = %..critedge5_crit_edge8, %..critedge5_crit_edge, %20
  %.01.lcssa = phi i32 [ %30, %..critedge5_crit_edge ], [ 9, %..critedge5_crit_edge8 ], [ 0, %20 ]
  %31 = icmp slt i32 %.01.lcssa, 8
  br i1 %31, label %32, label %52

32:                                               ; preds = %.critedge5
  %33 = sext i32 %.01.lcssa to i64
  %34 = getelementptr inbounds [32 x i8], [32 x i8]* %1, i64 %33
  %35 = getelementptr inbounds [32 x i8], [32 x i8]* %34, i32 0, i32 0
  %36 = sext i32 %.01.lcssa to i64
  %37 = getelementptr inbounds [32 x i8], [32 x i8]* %1, i64 %36
  %38 = getelementptr inbounds [32 x i8], [32 x i8]* %37, i32 0, i32 0
  %39 = getelementptr inbounds i8, i8* %38, i64 32
  %40 = icmp ult i64 %.0317, 191
  br i1 %40, label %.lr.ph13, label %.critedge6

.lr.ph13:                                         ; preds = %32
  br label %41

41:                                               ; preds = %.lr.ph13, %46
  %.012 = phi i8* [ %35, %.lr.ph13 ], [ %47, %46 ]
  %.1411 = phi i64 [ %.0317, %.lr.ph13 ], [ %49, %46 ]
  %42 = load i8, i8* %.012, align 1
  %43 = sext i8 %42 to i32
  %44 = icmp ne i32 %43, 0
  %45 = icmp ult i8* %.012, %39
  %spec.select = select i1 %44, i1 %45, i1 false
  br i1 %spec.select, label %46, label %..critedge6_crit_edge14

46:                                               ; preds = %41
  %47 = getelementptr inbounds i8, i8* %.012, i32 1
  %48 = load i8, i8* %.012, align 1
  %49 = add i64 %.1411, 1
  %scevgep21 = getelementptr [192 x i8], [192 x i8]* %4, i64 0, i64 %.1411
  store i8 %48, i8* %scevgep21, align 1
  %exitcond16 = icmp ne i64 %49, 191
  br i1 %exitcond16, label %41, label %..critedge6_crit_edge

..critedge6_crit_edge:                            ; preds = %46
  br label %.critedge6

..critedge6_crit_edge14:                          ; preds = %41
  %split15 = phi i64 [ %.1411, %41 ]
  br label %.critedge6

.critedge6:                                       ; preds = %..critedge6_crit_edge14, %..critedge6_crit_edge, %32
  %.14.lcssa = phi i64 [ 191, %..critedge6_crit_edge ], [ %split15, %..critedge6_crit_edge14 ], [ %.0317, %32 ]
  %50 = getelementptr inbounds i8, i8* %21, i32 1
  br label %.backedge

.backedge:                                        ; preds = %.critedge6, %52
  %.03.be = phi i64 [ %.14.lcssa, %.critedge6 ], [ %55, %52 ]
  %.02.be = phi i8* [ %50, %.critedge6 ], [ %53, %52 ]
  %51 = icmp ult i64 %.03.be, 191
  br i1 %51, label %6, label %.critedge

52:                                               ; preds = %.critedge5, %15, %11, %10
  %.1 = phi i8* [ %.0219, %15 ], [ %.0219, %11 ], [ %.0219, %10 ], [ %21, %.critedge5 ]
  %53 = getelementptr inbounds i8, i8* %.1, i32 1
  %54 = load i8, i8* %.1, align 1
  %55 = add i64 %.0317, 1
  %56 = getelementptr inbounds [192 x i8], [192 x i8]* %4, i64 0, i64 %.0317
  store i8 %54, i8* %56, align 1
  br label %.backedge

.critedge:                                        ; preds = %.backedge, %6
  %.03.lcssa = phi i64 [ %.03.be, %.backedge ], [ %.0317, %6 ]
  %57 = getelementptr inbounds [192 x i8], [192 x i8]* %4, i64 0, i64 %.03.lcssa
  store i8 0, i8* %57, align 1
  %58 = getelementptr inbounds [192 x i8], [192 x i8]* %4, i32 0, i32 0
  call void @png_warning(%struct.png_struct_def* %0, i8* %58)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define [1 x %struct.__jmp_buf_tag]* @png_set_longjmp_fn(%struct.png_struct_def* noalias %0, void (%struct.__jmp_buf_tag*, i32)* %1, i64 %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %41, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 2
  %7 = load [1 x %struct.__jmp_buf_tag]*, [1 x %struct.__jmp_buf_tag]** %6, align 8
  %8 = icmp eq [1 x %struct.__jmp_buf_tag]* %7, null
  br i1 %8, label %9, label %24

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 3
  store i64 0, i64* %10, align 8
  %11 = icmp ule i64 %2, 200
  br i1 %11, label %12, label %15

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 0
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 2
  store [1 x %struct.__jmp_buf_tag]* %13, [1 x %struct.__jmp_buf_tag]** %14, align 8
  br label %37

15:                                               ; preds = %9
  %16 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %2)
  %17 = bitcast i8* %16 to [1 x %struct.__jmp_buf_tag]*
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 2
  store [1 x %struct.__jmp_buf_tag]* %17, [1 x %struct.__jmp_buf_tag]** %18, align 8
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 2
  %20 = load [1 x %struct.__jmp_buf_tag]*, [1 x %struct.__jmp_buf_tag]** %19, align 8
  %21 = icmp eq [1 x %struct.__jmp_buf_tag]* %20, null
  br i1 %21, label %41, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 3
  store i64 %2, i64* %23, align 8
  br label %37

24:                                               ; preds = %5
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 3
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %34

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 2
  %30 = load [1 x %struct.__jmp_buf_tag]*, [1 x %struct.__jmp_buf_tag]** %29, align 8
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 0
  %32 = icmp ne [1 x %struct.__jmp_buf_tag]* %30, %31
  br i1 %32, label %33, label %34

33:                                               ; preds = %28
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1.79, i32 0, i32 0)) #24
  unreachable

34:                                               ; preds = %28, %24
  %.01 = phi i64 [ %26, %24 ], [ 200, %28 ]
  %35 = icmp ne i64 %.01, %2
  br i1 %35, label %36, label %37

36:                                               ; preds = %34
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2.80, i32 0, i32 0))
  br label %41

37:                                               ; preds = %34, %12, %22
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 1
  store void (%struct.__jmp_buf_tag*, i32)* %1, void (%struct.__jmp_buf_tag*, i32)** %38, align 8
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 2
  %40 = load [1 x %struct.__jmp_buf_tag]*, [1 x %struct.__jmp_buf_tag]** %39, align 8
  br label %41

41:                                               ; preds = %15, %3, %37, %36
  %.0 = phi [1 x %struct.__jmp_buf_tag]* [ %40, %37 ], [ null, %36 ], [ null, %3 ], [ null, %15 ]
  ret [1 x %struct.__jmp_buf_tag]* %.0
}

; Function Attrs: noinline nounwind uwtable
define i8* @png_get_error_ptr(%struct.png_struct_def* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 6
  %5 = load i8*, i8** %4, align 8
  br label %6

6:                                                ; preds = %1, %3
  %.0 = phi i8* [ %5, %3 ], [ null, %1 ]
  ret i8* %.0
}

; Function Attrs: noinline noreturn nounwind uwtable
define void @png_safe_error(%struct.png_struct_def* %0, i8* %1) #12 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 6
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.png_image*
  %6 = icmp ne %struct.png_image* %5, null
  br i1 %6, label %7, label %36

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 8
  %9 = getelementptr inbounds [64 x i8], [64 x i8]* %8, i32 0, i32 0
  %10 = call i64 @png_safecat(i8* %9, i64 64, i64 0, i8* %1)
  %11 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 7
  %12 = load i32, i32* %11, align 8
  %13 = or i32 %12, 2
  store i32 %13, i32* %11, align 8
  %14 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 0
  %15 = load %struct.png_control*, %struct.png_control** %14, align 8
  %16 = icmp ne %struct.png_control* %15, null
  br i1 %16, label %17, label %29

17:                                               ; preds = %7
  %18 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 0
  %19 = load %struct.png_control*, %struct.png_control** %18, align 8
  %20 = getelementptr inbounds %struct.png_control, %struct.png_control* %19, i32 0, i32 2
  %21 = load i8*, i8** %20, align 8
  %22 = icmp ne i8* %21, null
  br i1 %22, label %23, label %29

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 0
  %25 = load %struct.png_control*, %struct.png_control** %24, align 8
  %26 = getelementptr inbounds %struct.png_control, %struct.png_control* %25, i32 0, i32 2
  %27 = load i8*, i8** %26, align 8
  %28 = bitcast i8* %27 to %struct.__jmp_buf_tag*
  call void @longjmp(%struct.__jmp_buf_tag* %28, i32 1) #25
  unreachable

29:                                               ; preds = %17, %7
  %30 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 8
  %31 = getelementptr inbounds [64 x i8], [64 x i8]* %30, i32 0, i32 0
  %32 = call i64 @png_safecat(i8* %31, i64 64, i64 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3.83, i32 0, i32 0))
  %33 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 8
  %34 = getelementptr inbounds [64 x i8], [64 x i8]* %33, i32 0, i32 0
  %35 = call i64 @png_safecat(i8* %34, i64 64, i64 %32, i8* %1)
  br label %36

36:                                               ; preds = %29, %2
  call void @abort() #25
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define void @png_safe_warning(%struct.png_struct_def* %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 6
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.png_image*
  %6 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 7
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %16

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 8
  %11 = getelementptr inbounds [64 x i8], [64 x i8]* %10, i32 0, i32 0
  %12 = call i64 @png_safecat(i8* %11, i64 64, i64 0, i8* %1)
  %13 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 7
  %14 = load i32, i32* %13, align 8
  %15 = or i32 %14, 1
  store i32 %15, i32* %13, align 8
  br label %16

16:                                               ; preds = %9, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_valid(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 %5, i1 false
  br i1 %or.cond, label %6, label %10

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, %2
  br label %10

10:                                               ; preds = %3, %6
  %.0 = phi i32 [ %9, %6 ], [ 0, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i64 @png_get_rowbytes(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 3
  %7 = load i64, i64* %6, align 8
  br label %8

8:                                                ; preds = %2, %5
  %.0 = phi i64 [ %7, %5 ], [ 0, %2 ]
  ret i64 %.0
}

; Function Attrs: noinline nounwind uwtable
define i8** @png_get_rows(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 53
  %7 = load i8**, i8*** %6, align 8
  br label %8

8:                                                ; preds = %2, %5
  %.0 = phi i8** [ %7, %5 ], [ null, %2 ]
  ret i8** %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_image_width(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  br label %8

8:                                                ; preds = %2, %5
  %.0 = phi i32 [ %7, %5 ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_image_height(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  br label %8

8:                                                ; preds = %2, %5
  %.0 = phi i32 [ %7, %5 ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define zeroext i8 @png_get_bit_depth(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  %7 = load i8, i8* %6, align 4
  br label %8

8:                                                ; preds = %2, %5
  %.0 = phi i8 [ %7, %5 ], [ 0, %2 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define zeroext i8 @png_get_color_type(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %7 = load i8, i8* %6, align 1
  br label %8

8:                                                ; preds = %2, %5
  %.0 = phi i8 [ %7, %5 ], [ 0, %2 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define zeroext i8 @png_get_filter_type(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 10
  %7 = load i8, i8* %6, align 1
  br label %8

8:                                                ; preds = %2, %5
  %.0 = phi i8 [ %7, %5 ], [ 0, %2 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define zeroext i8 @png_get_interlace_type(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 11
  %7 = load i8, i8* %6, align 8
  br label %8

8:                                                ; preds = %2, %5
  %.0 = phi i8 [ %7, %5 ], [ 0, %2 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define zeroext i8 @png_get_compression_type(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 9
  %7 = load i8, i8* %6, align 2
  br label %8

8:                                                ; preds = %2, %5
  %.0 = phi i8 [ %7, %5 ], [ 0, %2 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_x_pixels_per_meter(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %18

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 128
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %18

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 33
  %12 = load i8, i8* %11, align 8
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 31
  %17 = load i32, i32* %16, align 8
  br label %18

18:                                               ; preds = %2, %5, %10, %15
  %.0 = phi i32 [ %17, %15 ], [ 0, %10 ], [ 0, %5 ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_y_pixels_per_meter(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %18

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 128
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %18

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 33
  %12 = load i8, i8* %11, align 8
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 32
  %17 = load i32, i32* %16, align 4
  br label %18

18:                                               ; preds = %2, %5, %10, %15
  %.0 = phi i32 [ %17, %15 ], [ 0, %10 ], [ 0, %5 ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_pixels_per_meter(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %24

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 128
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %24

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 33
  %12 = load i8, i8* %11, align 8
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %24

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 31
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 32
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %17, %19
  br i1 %20, label %21, label %24

21:                                               ; preds = %15
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 31
  %23 = load i32, i32* %22, align 8
  br label %24

24:                                               ; preds = %2, %5, %15, %10, %21
  %.0 = phi i32 [ %23, %21 ], [ 0, %10 ], [ 0, %15 ], [ 0, %5 ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define float @png_get_pixel_aspect_ratio(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %22

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 128
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %22

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 31
  %12 = load i32, i32* %11, align 8
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %22

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 32
  %16 = load i32, i32* %15, align 4
  %17 = uitofp i32 %16 to float
  %18 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 31
  %19 = load i32, i32* %18, align 8
  %20 = uitofp i32 %19 to float
  %21 = fdiv float %17, %20
  br label %22

22:                                               ; preds = %2, %5, %10, %14
  %.0 = phi float [ %21, %14 ], [ 0.000000e+00, %10 ], [ 0.000000e+00, %5 ], [ 0.000000e+00, %2 ]
  ret float %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_pixel_aspect_ratio_fixed(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = alloca i32, align 4
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 %5, i1 false
  br i1 %or.cond, label %6, label %35

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 128
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %35

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 31
  %13 = load i32, i32* %12, align 8
  %14 = icmp ugt i32 %13, 0
  br i1 %14, label %15, label %35

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 32
  %17 = load i32, i32* %16, align 4
  %18 = icmp ugt i32 %17, 0
  br i1 %18, label %19, label %35

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 31
  %21 = load i32, i32* %20, align 8
  %22 = icmp ule i32 %21, 2147483647
  br i1 %22, label %23, label %35

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 32
  %25 = load i32, i32* %24, align 4
  %26 = icmp ule i32 %25, 2147483647
  br i1 %26, label %27, label %35

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 32
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 31
  %31 = load i32, i32* %30, align 8
  %32 = call i32 @png_muldiv(i32* %3, i32 %29, i32 100000, i32 %31)
  %33 = icmp ne i32 %32, 0
  %34 = load i32, i32* %3, align 4
  %spec.select = select i1 %33, i32 %34, i32 0
  br label %35

35:                                               ; preds = %27, %2, %6, %11, %15, %19, %23
  %.0 = phi i32 [ 0, %23 ], [ 0, %19 ], [ 0, %15 ], [ 0, %11 ], [ 0, %6 ], [ 0, %2 ], [ %spec.select, %27 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_x_offset_microns(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %18

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 256
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %18

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 30
  %12 = load i8, i8* %11, align 4
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 28
  %17 = load i32, i32* %16, align 4
  br label %18

18:                                               ; preds = %2, %5, %10, %15
  %.0 = phi i32 [ %17, %15 ], [ 0, %10 ], [ 0, %5 ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_y_offset_microns(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %18

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 256
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %18

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 30
  %12 = load i8, i8* %11, align 4
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 29
  %17 = load i32, i32* %16, align 8
  br label %18

18:                                               ; preds = %2, %5, %10, %15
  %.0 = phi i32 [ %17, %15 ], [ 0, %10 ], [ 0, %5 ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_x_offset_pixels(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %18

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 256
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %18

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 30
  %12 = load i8, i8* %11, align 4
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 28
  %17 = load i32, i32* %16, align 4
  br label %18

18:                                               ; preds = %2, %5, %10, %15
  %.0 = phi i32 [ %17, %15 ], [ 0, %10 ], [ 0, %5 ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_y_offset_pixels(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %18

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 256
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %18

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 30
  %12 = load i8, i8* %11, align 4
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 29
  %17 = load i32, i32* %16, align 8
  br label %18

18:                                               ; preds = %2, %5, %10, %15
  %.0 = phi i32 [ %17, %15 ], [ 0, %10 ], [ 0, %5 ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_pixels_per_inch(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = call i32 @png_get_pixels_per_meter(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  %4 = call i32 @ppi_from_ppm(i32 %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ppi_from_ppm(i32 %0) #11 {
  %2 = alloca i32, align 4
  %3 = icmp ule i32 %0, 2147483647
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = call i32 @png_muldiv(i32* %2, i32 %0, i32 127, i32 5000)
  %6 = icmp ne i32 %5, 0
  %7 = load i32, i32* %2, align 4
  %spec.select = select i1 %6, i32 %7, i32 0
  br label %8

8:                                                ; preds = %4, %1
  %.0 = phi i32 [ 0, %1 ], [ %spec.select, %4 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_x_pixels_per_inch(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = call i32 @png_get_x_pixels_per_meter(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  %4 = call i32 @ppi_from_ppm(i32 %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_y_pixels_per_inch(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = call i32 @png_get_y_pixels_per_meter(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  %4 = call i32 @ppi_from_ppm(i32 %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_x_offset_inches_fixed(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = call i32 @png_get_x_offset_microns(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  %4 = call i32 @png_fixed_inches_from_microns(%struct.png_struct_def* %0, i32 %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_fixed_inches_from_microns(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = call i32 @png_muldiv_warn(%struct.png_struct_def* %0, i32 %1, i32 500, i32 127)
  ret i32 %3
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_y_offset_inches_fixed(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = call i32 @png_get_y_offset_microns(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  %4 = call i32 @png_fixed_inches_from_microns(%struct.png_struct_def* %0, i32 %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define float @png_get_x_offset_inches(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = call i32 @png_get_x_offset_microns(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  %4 = sitofp i32 %3 to double
  %5 = fmul double %4, 3.937000e-05
  %6 = fptrunc double %5 to float
  ret float %6
}

; Function Attrs: noinline nounwind uwtable
define float @png_get_y_offset_inches(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = call i32 @png_get_y_offset_microns(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  %4 = sitofp i32 %3 to double
  %5 = fmul double %4, 3.937000e-05
  %6 = fptrunc double %5 to float
  ret float %6
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_pHYs_dpi(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32* %2, i32* %3, i32* %4) #11 {
  %6 = icmp ne %struct.png_struct_def* %0, null
  %7 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %6, i1 %7, i1 false
  br i1 %or.cond, label %8, label %50

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 128
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %50

13:                                               ; preds = %8
  %14 = icmp ne i32* %2, null
  br i1 %14, label %15, label %19

15:                                               ; preds = %13
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 31
  %17 = load i32, i32* %16, align 8
  store i32 %17, i32* %2, align 4
  %18 = or i32 0, 128
  br label %19

19:                                               ; preds = %15, %13
  %.0 = phi i32 [ %18, %15 ], [ 0, %13 ]
  %20 = icmp ne i32* %3, null
  br i1 %20, label %21, label %25

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 32
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %3, align 4
  %24 = or i32 %.0, 128
  br label %25

25:                                               ; preds = %21, %19
  %.1 = phi i32 [ %24, %21 ], [ %.0, %19 ]
  %26 = icmp ne i32* %4, null
  br i1 %26, label %27, label %50

27:                                               ; preds = %25
  %28 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 33
  %29 = load i8, i8* %28, align 8
  %30 = zext i8 %29 to i32
  store i32 %30, i32* %4, align 4
  %31 = or i32 %.1, 128
  %32 = load i32, i32* %4, align 4
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %50

34:                                               ; preds = %27
  %35 = icmp ne i32* %2, null
  br i1 %35, label %36, label %42

36:                                               ; preds = %34
  %37 = load i32, i32* %2, align 4
  %38 = uitofp i32 %37 to double
  %39 = fmul double %38, 2.540000e-02
  %40 = fadd double %39, 5.000000e-01
  %41 = fptoui double %40 to i32
  store i32 %41, i32* %2, align 4
  br label %42

42:                                               ; preds = %36, %34
  %43 = icmp ne i32* %3, null
  br i1 %43, label %44, label %50

44:                                               ; preds = %42
  %45 = load i32, i32* %3, align 4
  %46 = uitofp i32 %45 to double
  %47 = fmul double %46, 2.540000e-02
  %48 = fadd double %47, 5.000000e-01
  %49 = fptoui double %48 to i32
  store i32 %49, i32* %3, align 4
  br label %50

50:                                               ; preds = %25, %42, %44, %27, %8, %5
  %.3 = phi i32 [ 0, %8 ], [ 0, %5 ], [ %.1, %25 ], [ %31, %42 ], [ %31, %44 ], [ %31, %27 ]
  ret i32 %.3
}

; Function Attrs: noinline nounwind uwtable
define zeroext i8 @png_get_channels(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 12
  %7 = load i8, i8* %6, align 1
  br label %8

8:                                                ; preds = %2, %5
  %.0 = phi i8 [ %7, %5 ], [ 0, %2 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define i8* @png_get_signature(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  %5 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 15
  %6 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i32 0, i32 0
  %.0 = select i1 %or.cond, i8* %6, i8* null
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_bKGD(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, %struct.png_color_16_struct** %2) #11 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 %5, i1 false
  br i1 %or.cond, label %6, label %14

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 32
  %10 = icmp ne i32 %9, 0
  %11 = icmp ne %struct.png_color_16_struct** %2, null
  %or.cond1 = select i1 %10, i1 %11, i1 false
  br i1 %or.cond1, label %12, label %14

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 27
  store %struct.png_color_16_struct* %13, %struct.png_color_16_struct** %2, align 8
  br label %14

14:                                               ; preds = %3, %6, %12
  %.0 = phi i32 [ 32, %12 ], [ 0, %6 ], [ 0, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_cHRM(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, double* %2, double* %3, double* %4, double* %5, double* %6, double* %7, double* %8, double* %9) #11 {
  %11 = icmp ne %struct.png_struct_def* %0, null
  %12 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %11, i1 %12, i1 false
  br i1 %or.cond, label %13, label %92

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %15 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %14, i32 0, i32 4
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = and i32 %17, 2
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %92

20:                                               ; preds = %13
  %21 = icmp ne double* %2, null
  br i1 %21, label %22, label %29

22:                                               ; preds = %20
  %23 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %24 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %24, i32 0, i32 6
  %26 = load i32, i32* %25, align 4
  %27 = sitofp i32 %26 to double
  %28 = fmul double 1.000000e-05, %27
  store double %28, double* %2, align 8
  br label %29

29:                                               ; preds = %22, %20
  %30 = icmp ne double* %3, null
  br i1 %30, label %31, label %38

31:                                               ; preds = %29
  %32 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %33 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %32, i32 0, i32 1
  %34 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %33, i32 0, i32 7
  %35 = load i32, i32* %34, align 4
  %36 = sitofp i32 %35 to double
  %37 = fmul double 1.000000e-05, %36
  store double %37, double* %3, align 8
  br label %38

38:                                               ; preds = %31, %29
  %39 = icmp ne double* %4, null
  br i1 %39, label %40, label %47

40:                                               ; preds = %38
  %41 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %42 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %41, i32 0, i32 1
  %43 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %42, i32 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = sitofp i32 %44 to double
  %46 = fmul double 1.000000e-05, %45
  store double %46, double* %4, align 8
  br label %47

47:                                               ; preds = %40, %38
  %48 = icmp ne double* %5, null
  br i1 %48, label %49, label %56

49:                                               ; preds = %47
  %50 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %51 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %50, i32 0, i32 1
  %52 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %51, i32 0, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = sitofp i32 %53 to double
  %55 = fmul double 1.000000e-05, %54
  store double %55, double* %5, align 8
  br label %56

56:                                               ; preds = %49, %47
  %57 = icmp ne double* %6, null
  br i1 %57, label %58, label %65

58:                                               ; preds = %56
  %59 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %60 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %59, i32 0, i32 1
  %61 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %60, i32 0, i32 2
  %62 = load i32, i32* %61, align 4
  %63 = sitofp i32 %62 to double
  %64 = fmul double 1.000000e-05, %63
  store double %64, double* %6, align 8
  br label %65

65:                                               ; preds = %58, %56
  %66 = icmp ne double* %7, null
  br i1 %66, label %67, label %74

67:                                               ; preds = %65
  %68 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %69 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %68, i32 0, i32 1
  %70 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %69, i32 0, i32 3
  %71 = load i32, i32* %70, align 4
  %72 = sitofp i32 %71 to double
  %73 = fmul double 1.000000e-05, %72
  store double %73, double* %7, align 8
  br label %74

74:                                               ; preds = %67, %65
  %75 = icmp ne double* %8, null
  br i1 %75, label %76, label %83

76:                                               ; preds = %74
  %77 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %78 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %77, i32 0, i32 1
  %79 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %78, i32 0, i32 4
  %80 = load i32, i32* %79, align 4
  %81 = sitofp i32 %80 to double
  %82 = fmul double 1.000000e-05, %81
  store double %82, double* %8, align 8
  br label %83

83:                                               ; preds = %76, %74
  %84 = icmp ne double* %9, null
  br i1 %84, label %85, label %92

85:                                               ; preds = %83
  %86 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %87 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %86, i32 0, i32 1
  %88 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %87, i32 0, i32 5
  %89 = load i32, i32* %88, align 4
  %90 = sitofp i32 %89 to double
  %91 = fmul double 1.000000e-05, %90
  store double %91, double* %9, align 8
  br label %92

92:                                               ; preds = %10, %13, %83, %85
  %.0 = phi i32 [ 4, %85 ], [ 4, %83 ], [ 0, %13 ], [ 0, %10 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_cHRM_XYZ(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, double* %2, double* %3, double* %4, double* %5, double* %6, double* %7, double* %8, double* %9, double* %10) #11 {
  %12 = icmp ne %struct.png_struct_def* %0, null
  %13 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %12, i1 %13, i1 false
  br i1 %or.cond, label %14, label %102

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %16 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %15, i32 0, i32 4
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = and i32 %18, 2
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %102

21:                                               ; preds = %14
  %22 = icmp ne double* %2, null
  br i1 %22, label %23, label %30

23:                                               ; preds = %21
  %24 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %25 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %24, i32 0, i32 2
  %26 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %25, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = sitofp i32 %27 to double
  %29 = fmul double 1.000000e-05, %28
  store double %29, double* %2, align 8
  br label %30

30:                                               ; preds = %23, %21
  %31 = icmp ne double* %3, null
  br i1 %31, label %32, label %39

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %34 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %33, i32 0, i32 2
  %35 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %34, i32 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = sitofp i32 %36 to double
  %38 = fmul double 1.000000e-05, %37
  store double %38, double* %3, align 8
  br label %39

39:                                               ; preds = %32, %30
  %40 = icmp ne double* %4, null
  br i1 %40, label %41, label %48

41:                                               ; preds = %39
  %42 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %43 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %42, i32 0, i32 2
  %44 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %43, i32 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = sitofp i32 %45 to double
  %47 = fmul double 1.000000e-05, %46
  store double %47, double* %4, align 8
  br label %48

48:                                               ; preds = %41, %39
  %49 = icmp ne double* %5, null
  br i1 %49, label %50, label %57

50:                                               ; preds = %48
  %51 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %52 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %51, i32 0, i32 2
  %53 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %52, i32 0, i32 3
  %54 = load i32, i32* %53, align 4
  %55 = sitofp i32 %54 to double
  %56 = fmul double 1.000000e-05, %55
  store double %56, double* %5, align 8
  br label %57

57:                                               ; preds = %50, %48
  %58 = icmp ne double* %6, null
  br i1 %58, label %59, label %66

59:                                               ; preds = %57
  %60 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %61 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %60, i32 0, i32 2
  %62 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %61, i32 0, i32 4
  %63 = load i32, i32* %62, align 4
  %64 = sitofp i32 %63 to double
  %65 = fmul double 1.000000e-05, %64
  store double %65, double* %6, align 8
  br label %66

66:                                               ; preds = %59, %57
  %67 = icmp ne double* %7, null
  br i1 %67, label %68, label %75

68:                                               ; preds = %66
  %69 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %70 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %69, i32 0, i32 2
  %71 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %70, i32 0, i32 5
  %72 = load i32, i32* %71, align 4
  %73 = sitofp i32 %72 to double
  %74 = fmul double 1.000000e-05, %73
  store double %74, double* %7, align 8
  br label %75

75:                                               ; preds = %68, %66
  %76 = icmp ne double* %8, null
  br i1 %76, label %77, label %84

77:                                               ; preds = %75
  %78 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %79 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %78, i32 0, i32 2
  %80 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %79, i32 0, i32 6
  %81 = load i32, i32* %80, align 4
  %82 = sitofp i32 %81 to double
  %83 = fmul double 1.000000e-05, %82
  store double %83, double* %8, align 8
  br label %84

84:                                               ; preds = %77, %75
  %85 = icmp ne double* %9, null
  br i1 %85, label %86, label %93

86:                                               ; preds = %84
  %87 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %88 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %87, i32 0, i32 2
  %89 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %88, i32 0, i32 7
  %90 = load i32, i32* %89, align 4
  %91 = sitofp i32 %90 to double
  %92 = fmul double 1.000000e-05, %91
  store double %92, double* %9, align 8
  br label %93

93:                                               ; preds = %86, %84
  %94 = icmp ne double* %10, null
  br i1 %94, label %95, label %102

95:                                               ; preds = %93
  %96 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %97 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %96, i32 0, i32 2
  %98 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %97, i32 0, i32 8
  %99 = load i32, i32* %98, align 4
  %100 = sitofp i32 %99 to double
  %101 = fmul double 1.000000e-05, %100
  store double %101, double* %10, align 8
  br label %102

102:                                              ; preds = %11, %14, %93, %95
  %.0 = phi i32 [ 4, %95 ], [ 4, %93 ], [ 0, %14 ], [ 0, %11 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_cHRM_XYZ_fixed(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32* %2, i32* %3, i32* %4, i32* %5, i32* %6, i32* %7, i32* %8, i32* %9, i32* %10) #11 {
  %12 = icmp ne %struct.png_struct_def* %0, null
  %13 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %12, i1 %13, i1 false
  br i1 %or.cond, label %14, label %84

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %16 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %15, i32 0, i32 4
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = and i32 %18, 2
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %84

21:                                               ; preds = %14
  %22 = icmp ne i32* %2, null
  br i1 %22, label %23, label %28

23:                                               ; preds = %21
  %24 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %25 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %24, i32 0, i32 2
  %26 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %25, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %2, align 4
  br label %28

28:                                               ; preds = %23, %21
  %29 = icmp ne i32* %3, null
  br i1 %29, label %30, label %35

30:                                               ; preds = %28
  %31 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %32 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %31, i32 0, i32 2
  %33 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %32, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  store i32 %34, i32* %3, align 4
  br label %35

35:                                               ; preds = %30, %28
  %36 = icmp ne i32* %4, null
  br i1 %36, label %37, label %42

37:                                               ; preds = %35
  %38 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %39 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %38, i32 0, i32 2
  %40 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %39, i32 0, i32 2
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %4, align 4
  br label %42

42:                                               ; preds = %37, %35
  %43 = icmp ne i32* %5, null
  br i1 %43, label %44, label %49

44:                                               ; preds = %42
  %45 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %46 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %45, i32 0, i32 2
  %47 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %46, i32 0, i32 3
  %48 = load i32, i32* %47, align 4
  store i32 %48, i32* %5, align 4
  br label %49

49:                                               ; preds = %44, %42
  %50 = icmp ne i32* %6, null
  br i1 %50, label %51, label %56

51:                                               ; preds = %49
  %52 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %53 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %52, i32 0, i32 2
  %54 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %53, i32 0, i32 4
  %55 = load i32, i32* %54, align 4
  store i32 %55, i32* %6, align 4
  br label %56

56:                                               ; preds = %51, %49
  %57 = icmp ne i32* %7, null
  br i1 %57, label %58, label %63

58:                                               ; preds = %56
  %59 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %60 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %59, i32 0, i32 2
  %61 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %60, i32 0, i32 5
  %62 = load i32, i32* %61, align 4
  store i32 %62, i32* %7, align 4
  br label %63

63:                                               ; preds = %58, %56
  %64 = icmp ne i32* %8, null
  br i1 %64, label %65, label %70

65:                                               ; preds = %63
  %66 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %67 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %66, i32 0, i32 2
  %68 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %67, i32 0, i32 6
  %69 = load i32, i32* %68, align 4
  store i32 %69, i32* %8, align 4
  br label %70

70:                                               ; preds = %65, %63
  %71 = icmp ne i32* %9, null
  br i1 %71, label %72, label %77

72:                                               ; preds = %70
  %73 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %74 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %73, i32 0, i32 2
  %75 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %74, i32 0, i32 7
  %76 = load i32, i32* %75, align 4
  store i32 %76, i32* %9, align 4
  br label %77

77:                                               ; preds = %72, %70
  %78 = icmp ne i32* %10, null
  br i1 %78, label %79, label %84

79:                                               ; preds = %77
  %80 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %81 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %80, i32 0, i32 2
  %82 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %81, i32 0, i32 8
  %83 = load i32, i32* %82, align 4
  store i32 %83, i32* %10, align 4
  br label %84

84:                                               ; preds = %11, %14, %77, %79
  %.0 = phi i32 [ 4, %79 ], [ 4, %77 ], [ 0, %14 ], [ 0, %11 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_cHRM_fixed(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32* %2, i32* %3, i32* %4, i32* %5, i32* %6, i32* %7, i32* %8, i32* %9) #11 {
  %11 = icmp ne %struct.png_struct_def* %0, null
  %12 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %11, i1 %12, i1 false
  br i1 %or.cond, label %13, label %76

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %15 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %14, i32 0, i32 4
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = and i32 %17, 2
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %76

20:                                               ; preds = %13
  %21 = icmp ne i32* %2, null
  br i1 %21, label %22, label %27

22:                                               ; preds = %20
  %23 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %24 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %24, i32 0, i32 6
  %26 = load i32, i32* %25, align 4
  store i32 %26, i32* %2, align 4
  br label %27

27:                                               ; preds = %22, %20
  %28 = icmp ne i32* %3, null
  br i1 %28, label %29, label %34

29:                                               ; preds = %27
  %30 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %31 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %30, i32 0, i32 1
  %32 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %31, i32 0, i32 7
  %33 = load i32, i32* %32, align 4
  store i32 %33, i32* %3, align 4
  br label %34

34:                                               ; preds = %29, %27
  %35 = icmp ne i32* %4, null
  br i1 %35, label %36, label %41

36:                                               ; preds = %34
  %37 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %38 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %37, i32 0, i32 1
  %39 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %38, i32 0, i32 0
  %40 = load i32, i32* %39, align 4
  store i32 %40, i32* %4, align 4
  br label %41

41:                                               ; preds = %36, %34
  %42 = icmp ne i32* %5, null
  br i1 %42, label %43, label %48

43:                                               ; preds = %41
  %44 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %45 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %44, i32 0, i32 1
  %46 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %45, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  store i32 %47, i32* %5, align 4
  br label %48

48:                                               ; preds = %43, %41
  %49 = icmp ne i32* %6, null
  br i1 %49, label %50, label %55

50:                                               ; preds = %48
  %51 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %52 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %51, i32 0, i32 1
  %53 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %52, i32 0, i32 2
  %54 = load i32, i32* %53, align 4
  store i32 %54, i32* %6, align 4
  br label %55

55:                                               ; preds = %50, %48
  %56 = icmp ne i32* %7, null
  br i1 %56, label %57, label %62

57:                                               ; preds = %55
  %58 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %59 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %58, i32 0, i32 1
  %60 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %59, i32 0, i32 3
  %61 = load i32, i32* %60, align 4
  store i32 %61, i32* %7, align 4
  br label %62

62:                                               ; preds = %57, %55
  %63 = icmp ne i32* %8, null
  br i1 %63, label %64, label %69

64:                                               ; preds = %62
  %65 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %66 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %65, i32 0, i32 1
  %67 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %66, i32 0, i32 4
  %68 = load i32, i32* %67, align 4
  store i32 %68, i32* %8, align 4
  br label %69

69:                                               ; preds = %64, %62
  %70 = icmp ne i32* %9, null
  br i1 %70, label %71, label %76

71:                                               ; preds = %69
  %72 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %73 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %72, i32 0, i32 1
  %74 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %73, i32 0, i32 5
  %75 = load i32, i32* %74, align 4
  store i32 %75, i32* %9, align 4
  br label %76

76:                                               ; preds = %10, %13, %69, %71
  %.0 = phi i32 [ 4, %71 ], [ 4, %69 ], [ 0, %13 ], [ 0, %10 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_gAMA_fixed(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32* %2) #11 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 %5, i1 false
  br i1 %or.cond, label %6, label %18

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %8 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %7, i32 0, i32 4
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 1
  %12 = icmp ne i32 %11, 0
  %13 = icmp ne i32* %2, null
  %or.cond1 = select i1 %12, i1 %13, i1 false
  br i1 %or.cond1, label %14, label %18

14:                                               ; preds = %6
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %16 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %15, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %3, %6, %14
  %.0 = phi i32 [ 1, %14 ], [ 0, %6 ], [ 0, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_gAMA(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, double* %2) #11 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 %5, i1 false
  br i1 %or.cond, label %6, label %20

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %8 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %7, i32 0, i32 4
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 1
  %12 = icmp ne i32 %11, 0
  %13 = icmp ne double* %2, null
  %or.cond1 = select i1 %12, i1 %13, i1 false
  br i1 %or.cond1, label %14, label %20

14:                                               ; preds = %6
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %16 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %15, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = sitofp i32 %17 to double
  %19 = fmul double 1.000000e-05, %18
  store double %19, double* %2, align 8
  br label %20

20:                                               ; preds = %3, %6, %14
  %.0 = phi i32 [ 1, %14 ], [ 0, %6 ], [ 0, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_sRGB(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32* %2) #11 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 %5, i1 false
  br i1 %or.cond, label %6, label %17

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 2048
  %10 = icmp ne i32 %9, 0
  %11 = icmp ne i32* %2, null
  %or.cond1 = select i1 %10, i1 %11, i1 false
  br i1 %or.cond1, label %12, label %17

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %14 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %13, i32 0, i32 3
  %15 = load i16, i16* %14, align 4
  %16 = zext i16 %15 to i32
  store i32 %16, i32* %2, align 4
  br label %17

17:                                               ; preds = %3, %6, %12
  %.0 = phi i32 [ 2048, %12 ], [ 0, %6 ], [ 0, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_iCCP(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i8** %2, i32* %3, i8** %4, i32* %5) #11 {
  %7 = icmp ne %struct.png_struct_def* %0, null
  %8 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %7, i1 %8, i1 false
  br i1 %or.cond, label %9, label %49

9:                                                ; preds = %6
  %10 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 4096
  %13 = icmp ne i32 %12, 0
  %14 = icmp ne i8** %2, null
  %or.cond1 = select i1 %13, i1 %14, i1 false
  %15 = icmp ne i8** %4, null
  %or.cond2 = select i1 %or.cond1, i1 %15, i1 false
  %16 = icmp ne i32* %5, null
  %or.cond3 = select i1 %or.cond2, i1 %16, i1 false
  br i1 %or.cond3, label %17, label %49

17:                                               ; preds = %9
  %18 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 17
  %19 = load i8*, i8** %18, align 8
  store i8* %19, i8** %2, align 8
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 18
  %21 = load i8*, i8** %20, align 8
  store i8* %21, i8** %4, align 8
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 18
  %23 = load i8*, i8** %22, align 8
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = shl i32 %25, 24
  %27 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 18
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = shl i32 %31, 16
  %33 = add i32 %26, %32
  %34 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 18
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 2
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = shl i32 %38, 8
  %40 = add i32 %33, %39
  %41 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 18
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 3
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = add i32 %40, %45
  store i32 %46, i32* %5, align 4
  %47 = icmp ne i32* %3, null
  br i1 %47, label %48, label %49

48:                                               ; preds = %17
  store i32 0, i32* %3, align 4
  br label %49

49:                                               ; preds = %6, %9, %17, %48
  %.0 = phi i32 [ 4096, %48 ], [ 4096, %17 ], [ 0, %9 ], [ 0, %6 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_sPLT(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, %struct.png_sPLT_struct** %2) #11 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 %5, i1 false
  %6 = icmp ne %struct.png_sPLT_struct** %2, null
  %or.cond1 = select i1 %or.cond, i1 %6, i1 false
  br i1 %or.cond1, label %7, label %12

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 48
  %9 = load %struct.png_sPLT_struct*, %struct.png_sPLT_struct** %8, align 8
  store %struct.png_sPLT_struct* %9, %struct.png_sPLT_struct** %2, align 8
  %10 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 49
  %11 = load i32, i32* %10, align 8
  br label %12

12:                                               ; preds = %3, %7
  %.0 = phi i32 [ %11, %7 ], [ 0, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_eXIf(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i8** %2) #11 {
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.86, i32 0, i32 0))
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_eXIf_1(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32* %2, i8** %3) #11 {
  %5 = icmp ne %struct.png_struct_def* %0, null
  %6 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %5, i1 %6, i1 false
  br i1 %or.cond, label %7, label %18

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 65536
  %11 = icmp ne i32 %10, 0
  %12 = icmp ne i8** %3, null
  %or.cond1 = select i1 %11, i1 %12, i1 false
  br i1 %or.cond1, label %13, label %18

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 34
  %15 = load i32, i32* %14, align 4
  store i32 %15, i32* %2, align 4
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 35
  %17 = load i8*, i8** %16, align 8
  store i8* %17, i8** %3, align 8
  br label %18

18:                                               ; preds = %4, %7, %13
  %.0 = phi i32 [ 65536, %13 ], [ 0, %7 ], [ 0, %4 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_hIST(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i16** %2) #11 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 %5, i1 false
  br i1 %or.cond, label %6, label %15

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 64
  %10 = icmp ne i32 %9, 0
  %11 = icmp ne i16** %2, null
  %or.cond1 = select i1 %10, i1 %11, i1 false
  br i1 %or.cond1, label %12, label %15

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 37
  %14 = load i16*, i16** %13, align 8
  store i16* %14, i16** %2, align 8
  br label %15

15:                                               ; preds = %3, %6, %12
  %.0 = phi i32 [ 64, %12 ], [ 0, %6 ], [ 0, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_IHDR(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32* %2, i32* %3, i32* %4, i32* %5, i32* %6, i32* %7, i32* %8) #11 {
  %10 = icmp eq %struct.png_struct_def* %0, null
  %11 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %10, i1 true, i1 %11
  br i1 %or.cond, label %72, label %12

12:                                               ; preds = %9
  %13 = icmp ne i32* %2, null
  br i1 %13, label %14, label %17

14:                                               ; preds = %12
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  store i32 %16, i32* %2, align 4
  br label %17

17:                                               ; preds = %14, %12
  %18 = icmp ne i32* %3, null
  br i1 %18, label %19, label %22

19:                                               ; preds = %17
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 1
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %3, align 4
  br label %22

22:                                               ; preds = %19, %17
  %23 = icmp ne i32* %4, null
  br i1 %23, label %24, label %28

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  %26 = load i8, i8* %25, align 4
  %27 = zext i8 %26 to i32
  store i32 %27, i32* %4, align 4
  br label %28

28:                                               ; preds = %24, %22
  %29 = icmp ne i32* %5, null
  br i1 %29, label %30, label %34

30:                                               ; preds = %28
  %31 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  store i32 %33, i32* %5, align 4
  br label %34

34:                                               ; preds = %30, %28
  %35 = icmp ne i32* %7, null
  br i1 %35, label %36, label %40

36:                                               ; preds = %34
  %37 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 9
  %38 = load i8, i8* %37, align 2
  %39 = zext i8 %38 to i32
  store i32 %39, i32* %7, align 4
  br label %40

40:                                               ; preds = %36, %34
  %41 = icmp ne i32* %8, null
  br i1 %41, label %42, label %46

42:                                               ; preds = %40
  %43 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 10
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  store i32 %45, i32* %8, align 4
  br label %46

46:                                               ; preds = %42, %40
  %47 = icmp ne i32* %6, null
  br i1 %47, label %48, label %52

48:                                               ; preds = %46
  %49 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 11
  %50 = load i8, i8* %49, align 8
  %51 = zext i8 %50 to i32
  store i32 %51, i32* %6, align 4
  br label %52

52:                                               ; preds = %48, %46
  %53 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 0
  %54 = load i32, i32* %53, align 8
  %55 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  %58 = load i8, i8* %57, align 4
  %59 = zext i8 %58 to i32
  %60 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 11
  %64 = load i8, i8* %63, align 8
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 9
  %67 = load i8, i8* %66, align 2
  %68 = zext i8 %67 to i32
  %69 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 10
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  call void @png_check_IHDR(%struct.png_struct_def* %0, i32 %54, i32 %56, i32 %59, i32 %62, i32 %65, i32 %68, i32 %71)
  br label %72

72:                                               ; preds = %9, %52
  %.0 = phi i32 [ 1, %52 ], [ 0, %9 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_oFFs(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32* %2, i32* %3, i32* %4) #11 {
  %6 = icmp ne %struct.png_struct_def* %0, null
  %7 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %6, i1 %7, i1 false
  br i1 %or.cond, label %8, label %24

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 256
  %12 = icmp ne i32 %11, 0
  %13 = icmp ne i32* %2, null
  %or.cond1 = select i1 %12, i1 %13, i1 false
  %14 = icmp ne i32* %3, null
  %or.cond2 = select i1 %or.cond1, i1 %14, i1 false
  %15 = icmp ne i32* %4, null
  %or.cond3 = select i1 %or.cond2, i1 %15, i1 false
  br i1 %or.cond3, label %16, label %24

16:                                               ; preds = %8
  %17 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 28
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %2, align 4
  %19 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 29
  %20 = load i32, i32* %19, align 8
  store i32 %20, i32* %3, align 4
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 30
  %22 = load i8, i8* %21, align 4
  %23 = zext i8 %22 to i32
  store i32 %23, i32* %4, align 4
  br label %24

24:                                               ; preds = %5, %8, %16
  %.0 = phi i32 [ 256, %16 ], [ 0, %8 ], [ 0, %5 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_pCAL(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i8** %2, i32* %3, i32* %4, i32* %5, i32* %6, i8** %7, i8*** %8) #11 {
  %10 = icmp ne %struct.png_struct_def* %0, null
  %11 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %10, i1 %11, i1 false
  br i1 %or.cond, label %12, label %41

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = and i32 %14, 1024
  %16 = icmp ne i32 %15, 0
  %17 = icmp ne i8** %2, null
  %or.cond1 = select i1 %16, i1 %17, i1 false
  %18 = icmp ne i32* %3, null
  %or.cond2 = select i1 %or.cond1, i1 %18, i1 false
  %19 = icmp ne i32* %4, null
  %or.cond3 = select i1 %or.cond2, i1 %19, i1 false
  %20 = icmp ne i32* %5, null
  %or.cond4 = select i1 %or.cond3, i1 %20, i1 false
  %21 = icmp ne i32* %6, null
  %or.cond5 = select i1 %or.cond4, i1 %21, i1 false
  %22 = icmp ne i8** %7, null
  %or.cond6 = select i1 %or.cond5, i1 %22, i1 false
  %23 = icmp ne i8*** %8, null
  %or.cond7 = select i1 %or.cond6, i1 %23, i1 false
  br i1 %or.cond7, label %24, label %41

24:                                               ; preds = %12
  %25 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 38
  %26 = load i8*, i8** %25, align 8
  store i8* %26, i8** %2, align 8
  %27 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 39
  %28 = load i32, i32* %27, align 8
  store i32 %28, i32* %3, align 4
  %29 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 40
  %30 = load i32, i32* %29, align 4
  store i32 %30, i32* %4, align 4
  %31 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 43
  %32 = load i8, i8* %31, align 8
  %33 = zext i8 %32 to i32
  store i32 %33, i32* %5, align 4
  %34 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 44
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  store i32 %36, i32* %6, align 4
  %37 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 41
  %38 = load i8*, i8** %37, align 8
  store i8* %38, i8** %7, align 8
  %39 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 42
  %40 = load i8**, i8*** %39, align 8
  store i8** %40, i8*** %8, align 8
  br label %41

41:                                               ; preds = %9, %12, %24
  %.0 = phi i32 [ 1024, %24 ], [ 0, %12 ], [ 0, %9 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_sCAL_fixed(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32* %2, i32* %3, i32* %4) #11 {
  %6 = icmp ne %struct.png_struct_def* %0, null
  %7 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %6, i1 %7, i1 false
  br i1 %or.cond, label %8, label %25

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 16384
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 50
  %15 = load i8, i8* %14, align 4
  %16 = zext i8 %15 to i32
  store i32 %16, i32* %2, align 4
  %17 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 51
  %18 = load i8*, i8** %17, align 8
  %19 = call double @atof(i8* %18) #26
  %20 = call i32 @png_fixed(%struct.png_struct_def* %0, double %19, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.87, i32 0, i32 0))
  store i32 %20, i32* %3, align 4
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 52
  %22 = load i8*, i8** %21, align 8
  %23 = call double @atof(i8* %22) #26
  %24 = call i32 @png_fixed(%struct.png_struct_def* %0, double %23, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2.88, i32 0, i32 0))
  store i32 %24, i32* %4, align 4
  br label %25

25:                                               ; preds = %5, %8, %13
  %.0 = phi i32 [ 16384, %13 ], [ 0, %8 ], [ 0, %5 ]
  ret i32 %.0
}

; Function Attrs: nounwind readonly
declare double @atof(i8*) #16

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_sCAL(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32* %2, double* %3, double* %4) #11 {
  %6 = icmp ne %struct.png_struct_def* %0, null
  %7 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %6, i1 %7, i1 false
  br i1 %or.cond, label %8, label %23

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 16384
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 50
  %15 = load i8, i8* %14, align 4
  %16 = zext i8 %15 to i32
  store i32 %16, i32* %2, align 4
  %17 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 51
  %18 = load i8*, i8** %17, align 8
  %19 = call double @atof(i8* %18) #26
  store double %19, double* %3, align 8
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 52
  %21 = load i8*, i8** %20, align 8
  %22 = call double @atof(i8* %21) #26
  store double %22, double* %4, align 8
  br label %23

23:                                               ; preds = %5, %8, %13
  %.0 = phi i32 [ 16384, %13 ], [ 0, %8 ], [ 0, %5 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_sCAL_s(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32* %2, i8** %3, i8** %4) #11 {
  %6 = icmp ne %struct.png_struct_def* %0, null
  %7 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %6, i1 %7, i1 false
  br i1 %or.cond, label %8, label %21

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 16384
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %21

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 50
  %15 = load i8, i8* %14, align 4
  %16 = zext i8 %15 to i32
  store i32 %16, i32* %2, align 4
  %17 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 51
  %18 = load i8*, i8** %17, align 8
  store i8* %18, i8** %3, align 8
  %19 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 52
  %20 = load i8*, i8** %19, align 8
  store i8* %20, i8** %4, align 8
  br label %21

21:                                               ; preds = %5, %8, %13
  %.0 = phi i32 [ 16384, %13 ], [ 0, %8 ], [ 0, %5 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_pHYs(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32* %2, i32* %3, i32* %4) #11 {
  %6 = icmp ne %struct.png_struct_def* %0, null
  %7 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %6, i1 %7, i1 false
  br i1 %or.cond, label %8, label %32

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 128
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %32

13:                                               ; preds = %8
  %14 = icmp ne i32* %2, null
  br i1 %14, label %15, label %19

15:                                               ; preds = %13
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 31
  %17 = load i32, i32* %16, align 8
  store i32 %17, i32* %2, align 4
  %18 = or i32 0, 128
  br label %19

19:                                               ; preds = %15, %13
  %.0 = phi i32 [ %18, %15 ], [ 0, %13 ]
  %20 = icmp ne i32* %3, null
  br i1 %20, label %21, label %25

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 32
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %3, align 4
  %24 = or i32 %.0, 128
  br label %25

25:                                               ; preds = %21, %19
  %.1 = phi i32 [ %24, %21 ], [ %.0, %19 ]
  %26 = icmp ne i32* %4, null
  br i1 %26, label %27, label %32

27:                                               ; preds = %25
  %28 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 33
  %29 = load i8, i8* %28, align 8
  %30 = zext i8 %29 to i32
  store i32 %30, i32* %4, align 4
  %31 = or i32 %.1, 128
  br label %32

32:                                               ; preds = %25, %27, %8, %5
  %.3 = phi i32 [ 0, %8 ], [ 0, %5 ], [ %31, %27 ], [ %.1, %25 ]
  ret i32 %.3
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_PLTE(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, %struct.png_color_struct** %2, i32* %3) #11 {
  %5 = icmp ne %struct.png_struct_def* %0, null
  %6 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %5, i1 %6, i1 false
  br i1 %or.cond, label %7, label %19

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 8
  %11 = icmp ne i32 %10, 0
  %12 = icmp ne %struct.png_color_struct** %2, null
  %or.cond1 = select i1 %11, i1 %12, i1 false
  br i1 %or.cond1, label %13, label %19

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 4
  %15 = load %struct.png_color_struct*, %struct.png_color_struct** %14, align 8
  store %struct.png_color_struct* %15, %struct.png_color_struct** %2, align 8
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 5
  %17 = load i16, i16* %16, align 8
  %18 = zext i16 %17 to i32
  store i32 %18, i32* %3, align 4
  br label %19

19:                                               ; preds = %4, %7, %13
  %.0 = phi i32 [ 8, %13 ], [ 0, %7 ], [ 0, %4 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_sBIT(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, %struct.png_color_8_struct** %2) #11 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 %5, i1 false
  br i1 %or.cond, label %6, label %14

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 2
  %10 = icmp ne i32 %9, 0
  %11 = icmp ne %struct.png_color_8_struct** %2, null
  %or.cond1 = select i1 %10, i1 %11, i1 false
  br i1 %or.cond1, label %12, label %14

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 24
  store %struct.png_color_8_struct* %13, %struct.png_color_8_struct** %2, align 8
  br label %14

14:                                               ; preds = %3, %6, %12
  %.0 = phi i32 [ 2, %12 ], [ 0, %6 ], [ 0, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_text(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, %struct.png_text_struct** %2, i32* %3) #11 {
  %5 = icmp ne %struct.png_struct_def* %0, null
  %6 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %5, i1 %6, i1 false
  br i1 %or.cond, label %7, label %24

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 20
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %24

11:                                               ; preds = %7
  %12 = icmp ne %struct.png_text_struct** %2, null
  br i1 %12, label %13, label %16

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %15 = load %struct.png_text_struct*, %struct.png_text_struct** %14, align 8
  store %struct.png_text_struct* %15, %struct.png_text_struct** %2, align 8
  br label %16

16:                                               ; preds = %13, %11
  %17 = icmp ne i32* %3, null
  br i1 %17, label %18, label %21

18:                                               ; preds = %16
  %19 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 20
  %20 = load i32, i32* %19, align 4
  store i32 %20, i32* %3, align 4
  br label %21

21:                                               ; preds = %18, %16
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 20
  %23 = load i32, i32* %22, align 4
  br label %27

24:                                               ; preds = %7, %4
  %25 = icmp ne i32* %3, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %24
  store i32 0, i32* %3, align 4
  br label %27

27:                                               ; preds = %24, %26, %21
  %.0 = phi i32 [ %23, %21 ], [ 0, %26 ], [ 0, %24 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_tIME(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, %struct.png_time_struct** %2) #11 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 %5, i1 false
  br i1 %or.cond, label %6, label %14

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 512
  %10 = icmp ne i32 %9, 0
  %11 = icmp ne %struct.png_time_struct** %2, null
  %or.cond1 = select i1 %10, i1 %11, i1 false
  br i1 %or.cond1, label %12, label %14

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 23
  store %struct.png_time_struct* %13, %struct.png_time_struct** %2, align 8
  br label %14

14:                                               ; preds = %3, %6, %12
  %.0 = phi i32 [ 512, %12 ], [ 0, %6 ], [ 0, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_tRNS(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i8** %2, i32* %3, %struct.png_color_16_struct** %4) #11 {
  %6 = icmp ne %struct.png_struct_def* %0, null
  %7 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %6, i1 %7, i1 false
  br i1 %or.cond, label %8, label %43

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 16
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %43

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = icmp eq i32 %16, 3
  br i1 %17, label %18, label %28

18:                                               ; preds = %13
  %19 = icmp ne i8** %2, null
  br i1 %19, label %20, label %24

20:                                               ; preds = %18
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 25
  %22 = load i8*, i8** %21, align 8
  store i8* %22, i8** %2, align 8
  %23 = or i32 0, 16
  br label %24

24:                                               ; preds = %20, %18
  %.0 = phi i32 [ %23, %20 ], [ 0, %18 ]
  %25 = icmp ne %struct.png_color_16_struct** %4, null
  br i1 %25, label %26, label %36

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 26
  store %struct.png_color_16_struct* %27, %struct.png_color_16_struct** %4, align 8
  br label %36

28:                                               ; preds = %13
  %29 = icmp ne %struct.png_color_16_struct** %4, null
  br i1 %29, label %30, label %33

30:                                               ; preds = %28
  %31 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 26
  store %struct.png_color_16_struct* %31, %struct.png_color_16_struct** %4, align 8
  %32 = or i32 0, 16
  br label %33

33:                                               ; preds = %30, %28
  %.1 = phi i32 [ %32, %30 ], [ 0, %28 ]
  %34 = icmp ne i8** %2, null
  br i1 %34, label %35, label %36

35:                                               ; preds = %33
  store i8* null, i8** %2, align 8
  br label %36

36:                                               ; preds = %33, %35, %24, %26
  %.2 = phi i32 [ %.0, %26 ], [ %.0, %24 ], [ %.1, %35 ], [ %.1, %33 ]
  %37 = icmp ne i32* %3, null
  br i1 %37, label %38, label %43

38:                                               ; preds = %36
  %39 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 6
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  store i32 %41, i32* %3, align 4
  %42 = or i32 %.2, 16
  br label %43

43:                                               ; preds = %36, %38, %8, %5
  %.4 = phi i32 [ 0, %8 ], [ 0, %5 ], [ %42, %38 ], [ %.2, %36 ]
  ret i32 %.4
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_unknown_chunks(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, %struct.png_unknown_chunk_t** %2) #11 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 %5, i1 false
  %6 = icmp ne %struct.png_unknown_chunk_t** %2, null
  %or.cond1 = select i1 %or.cond, i1 %6, i1 false
  br i1 %or.cond1, label %7, label %12

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 46
  %9 = load %struct.png_unknown_chunk_t*, %struct.png_unknown_chunk_t** %8, align 8
  store %struct.png_unknown_chunk_t* %9, %struct.png_unknown_chunk_t** %2, align 8
  %10 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 47
  %11 = load i32, i32* %10, align 8
  br label %12

12:                                               ; preds = %3, %7
  %.0 = phi i32 [ %11, %7 ], [ 0, %3 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define zeroext i8 @png_get_rgb_to_gray_status(%struct.png_struct_def* noalias %0) #11 {
  %2 = icmp ne %struct.png_struct_def* %0, null
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 118
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  br label %7

7:                                                ; preds = %1, %3
  %8 = phi i32 [ %6, %3 ], [ 0, %1 ]
  %9 = trunc i32 %8 to i8
  ret i8 %9
}

; Function Attrs: noinline nounwind uwtable
define i8* @png_get_user_chunk_ptr(%struct.png_struct_def* noalias %0) #11 {
  %2 = icmp ne %struct.png_struct_def* %0, null
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 113
  %5 = load i8*, i8** %4, align 8
  br label %6

6:                                                ; preds = %1, %3
  %7 = phi i8* [ %5, %3 ], [ null, %1 ]
  ret i8* %7
}

; Function Attrs: noinline nounwind uwtable
define i64 @png_get_compression_buffer_size(%struct.png_struct_def* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %16, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 32768
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 140
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  br label %16

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 21
  %14 = load i32, i32* %13, align 8
  %15 = zext i32 %14 to i64
  br label %16

16:                                               ; preds = %1, %12, %8
  %.0 = phi i64 [ %11, %8 ], [ %15, %12 ], [ 0, %1 ]
  ret i64 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_user_width_max(%struct.png_struct_def* noalias %0) #11 {
  %2 = icmp ne %struct.png_struct_def* %0, null
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 132
  %5 = load i32, i32* %4, align 4
  br label %6

6:                                                ; preds = %1, %3
  %7 = phi i32 [ %5, %3 ], [ 0, %1 ]
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_user_height_max(%struct.png_struct_def* noalias %0) #11 {
  %2 = icmp ne %struct.png_struct_def* %0, null
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 133
  %5 = load i32, i32* %4, align 8
  br label %6

6:                                                ; preds = %1, %3
  %7 = phi i32 [ %5, %3 ], [ 0, %1 ]
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_chunk_cache_max(%struct.png_struct_def* noalias %0) #11 {
  %2 = icmp ne %struct.png_struct_def* %0, null
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  %5 = load i32, i32* %4, align 4
  br label %6

6:                                                ; preds = %1, %3
  %7 = phi i32 [ %5, %3 ], [ 0, %1 ]
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define i64 @png_get_chunk_malloc_max(%struct.png_struct_def* noalias %0) #11 {
  %2 = icmp ne %struct.png_struct_def* %0, null
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 135
  %5 = load i64, i64* %4, align 8
  br label %6

6:                                                ; preds = %1, %3
  %7 = phi i64 [ %5, %3 ], [ 0, %1 ]
  ret i64 %7
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_io_state(%struct.png_struct_def* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 141
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_io_chunk_type(%struct.png_struct_def* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_palette_max(%struct.png_struct_def* %0, %struct.png_info_def* %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 %4, i1 false
  br i1 %or.cond, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 54
  %7 = load i32, i32* %6, align 4
  br label %8

8:                                                ; preds = %2, %5
  %.0 = phi i32 [ %7, %5 ], [ -1, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define noalias i8* @png_malloc_array(%struct.png_struct_def.60* noalias %0, i32 %1, i64 %2) #11 {
  %4 = icmp sle i32 %1, 0
  %5 = icmp eq i64 %2, 0
  %or.cond = select i1 %4, i1 true, i1 %5
  br i1 %or.cond, label %6, label %7

6:                                                ; preds = %3
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.98, i32 0, i32 0)) #24
  unreachable

7:                                                ; preds = %3
  %8 = call i8* @png_malloc_array_checked(%struct.png_struct_def.60* %0, i32 %1, i64 %2)
  ret i8* %8
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @png_malloc_array_checked(%struct.png_struct_def.60* noalias %0, i32 %1, i64 %2) #11 {
  %4 = sext i32 %1 to i64
  %5 = udiv i64 -1, %2
  %6 = icmp ule i64 %4, %5
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = mul i64 %4, %2
  %9 = call noalias i8* @png_malloc_base(%struct.png_struct_def.60* %0, i64 %8)
  br label %10

10:                                               ; preds = %3, %7
  %.0 = phi i8* [ %9, %7 ], [ null, %3 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define noalias i8* @png_realloc_array(%struct.png_struct_def.60* noalias %0, i8* %1, i32 %2, i32 %3, i64 %4) #11 {
  %6 = icmp sle i32 %3, 0
  %7 = icmp eq i64 %4, 0
  %or.cond = select i1 %6, i1 true, i1 %7
  %8 = icmp slt i32 %2, 0
  %or.cond1 = select i1 %or.cond, i1 true, i1 %8
  br i1 %or.cond1, label %12, label %9

9:                                                ; preds = %5
  %10 = icmp eq i8* %1, null
  %11 = icmp sgt i32 %2, 0
  %or.cond2 = select i1 %10, i1 %11, i1 false
  br i1 %or.cond2, label %12, label %13

12:                                               ; preds = %9, %5
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1.99, i32 0, i32 0)) #24
  unreachable

13:                                               ; preds = %9
  %14 = sub nsw i32 2147483647, %2
  %15 = icmp sle i32 %3, %14
  br i1 %15, label %16, label %31

16:                                               ; preds = %13
  %17 = add nsw i32 %2, %3
  %18 = call i8* @png_malloc_array_checked(%struct.png_struct_def.60* %0, i32 %17, i64 %4)
  %19 = icmp ne i8* %18, null
  br i1 %19, label %20, label %31

20:                                               ; preds = %16
  %21 = icmp sgt i32 %2, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %20
  %23 = zext i32 %2 to i64
  %24 = mul i64 %4, %23
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %1, i64 %24, i1 false)
  br label %25

25:                                               ; preds = %22, %20
  %26 = zext i32 %2 to i64
  %27 = mul i64 %4, %26
  %28 = getelementptr inbounds i8, i8* %18, i64 %27
  %29 = zext i32 %3 to i64
  %30 = mul i64 %4, %29
  call void @llvm.memset.p0i8.i64(i8* align 1 %28, i8 0, i64 %30, i1 false)
  br label %31

31:                                               ; preds = %13, %16, %25
  %.0 = phi i8* [ %18, %25 ], [ null, %16 ], [ null, %13 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define noalias i8* @png_malloc_default(%struct.png_struct_def.60* noalias %0, i64 %1) #11 {
  %3 = icmp eq %struct.png_struct_def.60* %0, null
  br i1 %3, label %8, label %4

4:                                                ; preds = %2
  %5 = call noalias i8* @png_malloc_base(%struct.png_struct_def.60* null, i64 %1)
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %4
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3.100, i32 0, i32 0)) #24
  unreachable

8:                                                ; preds = %4, %2
  %.0 = phi i8* [ null, %2 ], [ %5, %4 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define i8* @png_get_mem_ptr(%struct.png_struct_def.60* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def.60* %0, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 124
  %5 = load i8*, i8** %4, align 8
  br label %6

6:                                                ; preds = %1, %3
  %.0 = phi i8* [ %5, %3 ], [ null, %1 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_process_data(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i8* %2, i64 %3) #11 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %5, i1 true, i1 %6
  br i1 %or.cond, label %14, label %7

7:                                                ; preds = %4
  call void @png_push_restore_buffer(%struct.png_struct_def* %0, i8* %2, i64 %3)
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %9 = load i64, i64* %8, align 8
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %7
  br label %11

11:                                               ; preds = %.lr.ph, %11
  call void @png_process_some_data(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  %12 = load i64, i64* %8, align 8
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %11, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %11
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %7
  br label %14

14:                                               ; preds = %.loopexit, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_push_restore_buffer(%struct.png_struct_def* noalias %0, i8* %1, i64 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 99
  store i8* %1, i8** %4, align 8
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 105
  store i64 %2, i64* %5, align 8
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %2, %7
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 99
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 98
  store i8* %11, i8** %12, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_process_some_data(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 106
  %6 = load i32, i32* %5, align 8
  switch i32 %6, label %10 [
    i32 0, label %7
    i32 1, label %8
    i32 2, label %9
  ]

7:                                                ; preds = %4
  call void @png_push_read_sig(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %12

8:                                                ; preds = %4
  call void @png_push_read_chunk(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %12

9:                                                ; preds = %4
  call void @png_push_read_IDAT(%struct.png_struct_def* %0)
  br label %12

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  store i64 0, i64* %11, align 8
  br label %12

12:                                               ; preds = %2, %10, %9, %8, %7
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_push_read_sig(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 67
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i64
  %6 = sub i64 8, %5
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %6
  br i1 %9, label %10, label %13

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %12 = load i64, i64* %11, align 8
  br label %13

13:                                               ; preds = %10, %2
  %.0 = phi i64 [ %12, %10 ], [ %6, %2 ]
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 15
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %14, i64 0, i64 %5
  call void @png_push_fill_buffer(%struct.png_struct_def* %0, i8* %15, i64 %.0)
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 67
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i64
  %19 = add i64 %18, %.0
  %20 = trunc i64 %19 to i8
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 67
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 15
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %22, i32 0, i32 0
  %24 = call i32 @png_sig_cmp(i8* %23, i64 %5, i64 %.0)
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %36

26:                                               ; preds = %13
  %27 = icmp ult i64 %5, 4
  br i1 %27, label %28, label %35

28:                                               ; preds = %26
  %29 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 15
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %29, i32 0, i32 0
  %31 = sub i64 %.0, 4
  %32 = call i32 @png_sig_cmp(i8* %30, i64 %5, i64 %31)
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %28
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1.122, i32 0, i32 0)) #24
  unreachable

35:                                               ; preds = %28, %26
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2.123, i32 0, i32 0)) #24
  unreachable

36:                                               ; preds = %13
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 67
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = icmp sge i32 %39, 8
  br i1 %40, label %41, label %43

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 106
  store i32 1, i32* %42, align 8
  br label %43

43:                                               ; preds = %36, %41
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_push_read_chunk(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = alloca [4 x i8], align 1
  %4 = alloca [4 x i8], align 1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 256
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %51

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %11, 8
  br i1 %12, label %13, label %14

13:                                               ; preds = %9
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

14:                                               ; preds = %9
  %15 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i32 0, i32 0
  call void @png_push_fill_buffer(%struct.png_struct_def* %0, i8* %15, i64 4)
  %16 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i32 0, i32 0
  %17 = call i32 @png_get_uint_31(%struct.png_struct_def* %0, i8* %16)
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  store i32 %17, i32* %18, align 8
  call void @png_reset_crc(%struct.png_struct_def* %0)
  %19 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i32 0, i32 0
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %19, i32 4)
  %20 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 0
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = and i32 255, %22
  %24 = shl i32 %23, 24
  %25 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = and i32 255, %27
  %29 = shl i32 %28, 16
  %30 = or i32 %24, %29
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = and i32 255, %33
  %35 = shl i32 %34, 8
  %36 = or i32 %30, %35
  %37 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 3
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = and i32 255, %39
  %41 = shl i32 %40, 0
  %42 = or i32 %36, %41
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  store i32 %42, i32* %43, align 8
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %45 = load i32, i32* %44, align 8
  call void @png_check_chunk_name(%struct.png_struct_def* %0, i32 %45)
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %47 = load i32, i32* %46, align 8
  call void @png_check_chunk_length(%struct.png_struct_def* %0, i32 %47)
  %48 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %49 = load i32, i32* %48, align 4
  %50 = or i32 %49, 256
  store i32 %50, i32* %48, align 4
  br label %51

51:                                               ; preds = %14, %2
  %52 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %53 = load i32, i32* %52, align 8
  switch i32 %53, label %135 [
    i32 1229209940, label %54
    i32 1229472850, label %105
    i32 1229278788, label %122
  ]

54:                                               ; preds = %51
  %55 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %56 = load i32, i32* %55, align 4
  %57 = and i32 %56, 8
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %63

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %61 = load i32, i32* %60, align 4
  %62 = or i32 %61, 8192
  store i32 %62, i32* %60, align 4
  br label %63

63:                                               ; preds = %59, %54
  %64 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %65 = load i32, i32* %64, align 4
  %66 = and i32 %65, 1
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %63
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3.118, i32 0, i32 0)) #24
  unreachable

69:                                               ; preds = %63
  %70 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = icmp eq i32 %72, 3
  br i1 %73, label %74, label %80

74:                                               ; preds = %69
  %75 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %76 = load i32, i32* %75, align 4
  %77 = and i32 %76, 2
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %74
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4.119, i32 0, i32 0)) #24
  unreachable

80:                                               ; preds = %69, %74
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 106
  store i32 2, i32* %81, align 8
  %82 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %83 = load i32, i32* %82, align 4
  %84 = and i32 %83, 4
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %86, label %95

86:                                               ; preds = %80
  %87 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %88 = load i32, i32* %87, align 4
  %89 = and i32 %88, 8192
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %95

91:                                               ; preds = %86
  %92 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %93 = load i32, i32* %92, align 8
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %445, label %95

95:                                               ; preds = %86, %91, %80
  %96 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %97 = load i32, i32* %96, align 4
  %98 = or i32 %97, 4
  store i32 %98, i32* %96, align 4
  %99 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %100 = load i32, i32* %99, align 4
  %101 = and i32 %100, 8
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %103, label %104

103:                                              ; preds = %95
  call void @png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5.120, i32 0, i32 0))
  br label %104

104:                                              ; preds = %95, %103
  switch i32 %53, label %135 [
    i32 1229472850, label %105
    i32 1229278788, label %122
  ]

105:                                              ; preds = %51, %104
  %106 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %107 = load i32, i32* %106, align 8
  %108 = icmp ne i32 %107, 13
  br i1 %108, label %109, label %110

109:                                              ; preds = %105
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.121, i32 0, i32 0)) #24
  unreachable

110:                                              ; preds = %105
  %111 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %112 = load i32, i32* %111, align 8
  %113 = add i32 %112, 4
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %116 = load i64, i64* %115, align 8
  %117 = icmp ugt i64 %114, %116
  br i1 %117, label %118, label %119

118:                                              ; preds = %110
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

119:                                              ; preds = %110
  %120 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %121 = load i32, i32* %120, align 8
  call void @png_handle_IHDR(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %121)
  br label %441

122:                                              ; preds = %51, %104
  %123 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %124 = load i32, i32* %123, align 8
  %125 = add i32 %124, 4
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %128 = load i64, i64* %127, align 8
  %129 = icmp ugt i64 %126, %128
  br i1 %129, label %130, label %131

130:                                              ; preds = %122
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

131:                                              ; preds = %122
  %132 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %133 = load i32, i32* %132, align 8
  call void @png_handle_IEND(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %133)
  %134 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 106
  store i32 6, i32* %134, align 8
  call void @png_push_have_end(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %441

135:                                              ; preds = %51, %104
  %136 = call i32 @png_chunk_unknown_handling(%struct.png_struct_def* %0, i32 %53)
  %137 = icmp ne i32 %136, 0
  br i1 %137, label %138, label %155

138:                                              ; preds = %135
  %139 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %140 = load i32, i32* %139, align 8
  %141 = add i32 %140, 4
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %144 = load i64, i64* %143, align 8
  %145 = icmp ugt i64 %142, %144
  br i1 %145, label %146, label %147

146:                                              ; preds = %138
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

147:                                              ; preds = %138
  %148 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %149 = load i32, i32* %148, align 8
  call void @png_handle_unknown(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %149, i32 %136)
  %150 = icmp eq i32 %53, 1347179589
  br i1 %150, label %151, label %441

151:                                              ; preds = %147
  %152 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %153 = load i32, i32* %152, align 4
  %154 = or i32 %153, 2
  store i32 %154, i32* %152, align 4
  br label %441

155:                                              ; preds = %135
  switch i32 %53, label %206 [
    i32 1347179589, label %156
    i32 1229209940, label %168
  ]

156:                                              ; preds = %155
  %157 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %158 = load i32, i32* %157, align 8
  %159 = add i32 %158, 4
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %162 = load i64, i64* %161, align 8
  %163 = icmp ugt i64 %160, %162
  br i1 %163, label %164, label %165

164:                                              ; preds = %156
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

165:                                              ; preds = %156
  %166 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %167 = load i32, i32* %166, align 8
  call void @png_handle_PLTE(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %167)
  br label %441

168:                                              ; preds = %155
  %169 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %170 = load i32, i32* %169, align 8
  %171 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  store i32 %170, i32* %171, align 8
  %172 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 106
  store i32 2, i32* %172, align 8
  call void @png_push_have_info(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  %173 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 64
  %174 = load i8, i8* %173, align 2
  %175 = zext i8 %174 to i32
  %176 = icmp sge i32 %175, 8
  br i1 %176, label %177, label %186

177:                                              ; preds = %168
  %178 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 42
  %179 = load i32, i32* %178, align 8
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 64
  %182 = load i8, i8* %181, align 2
  %183 = zext i8 %182 to i64
  %184 = lshr i64 %183, 3
  %185 = mul i64 %180, %184
  br label %196

186:                                              ; preds = %168
  %187 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 42
  %188 = load i32, i32* %187, align 8
  %189 = zext i32 %188 to i64
  %190 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 64
  %191 = load i8, i8* %190, align 2
  %192 = zext i8 %191 to i64
  %193 = mul i64 %189, %192
  %194 = add i64 %193, 7
  %195 = lshr i64 %194, 3
  br label %196

196:                                              ; preds = %186, %177
  %197 = phi i64 [ %185, %177 ], [ %195, %186 ]
  %198 = trunc i64 %197 to i32
  %199 = add i32 %198, 1
  %200 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %201 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %200, i32 0, i32 4
  store i32 %199, i32* %201, align 8
  %202 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %203 = load i8*, i8** %202, align 8
  %204 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %205 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %204, i32 0, i32 3
  store i8* %203, i8** %205, align 8
  br label %445

206:                                              ; preds = %155
  %207 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %208 = load i32, i32* %207, align 8
  %209 = icmp eq i32 %208, 1732332865
  br i1 %209, label %210, label %222

210:                                              ; preds = %206
  %211 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %212 = load i32, i32* %211, align 8
  %213 = add i32 %212, 4
  %214 = zext i32 %213 to i64
  %215 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %216 = load i64, i64* %215, align 8
  %217 = icmp ugt i64 %214, %216
  br i1 %217, label %218, label %219

218:                                              ; preds = %210
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

219:                                              ; preds = %210
  %220 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %221 = load i32, i32* %220, align 8
  call void @png_handle_gAMA(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %221)
  br label %441

222:                                              ; preds = %206
  %223 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %224 = load i32, i32* %223, align 8
  %225 = icmp eq i32 %224, 1933723988
  br i1 %225, label %226, label %238

226:                                              ; preds = %222
  %227 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %228 = load i32, i32* %227, align 8
  %229 = add i32 %228, 4
  %230 = zext i32 %229 to i64
  %231 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %232 = load i64, i64* %231, align 8
  %233 = icmp ugt i64 %230, %232
  br i1 %233, label %234, label %235

234:                                              ; preds = %226
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

235:                                              ; preds = %226
  %236 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %237 = load i32, i32* %236, align 8
  call void @png_handle_sBIT(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %237)
  br label %441

238:                                              ; preds = %222
  %239 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %240 = load i32, i32* %239, align 8
  %241 = icmp eq i32 %240, 1665684045
  br i1 %241, label %242, label %254

242:                                              ; preds = %238
  %243 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %244 = load i32, i32* %243, align 8
  %245 = add i32 %244, 4
  %246 = zext i32 %245 to i64
  %247 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %248 = load i64, i64* %247, align 8
  %249 = icmp ugt i64 %246, %248
  br i1 %249, label %250, label %251

250:                                              ; preds = %242
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

251:                                              ; preds = %242
  %252 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %253 = load i32, i32* %252, align 8
  call void @png_handle_cHRM(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %253)
  br label %441

254:                                              ; preds = %238
  %255 = icmp eq i32 %53, 1934772034
  br i1 %255, label %256, label %268

256:                                              ; preds = %254
  %257 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %258 = load i32, i32* %257, align 8
  %259 = add i32 %258, 4
  %260 = zext i32 %259 to i64
  %261 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %262 = load i64, i64* %261, align 8
  %263 = icmp ugt i64 %260, %262
  br i1 %263, label %264, label %265

264:                                              ; preds = %256
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

265:                                              ; preds = %256
  %266 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %267 = load i32, i32* %266, align 8
  call void @png_handle_sRGB(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %267)
  br label %441

268:                                              ; preds = %254
  %269 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %270 = load i32, i32* %269, align 8
  %271 = icmp eq i32 %270, 1766015824
  br i1 %271, label %272, label %284

272:                                              ; preds = %268
  %273 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %274 = load i32, i32* %273, align 8
  %275 = add i32 %274, 4
  %276 = zext i32 %275 to i64
  %277 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %278 = load i64, i64* %277, align 8
  %279 = icmp ugt i64 %276, %278
  br i1 %279, label %280, label %281

280:                                              ; preds = %272
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

281:                                              ; preds = %272
  %282 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %283 = load i32, i32* %282, align 8
  call void @png_handle_iCCP(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %283)
  br label %441

284:                                              ; preds = %268
  switch i32 %53, label %429 [
    i32 1934642260, label %285
    i32 1951551059, label %297
    i32 1649100612, label %309
    i32 1749635924, label %321
    i32 1883789683, label %333
    i32 1866876531, label %345
    i32 1883455820, label %357
    i32 1933787468, label %369
    i32 1950960965, label %381
    i32 1950701684, label %393
    i32 2052348020, label %405
    i32 1767135348, label %417
  ]

285:                                              ; preds = %284
  %286 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %287 = load i32, i32* %286, align 8
  %288 = add i32 %287, 4
  %289 = zext i32 %288 to i64
  %290 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %291 = load i64, i64* %290, align 8
  %292 = icmp ugt i64 %289, %291
  br i1 %292, label %293, label %294

293:                                              ; preds = %285
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

294:                                              ; preds = %285
  %295 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %296 = load i32, i32* %295, align 8
  call void @png_handle_sPLT(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %296)
  br label %441

297:                                              ; preds = %284
  %298 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %299 = load i32, i32* %298, align 8
  %300 = add i32 %299, 4
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %303 = load i64, i64* %302, align 8
  %304 = icmp ugt i64 %301, %303
  br i1 %304, label %305, label %306

305:                                              ; preds = %297
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

306:                                              ; preds = %297
  %307 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %308 = load i32, i32* %307, align 8
  call void @png_handle_tRNS(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %308)
  br label %441

309:                                              ; preds = %284
  %310 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %311 = load i32, i32* %310, align 8
  %312 = add i32 %311, 4
  %313 = zext i32 %312 to i64
  %314 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %315 = load i64, i64* %314, align 8
  %316 = icmp ugt i64 %313, %315
  br i1 %316, label %317, label %318

317:                                              ; preds = %309
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

318:                                              ; preds = %309
  %319 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %320 = load i32, i32* %319, align 8
  call void @png_handle_bKGD(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %320)
  br label %441

321:                                              ; preds = %284
  %322 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %323 = load i32, i32* %322, align 8
  %324 = add i32 %323, 4
  %325 = zext i32 %324 to i64
  %326 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %327 = load i64, i64* %326, align 8
  %328 = icmp ugt i64 %325, %327
  br i1 %328, label %329, label %330

329:                                              ; preds = %321
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

330:                                              ; preds = %321
  %331 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %332 = load i32, i32* %331, align 8
  call void @png_handle_hIST(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %332)
  br label %441

333:                                              ; preds = %284
  %334 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %335 = load i32, i32* %334, align 8
  %336 = add i32 %335, 4
  %337 = zext i32 %336 to i64
  %338 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %339 = load i64, i64* %338, align 8
  %340 = icmp ugt i64 %337, %339
  br i1 %340, label %341, label %342

341:                                              ; preds = %333
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

342:                                              ; preds = %333
  %343 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %344 = load i32, i32* %343, align 8
  call void @png_handle_pHYs(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %344)
  br label %441

345:                                              ; preds = %284
  %346 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %347 = load i32, i32* %346, align 8
  %348 = add i32 %347, 4
  %349 = zext i32 %348 to i64
  %350 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %351 = load i64, i64* %350, align 8
  %352 = icmp ugt i64 %349, %351
  br i1 %352, label %353, label %354

353:                                              ; preds = %345
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

354:                                              ; preds = %345
  %355 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %356 = load i32, i32* %355, align 8
  call void @png_handle_oFFs(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %356)
  br label %441

357:                                              ; preds = %284
  %358 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %359 = load i32, i32* %358, align 8
  %360 = add i32 %359, 4
  %361 = zext i32 %360 to i64
  %362 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %363 = load i64, i64* %362, align 8
  %364 = icmp ugt i64 %361, %363
  br i1 %364, label %365, label %366

365:                                              ; preds = %357
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

366:                                              ; preds = %357
  %367 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %368 = load i32, i32* %367, align 8
  call void @png_handle_pCAL(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %368)
  br label %441

369:                                              ; preds = %284
  %370 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %371 = load i32, i32* %370, align 8
  %372 = add i32 %371, 4
  %373 = zext i32 %372 to i64
  %374 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %375 = load i64, i64* %374, align 8
  %376 = icmp ugt i64 %373, %375
  br i1 %376, label %377, label %378

377:                                              ; preds = %369
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

378:                                              ; preds = %369
  %379 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %380 = load i32, i32* %379, align 8
  call void @png_handle_sCAL(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %380)
  br label %441

381:                                              ; preds = %284
  %382 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %383 = load i32, i32* %382, align 8
  %384 = add i32 %383, 4
  %385 = zext i32 %384 to i64
  %386 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %387 = load i64, i64* %386, align 8
  %388 = icmp ugt i64 %385, %387
  br i1 %388, label %389, label %390

389:                                              ; preds = %381
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

390:                                              ; preds = %381
  %391 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %392 = load i32, i32* %391, align 8
  call void @png_handle_tIME(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %392)
  br label %441

393:                                              ; preds = %284
  %394 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %395 = load i32, i32* %394, align 8
  %396 = add i32 %395, 4
  %397 = zext i32 %396 to i64
  %398 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %399 = load i64, i64* %398, align 8
  %400 = icmp ugt i64 %397, %399
  br i1 %400, label %401, label %402

401:                                              ; preds = %393
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

402:                                              ; preds = %393
  %403 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %404 = load i32, i32* %403, align 8
  call void @png_handle_tEXt(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %404)
  br label %441

405:                                              ; preds = %284
  %406 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %407 = load i32, i32* %406, align 8
  %408 = add i32 %407, 4
  %409 = zext i32 %408 to i64
  %410 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %411 = load i64, i64* %410, align 8
  %412 = icmp ugt i64 %409, %411
  br i1 %412, label %413, label %414

413:                                              ; preds = %405
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

414:                                              ; preds = %405
  %415 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %416 = load i32, i32* %415, align 8
  call void @png_handle_zTXt(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %416)
  br label %441

417:                                              ; preds = %284
  %418 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %419 = load i32, i32* %418, align 8
  %420 = add i32 %419, 4
  %421 = zext i32 %420 to i64
  %422 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %423 = load i64, i64* %422, align 8
  %424 = icmp ugt i64 %421, %423
  br i1 %424, label %425, label %426

425:                                              ; preds = %417
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

426:                                              ; preds = %417
  %427 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %428 = load i32, i32* %427, align 8
  call void @png_handle_iTXt(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %428)
  br label %441

429:                                              ; preds = %284
  %430 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %431 = load i32, i32* %430, align 8
  %432 = add i32 %431, 4
  %433 = zext i32 %432 to i64
  %434 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %435 = load i64, i64* %434, align 8
  %436 = icmp ugt i64 %433, %435
  br i1 %436, label %437, label %438

437:                                              ; preds = %429
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %445

438:                                              ; preds = %429
  %439 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %440 = load i32, i32* %439, align 8
  call void @png_handle_unknown(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %440, i32 0)
  br label %441

441:                                              ; preds = %131, %165, %219, %251, %281, %306, %330, %354, %378, %402, %426, %438, %414, %390, %366, %342, %318, %294, %265, %235, %147, %151, %119
  %442 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %443 = load i32, i32* %442, align 4
  %444 = and i32 %443, -257
  store i32 %444, i32* %442, align 4
  br label %445

445:                                              ; preds = %91, %441, %437, %425, %413, %401, %389, %377, %365, %353, %341, %329, %317, %305, %293, %280, %264, %250, %234, %218, %196, %164, %146, %130, %118, %13
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_push_read_IDAT(%struct.png_struct_def* noalias %0) #11 {
  %2 = alloca [4 x i8], align 1
  %3 = alloca [4 x i8], align 1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 256
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %60

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %10 = load i64, i64* %9, align 8
  %11 = icmp ult i64 %10, 8
  br i1 %11, label %12, label %13

12:                                               ; preds = %8
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %144

13:                                               ; preds = %8
  %14 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i32 0, i32 0
  call void @png_push_fill_buffer(%struct.png_struct_def* %0, i8* %14, i64 4)
  %15 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i32 0, i32 0
  %16 = call i32 @png_get_uint_31(%struct.png_struct_def* %0, i8* %15)
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  store i32 %16, i32* %17, align 8
  call void @png_reset_crc(%struct.png_struct_def* %0)
  %18 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i32 0, i32 0
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %18, i32 4)
  %19 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 0
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = and i32 255, %21
  %23 = shl i32 %22, 24
  %24 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 1
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = and i32 255, %26
  %28 = shl i32 %27, 16
  %29 = or i32 %23, %28
  %30 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 2
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = and i32 255, %32
  %34 = shl i32 %33, 8
  %35 = or i32 %29, %34
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 3
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = and i32 255, %38
  %40 = shl i32 %39, 0
  %41 = or i32 %35, %40
  %42 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  store i32 %41, i32* %42, align 8
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %44 = load i32, i32* %43, align 4
  %45 = or i32 %44, 256
  store i32 %45, i32* %43, align 4
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %47 = load i32, i32* %46, align 8
  %48 = icmp ne i32 %47, 1229209940
  br i1 %48, label %49, label %56

49:                                               ; preds = %13
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 106
  store i32 1, i32* %50, align 8
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %52 = load i32, i32* %51, align 8
  %53 = and i32 %52, 8
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %144

55:                                               ; preds = %49
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10.105, i32 0, i32 0)) #24
  unreachable

56:                                               ; preds = %13
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 100
  %58 = load i32, i32* %57, align 8
  %59 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  store i32 %58, i32* %59, align 8
  br label %60

60:                                               ; preds = %56, %1
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  %62 = load i32, i32* %61, align 8
  %63 = icmp ne i32 %62, 0
  br i1 %63, label %64, label %93

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %66 = load i64, i64* %65, align 8
  %67 = icmp ne i64 %66, 0
  br i1 %67, label %68, label %93

68:                                               ; preds = %64
  %69 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  %72 = load i32, i32* %71, align 8
  %73 = zext i32 %72 to i64
  %74 = icmp ult i64 %73, %70
  %75 = zext i32 %72 to i64
  %76 = trunc i64 %70 to i32
  %.02 = select i1 %74, i32 %72, i32 %76
  %.01 = select i1 %74, i64 %75, i64 %70
  %77 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 96
  %78 = load i8*, i8** %77, align 8
  call void @png_calculate_crc(%struct.png_struct_def* %0, i8* %78, i64 %.01)
  %79 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 96
  %80 = load i8*, i8** %79, align 8
  call void @png_process_IDAT_data(%struct.png_struct_def* %0, i8* %80, i64 %.01)
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  %82 = load i32, i32* %81, align 8
  %83 = sub i32 %82, %.02
  store i32 %83, i32* %81, align 8
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %85 = load i64, i64* %84, align 8
  %86 = sub i64 %85, %.01
  store i64 %86, i64* %84, align 8
  %87 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %88 = load i64, i64* %87, align 8
  %89 = sub i64 %88, %.01
  store i64 %89, i64* %87, align 8
  %90 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 96
  %91 = load i8*, i8** %90, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 %.01
  store i8* %92, i8** %90, align 8
  br label %93

93:                                               ; preds = %68, %64, %60
  %94 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  %95 = load i32, i32* %94, align 8
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %126

97:                                               ; preds = %93
  %98 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 105
  %99 = load i64, i64* %98, align 8
  %100 = icmp ne i64 %99, 0
  br i1 %100, label %101, label %126

101:                                              ; preds = %97
  %102 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 105
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  %105 = load i32, i32* %104, align 8
  %106 = zext i32 %105 to i64
  %107 = icmp ult i64 %106, %103
  %108 = zext i32 %105 to i64
  %109 = trunc i64 %103 to i32
  %.03 = select i1 %107, i64 %108, i64 %103
  %.0 = select i1 %107, i32 %105, i32 %109
  %110 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 98
  %111 = load i8*, i8** %110, align 8
  call void @png_calculate_crc(%struct.png_struct_def* %0, i8* %111, i64 %.03)
  %112 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 98
  %113 = load i8*, i8** %112, align 8
  call void @png_process_IDAT_data(%struct.png_struct_def* %0, i8* %113, i64 %.03)
  %114 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  %115 = load i32, i32* %114, align 8
  %116 = sub i32 %115, %.0
  store i32 %116, i32* %114, align 8
  %117 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %118 = load i64, i64* %117, align 8
  %119 = sub i64 %118, %.03
  store i64 %119, i64* %117, align 8
  %120 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 105
  %121 = load i64, i64* %120, align 8
  %122 = sub i64 %121, %.03
  store i64 %122, i64* %120, align 8
  %123 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 98
  %124 = load i8*, i8** %123, align 8
  %125 = getelementptr inbounds i8, i8* %124, i64 %.03
  store i8* %125, i8** %123, align 8
  br label %126

126:                                              ; preds = %101, %97, %93
  %127 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  %128 = load i32, i32* %127, align 8
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %144

130:                                              ; preds = %126
  %131 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %132 = load i64, i64* %131, align 8
  %133 = icmp ult i64 %132, 4
  br i1 %133, label %134, label %135

134:                                              ; preds = %130
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %144

135:                                              ; preds = %130
  %136 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %137 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %138 = load i32, i32* %137, align 4
  %139 = and i32 %138, -257
  store i32 %139, i32* %137, align 4
  %140 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %141 = load i32, i32* %140, align 4
  %142 = or i32 %141, 8
  store i32 %142, i32* %140, align 4
  %143 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  store i32 0, i32* %143, align 8
  br label %144

144:                                              ; preds = %49, %12, %134, %135, %126
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_push_save_buffer(%struct.png_struct_def* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %3 = load i64, i64* %2, align 8
  %4 = icmp ne i64 %3, 0
  br i1 %4, label %5, label %22

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 96
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 97
  %9 = load i8*, i8** %8, align 8
  %10 = icmp ne i8* %7, %9
  br i1 %10, label %11, label %22

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 96
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 97
  %17 = load i8*, i8** %16, align 8
  %18 = icmp ult i64 0, %13
  br i1 %18, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %11
  br label %19

19:                                               ; preds = %.lr.ph, %19
  %.014 = phi i64 [ 0, %.lr.ph ], [ %21, %19 ]
  %scevgep = getelementptr i8, i8* %17, i64 %.014
  %scevgep6 = getelementptr i8, i8* %15, i64 %.014
  %20 = load i8, i8* %scevgep6, align 1
  store i8 %20, i8* %scevgep, align 1
  %21 = add nuw i64 %.014, 1
  %exitcond = icmp ne i64 %13, %21
  br i1 %exitcond, label %19, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %19
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %11
  br label %22

22:                                               ; preds = %.loopexit, %5, %1
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 105
  %26 = load i64, i64* %25, align 8
  %27 = add i64 %24, %26
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 103
  %29 = load i64, i64* %28, align 8
  %30 = icmp ugt i64 %27, %29
  br i1 %30, label %31, label %69

31:                                               ; preds = %22
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 105
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, 256
  %37 = sub i64 -1, %36
  %38 = icmp ugt i64 %33, %37
  br i1 %38, label %39, label %40

39:                                               ; preds = %31
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7.115, i32 0, i32 0)) #24
  unreachable

40:                                               ; preds = %31
  %41 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 105
  %44 = load i64, i64* %43, align 8
  %45 = add i64 %42, %44
  %46 = add i64 %45, 256
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 97
  %48 = load i8*, i8** %47, align 8
  %49 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %46)
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 97
  store i8* %49, i8** %50, align 8
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 97
  %52 = load i8*, i8** %51, align 8
  %53 = icmp eq i8* %52, null
  br i1 %53, label %54, label %55

54:                                               ; preds = %40
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %48)
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.8.116, i32 0, i32 0)) #24
  unreachable

55:                                               ; preds = %40
  %56 = icmp ne i8* %48, null
  br i1 %56, label %57, label %62

57:                                               ; preds = %55
  %58 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 97
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %61 = load i64, i64* %60, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %48, i64 %61, i1 false)
  br label %67

62:                                               ; preds = %55
  %63 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %64 = load i64, i64* %63, align 8
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %62
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9.117, i32 0, i32 0)) #24
  unreachable

67:                                               ; preds = %62, %57
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %48)
  %68 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 103
  store i64 %46, i64* %68, align 8
  br label %69

69:                                               ; preds = %67, %22
  %70 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 105
  %71 = load i64, i64* %70, align 8
  %72 = icmp ne i64 %71, 0
  br i1 %72, label %73, label %89

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 97
  %75 = load i8*, i8** %74, align 8
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds i8, i8* %75, i64 %77
  %79 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 98
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 105
  %82 = load i64, i64* %81, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %80, i64 %82, i1 false)
  %83 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 105
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %86 = load i64, i64* %85, align 8
  %87 = add i64 %86, %84
  store i64 %87, i64* %85, align 8
  %88 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 105
  store i64 0, i64* %88, align 8
  br label %89

89:                                               ; preds = %73, %69
  %90 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 97
  %91 = load i8*, i8** %90, align 8
  %92 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 96
  store i8* %91, i8** %92, align 8
  %93 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  store i64 0, i64* %93, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_push_fill_buffer(%struct.png_struct_def* %0, i8* %1, i64 %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %55, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %7 = load i64, i64* %6, align 8
  %8 = icmp ne i64 %7, 0
  br i1 %8, label %9, label %30

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %2, %11
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %15 = load i64, i64* %14, align 8
  br label %16

16:                                               ; preds = %9, %13
  %.01 = phi i64 [ %15, %13 ], [ %2, %9 ]
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 96
  %18 = load i8*, i8** %17, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %18, i64 %.01, i1 false)
  %19 = sub i64 %2, %.01
  %20 = getelementptr inbounds i8, i8* %1, i64 %.01
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %22, %.01
  store i64 %23, i64* %21, align 8
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %25, %.01
  store i64 %26, i64* %24, align 8
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 96
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 %.01
  store i8* %29, i8** %27, align 8
  br label %30

30:                                               ; preds = %16, %5
  %.03 = phi i8* [ %20, %16 ], [ %1, %5 ]
  %.02 = phi i64 [ %19, %16 ], [ %2, %5 ]
  %31 = icmp ne i64 %.02, 0
  br i1 %31, label %32, label %55

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 105
  %34 = load i64, i64* %33, align 8
  %35 = icmp ne i64 %34, 0
  br i1 %35, label %36, label %55

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 105
  %38 = load i64, i64* %37, align 8
  %39 = icmp ult i64 %.02, %38
  br i1 %39, label %43, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 105
  %42 = load i64, i64* %41, align 8
  br label %43

43:                                               ; preds = %36, %40
  %.0 = phi i64 [ %42, %40 ], [ %.02, %36 ]
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 98
  %45 = load i8*, i8** %44, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %.03, i8* align 1 %45, i64 %.0, i1 false)
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %47, %.0
  store i64 %48, i64* %46, align 8
  %49 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 105
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %50, %.0
  store i64 %51, i64* %49, align 8
  %52 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 98
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 %.0
  store i8* %54, i8** %52, align 8
  br label %55

55:                                               ; preds = %3, %43, %32, %30
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_uint_31(%struct.png_struct_def* noalias %0, i8* %1) #11 {
  %3 = load i8, i8* %1, align 1
  %4 = zext i8 %3 to i32
  %5 = shl i32 %4, 24
  %6 = getelementptr inbounds i8, i8* %1, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = shl i32 %8, 16
  %10 = add i32 %5, %9
  %11 = getelementptr inbounds i8, i8* %1, i64 2
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = shl i32 %13, 8
  %15 = add i32 %10, %14
  %16 = getelementptr inbounds i8, i8* %1, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add i32 %15, %18
  %20 = icmp ugt i32 %19, 2147483647
  br i1 %20, label %21, label %22

21:                                               ; preds = %2
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.242, i32 0, i32 0)) #24
  unreachable

22:                                               ; preds = %2
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define void @png_crc_read(%struct.png_struct_def* noalias %0, i8* %1, i32 %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  call void bitcast (void (%struct.png_struct_def.121*, i8*, i64)* @png_read_data to void (%struct.png_struct_def*, i8*, i64)*)(%struct.png_struct_def* %0, i8* %1, i64 %6)
  %7 = zext i32 %2 to i64
  call void @png_calculate_crc(%struct.png_struct_def* %0, i8* %1, i64 %7)
  br label %8

8:                                                ; preds = %3, %5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_process_IDAT_data(%struct.png_struct_def* noalias %0, i8* %1, i64 %2) #11 {
  %4 = icmp ule i64 %2, 0
  %5 = icmp eq i8* %1, null
  %or.cond = select i1 %4, i1 true, i1 %5
  br i1 %or.cond, label %6, label %7

6:                                                ; preds = %3
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.11.106, i32 0, i32 0)) #24
  unreachable

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %9 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %8, i32 0, i32 0
  store i8* %1, i8** %9, align 8
  %10 = trunc i64 %2 to i32
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %12 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %11, i32 0, i32 1
  store i32 %10, i32* %12, align 8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %14 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %17 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %16, i32 0, i32 4
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 64
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 42
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 64
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 42
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 64
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %24 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %23, i32 0, i32 4
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %27 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %26, i32 0, i32 3
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %29 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %28, i32 0, i32 3
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 39
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %35 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %34, i32 0, i32 4
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %37 = load i32, i32* %14, align 8
  %38 = icmp ugt i32 %37, 0
  br i1 %38, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %7
  %39 = trunc i32 6 to i8
  br label %40

40:                                               ; preds = %.lr.ph, %118
  %41 = load i32, i32* %15, align 8
  %42 = and i32 %41, 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %..critedge_crit_edge2

44:                                               ; preds = %40
  %45 = load i32, i32* %17, align 8
  %46 = icmp ugt i32 %45, 0
  br i1 %46, label %71, label %47

47:                                               ; preds = %44
  %48 = load i8, i8* %18, align 2
  %49 = zext i8 %48 to i32
  %50 = icmp sge i32 %49, 8
  br i1 %50, label %51, label %58

51:                                               ; preds = %47
  %52 = load i32, i32* %21, align 8
  %53 = zext i32 %52 to i64
  %54 = load i8, i8* %22, align 2
  %55 = zext i8 %54 to i64
  %56 = lshr i64 %55, 3
  %57 = mul i64 %53, %56
  br label %66

58:                                               ; preds = %47
  %59 = load i32, i32* %19, align 8
  %60 = zext i32 %59 to i64
  %61 = load i8, i8* %20, align 2
  %62 = zext i8 %61 to i64
  %63 = mul i64 %60, %62
  %64 = add i64 %63, 7
  %65 = lshr i64 %64, 3
  br label %66

66:                                               ; preds = %58, %51
  %67 = phi i64 [ %57, %51 ], [ %65, %58 ]
  %68 = add i64 %67, 1
  %69 = trunc i64 %68 to i32
  store i32 %69, i32* %24, align 8
  %70 = load i8*, i8** %25, align 8
  store i8* %70, i8** %27, align 8
  br label %71

71:                                               ; preds = %66, %44
  %72 = call i32 @png_zlib_inflate(%struct.png_struct_def* %0, i32 2)
  switch i32 %72, label %73 [
    i32 0, label %93
    i32 1, label %93
  ]

73:                                               ; preds = %71
  %.lcssa = phi i32 [ %72, %71 ]
  %74 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %75 = load i32, i32* %74, align 8
  %76 = or i32 %75, 8
  store i32 %76, i32* %74, align 8
  %77 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  store i32 0, i32* %77, align 8
  %78 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 39
  %81 = load i32, i32* %80, align 8
  %82 = icmp uge i32 %79, %81
  br i1 %82, label %88, label %83

83:                                               ; preds = %73
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = icmp sgt i32 %86, 6
  br i1 %87, label %88, label %89

88:                                               ; preds = %83, %73
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.12.107, i32 0, i32 0))
  br label %126

89:                                               ; preds = %83
  %90 = icmp eq i32 %.lcssa, -3
  br i1 %90, label %91, label %92

91:                                               ; preds = %89
  call void @png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.13.108, i32 0, i32 0))
  br label %126

92:                                               ; preds = %89
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.14.109, i32 0, i32 0)) #24
  unreachable

93:                                               ; preds = %71, %71
  %94 = load i8*, i8** %29, align 8
  %95 = load i8*, i8** %30, align 8
  %96 = icmp ne i8* %94, %95
  br i1 %96, label %97, label %113

97:                                               ; preds = %93
  %98 = load i32, i32* %31, align 4
  %99 = load i32, i32* %32, align 8
  %100 = icmp uge i32 %98, %99
  br i1 %100, label %104, label %101

101:                                              ; preds = %97
  %102 = load i8, i8* %33, align 1
  %103 = icmp ugt i8 %102, %39
  br i1 %103, label %104, label %109

104:                                              ; preds = %101, %97
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.15.110, i32 0, i32 0))
  %105 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %106 = load i32, i32* %105, align 8
  %107 = or i32 %106, 8
  store i32 %107, i32* %105, align 8
  %108 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  store i32 0, i32* %108, align 8
  br label %126

109:                                              ; preds = %101
  %110 = load i32, i32* %35, align 8
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  call void @png_push_process_row(%struct.png_struct_def* %0)
  br label %113

113:                                              ; preds = %109, %112, %93
  %114 = icmp eq i32 %72, 1
  br i1 %114, label %115, label %118

115:                                              ; preds = %113
  %116 = load i32, i32* %36, align 8
  %117 = or i32 %116, 8
  store i32 %117, i32* %36, align 8
  br label %118

118:                                              ; preds = %115, %113
  %119 = load i32, i32* %14, align 8
  %120 = icmp ugt i32 %119, 0
  br i1 %120, label %40, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %118
  br label %.critedge

..critedge_crit_edge2:                            ; preds = %40
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge2, %..critedge_crit_edge, %7
  %121 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %122 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %121, i32 0, i32 1
  %123 = load i32, i32* %122, align 8
  %124 = icmp ugt i32 %123, 0
  br i1 %124, label %125, label %126

125:                                              ; preds = %.critedge
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.16.111, i32 0, i32 0))
  br label %126

126:                                              ; preds = %88, %91, %104, %125, %.critedge
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_crc_finish(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = alloca [1024 x i8], align 16
  %4 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i32 0, i32 0
  %5 = icmp ugt i32 %1, 0
  br i1 %5, label %.lr.ph, label %10

.lr.ph:                                           ; preds = %2
  br label %6

6:                                                ; preds = %.lr.ph, %6
  %.023 = phi i32 [ %1, %.lr.ph ], [ %8, %6 ]
  %7 = icmp ugt i32 1024, %.023
  %spec.select = select i1 %7, i32 %.023, i32 1024
  %8 = sub i32 %.023, %spec.select
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %4, i32 %spec.select)
  %9 = icmp ugt i32 %8, 0
  br i1 %9, label %6, label %._crit_edge

._crit_edge:                                      ; preds = %6
  br label %10

10:                                               ; preds = %._crit_edge, %2
  %11 = call i32 @png_crc_error(%struct.png_struct_def* %0)
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %31

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 29
  %17 = and i32 1, %16
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %24

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %21 = load i32, i32* %20, align 8
  %22 = and i32 %21, 512
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %29, label %30

24:                                               ; preds = %13
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %26 = load i32, i32* %25, align 8
  %27 = and i32 %26, 1024
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %24, %19
  call void @png_chunk_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3.259, i32 0, i32 0))
  br label %31

30:                                               ; preds = %24, %19
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3.259, i32 0, i32 0)) #24
  unreachable

31:                                               ; preds = %10, %29
  %.0 = phi i32 [ 1, %29 ], [ 0, %10 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_crc_error(%struct.png_struct_def* noalias %0) #11 {
  %2 = alloca [4 x i8], align 1
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %4 = load i32, i32* %3, align 8
  %5 = lshr i32 %4, 29
  %6 = and i32 1, %5
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 768
  %12 = icmp eq i32 %11, 768
  %spec.select = select i1 %12, i32 0, i32 1
  br label %18

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %15 = load i32, i32* %14, align 8
  %16 = and i32 %15, 2048
  %17 = icmp ne i32 %16, 0
  %spec.select2 = select i1 %17, i32 0, i32 1
  br label %18

18:                                               ; preds = %13, %8
  %.2 = phi i32 [ %spec.select, %8 ], [ %spec.select2, %13 ]
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 141
  store i32 129, i32* %19, align 4
  %20 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i32 0, i32 0
  call void bitcast (void (%struct.png_struct_def.121*, i8*, i64)* @png_read_data to void (%struct.png_struct_def*, i8*, i64)*)(%struct.png_struct_def* %0, i8* %20, i64 4)
  %21 = icmp ne i32 %.2, 0
  br i1 %21, label %22, label %48

22:                                               ; preds = %18
  %23 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i32 0, i32 0
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = shl i32 %25, 24
  %27 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i32 0, i32 0
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = shl i32 %30, 16
  %32 = add i32 %26, %31
  %33 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i32 0, i32 0
  %34 = getelementptr inbounds i8, i8* %33, i64 2
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = shl i32 %36, 8
  %38 = add i32 %32, %37
  %39 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i32 0, i32 0
  %40 = getelementptr inbounds i8, i8* %39, i64 3
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = add i32 %38, %42
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 51
  %45 = load i32, i32* %44, align 4
  %46 = icmp ne i32 %43, %45
  %47 = zext i1 %46 to i32
  br label %48

48:                                               ; preds = %18, %22
  %.0 = phi i32 [ %47, %22 ], [ 0, %18 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_data(%struct.png_struct_def.121* noalias %0, i8* %1, i64 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def.121, %struct.png_struct_def.121* %0, i32 0, i32 8
  %5 = bitcast {}** %4 to void (%struct.png_struct_def.121*, i8*, i64)**
  %6 = load void (%struct.png_struct_def.121*, i8*, i64)*, void (%struct.png_struct_def.121*, i8*, i64)** %5, align 8
  %7 = icmp ne void (%struct.png_struct_def.121*, i8*, i64)* %6, null
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.png_struct_def.121, %struct.png_struct_def.121* %0, i32 0, i32 8
  %10 = bitcast {}** %9 to void (%struct.png_struct_def.121*, i8*, i64)**
  %11 = load void (%struct.png_struct_def.121*, i8*, i64)*, void (%struct.png_struct_def.121*, i8*, i64)** %10, align 8
  call void %11(%struct.png_struct_def.121* %0, i8* %1, i64 %2)
  ret void

12:                                               ; preds = %3
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.121*, i8*)*)(%struct.png_struct_def.121* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.189, i32 0, i32 0)) #24
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_zlib_inflate(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 70
  %4 = load i8, i8* %3, align 8
  %5 = zext i8 %4 to i32
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %25

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %9 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %8, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = icmp ugt i32 %10, 0
  br i1 %11, label %12, label %25

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %14 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %13, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = ashr i32 %17, 4
  %19 = icmp sgt i32 %18, 7
  br i1 %19, label %20, label %23

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %22 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %21, i32 0, i32 6
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4.262, i32 0, i32 0), i8** %22, align 8
  br label %28

23:                                               ; preds = %12
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 70
  store i8 0, i8* %24, align 8
  br label %25

25:                                               ; preds = %23, %7, %2
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %27 = call i32 @inflate(%struct.z_stream_s* %26, i32 %1)
  br label %28

28:                                               ; preds = %25, %20
  %.0 = phi i32 [ -3, %20 ], [ %27, %25 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_push_process_row(%struct.png_struct_def* noalias %0) #11 {
  %2 = alloca %struct.png_row_info_struct, align 8
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 42
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i32 0, i32 0
  store i32 %4, i32* %5, align 8
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %7 = load i8, i8* %6, align 1
  %8 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i32 0, i32 2
  store i8 %7, i8* %8, align 8
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %10 = load i8, i8* %9, align 8
  %11 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i32 0, i32 3
  store i8 %10, i8* %11, align 1
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 65
  %13 = load i8, i8* %12, align 1
  %14 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i32 0, i32 4
  store i8 %13, i8* %14, align 2
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 64
  %16 = load i8, i8* %15, align 2
  %17 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i32 0, i32 5
  store i8 %16, i8* %17, align 1
  %18 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i32 0, i32 5
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = icmp sge i32 %20, 8
  br i1 %21, label %22, label %31

22:                                               ; preds = %1
  %23 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i32 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i32 0, i32 5
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i64
  %29 = lshr i64 %28, 3
  %30 = mul i64 %25, %29
  br label %41

31:                                               ; preds = %1
  %32 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i32 0, i32 5
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = mul i64 %34, %37
  %39 = add i64 %38, 7
  %40 = lshr i64 %39, 3
  br label %41

41:                                               ; preds = %31, %22
  %42 = phi i64 [ %30, %22 ], [ %40, %31 ]
  %43 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i32 0, i32 1
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 0
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = icmp sgt i32 %48, 0
  br i1 %49, label %50, label %70

50:                                               ; preds = %41
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 0
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = icmp slt i32 %55, 5
  br i1 %56, label %57, label %69

57:                                               ; preds = %50
  %58 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 1
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 45
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 1
  %64 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 0
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  call void @png_read_filter_row(%struct.png_struct_def* %0, %struct.png_row_info_struct* %2, i8* %60, i8* %63, i32 %68)
  br label %70

69:                                               ; preds = %50
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.17.112, i32 0, i32 0)) #24
  unreachable

70:                                               ; preds = %57, %41
  %71 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 45
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i32 0, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 %74, i64 %77, i1 false)
  %78 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %79 = load i32, i32* %78, align 4
  %80 = icmp ne i32 %79, 0
  br i1 %80, label %81, label %82

81:                                               ; preds = %70
  call void @png_do_read_transformations(%struct.png_struct_def* %0, %struct.png_row_info_struct* %2)
  br label %82

82:                                               ; preds = %81, %70
  %83 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 69
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %99

87:                                               ; preds = %82
  %88 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i32 0, i32 5
  %89 = load i8, i8* %88, align 1
  %90 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 69
  store i8 %89, i8* %90, align 1
  %91 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i32 0, i32 5
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 68
  %95 = load i8, i8* %94, align 2
  %96 = zext i8 %95 to i32
  %97 = icmp sgt i32 %93, %96
  br i1 %97, label %98, label %108

98:                                               ; preds = %87
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.18.113, i32 0, i32 0)) #24
  unreachable

99:                                               ; preds = %82
  %100 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 69
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i32 0, i32 5
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = icmp ne i32 %102, %105
  br i1 %106, label %107, label %108

107:                                              ; preds = %99
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.19.114, i32 0, i32 0)) #24
  unreachable

108:                                              ; preds = %99, %87
  %109 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 58
  %110 = load i8, i8* %109, align 4
  %111 = zext i8 %110 to i32
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %113, label %284

113:                                              ; preds = %108
  %114 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %115 = load i32, i32* %114, align 4
  %116 = and i32 %115, 2
  %117 = icmp ne i32 %116, 0
  br i1 %117, label %118, label %284

118:                                              ; preds = %113
  %119 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = icmp slt i32 %121, 6
  br i1 %122, label %123, label %132

123:                                              ; preds = %118
  %124 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %125 = load i8*, i8** %124, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 1
  %127 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %131 = load i32, i32* %130, align 4
  call void @png_do_read_interlace(%struct.png_row_info_struct* %2, i8* %126, i32 %129, i32 %131)
  br label %132

132:                                              ; preds = %123, %118
  %133 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  switch i32 %135, label %275 [
    i32 0, label %.preheader24
    i32 1, label %.preheader26
    i32 2, label %.preheader29
    i32 3, label %.preheader32
    i32 4, label %.preheader33
    i32 5, label %.preheader34
  ]

.preheader34:                                     ; preds = %132
  %136 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %137 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  br label %263

.preheader33:                                     ; preds = %132
  %138 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %139 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  br label %245

.preheader32:                                     ; preds = %132
  %140 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %141 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  br label %228

.preheader29:                                     ; preds = %132
  %142 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %143 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  br label %205

.preheader26:                                     ; preds = %132
  %144 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %145 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  br label %188

.preheader24:                                     ; preds = %132
  %146 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %147 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  br label %148

148:                                              ; preds = %.preheader24, %152
  %lsr.iv62 = phi i32 [ 8, %.preheader24 ], [ %lsr.iv.next63, %152 ]
  %149 = load i8, i8* %146, align 1
  %150 = zext i8 %149 to i32
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %.critedge

152:                                              ; preds = %148
  %153 = load i8*, i8** %147, align 8
  %154 = getelementptr inbounds i8, i8* %153, i64 1
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* %154)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  %lsr.iv.next63 = add nsw i32 %lsr.iv62, -1
  %exitcond39 = icmp ne i32 %lsr.iv.next63, 0
  br i1 %exitcond39, label %148, label %.critedge

.critedge:                                        ; preds = %152, %148
  %155 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = icmp eq i32 %157, 2
  br i1 %158, label %.preheader23, label %.critedge11

.preheader23:                                     ; preds = %.critedge
  %159 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  br label %160

160:                                              ; preds = %.preheader23, %164
  %lsr.iv60 = phi i32 [ 4, %.preheader23 ], [ %lsr.iv.next61, %164 ]
  %161 = load i8, i8* %159, align 1
  %162 = zext i8 %161 to i32
  %163 = icmp eq i32 %162, 2
  br i1 %163, label %164, label %.critedge11.loopexit

164:                                              ; preds = %160
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* null)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  %lsr.iv.next61 = add nsw i32 %lsr.iv60, -1
  %exitcond37 = icmp ne i32 %lsr.iv.next61, 0
  br i1 %exitcond37, label %160, label %.critedge11.loopexit

.critedge11.loopexit:                             ; preds = %164, %160
  br label %.critedge11

.critedge11:                                      ; preds = %.critedge11.loopexit, %.critedge
  %165 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = icmp eq i32 %167, 4
  br i1 %168, label %169, label %.critedge12

169:                                              ; preds = %.critedge11
  %170 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 38
  %171 = load i32, i32* %170, align 4
  %172 = icmp ule i32 %171, 4
  br i1 %172, label %.preheader, label %.critedge12

.preheader:                                       ; preds = %169
  %173 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  br label %174

174:                                              ; preds = %.preheader, %178
  %lsr.iv = phi i32 [ 2, %.preheader ], [ %lsr.iv.next, %178 ]
  %175 = load i8, i8* %173, align 1
  %176 = zext i8 %175 to i32
  %177 = icmp eq i32 %176, 4
  br i1 %177, label %178, label %.critedge12.loopexit

178:                                              ; preds = %174
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* null)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  br i1 %exitcond, label %174, label %.critedge12.loopexit

.critedge12.loopexit:                             ; preds = %178, %174
  br label %.critedge12

.critedge12:                                      ; preds = %.critedge12.loopexit, %169, %.critedge11
  %179 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = icmp eq i32 %181, 6
  br i1 %182, label %183, label %.critedge14

183:                                              ; preds = %.critedge12
  %184 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 38
  %185 = load i32, i32* %184, align 4
  %186 = icmp ule i32 %185, 4
  br i1 %186, label %187, label %.critedge14

187:                                              ; preds = %183
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* null)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  br label %.critedge14

188:                                              ; preds = %.preheader26, %192
  %lsr.iv66 = phi i32 [ 8, %.preheader26 ], [ %lsr.iv.next67, %192 ]
  %189 = load i8, i8* %144, align 1
  %190 = zext i8 %189 to i32
  %191 = icmp eq i32 %190, 1
  br i1 %191, label %192, label %.critedge13

192:                                              ; preds = %188
  %193 = load i8*, i8** %145, align 8
  %194 = getelementptr inbounds i8, i8* %193, i64 1
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* %194)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  %lsr.iv.next67 = add nsw i32 %lsr.iv66, -1
  %exitcond43 = icmp ne i32 %lsr.iv.next67, 0
  br i1 %exitcond43, label %188, label %.critedge13

.critedge13:                                      ; preds = %192, %188
  %195 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i32
  %198 = icmp eq i32 %197, 2
  br i1 %198, label %.preheader25, label %.critedge14

.preheader25:                                     ; preds = %.critedge13
  %199 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  br label %200

200:                                              ; preds = %.preheader25, %204
  %lsr.iv64 = phi i32 [ 4, %.preheader25 ], [ %lsr.iv.next65, %204 ]
  %201 = load i8, i8* %199, align 1
  %202 = zext i8 %201 to i32
  %203 = icmp eq i32 %202, 2
  br i1 %203, label %204, label %.critedge14.loopexit

204:                                              ; preds = %200
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* null)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  %lsr.iv.next65 = add nsw i32 %lsr.iv64, -1
  %exitcond41 = icmp ne i32 %lsr.iv.next65, 0
  br i1 %exitcond41, label %200, label %.critedge14.loopexit

205:                                              ; preds = %.preheader29, %209
  %lsr.iv72 = phi i32 [ 4, %.preheader29 ], [ %lsr.iv.next73, %209 ]
  %206 = load i8, i8* %142, align 1
  %207 = zext i8 %206 to i32
  %208 = icmp eq i32 %207, 2
  br i1 %208, label %209, label %.critedge15

209:                                              ; preds = %205
  %210 = load i8*, i8** %143, align 8
  %211 = getelementptr inbounds i8, i8* %210, i64 1
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* %211)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  %lsr.iv.next73 = add nsw i32 %lsr.iv72, -1
  %exitcond49 = icmp ne i32 %lsr.iv.next73, 0
  br i1 %exitcond49, label %205, label %.critedge15

.critedge15:                                      ; preds = %209, %205
  %212 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  br label %213

213:                                              ; preds = %.critedge15, %217
  %lsr.iv70 = phi i32 [ 4, %.critedge15 ], [ %lsr.iv.next71, %217 ]
  %214 = load i8, i8* %212, align 1
  %215 = zext i8 %214 to i32
  %216 = icmp eq i32 %215, 2
  br i1 %216, label %217, label %.critedge16

217:                                              ; preds = %213
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* null)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  %lsr.iv.next71 = add nsw i32 %lsr.iv70, -1
  %exitcond47 = icmp ne i32 %lsr.iv.next71, 0
  br i1 %exitcond47, label %213, label %.critedge16

.critedge16:                                      ; preds = %217, %213
  %218 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i32
  %221 = icmp eq i32 %220, 4
  br i1 %221, label %.preheader27, label %.critedge14

.preheader27:                                     ; preds = %.critedge16
  %222 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  br label %223

223:                                              ; preds = %.preheader27, %227
  %lsr.iv68 = phi i32 [ 2, %.preheader27 ], [ %lsr.iv.next69, %227 ]
  %224 = load i8, i8* %222, align 1
  %225 = zext i8 %224 to i32
  %226 = icmp eq i32 %225, 4
  br i1 %226, label %227, label %.critedge14.loopexit28

227:                                              ; preds = %223
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* null)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  %lsr.iv.next69 = add nsw i32 %lsr.iv68, -1
  %exitcond45 = icmp ne i32 %lsr.iv.next69, 0
  br i1 %exitcond45, label %223, label %.critedge14.loopexit28

228:                                              ; preds = %.preheader32, %232
  %lsr.iv76 = phi i32 [ 4, %.preheader32 ], [ %lsr.iv.next77, %232 ]
  %229 = load i8, i8* %140, align 1
  %230 = zext i8 %229 to i32
  %231 = icmp eq i32 %230, 3
  br i1 %231, label %232, label %.critedge18

232:                                              ; preds = %228
  %233 = load i8*, i8** %141, align 8
  %234 = getelementptr inbounds i8, i8* %233, i64 1
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* %234)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  %lsr.iv.next77 = add nsw i32 %lsr.iv76, -1
  %exitcond53 = icmp ne i32 %lsr.iv.next77, 0
  br i1 %exitcond53, label %228, label %.critedge18

.critedge18:                                      ; preds = %232, %228
  %235 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i32
  %238 = icmp eq i32 %237, 4
  br i1 %238, label %.preheader30, label %.critedge14

.preheader30:                                     ; preds = %.critedge18
  %239 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  br label %240

240:                                              ; preds = %.preheader30, %244
  %lsr.iv74 = phi i32 [ 2, %.preheader30 ], [ %lsr.iv.next75, %244 ]
  %241 = load i8, i8* %239, align 1
  %242 = zext i8 %241 to i32
  %243 = icmp eq i32 %242, 4
  br i1 %243, label %244, label %.critedge14.loopexit31

244:                                              ; preds = %240
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* null)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  %lsr.iv.next75 = add nsw i32 %lsr.iv74, -1
  %exitcond51 = icmp ne i32 %lsr.iv.next75, 0
  br i1 %exitcond51, label %240, label %.critedge14.loopexit31

245:                                              ; preds = %.preheader33, %249
  %lsr.iv80 = phi i32 [ 2, %.preheader33 ], [ %lsr.iv.next81, %249 ]
  %246 = load i8, i8* %138, align 1
  %247 = zext i8 %246 to i32
  %248 = icmp eq i32 %247, 4
  br i1 %248, label %249, label %.critedge20

249:                                              ; preds = %245
  %250 = load i8*, i8** %139, align 8
  %251 = getelementptr inbounds i8, i8* %250, i64 1
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* %251)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  %lsr.iv.next81 = add nsw i32 %lsr.iv80, -1
  %exitcond57 = icmp ne i32 %lsr.iv.next81, 0
  br i1 %exitcond57, label %245, label %.critedge20

.critedge20:                                      ; preds = %249, %245
  %252 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  br label %253

253:                                              ; preds = %.critedge20, %257
  %lsr.iv78 = phi i32 [ 2, %.critedge20 ], [ %lsr.iv.next79, %257 ]
  %254 = load i8, i8* %252, align 1
  %255 = zext i8 %254 to i32
  %256 = icmp eq i32 %255, 4
  br i1 %256, label %257, label %.critedge21

257:                                              ; preds = %253
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* null)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  %lsr.iv.next79 = add nsw i32 %lsr.iv78, -1
  %exitcond55 = icmp ne i32 %lsr.iv.next79, 0
  br i1 %exitcond55, label %253, label %.critedge21

.critedge21:                                      ; preds = %257, %253
  %258 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %259 = load i8, i8* %258, align 1
  %260 = zext i8 %259 to i32
  %261 = icmp eq i32 %260, 6
  br i1 %261, label %262, label %.critedge14

262:                                              ; preds = %.critedge21
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* null)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  br label %.critedge14

263:                                              ; preds = %.preheader34, %267
  %lsr.iv82 = phi i32 [ 2, %.preheader34 ], [ %lsr.iv.next83, %267 ]
  %264 = load i8, i8* %136, align 1
  %265 = zext i8 %264 to i32
  %266 = icmp eq i32 %265, 5
  br i1 %266, label %267, label %.critedge22

267:                                              ; preds = %263
  %268 = load i8*, i8** %137, align 8
  %269 = getelementptr inbounds i8, i8* %268, i64 1
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* %269)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  %lsr.iv.next83 = add nsw i32 %lsr.iv82, -1
  %exitcond59 = icmp ne i32 %lsr.iv.next83, 0
  br i1 %exitcond59, label %263, label %.critedge22

.critedge22:                                      ; preds = %267, %263
  %270 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %271 = load i8, i8* %270, align 1
  %272 = zext i8 %271 to i32
  %273 = icmp eq i32 %272, 6
  br i1 %273, label %274, label %.critedge14

274:                                              ; preds = %.critedge22
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* null)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  br label %.critedge14

275:                                              ; preds = %132
  %276 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %277 = load i8*, i8** %276, align 8
  %278 = getelementptr inbounds i8, i8* %277, i64 1
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* %278)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  %279 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %280 = load i8, i8* %279, align 1
  %281 = zext i8 %280 to i32
  %282 = icmp ne i32 %281, 6
  br i1 %282, label %.critedge14, label %283

283:                                              ; preds = %275
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* null)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  br label %.critedge14

284:                                              ; preds = %113, %108
  %285 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %286 = load i8*, i8** %285, align 8
  %287 = getelementptr inbounds i8, i8* %286, i64 1
  call void @png_push_have_row(%struct.png_struct_def* %0, i8* %287)
  call void @png_read_push_finish_row(%struct.png_struct_def* %0)
  br label %.critedge14

.critedge14.loopexit:                             ; preds = %204, %200
  br label %.critedge14

.critedge14.loopexit28:                           ; preds = %227, %223
  br label %.critedge14

.critedge14.loopexit31:                           ; preds = %244, %240
  br label %.critedge14

.critedge14:                                      ; preds = %.critedge14.loopexit31, %.critedge14.loopexit28, %.critedge14.loopexit, %283, %187, %183, %.critedge12, %.critedge13, %.critedge16, %.critedge18, %262, %.critedge21, %274, %.critedge22, %275, %284
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_filter_row(%struct.png_struct_def* noalias %0, %struct.png_row_info_struct* %1, i8* %2, i8* %3, i32 %4) #11 {
  %6 = icmp sgt i32 %4, 0
  %7 = icmp slt i32 %4, 5
  %or.cond = and i1 %6, %7
  br i1 %or.cond, label %8, label %20

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 143
  %10 = getelementptr inbounds [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], [4 x void (%struct.png_row_info_struct*, i8*, i8*)*]* %9, i64 0, i64 0
  %11 = load void (%struct.png_row_info_struct*, i8*, i8*)*, void (%struct.png_row_info_struct*, i8*, i8*)** %10, align 8
  %12 = icmp eq void (%struct.png_row_info_struct*, i8*, i8*)* %11, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %8
  call void @png_init_filter_functions(%struct.png_struct_def* %0)
  br label %14

14:                                               ; preds = %13, %8
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 143
  %16 = sub nsw i32 %4, 1
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], [4 x void (%struct.png_row_info_struct*, i8*, i8*)*]* %15, i64 0, i64 %17
  %19 = load void (%struct.png_row_info_struct*, i8*, i8*)*, void (%struct.png_row_info_struct*, i8*, i8*)** %18, align 8
  call void %19(%struct.png_row_info_struct* %1, i8* %2, i8* %3)
  br label %20

20:                                               ; preds = %14, %5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_do_read_transformations(%struct.png_struct_def* noalias %0, %struct.png_row_info_struct* %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.14.235, i32 0, i32 0)) #24
  unreachable

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 16384
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %14 = load i32, i32* %13, align 8
  %15 = and i32 %14, 64
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %12
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.15.236, i32 0, i32 0)) #24
  unreachable

18:                                               ; preds = %12, %7
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %20, 4096
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %58

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 2
  %25 = load i8, i8* %24, align 8
  %26 = zext i8 %25 to i32
  %27 = icmp eq i32 %26, 3
  br i1 %27, label %28, label %39

28:                                               ; preds = %23
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 1
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %33 = load %struct.png_color_struct*, %struct.png_color_struct** %32, align 8
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %37 = load i16, i16* %36, align 8
  %38 = zext i16 %37 to i32
  call void @png_do_expand_palette(%struct.png_struct_def* %0, %struct.png_row_info_struct* %1, i8* %31, %struct.png_color_struct* %33, i8* %35, i32 %38)
  br label %58

39:                                               ; preds = %23
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %41 = load i16, i16* %40, align 8
  %42 = zext i16 %41 to i32
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %54

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %46 = load i32, i32* %45, align 4
  %47 = and i32 %46, 33554432
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %54

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  %53 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 90
  call void @png_do_expand(%struct.png_row_info_struct* %1, i8* %52, %struct.png_color_16_struct* %53)
  br label %58

54:                                               ; preds = %44, %39
  %55 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 1
  call void @png_do_expand(%struct.png_row_info_struct* %1, i8* %57, %struct.png_color_16_struct* null)
  br label %58

58:                                               ; preds = %28, %54, %49, %18
  %59 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %60 = load i32, i32* %59, align 4
  %61 = and i32 %60, 262144
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %63, label %82

63:                                               ; preds = %58
  %64 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %65 = load i32, i32* %64, align 4
  %66 = and i32 %65, 128
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %82

68:                                               ; preds = %63
  %69 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 2
  %70 = load i8, i8* %69, align 8
  %71 = zext i8 %70 to i32
  %72 = icmp eq i32 %71, 6
  br i1 %72, label %78, label %73

73:                                               ; preds = %68
  %74 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 2
  %75 = load i8, i8* %74, align 8
  %76 = zext i8 %75 to i32
  %77 = icmp eq i32 %76, 4
  br i1 %77, label %78, label %82

78:                                               ; preds = %73, %68
  %79 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 1
  call void @png_do_strip_channel(%struct.png_row_info_struct* %1, i8* %81, i32 0)
  br label %82

82:                                               ; preds = %78, %73, %63, %58
  %83 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %84 = load i32, i32* %83, align 4
  %85 = and i32 %84, 6291456
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %106

87:                                               ; preds = %82
  %88 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %89 = load i8*, i8** %88, align 8
  %90 = getelementptr inbounds i8, i8* %89, i64 1
  %91 = call i32 @png_do_rgb_to_gray(%struct.png_struct_def* %0, %struct.png_row_info_struct* %1, i8* %90)
  %92 = icmp ne i32 %91, 0
  br i1 %92, label %93, label %106

93:                                               ; preds = %87
  %94 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 118
  store i8 1, i8* %94, align 8
  %95 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %96 = load i32, i32* %95, align 4
  %97 = and i32 %96, 6291456
  %98 = icmp eq i32 %97, 4194304
  br i1 %98, label %99, label %100

99:                                               ; preds = %93
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.16.237, i32 0, i32 0))
  br label %100

100:                                              ; preds = %99, %93
  %101 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %102 = load i32, i32* %101, align 4
  %103 = and i32 %102, 6291456
  %104 = icmp eq i32 %103, 2097152
  br i1 %104, label %105, label %106

105:                                              ; preds = %100
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.16.237, i32 0, i32 0)) #24
  unreachable

106:                                              ; preds = %87, %100, %82
  %107 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %108 = load i32, i32* %107, align 4
  %109 = and i32 %108, 16384
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %111, label %120

111:                                              ; preds = %106
  %112 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %113 = load i32, i32* %112, align 4
  %114 = and i32 %113, 2048
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %120

116:                                              ; preds = %111
  %117 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %118 = load i8*, i8** %117, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 1
  call void @png_do_gray_to_rgb(%struct.png_row_info_struct* %1, i8* %119)
  br label %120

120:                                              ; preds = %116, %111, %106
  %121 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %122 = load i32, i32* %121, align 4
  %123 = and i32 %122, 128
  %124 = icmp ne i32 %123, 0
  br i1 %124, label %125, label %129

125:                                              ; preds = %120
  %126 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %127 = load i8*, i8** %126, align 8
  %128 = getelementptr inbounds i8, i8* %127, i64 1
  call void @png_do_compose(%struct.png_row_info_struct* %1, i8* %128, %struct.png_struct_def* %0)
  br label %129

129:                                              ; preds = %125, %120
  %130 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %131 = load i32, i32* %130, align 4
  %132 = and i32 %131, 8192
  %133 = icmp ne i32 %132, 0
  br i1 %133, label %134, label %164

134:                                              ; preds = %129
  %135 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %136 = load i32, i32* %135, align 4
  %137 = and i32 %136, 6291456
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %164

139:                                              ; preds = %134
  %140 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %141 = load i32, i32* %140, align 4
  %142 = and i32 %141, 128
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %144, label %155

144:                                              ; preds = %139
  %145 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %146 = load i16, i16* %145, align 8
  %147 = zext i16 %146 to i32
  %148 = icmp ne i32 %147, 0
  br i1 %148, label %164, label %149

149:                                              ; preds = %144
  %150 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = and i32 %152, 4
  %154 = icmp ne i32 %153, 0
  br i1 %154, label %164, label %155

155:                                              ; preds = %149, %139
  %156 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = icmp ne i32 %158, 3
  br i1 %159, label %160, label %164

160:                                              ; preds = %155
  %161 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %162 = load i8*, i8** %161, align 8
  %163 = getelementptr inbounds i8, i8* %162, i64 1
  call void @png_do_gamma(%struct.png_row_info_struct* %1, i8* %163, %struct.png_struct_def* %0)
  br label %164

164:                                              ; preds = %160, %155, %149, %144, %134, %129
  %165 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %166 = load i32, i32* %165, align 4
  %167 = and i32 %166, 262144
  %168 = icmp ne i32 %167, 0
  br i1 %168, label %169, label %188

169:                                              ; preds = %164
  %170 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %171 = load i32, i32* %170, align 4
  %172 = and i32 %171, 128
  %173 = icmp ne i32 %172, 0
  br i1 %173, label %174, label %188

174:                                              ; preds = %169
  %175 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 2
  %176 = load i8, i8* %175, align 8
  %177 = zext i8 %176 to i32
  %178 = icmp eq i32 %177, 6
  br i1 %178, label %184, label %179

179:                                              ; preds = %174
  %180 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 2
  %181 = load i8, i8* %180, align 8
  %182 = zext i8 %181 to i32
  %183 = icmp eq i32 %182, 4
  br i1 %183, label %184, label %188

184:                                              ; preds = %179, %174
  %185 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %186 = load i8*, i8** %185, align 8
  %187 = getelementptr inbounds i8, i8* %186, i64 1
  call void @png_do_strip_channel(%struct.png_row_info_struct* %1, i8* %187, i32 0)
  br label %188

188:                                              ; preds = %184, %179, %169, %164
  %189 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %190 = load i32, i32* %189, align 4
  %191 = and i32 %190, 8388608
  %192 = icmp ne i32 %191, 0
  br i1 %192, label %193, label %203

193:                                              ; preds = %188
  %194 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 2
  %195 = load i8, i8* %194, align 8
  %196 = zext i8 %195 to i32
  %197 = and i32 %196, 4
  %198 = icmp ne i32 %197, 0
  br i1 %198, label %199, label %203

199:                                              ; preds = %193
  %200 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %201 = load i8*, i8** %200, align 8
  %202 = getelementptr inbounds i8, i8* %201, i64 1
  call void @png_do_encode_alpha(%struct.png_row_info_struct* %1, i8* %202, %struct.png_struct_def* %0)
  br label %203

203:                                              ; preds = %199, %193, %188
  %204 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %205 = load i32, i32* %204, align 4
  %206 = and i32 %205, 67108864
  %207 = icmp ne i32 %206, 0
  br i1 %207, label %208, label %212

208:                                              ; preds = %203
  %209 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %210 = load i8*, i8** %209, align 8
  %211 = getelementptr inbounds i8, i8* %210, i64 1
  call void @png_do_scale_16_to_8(%struct.png_row_info_struct* %1, i8* %211)
  br label %212

212:                                              ; preds = %208, %203
  %213 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %214 = load i32, i32* %213, align 4
  %215 = and i32 %214, 1024
  %216 = icmp ne i32 %215, 0
  br i1 %216, label %217, label %221

217:                                              ; preds = %212
  %218 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %219 = load i8*, i8** %218, align 8
  %220 = getelementptr inbounds i8, i8* %219, i64 1
  call void @png_do_chop(%struct.png_row_info_struct* %1, i8* %220)
  br label %221

221:                                              ; preds = %217, %212
  %222 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %223 = load i32, i32* %222, align 4
  %224 = and i32 %223, 64
  %225 = icmp ne i32 %224, 0
  br i1 %225, label %226, label %238

226:                                              ; preds = %221
  %227 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %228 = load i8*, i8** %227, align 8
  %229 = getelementptr inbounds i8, i8* %228, i64 1
  %230 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 108
  %231 = load i8*, i8** %230, align 8
  %232 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 109
  %233 = load i8*, i8** %232, align 8
  call void @png_do_quantize(%struct.png_row_info_struct* %1, i8* %229, i8* %231, i8* %233)
  %234 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 1
  %235 = load i64, i64* %234, align 8
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %237, label %238

237:                                              ; preds = %226
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.17.238, i32 0, i32 0)) #24
  unreachable

238:                                              ; preds = %226, %221
  %239 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %240 = load i32, i32* %239, align 4
  %241 = and i32 %240, 512
  %242 = icmp ne i32 %241, 0
  br i1 %242, label %243, label %247

243:                                              ; preds = %238
  %244 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %245 = load i8*, i8** %244, align 8
  %246 = getelementptr inbounds i8, i8* %245, i64 1
  call void @png_do_expand_16(%struct.png_row_info_struct* %1, i8* %246)
  br label %247

247:                                              ; preds = %243, %238
  %248 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %249 = load i32, i32* %248, align 4
  %250 = and i32 %249, 16384
  %251 = icmp ne i32 %250, 0
  br i1 %251, label %252, label %261

252:                                              ; preds = %247
  %253 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %254 = load i32, i32* %253, align 4
  %255 = and i32 %254, 2048
  %256 = icmp ne i32 %255, 0
  br i1 %256, label %257, label %261

257:                                              ; preds = %252
  %258 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %259 = load i8*, i8** %258, align 8
  %260 = getelementptr inbounds i8, i8* %259, i64 1
  call void @png_do_gray_to_rgb(%struct.png_row_info_struct* %1, i8* %260)
  br label %261

261:                                              ; preds = %257, %252, %247
  %262 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %263 = load i32, i32* %262, align 4
  %264 = and i32 %263, 32
  %265 = icmp ne i32 %264, 0
  br i1 %265, label %266, label %270

266:                                              ; preds = %261
  %267 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %268 = load i8*, i8** %267, align 8
  %269 = getelementptr inbounds i8, i8* %268, i64 1
  call void @png_do_invert(%struct.png_row_info_struct* %1, i8* %269)
  br label %270

270:                                              ; preds = %266, %261
  %271 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %272 = load i32, i32* %271, align 4
  %273 = and i32 %272, 524288
  %274 = icmp ne i32 %273, 0
  br i1 %274, label %275, label %279

275:                                              ; preds = %270
  %276 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %277 = load i8*, i8** %276, align 8
  %278 = getelementptr inbounds i8, i8* %277, i64 1
  call void @png_do_read_invert_alpha(%struct.png_row_info_struct* %1, i8* %278)
  br label %279

279:                                              ; preds = %275, %270
  %280 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %281 = load i32, i32* %280, align 4
  %282 = and i32 %281, 8
  %283 = icmp ne i32 %282, 0
  br i1 %283, label %284, label %289

284:                                              ; preds = %279
  %285 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %286 = load i8*, i8** %285, align 8
  %287 = getelementptr inbounds i8, i8* %286, i64 1
  %288 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 88
  call void @png_do_unshift(%struct.png_row_info_struct* %1, i8* %287, %struct.png_color_8_struct* %288)
  br label %289

289:                                              ; preds = %284, %279
  %290 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %291 = load i32, i32* %290, align 4
  %292 = and i32 %291, 4
  %293 = icmp ne i32 %292, 0
  br i1 %293, label %294, label %298

294:                                              ; preds = %289
  %295 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %296 = load i8*, i8** %295, align 8
  %297 = getelementptr inbounds i8, i8* %296, i64 1
  call void @png_do_unpack(%struct.png_row_info_struct* %1, i8* %297)
  br label %298

298:                                              ; preds = %294, %289
  %299 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 2
  %300 = load i8, i8* %299, align 8
  %301 = zext i8 %300 to i32
  %302 = icmp eq i32 %301, 3
  br i1 %302, label %303, label %308

303:                                              ; preds = %298
  %304 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 54
  %305 = load i32, i32* %304, align 4
  %306 = icmp sge i32 %305, 0
  br i1 %306, label %307, label %308

307:                                              ; preds = %303
  call void bitcast (void (%struct.png_struct_def.199*, %struct.png_row_info_struct*)* @png_do_check_palette_indexes to void (%struct.png_struct_def*, %struct.png_row_info_struct*)*)(%struct.png_struct_def* %0, %struct.png_row_info_struct* %1)
  br label %308

308:                                              ; preds = %307, %303, %298
  %309 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %310 = load i32, i32* %309, align 4
  %311 = and i32 %310, 1
  %312 = icmp ne i32 %311, 0
  br i1 %312, label %313, label %317

313:                                              ; preds = %308
  %314 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %315 = load i8*, i8** %314, align 8
  %316 = getelementptr inbounds i8, i8* %315, i64 1
  call void @png_do_bgr(%struct.png_row_info_struct* %1, i8* %316)
  br label %317

317:                                              ; preds = %313, %308
  %318 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %319 = load i32, i32* %318, align 4
  %320 = and i32 %319, 65536
  %321 = icmp ne i32 %320, 0
  br i1 %321, label %322, label %326

322:                                              ; preds = %317
  %323 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %324 = load i8*, i8** %323, align 8
  %325 = getelementptr inbounds i8, i8* %324, i64 1
  call void @png_do_packswap(%struct.png_row_info_struct* %1, i8* %325)
  br label %326

326:                                              ; preds = %322, %317
  %327 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %328 = load i32, i32* %327, align 4
  %329 = and i32 %328, 32768
  %330 = icmp ne i32 %329, 0
  br i1 %330, label %331, label %340

331:                                              ; preds = %326
  %332 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %333 = load i8*, i8** %332, align 8
  %334 = getelementptr inbounds i8, i8* %333, i64 1
  %335 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 71
  %336 = load i16, i16* %335, align 2
  %337 = zext i16 %336 to i32
  %338 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %339 = load i32, i32* %338, align 8
  call void @png_do_read_filler(%struct.png_row_info_struct* %1, i8* %334, i32 %337, i32 %339)
  br label %340

340:                                              ; preds = %331, %326
  %341 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %342 = load i32, i32* %341, align 4
  %343 = and i32 %342, 131072
  %344 = icmp ne i32 %343, 0
  br i1 %344, label %345, label %349

345:                                              ; preds = %340
  %346 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %347 = load i8*, i8** %346, align 8
  %348 = getelementptr inbounds i8, i8* %347, i64 1
  call void @png_do_read_swap_alpha(%struct.png_row_info_struct* %1, i8* %348)
  br label %349

349:                                              ; preds = %345, %340
  %350 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %351 = load i32, i32* %350, align 4
  %352 = and i32 %351, 16
  %353 = icmp ne i32 %352, 0
  br i1 %353, label %354, label %358

354:                                              ; preds = %349
  %355 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %356 = load i8*, i8** %355, align 8
  %357 = getelementptr inbounds i8, i8* %356, i64 1
  call void @png_do_swap(%struct.png_row_info_struct* %1, i8* %357)
  br label %358

358:                                              ; preds = %354, %349
  %359 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %360 = load i32, i32* %359, align 4
  %361 = and i32 %360, 1048576
  %362 = icmp ne i32 %361, 0
  br i1 %362, label %363, label %427

363:                                              ; preds = %358
  %364 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 10
  %365 = load void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)*, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)** %364, align 8
  %366 = icmp ne void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)* %365, null
  br i1 %366, label %367, label %373

367:                                              ; preds = %363
  %368 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 10
  %369 = load void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)*, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)** %368, align 8
  %370 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %371 = load i8*, i8** %370, align 8
  %372 = getelementptr inbounds i8, i8* %371, i64 1
  call void %369(%struct.png_struct_def* %0, %struct.png_row_info_struct* %1, i8* %372)
  br label %373

373:                                              ; preds = %367, %363
  %374 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 13
  %375 = load i8, i8* %374, align 8
  %376 = zext i8 %375 to i32
  %377 = icmp ne i32 %376, 0
  br i1 %377, label %378, label %382

378:                                              ; preds = %373
  %379 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 13
  %380 = load i8, i8* %379, align 8
  %381 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 3
  store i8 %380, i8* %381, align 1
  br label %382

382:                                              ; preds = %378, %373
  %383 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 14
  %384 = load i8, i8* %383, align 1
  %385 = zext i8 %384 to i32
  %386 = icmp ne i32 %385, 0
  br i1 %386, label %387, label %391

387:                                              ; preds = %382
  %388 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 14
  %389 = load i8, i8* %388, align 1
  %390 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 4
  store i8 %389, i8* %390, align 2
  br label %391

391:                                              ; preds = %387, %382
  %392 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 3
  %393 = load i8, i8* %392, align 1
  %394 = zext i8 %393 to i32
  %395 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 4
  %396 = load i8, i8* %395, align 2
  %397 = zext i8 %396 to i32
  %398 = mul nsw i32 %394, %397
  %399 = trunc i32 %398 to i8
  %400 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 5
  store i8 %399, i8* %400, align 1
  %401 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 5
  %402 = load i8, i8* %401, align 1
  %403 = zext i8 %402 to i32
  %404 = icmp sge i32 %403, 8
  br i1 %404, label %405, label %414

405:                                              ; preds = %391
  %406 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 0
  %407 = load i32, i32* %406, align 8
  %408 = zext i32 %407 to i64
  %409 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 5
  %410 = load i8, i8* %409, align 1
  %411 = zext i8 %410 to i64
  %412 = lshr i64 %411, 3
  %413 = mul i64 %408, %412
  br label %424

414:                                              ; preds = %391
  %415 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 0
  %416 = load i32, i32* %415, align 8
  %417 = zext i32 %416 to i64
  %418 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 5
  %419 = load i8, i8* %418, align 1
  %420 = zext i8 %419 to i64
  %421 = mul i64 %417, %420
  %422 = add i64 %421, 7
  %423 = lshr i64 %422, 3
  br label %424

424:                                              ; preds = %414, %405
  %425 = phi i64 [ %413, %405 ], [ %423, %414 ]
  %426 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 1
  store i64 %425, i64* %426, align 8
  br label %427

427:                                              ; preds = %424, %358
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_do_read_interlace(%struct.png_row_info_struct* %0, i8* %1, i32 %2, i32 %3) #11 {
  %5 = alloca [8 x i8], align 1
  %6 = icmp ne i8* %1, null
  %7 = icmp ne %struct.png_row_info_struct* %0, null
  %or.cond = select i1 %6, i1 %7, i1 false
  br i1 %or.cond, label %8, label %277

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = sext i32 %2 to i64
  %12 = getelementptr inbounds [7 x i32], [7 x i32]* @png_do_read_interlace.png_pass_inc, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = mul i32 %10, %13
  %15 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  switch i32 %17, label %218 [
    i32 1, label %18
    i32 2, label %82
    i32 4, label %150
  ]

18:                                               ; preds = %8
  %19 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = sub i32 %20, 1
  %22 = lshr i32 %21, 3
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %1, i64 %23
  %25 = sub i32 %14, 1
  %26 = lshr i32 %25, 3
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %1, i64 %27
  %29 = sext i32 %2 to i64
  %30 = getelementptr inbounds [7 x i32], [7 x i32]* @png_do_read_interlace.png_pass_inc, i64 0, i64 %29
  %31 = load i32, i32* %30, align 4
  %32 = and i32 %3, 65536
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %41

34:                                               ; preds = %18
  %35 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = add i32 %36, 7
  %38 = and i32 %37, 7
  %39 = add i32 %14, 7
  %40 = and i32 %39, 7
  br label %50

41:                                               ; preds = %18
  %42 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = add i32 %43, 7
  %45 = and i32 %44, 7
  %46 = sub i32 7, %45
  %47 = add i32 %14, 7
  %48 = and i32 %47, 7
  %49 = sub i32 7, %48
  br label %50

50:                                               ; preds = %41, %34
  %.017 = phi i32 [ -1, %34 ], [ 1, %41 ]
  %.016 = phi i32 [ 0, %34 ], [ 7, %41 ]
  %.015 = phi i32 [ 7, %34 ], [ 0, %41 ]
  %.012 = phi i32 [ %40, %34 ], [ %49, %41 ]
  %.09 = phi i32 [ %38, %34 ], [ %46, %41 ]
  %51 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %52 = icmp slt i32 0, %31
  %53 = load i32, i32* %51, align 8
  %54 = icmp ult i32 0, %53
  br i1 %54, label %.lr.ph78, label %.loopexit53

.lr.ph78:                                         ; preds = %50
  br label %55

55:                                               ; preds = %.lr.ph78, %75
  %.0576 = phi i8* [ %24, %.lr.ph78 ], [ %.16, %75 ]
  %.0775 = phi i8* [ %28, %.lr.ph78 ], [ %.18.lcssa, %75 ]
  %.11074 = phi i32 [ %.09, %.lr.ph78 ], [ %.211, %75 ]
  %.11373 = phi i32 [ %.012, %.lr.ph78 ], [ %.214.lcssa, %75 ]
  %.02072 = phi i32 [ 0, %.lr.ph78 ], [ %79, %75 ]
  %56 = load i8, i8* %.0576, align 1
  %57 = zext i8 %56 to i32
  %58 = ashr i32 %57, %.11074
  %59 = and i32 %58, 1
  %60 = trunc i32 %59 to i8
  %61 = zext i8 %60 to i32
  br i1 %52, label %.lr.ph67, label %75

.lr.ph67:                                         ; preds = %55
  br label %62

62:                                               ; preds = %.lr.ph67, %62
  %lsr.iv111 = phi i32 [ %31, %.lr.ph67 ], [ %lsr.iv.next112, %62 ]
  %.1865 = phi i8* [ %.0775, %.lr.ph67 ], [ %.2, %62 ]
  %.21464 = phi i32 [ %.11373, %.lr.ph67 ], [ %.3, %62 ]
  %63 = load i8, i8* %.1865, align 1
  %64 = zext i8 %63 to i32
  %65 = sub i32 7, %.21464
  %66 = ashr i32 32639, %65
  %67 = and i32 %64, %66
  %68 = shl i32 %61, %.21464
  %69 = or i32 %67, %68
  %70 = and i32 %69, 255
  %71 = trunc i32 %70 to i8
  store i8 %71, i8* %.1865, align 1
  %72 = icmp eq i32 %.21464, %.016
  %73 = getelementptr inbounds i8, i8* %.1865, i32 -1
  %74 = add nsw i32 %.21464, %.017
  %.3 = select i1 %72, i32 %.015, i32 %74
  %.2 = select i1 %72, i8* %73, i8* %.1865
  %lsr.iv.next112 = add i32 %lsr.iv111, -1
  %exitcond71 = icmp ne i32 %lsr.iv.next112, 0
  br i1 %exitcond71, label %62, label %._crit_edge68

._crit_edge68:                                    ; preds = %62
  %split69 = phi i32 [ %.3, %62 ]
  %split70 = phi i8* [ %.2, %62 ]
  br label %75

75:                                               ; preds = %._crit_edge68, %55
  %.214.lcssa = phi i32 [ %split69, %._crit_edge68 ], [ %.11373, %55 ]
  %.18.lcssa = phi i8* [ %split70, %._crit_edge68 ], [ %.0775, %55 ]
  %76 = icmp eq i32 %.11074, %.016
  %77 = getelementptr inbounds i8, i8* %.0576, i32 -1
  %78 = add nsw i32 %.11074, %.017
  %.211 = select i1 %76, i32 %.015, i32 %78
  %.16 = select i1 %76, i8* %77, i8* %.0576
  %79 = add nuw i32 %.02072, 1
  %80 = load i32, i32* %51, align 8
  %81 = icmp ult i32 %79, %80
  br i1 %81, label %55, label %..loopexit53_crit_edge

82:                                               ; preds = %8
  %83 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %84 = load i32, i32* %83, align 8
  %85 = sub i32 %84, 1
  %86 = lshr i32 %85, 2
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %1, i64 %87
  %89 = sub i32 %14, 1
  %90 = lshr i32 %89, 2
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %1, i64 %91
  %93 = sext i32 %2 to i64
  %94 = getelementptr inbounds [7 x i32], [7 x i32]* @png_do_read_interlace.png_pass_inc, i64 0, i64 %93
  %95 = load i32, i32* %94, align 4
  %96 = and i32 %3, 65536
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %107

98:                                               ; preds = %82
  %99 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %100 = load i32, i32* %99, align 8
  %101 = add i32 %100, 3
  %102 = and i32 %101, 3
  %103 = shl i32 %102, 1
  %104 = add i32 %14, 3
  %105 = and i32 %104, 3
  %106 = shl i32 %105, 1
  br label %118

107:                                              ; preds = %82
  %108 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %109 = load i32, i32* %108, align 8
  %110 = add i32 %109, 3
  %111 = and i32 %110, 3
  %112 = sub i32 3, %111
  %113 = shl i32 %112, 1
  %114 = add i32 %14, 3
  %115 = and i32 %114, 3
  %116 = sub i32 3, %115
  %117 = shl i32 %116, 1
  br label %118

118:                                              ; preds = %107, %98
  %.037 = phi i32 [ -2, %98 ], [ 2, %107 ]
  %.036 = phi i32 [ 0, %98 ], [ 6, %107 ]
  %.035 = phi i32 [ 6, %98 ], [ 0, %107 ]
  %.031 = phi i32 [ %106, %98 ], [ %117, %107 ]
  %.028 = phi i32 [ %103, %98 ], [ %113, %107 ]
  %119 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %120 = icmp slt i32 0, %95
  %121 = load i32, i32* %119, align 8
  %122 = icmp ult i32 0, %121
  br i1 %122, label %.lr.ph94, label %.loopexit54

.lr.ph94:                                         ; preds = %118
  br label %123

123:                                              ; preds = %.lr.ph94, %143
  %.02392 = phi i8* [ %88, %.lr.ph94 ], [ %.124, %143 ]
  %.02591 = phi i8* [ %92, %.lr.ph94 ], [ %.126.lcssa, %143 ]
  %.12990 = phi i32 [ %.028, %.lr.ph94 ], [ %.230, %143 ]
  %.13289 = phi i32 [ %.031, %.lr.ph94 ], [ %.233.lcssa, %143 ]
  %.03988 = phi i32 [ 0, %.lr.ph94 ], [ %147, %143 ]
  %124 = load i8, i8* %.02392, align 1
  %125 = zext i8 %124 to i32
  %126 = ashr i32 %125, %.12990
  %127 = and i32 %126, 3
  %128 = trunc i32 %127 to i8
  %129 = zext i8 %128 to i32
  br i1 %120, label %.lr.ph83, label %143

.lr.ph83:                                         ; preds = %123
  br label %130

130:                                              ; preds = %.lr.ph83, %130
  %lsr.iv113 = phi i32 [ %95, %.lr.ph83 ], [ %lsr.iv.next114, %130 ]
  %.12681 = phi i8* [ %.02591, %.lr.ph83 ], [ %.227, %130 ]
  %.23380 = phi i32 [ %.13289, %.lr.ph83 ], [ %.334, %130 ]
  %131 = load i8, i8* %.12681, align 1
  %132 = zext i8 %131 to i32
  %133 = sub i32 6, %.23380
  %134 = ashr i32 16191, %133
  %135 = and i32 %132, %134
  %136 = shl i32 %129, %.23380
  %137 = or i32 %135, %136
  %138 = and i32 %137, 255
  %139 = trunc i32 %138 to i8
  store i8 %139, i8* %.12681, align 1
  %140 = icmp eq i32 %.23380, %.036
  %141 = getelementptr inbounds i8, i8* %.12681, i32 -1
  %142 = add nsw i32 %.23380, %.037
  %.334 = select i1 %140, i32 %.035, i32 %142
  %.227 = select i1 %140, i8* %141, i8* %.12681
  %lsr.iv.next114 = add i32 %lsr.iv113, -1
  %exitcond87 = icmp ne i32 %lsr.iv.next114, 0
  br i1 %exitcond87, label %130, label %._crit_edge84

._crit_edge84:                                    ; preds = %130
  %split85 = phi i32 [ %.334, %130 ]
  %split86 = phi i8* [ %.227, %130 ]
  br label %143

143:                                              ; preds = %._crit_edge84, %123
  %.233.lcssa = phi i32 [ %split85, %._crit_edge84 ], [ %.13289, %123 ]
  %.126.lcssa = phi i8* [ %split86, %._crit_edge84 ], [ %.02591, %123 ]
  %144 = icmp eq i32 %.12990, %.036
  %145 = getelementptr inbounds i8, i8* %.02392, i32 -1
  %146 = add nsw i32 %.12990, %.037
  %.230 = select i1 %144, i32 %.035, i32 %146
  %.124 = select i1 %144, i8* %145, i8* %.02392
  %147 = add nuw i32 %.03988, 1
  %148 = load i32, i32* %119, align 8
  %149 = icmp ult i32 %147, %148
  br i1 %149, label %123, label %..loopexit54_crit_edge

150:                                              ; preds = %8
  %151 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %152 = load i32, i32* %151, align 8
  %153 = sub i32 %152, 1
  %154 = lshr i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds i8, i8* %1, i64 %155
  %157 = sub i32 %14, 1
  %158 = lshr i32 %157, 1
  %159 = zext i32 %158 to i64
  %160 = getelementptr inbounds i8, i8* %1, i64 %159
  %161 = sext i32 %2 to i64
  %162 = getelementptr inbounds [7 x i32], [7 x i32]* @png_do_read_interlace.png_pass_inc, i64 0, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = and i32 %3, 65536
  %165 = icmp ne i32 %164, 0
  br i1 %165, label %166, label %175

166:                                              ; preds = %150
  %167 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %168 = load i32, i32* %167, align 8
  %169 = add i32 %168, 1
  %170 = and i32 %169, 1
  %171 = shl i32 %170, 2
  %172 = add i32 %14, 1
  %173 = and i32 %172, 1
  %174 = shl i32 %173, 2
  br label %186

175:                                              ; preds = %150
  %176 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %177 = load i32, i32* %176, align 8
  %178 = add i32 %177, 1
  %179 = and i32 %178, 1
  %180 = sub i32 1, %179
  %181 = shl i32 %180, 2
  %182 = add i32 %14, 1
  %183 = and i32 %182, 1
  %184 = sub i32 1, %183
  %185 = shl i32 %184, 2
  br label %186

186:                                              ; preds = %175, %166
  %.045 = phi i32 [ %171, %166 ], [ %181, %175 ]
  %.040 = phi i32 [ %174, %166 ], [ %185, %175 ]
  %.038 = phi i32 [ 4, %166 ], [ 0, %175 ]
  %.022 = phi i32 [ 0, %166 ], [ 4, %175 ]
  %.019 = phi i32 [ -4, %166 ], [ 4, %175 ]
  %187 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %188 = icmp slt i32 0, %163
  %189 = load i32, i32* %187, align 8
  %190 = icmp ult i32 0, %189
  br i1 %190, label %.lr.ph110, label %.loopexit55

.lr.ph110:                                        ; preds = %186
  br label %191

191:                                              ; preds = %.lr.ph110, %211
  %.018108 = phi i32 [ 0, %.lr.ph110 ], [ %215, %211 ]
  %.141107 = phi i32 [ %.040, %.lr.ph110 ], [ %.242.lcssa, %211 ]
  %.146106 = phi i32 [ %.045, %.lr.ph110 ], [ %.247, %211 ]
  %.048105 = phi i8* [ %156, %.lr.ph110 ], [ %.149, %211 ]
  %.050104 = phi i8* [ %160, %.lr.ph110 ], [ %.151.lcssa, %211 ]
  %192 = load i8, i8* %.048105, align 1
  %193 = zext i8 %192 to i32
  %194 = ashr i32 %193, %.146106
  %195 = and i32 %194, 15
  %196 = trunc i32 %195 to i8
  %197 = zext i8 %196 to i32
  br i1 %188, label %.lr.ph99, label %211

.lr.ph99:                                         ; preds = %191
  br label %198

198:                                              ; preds = %.lr.ph99, %198
  %lsr.iv115 = phi i32 [ %163, %.lr.ph99 ], [ %lsr.iv.next116, %198 ]
  %.24296 = phi i32 [ %.141107, %.lr.ph99 ], [ %.343, %198 ]
  %.15195 = phi i8* [ %.050104, %.lr.ph99 ], [ %.252, %198 ]
  %199 = load i8, i8* %.15195, align 1
  %200 = zext i8 %199 to i32
  %201 = sub i32 4, %.24296
  %202 = ashr i32 3855, %201
  %203 = and i32 %200, %202
  %204 = shl i32 %197, %.24296
  %205 = or i32 %203, %204
  %206 = and i32 %205, 255
  %207 = trunc i32 %206 to i8
  store i8 %207, i8* %.15195, align 1
  %208 = icmp eq i32 %.24296, %.022
  %209 = getelementptr inbounds i8, i8* %.15195, i32 -1
  %210 = add nsw i32 %.24296, %.019
  %.252 = select i1 %208, i8* %209, i8* %.15195
  %.343 = select i1 %208, i32 %.038, i32 %210
  %lsr.iv.next116 = add i32 %lsr.iv115, -1
  %exitcond103 = icmp ne i32 %lsr.iv.next116, 0
  br i1 %exitcond103, label %198, label %._crit_edge100

._crit_edge100:                                   ; preds = %198
  %split101 = phi i8* [ %.252, %198 ]
  %split102 = phi i32 [ %.343, %198 ]
  br label %211

211:                                              ; preds = %._crit_edge100, %191
  %.151.lcssa = phi i8* [ %split101, %._crit_edge100 ], [ %.050104, %191 ]
  %.242.lcssa = phi i32 [ %split102, %._crit_edge100 ], [ %.141107, %191 ]
  %212 = icmp eq i32 %.146106, %.022
  %213 = getelementptr inbounds i8, i8* %.048105, i32 -1
  %214 = add nsw i32 %.146106, %.019
  %.149 = select i1 %212, i8* %213, i8* %.048105
  %.247 = select i1 %212, i32 %.038, i32 %214
  %215 = add nuw i32 %.018108, 1
  %216 = load i32, i32* %187, align 8
  %217 = icmp ult i32 %215, %216
  br i1 %217, label %191, label %..loopexit55_crit_edge

218:                                              ; preds = %8
  %219 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %220 = load i8, i8* %219, align 1
  %221 = zext i8 %220 to i32
  %222 = ashr i32 %221, 3
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %225 = load i32, i32* %224, align 8
  %226 = sub i32 %225, 1
  %227 = zext i32 %226 to i64
  %228 = mul i64 %227, %223
  %229 = getelementptr inbounds i8, i8* %1, i64 %228
  %230 = sub i32 %14, 1
  %231 = zext i32 %230 to i64
  %232 = mul i64 %231, %223
  %233 = getelementptr inbounds i8, i8* %1, i64 %232
  %234 = sext i32 %2 to i64
  %235 = getelementptr inbounds [7 x i32], [7 x i32]* @png_do_read_interlace.png_pass_inc, i64 0, i64 %234
  %236 = load i32, i32* %235, align 4
  %237 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %238 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i32 0, i32 0
  %239 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i32 0, i32 0
  %240 = sub i64 0, %223
  %241 = icmp slt i32 0, %236
  %242 = sub i64 0, %223
  %243 = load i32, i32* %237, align 8
  %244 = icmp ult i32 0, %243
  br i1 %244, label %.lr.ph62, label %.loopexit

.lr.ph62:                                         ; preds = %218
  br label %245

245:                                              ; preds = %.lr.ph62, %248
  %.0160 = phi i32 [ 0, %.lr.ph62 ], [ %250, %248 ]
  %.0259 = phi i8* [ %233, %.lr.ph62 ], [ %.1.lcssa, %248 ]
  %.0358 = phi i8* [ %229, %.lr.ph62 ], [ %249, %248 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %238, i8* align 1 %.0358, i64 %223, i1 false)
  br i1 %241, label %.lr.ph, label %248

.lr.ph:                                           ; preds = %245
  br label %246

246:                                              ; preds = %.lr.ph, %246
  %lsr.iv = phi i32 [ %236, %.lr.ph ], [ %lsr.iv.next, %246 ]
  %.156 = phi i8* [ %.0259, %.lr.ph ], [ %247, %246 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %.156, i8* align 1 %239, i64 %223, i1 false)
  %247 = getelementptr inbounds i8, i8* %.156, i64 %240
  %lsr.iv.next = add i32 %lsr.iv, -1
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  br i1 %exitcond, label %246, label %._crit_edge

._crit_edge:                                      ; preds = %246
  %split = phi i8* [ %247, %246 ]
  br label %248

248:                                              ; preds = %._crit_edge, %245
  %.1.lcssa = phi i8* [ %split, %._crit_edge ], [ %.0259, %245 ]
  %249 = getelementptr inbounds i8, i8* %.0358, i64 %242
  %250 = add nuw i32 %.0160, 1
  %251 = load i32, i32* %237, align 8
  %252 = icmp ult i32 %250, %251
  br i1 %252, label %245, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %248
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %218
  br label %253

..loopexit53_crit_edge:                           ; preds = %75
  br label %.loopexit53

.loopexit53:                                      ; preds = %..loopexit53_crit_edge, %50
  br label %253

..loopexit54_crit_edge:                           ; preds = %143
  br label %.loopexit54

.loopexit54:                                      ; preds = %..loopexit54_crit_edge, %118
  br label %253

..loopexit55_crit_edge:                           ; preds = %211
  br label %.loopexit55

.loopexit55:                                      ; preds = %..loopexit55_crit_edge, %186
  br label %253

253:                                              ; preds = %.loopexit55, %.loopexit54, %.loopexit53, %.loopexit
  %254 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  store i32 %14, i32* %254, align 8
  %255 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i32
  %258 = icmp sge i32 %257, 8
  br i1 %258, label %259, label %266

259:                                              ; preds = %253
  %260 = zext i32 %14 to i64
  %261 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %262 = load i8, i8* %261, align 1
  %263 = zext i8 %262 to i64
  %264 = lshr i64 %263, 3
  %265 = mul i64 %260, %264
  br label %274

266:                                              ; preds = %253
  %267 = zext i32 %14 to i64
  %268 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %269 = load i8, i8* %268, align 1
  %270 = zext i8 %269 to i64
  %271 = mul i64 %267, %270
  %272 = add i64 %271, 7
  %273 = lshr i64 %272, 3
  br label %274

274:                                              ; preds = %266, %259
  %275 = phi i64 [ %265, %259 ], [ %273, %266 ]
  %276 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %275, i64* %276, align 8
  br label %277

277:                                              ; preds = %274, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_push_have_row(%struct.png_struct_def* noalias %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 94
  %4 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %3, align 8
  %5 = icmp ne void (%struct.png_struct_def*, i8*, i32, i32)* %4, null
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 94
  %8 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %7, align 8
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  call void %8(%struct.png_struct_def* %0, i8* %1, i32 %10, i32 %13)
  br label %14

14:                                               ; preds = %6, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_push_finish_row(%struct.png_struct_def* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* %2, align 4
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 39
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %6, %8
  br i1 %9, label %122, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 58
  %12 = load i8, i8* %11, align 4
  %13 = zext i8 %12 to i32
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %122

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  store i32 0, i32* %16, align 4
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 45
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 41
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 0, i64 %21, i1 false)
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 39
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 42
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 38
  %41 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %42 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 39
  %45 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 42
  %.promoted = load i8, i8* %24, align 1
  %46 = trunc i32 7 to i8
  br label %.critedge

.critedge:                                        ; preds = %.critedge.backedge, %15
  %47 = phi i8 [ %75, %.critedge.backedge ], [ %.promoted, %15 ]
  %48 = add i8 %47, 1
  %49 = zext i8 %48 to i32
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %54

51:                                               ; preds = %.critedge
  %52 = load i32, i32* %26, align 8
  %53 = icmp ult i32 %52, 5
  br i1 %53, label %66, label %54

54:                                               ; preds = %51, %.critedge
  %55 = zext i8 %48 to i32
  %56 = icmp eq i32 %55, 3
  br i1 %56, label %57, label %60

57:                                               ; preds = %54
  %58 = load i32, i32* %28, align 8
  %59 = icmp ult i32 %58, 3
  br i1 %59, label %66, label %60

60:                                               ; preds = %57, %54
  %61 = zext i8 %48 to i32
  %62 = icmp eq i32 %61, 5
  br i1 %62, label %63, label %68

63:                                               ; preds = %60
  %64 = load i32, i32* %30, align 8
  %65 = icmp ult i32 %64, 2
  br i1 %65, label %66, label %68

66:                                               ; preds = %63, %57, %51
  %67 = add i8 %48, 1
  br label %68

68:                                               ; preds = %66, %63, %60
  %69 = phi i8 [ %67, %66 ], [ %48, %63 ], [ %48, %60 ]
  %70 = zext i8 %69 to i32
  %71 = icmp sgt i32 %70, 7
  br i1 %71, label %72, label %74

72:                                               ; preds = %68
  %73 = add i8 %69, -1
  br label %74

74:                                               ; preds = %72, %68
  %75 = phi i8 [ %73, %72 ], [ %69, %68 ]
  %76 = icmp uge i8 %75, %46
  br i1 %76, label %.loopexit, label %77

77:                                               ; preds = %74
  %78 = load i32, i32* %22, align 8
  %79 = zext i8 %75 to i64
  %80 = getelementptr inbounds [7 x i8], [7 x i8]* @png_read_push_finish_row.png_pass_inc, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = add i32 %78, %82
  %84 = sub i32 %83, 1
  %85 = zext i8 %75 to i64
  %86 = getelementptr inbounds [7 x i8], [7 x i8]* @png_read_push_finish_row.png_pass_start, i64 0, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = sub i32 %84, %88
  %90 = zext i8 %75 to i64
  %91 = getelementptr inbounds [7 x i8], [7 x i8]* @png_read_push_finish_row.png_pass_inc, i64 0, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = udiv i32 %89, %93
  store i32 %94, i32* %38, align 8
  %95 = load i32, i32* %39, align 4
  %96 = and i32 %95, 2
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %.loopexit, label %98

98:                                               ; preds = %77
  %99 = load i32, i32* %40, align 4
  %100 = zext i8 %75 to i64
  %101 = getelementptr inbounds [7 x i8], [7 x i8]* @png_read_push_finish_row.png_pass_yinc, i64 0, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = add i32 %99, %103
  %105 = sub i32 %104, 1
  %106 = zext i8 %75 to i64
  %107 = getelementptr inbounds [7 x i8], [7 x i8]* @png_read_push_finish_row.png_pass_ystart, i64 0, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = sub i32 %105, %109
  %111 = zext i8 %75 to i64
  %112 = getelementptr inbounds [7 x i8], [7 x i8]* @png_read_push_finish_row.png_pass_yinc, i64 0, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = udiv i32 %110, %114
  store i32 %115, i32* %44, align 8
  %116 = load i32, i32* %45, align 8
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %.critedge.backedge, label %118

118:                                              ; preds = %98
  %119 = load i32, i32* %23, align 8
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %.critedge.backedge, label %.loopexit

.critedge.backedge:                               ; preds = %118, %98
  br label %.critedge

.loopexit:                                        ; preds = %77, %74, %118
  %121 = phi i8 [ %75, %77 ], [ %75, %74 ], [ %75, %118 ]
  store i8 %121, i8* %24, align 1
  br label %122

122:                                              ; preds = %.loopexit, %1, %10
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_expand_palette(%struct.png_struct_def* noalias %0, %struct.png_row_info_struct* %1, i8* %2, %struct.png_color_struct* %3, i8* %4, i32 %5) #11 {
  %7 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 2
  %10 = load i8, i8* %9, align 8
  %11 = zext i8 %10 to i32
  %12 = icmp eq i32 %11, 3
  br i1 %12, label %13, label %177

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 3
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = icmp slt i32 %16, 8
  br i1 %17, label %18, label %90

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 3
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  switch i32 %21, label %85 [
    i32 1, label %22
    i32 2, label %47
    i32 4, label %67
  ]

22:                                               ; preds = %18
  %23 = sub i32 %8, 1
  %24 = lshr i32 %23, 3
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %2, i64 %25
  %27 = zext i32 %8 to i64
  %28 = getelementptr inbounds i8, i8* %2, i64 %27
  %29 = getelementptr inbounds i8, i8* %28, i64 -1
  %30 = add i32 %8, 7
  %31 = and i32 %30, 7
  %32 = sub nsw i32 7, %31
  %33 = icmp ult i32 0, %8
  br i1 %33, label %.lr.ph37, label %.loopexit

.lr.ph37:                                         ; preds = %22
  br label %34

34:                                               ; preds = %.lr.ph37, %42
  %lsr.iv59 = phi i32 [ %8, %.lr.ph37 ], [ %lsr.iv.next60, %42 ]
  %.0133 = phi i8* [ %29, %.lr.ph37 ], [ %46, %42 ]
  %.0632 = phi i8* [ %26, %.lr.ph37 ], [ %.17, %42 ]
  %.01231 = phi i32 [ %32, %.lr.ph37 ], [ %.113, %42 ]
  %35 = load i8, i8* %.0632, align 1
  %36 = zext i8 %35 to i32
  %37 = ashr i32 %36, %.01231
  %38 = and i32 %37, 1
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %34
  store i8 1, i8* %.0133, align 1
  br label %42

41:                                               ; preds = %34
  store i8 0, i8* %.0133, align 1
  br label %42

42:                                               ; preds = %41, %40
  %.0134 = phi i8* [ %.0133, %41 ], [ %.0133, %40 ]
  %43 = icmp eq i32 %.01231, 7
  %44 = getelementptr inbounds i8, i8* %.0632, i32 -1
  %45 = add nsw i32 %.01231, 1
  %.113 = select i1 %43, i32 0, i32 %45
  %.17 = select i1 %43, i8* %44, i8* %.0632
  %46 = getelementptr inbounds i8, i8* %.0134, i32 -1
  %lsr.iv.next60 = add i32 %lsr.iv59, -1
  %exitcond38 = icmp ne i32 %lsr.iv.next60, 0
  br i1 %exitcond38, label %34, label %..loopexit_crit_edge

47:                                               ; preds = %18
  %48 = sub i32 %8, 1
  %49 = lshr i32 %48, 2
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %2, i64 %50
  %52 = zext i32 %8 to i64
  %53 = add i32 %8, 3
  %54 = and i32 %53, 3
  %55 = sub i32 3, %54
  %56 = shl i32 %55, 1
  %57 = icmp ult i32 0, %8
  br i1 %57, label %.lr.ph44, label %.loopexit18

.lr.ph44:                                         ; preds = %47
  %scevgep64 = getelementptr i8, i8* %2, i64 -1
  br label %58

58:                                               ; preds = %.lr.ph44, %58
  %lsr.iv61 = phi i64 [ %52, %.lr.ph44 ], [ %lsr.iv.next62, %58 ]
  %.2840 = phi i8* [ %51, %.lr.ph44 ], [ %.39, %58 ]
  %.21439 = phi i32 [ %56, %.lr.ph44 ], [ %.315, %58 ]
  %scevgep65 = getelementptr i8, i8* %scevgep64, i64 %lsr.iv61
  %59 = load i8, i8* %.2840, align 1
  %60 = zext i8 %59 to i32
  %61 = ashr i32 %60, %.21439
  %62 = and i32 %61, 3
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %scevgep65, align 1
  %64 = icmp eq i32 %.21439, 6
  %65 = getelementptr inbounds i8, i8* %.2840, i32 -1
  %66 = add nsw i32 %.21439, 2
  %.315 = select i1 %64, i32 0, i32 %66
  %.39 = select i1 %64, i8* %65, i8* %.2840
  %lsr.iv.next62 = add nsw i64 %lsr.iv61, -1
  %tmp63 = trunc i64 %lsr.iv.next62 to i32
  %exitcond45 = icmp ne i32 %tmp63, 0
  br i1 %exitcond45, label %58, label %..loopexit18_crit_edge

67:                                               ; preds = %18
  %68 = sub i32 %8, 1
  %69 = lshr i32 %68, 1
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %2, i64 %70
  %72 = zext i32 %8 to i64
  %73 = and i32 %8, 1
  %74 = shl i32 %73, 2
  %75 = icmp ult i32 0, %8
  br i1 %75, label %.lr.ph51, label %.loopexit19

.lr.ph51:                                         ; preds = %67
  %scevgep69 = getelementptr i8, i8* %2, i64 -1
  br label %76

76:                                               ; preds = %.lr.ph51, %76
  %lsr.iv66 = phi i64 [ %72, %.lr.ph51 ], [ %lsr.iv.next67, %76 ]
  %.41047 = phi i8* [ %71, %.lr.ph51 ], [ %.511, %76 ]
  %.41646 = phi i32 [ %74, %.lr.ph51 ], [ %.517, %76 ]
  %scevgep70 = getelementptr i8, i8* %scevgep69, i64 %lsr.iv66
  %77 = load i8, i8* %.41047, align 1
  %78 = zext i8 %77 to i32
  %79 = ashr i32 %78, %.41646
  %80 = and i32 %79, 15
  %81 = trunc i32 %80 to i8
  store i8 %81, i8* %scevgep70, align 1
  %82 = icmp eq i32 %.41646, 4
  %83 = getelementptr inbounds i8, i8* %.41047, i32 -1
  %84 = add nsw i32 %.41646, 4
  %.517 = select i1 %82, i32 0, i32 %84
  %.511 = select i1 %82, i8* %83, i8* %.41047
  %lsr.iv.next67 = add nsw i64 %lsr.iv66, -1
  %tmp68 = trunc i64 %lsr.iv.next67 to i32
  %exitcond52 = icmp ne i32 %tmp68, 0
  br i1 %exitcond52, label %76, label %..loopexit19_crit_edge

..loopexit_crit_edge:                             ; preds = %42
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %22
  br label %85

..loopexit18_crit_edge:                           ; preds = %58
  br label %.loopexit18

.loopexit18:                                      ; preds = %..loopexit18_crit_edge, %47
  br label %85

..loopexit19_crit_edge:                           ; preds = %76
  br label %.loopexit19

.loopexit19:                                      ; preds = %..loopexit19_crit_edge, %67
  br label %85

85:                                               ; preds = %.loopexit19, %.loopexit18, %.loopexit, %18
  %86 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 3
  store i8 8, i8* %86, align 1
  %87 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 5
  store i8 8, i8* %87, align 1
  %88 = zext i32 %8 to i64
  %89 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 1
  store i64 %88, i64* %89, align 8
  br label %90

90:                                               ; preds = %85, %13
  %91 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 3
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = icmp eq i32 %93, 8
  br i1 %94, label %95, label %177

95:                                               ; preds = %90
  %96 = icmp sgt i32 %5, 0
  br i1 %96, label %97, label %146

97:                                               ; preds = %95
  %98 = zext i32 %8 to i64
  %99 = getelementptr inbounds i8, i8* %2, i64 %98
  %100 = getelementptr inbounds i8, i8* %99, i64 -1
  %101 = zext i32 %8 to i64
  %102 = shl i64 %101, 2
  %103 = getelementptr inbounds i8, i8* %2, i64 %102
  %104 = getelementptr inbounds i8, i8* %103, i64 -1
  %105 = icmp ult i32 0, %8
  br i1 %105, label %.lr.ph, label %138

.lr.ph:                                           ; preds = %97
  br label %106

106:                                              ; preds = %.lr.ph, %118
  %lsr.iv = phi i32 [ %8, %.lr.ph ], [ %lsr.iv.next, %118 ]
  %.3422 = phi i8* [ %104, %.lr.ph ], [ %136, %118 ]
  %.620 = phi i8* [ %100, %.lr.ph ], [ %137, %118 ]
  %107 = load i8, i8* %.620, align 1
  %108 = zext i8 %107 to i32
  %109 = icmp sge i32 %108, %5
  br i1 %109, label %110, label %112

110:                                              ; preds = %106
  %111 = getelementptr inbounds i8, i8* %.3422, i32 -1
  store i8 -1, i8* %.3422, align 1
  br label %118

112:                                              ; preds = %106
  %113 = load i8, i8* %.620, align 1
  %114 = zext i8 %113 to i64
  %115 = getelementptr inbounds i8, i8* %4, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = getelementptr inbounds i8, i8* %.3422, i32 -1
  store i8 %116, i8* %.3422, align 1
  br label %118

118:                                              ; preds = %112, %110
  %.621 = phi i8* [ %.620, %110 ], [ %.620, %112 ]
  %.45 = phi i8* [ %111, %110 ], [ %117, %112 ]
  %119 = load i8, i8* %.620, align 1
  %120 = zext i8 %119 to i64
  %121 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i64 %120
  %122 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %121, i32 0, i32 2
  %123 = load i8, i8* %122, align 1
  %124 = getelementptr inbounds i8, i8* %.45, i32 -1
  store i8 %123, i8* %.45, align 1
  %125 = load i8, i8* %.620, align 1
  %126 = zext i8 %125 to i64
  %127 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i64 %126
  %128 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %127, i32 0, i32 1
  %129 = load i8, i8* %128, align 1
  %130 = getelementptr inbounds i8, i8* %124, i32 -1
  store i8 %129, i8* %124, align 1
  %131 = load i8, i8* %.620, align 1
  %132 = zext i8 %131 to i64
  %133 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i64 %132
  %134 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %133, i32 0, i32 0
  %135 = load i8, i8* %134, align 1
  %136 = getelementptr inbounds i8, i8* %130, i32 -1
  store i8 %135, i8* %130, align 1
  %137 = getelementptr inbounds i8, i8* %.621, i32 -1
  %lsr.iv.next = add i32 %lsr.iv, -1
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  br i1 %exitcond, label %106, label %._crit_edge

._crit_edge:                                      ; preds = %118
  br label %138

138:                                              ; preds = %._crit_edge, %97
  %139 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 3
  store i8 8, i8* %139, align 1
  %140 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 5
  store i8 32, i8* %140, align 1
  %141 = mul i32 %8, 4
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 1
  store i64 %142, i64* %143, align 8
  %144 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 2
  store i8 6, i8* %144, align 8
  %145 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 4
  store i8 4, i8* %145, align 2
  br label %177

146:                                              ; preds = %95
  %147 = zext i32 %8 to i64
  %148 = mul i32 %8, 3
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds i8, i8* %2, i64 %149
  %151 = getelementptr inbounds i8, i8* %150, i64 -1
  %152 = icmp ult i32 0, %8
  br i1 %152, label %.lr.ph28, label %169

.lr.ph28:                                         ; preds = %146
  %scevgep = getelementptr i8, i8* %2, i64 -1
  br label %153

153:                                              ; preds = %.lr.ph28, %153
  %lsr.iv53 = phi i64 [ %147, %.lr.ph28 ], [ %lsr.iv.next54, %153 ]
  %.525 = phi i8* [ %151, %.lr.ph28 ], [ %scevgep58, %153 ]
  %scevgep55 = getelementptr i8, i8* %scevgep, i64 %lsr.iv53
  %154 = load i8, i8* %scevgep55, align 1
  %155 = zext i8 %154 to i64
  %156 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i64 %155
  %157 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %156, i32 0, i32 2
  %158 = load i8, i8* %157, align 1
  store i8 %158, i8* %.525, align 1
  %159 = load i8, i8* %scevgep55, align 1
  %160 = zext i8 %159 to i64
  %161 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i64 %160
  %162 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %161, i32 0, i32 1
  %163 = load i8, i8* %162, align 1
  %scevgep56 = getelementptr i8, i8* %.525, i64 -1
  store i8 %163, i8* %scevgep56, align 1
  %164 = load i8, i8* %scevgep55, align 1
  %165 = zext i8 %164 to i64
  %166 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i64 %165
  %167 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %166, i32 0, i32 0
  %168 = load i8, i8* %167, align 1
  %scevgep57 = getelementptr i8, i8* %.525, i64 -2
  store i8 %168, i8* %scevgep57, align 1
  %lsr.iv.next54 = add nsw i64 %lsr.iv53, -1
  %tmp = trunc i64 %lsr.iv.next54 to i32
  %exitcond30 = icmp ne i32 %tmp, 0
  %scevgep58 = getelementptr i8, i8* %.525, i64 -3
  br i1 %exitcond30, label %153, label %._crit_edge29

._crit_edge29:                                    ; preds = %153
  br label %169

169:                                              ; preds = %._crit_edge29, %146
  %170 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 3
  store i8 8, i8* %170, align 1
  %171 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 5
  store i8 24, i8* %171, align 1
  %172 = mul i32 %8, 3
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 1
  store i64 %173, i64* %174, align 8
  %175 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 2
  store i8 2, i8* %175, align 8
  %176 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 4
  store i8 3, i8* %176, align 2
  br label %177

177:                                              ; preds = %90, %169, %138, %6
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_expand(%struct.png_row_info_struct* %0, i8* %1, %struct.png_color_16_struct* %2) #11 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %7 = load i8, i8* %6, align 8
  %8 = zext i8 %7 to i32
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %212

10:                                               ; preds = %3
  %11 = icmp ne %struct.png_color_16_struct* %2, null
  br i1 %11, label %12, label %16

12:                                               ; preds = %10
  %13 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 4
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  br label %16

16:                                               ; preds = %10, %12
  %17 = phi i32 [ %15, %12 ], [ 0, %10 ]
  %18 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = icmp slt i32 %20, 8
  br i1 %21, label %22, label %109

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  switch i32 %25, label %104 [
    i32 1, label %26
    i32 2, label %53
    i32 4, label %81
  ]

26:                                               ; preds = %22
  %27 = and i32 %17, 1
  %28 = mul i32 %27, 255
  %29 = sub i32 %5, 1
  %30 = lshr i32 %29, 3
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %1, i64 %31
  %33 = zext i32 %5 to i64
  %34 = getelementptr inbounds i8, i8* %1, i64 %33
  %35 = getelementptr inbounds i8, i8* %34, i64 -1
  %36 = add i32 %5, 7
  %37 = and i32 %36, 7
  %38 = sub nsw i32 7, %37
  %39 = icmp ult i32 0, %5
  br i1 %39, label %.lr.ph47, label %.loopexit27

.lr.ph47:                                         ; preds = %26
  br label %40

40:                                               ; preds = %.lr.ph47, %48
  %lsr.iv83 = phi i32 [ %5, %.lr.ph47 ], [ %lsr.iv.next84, %48 ]
  %.0344 = phi i8* [ %35, %.lr.ph47 ], [ %52, %48 ]
  %.01043 = phi i32 [ %38, %.lr.ph47 ], [ %.111, %48 ]
  %.01642 = phi i8* [ %32, %.lr.ph47 ], [ %.117, %48 ]
  %41 = load i8, i8* %.01642, align 1
  %42 = zext i8 %41 to i32
  %43 = ashr i32 %42, %.01043
  %44 = and i32 %43, 1
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %40
  store i8 -1, i8* %.0344, align 1
  br label %48

47:                                               ; preds = %40
  store i8 0, i8* %.0344, align 1
  br label %48

48:                                               ; preds = %47, %46
  %.0345 = phi i8* [ %.0344, %47 ], [ %.0344, %46 ]
  %49 = icmp eq i32 %.01043, 7
  %50 = getelementptr inbounds i8, i8* %.01642, i32 -1
  %51 = add nsw i32 %.01043, 1
  %.117 = select i1 %49, i8* %50, i8* %.01642
  %.111 = select i1 %49, i32 0, i32 %51
  %52 = getelementptr inbounds i8, i8* %.0345, i32 -1
  %lsr.iv.next84 = add i32 %lsr.iv83, -1
  %exitcond48 = icmp ne i32 %lsr.iv.next84, 0
  br i1 %exitcond48, label %40, label %..loopexit27_crit_edge

53:                                               ; preds = %22
  %54 = and i32 %17, 3
  %55 = mul i32 %54, 85
  %56 = sub i32 %5, 1
  %57 = lshr i32 %56, 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %1, i64 %58
  %60 = zext i32 %5 to i64
  %61 = add i32 %5, 3
  %62 = and i32 %61, 3
  %63 = sub i32 3, %62
  %64 = shl i32 %63, 1
  %65 = icmp ult i32 0, %5
  br i1 %65, label %.lr.ph53, label %.loopexit28

.lr.ph53:                                         ; preds = %53
  %scevgep88 = getelementptr i8, i8* %1, i64 -1
  br label %66

66:                                               ; preds = %.lr.ph53, %66
  %lsr.iv85 = phi i64 [ %60, %.lr.ph53 ], [ %lsr.iv.next86, %66 ]
  %.21250 = phi i32 [ %64, %.lr.ph53 ], [ %.313, %66 ]
  %.21849 = phi i8* [ %59, %.lr.ph53 ], [ %.319, %66 ]
  %scevgep89 = getelementptr i8, i8* %scevgep88, i64 %lsr.iv85
  %67 = load i8, i8* %.21849, align 1
  %68 = zext i8 %67 to i32
  %69 = ashr i32 %68, %.21250
  %70 = and i32 %69, 3
  %71 = shl i32 %70, 2
  %72 = or i32 %70, %71
  %73 = shl i32 %70, 4
  %74 = or i32 %72, %73
  %75 = shl i32 %70, 6
  %76 = or i32 %74, %75
  %77 = trunc i32 %76 to i8
  store i8 %77, i8* %scevgep89, align 1
  %78 = icmp eq i32 %.21250, 6
  %79 = getelementptr inbounds i8, i8* %.21849, i32 -1
  %80 = add nsw i32 %.21250, 2
  %.319 = select i1 %78, i8* %79, i8* %.21849
  %.313 = select i1 %78, i32 0, i32 %80
  %lsr.iv.next86 = add nsw i64 %lsr.iv85, -1
  %tmp87 = trunc i64 %lsr.iv.next86 to i32
  %exitcond55 = icmp ne i32 %tmp87, 0
  br i1 %exitcond55, label %66, label %..loopexit28_crit_edge

81:                                               ; preds = %22
  %82 = and i32 %17, 15
  %83 = mul i32 %82, 17
  %84 = sub i32 %5, 1
  %85 = lshr i32 %84, 1
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %1, i64 %86
  %88 = zext i32 %5 to i64
  %89 = add i32 %5, 1
  %90 = and i32 %89, 1
  %91 = sub i32 1, %90
  %92 = shl i32 %91, 2
  %93 = icmp ult i32 0, %5
  br i1 %93, label %.lr.ph60, label %.loopexit30

.lr.ph60:                                         ; preds = %81
  %scevgep93 = getelementptr i8, i8* %1, i64 -1
  br label %94

94:                                               ; preds = %.lr.ph60, %94
  %lsr.iv90 = phi i64 [ %88, %.lr.ph60 ], [ %lsr.iv.next91, %94 ]
  %.41457 = phi i32 [ %92, %.lr.ph60 ], [ %.515, %94 ]
  %.42056 = phi i8* [ %87, %.lr.ph60 ], [ %.521, %94 ]
  %scevgep94 = getelementptr i8, i8* %scevgep93, i64 %lsr.iv90
  %95 = load i8, i8* %.42056, align 1
  %96 = zext i8 %95 to i32
  %97 = ashr i32 %96, %.41457
  %98 = and i32 %97, 15
  %99 = shl i32 %98, 4
  %100 = or i32 %98, %99
  %101 = trunc i32 %100 to i8
  store i8 %101, i8* %scevgep94, align 1
  %102 = icmp eq i32 %.41457, 4
  %103 = getelementptr inbounds i8, i8* %.42056, i32 -1
  %.521 = select i1 %102, i8* %103, i8* %.42056
  %.515 = select i1 %102, i32 0, i32 4
  %lsr.iv.next91 = add nsw i64 %lsr.iv90, -1
  %tmp92 = trunc i64 %lsr.iv.next91 to i32
  %exitcond62 = icmp ne i32 %tmp92, 0
  br i1 %exitcond62, label %94, label %..loopexit30_crit_edge

..loopexit27_crit_edge:                           ; preds = %48
  %split = phi i32 [ %28, %48 ]
  br label %.loopexit27

.loopexit27:                                      ; preds = %..loopexit27_crit_edge, %26
  %.0.ph = phi i32 [ %split, %..loopexit27_crit_edge ], [ %28, %26 ]
  br label %104

..loopexit28_crit_edge:                           ; preds = %66
  %split54 = phi i32 [ %55, %66 ]
  br label %.loopexit28

.loopexit28:                                      ; preds = %..loopexit28_crit_edge, %53
  %.0.ph29 = phi i32 [ %split54, %..loopexit28_crit_edge ], [ %55, %53 ]
  br label %104

..loopexit30_crit_edge:                           ; preds = %94
  %split61 = phi i32 [ %83, %94 ]
  br label %.loopexit30

.loopexit30:                                      ; preds = %..loopexit30_crit_edge, %81
  %.0.ph31 = phi i32 [ %split61, %..loopexit30_crit_edge ], [ %83, %81 ]
  br label %104

104:                                              ; preds = %.loopexit30, %.loopexit28, %.loopexit27, %22
  %.0 = phi i32 [ %17, %22 ], [ %.0.ph, %.loopexit27 ], [ %.0.ph29, %.loopexit28 ], [ %.0.ph31, %.loopexit30 ]
  %105 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  store i8 8, i8* %105, align 1
  %106 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 8, i8* %106, align 1
  %107 = zext i32 %5 to i64
  %108 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %107, i64* %108, align 8
  br label %109

109:                                              ; preds = %104, %16
  %.1 = phi i32 [ %.0, %104 ], [ %17, %16 ]
  %110 = icmp ne %struct.png_color_16_struct* %2, null
  br i1 %110, label %111, label %411

111:                                              ; preds = %109
  %112 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = icmp eq i32 %114, 8
  br i1 %115, label %116, label %136

116:                                              ; preds = %111
  %117 = and i32 %.1, 255
  %118 = zext i32 %5 to i64
  %119 = zext i32 %5 to i64
  %120 = shl i64 %119, 1
  %121 = getelementptr inbounds i8, i8* %1, i64 %120
  %122 = getelementptr inbounds i8, i8* %121, i64 -1
  %123 = icmp ult i32 0, %5
  br i1 %123, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %116
  %scevgep = getelementptr i8, i8* %1, i64 -1
  br label %124

124:                                              ; preds = %.lr.ph, %133
  %lsr.iv = phi i64 [ %118, %.lr.ph ], [ %lsr.iv.next, %133 ]
  %.3635 = phi i8* [ %122, %.lr.ph ], [ %135, %133 ]
  %scevgep73 = getelementptr i8, i8* %scevgep, i64 %lsr.iv
  %125 = load i8, i8* %scevgep73, align 1
  %126 = zext i8 %125 to i32
  %127 = and i32 %126, 255
  %128 = icmp eq i32 %127, %117
  br i1 %128, label %129, label %131

129:                                              ; preds = %124
  %130 = getelementptr inbounds i8, i8* %.3635, i32 -1
  store i8 0, i8* %.3635, align 1
  br label %133

131:                                              ; preds = %124
  %132 = getelementptr inbounds i8, i8* %.3635, i32 -1
  store i8 -1, i8* %.3635, align 1
  br label %133

133:                                              ; preds = %131, %129
  %.47 = phi i8* [ %130, %129 ], [ %132, %131 ]
  %134 = load i8, i8* %scevgep73, align 1
  %135 = getelementptr inbounds i8, i8* %.47, i32 -1
  store i8 %134, i8* %.47, align 1
  %lsr.iv.next = add nsw i64 %lsr.iv, -1
  %tmp = trunc i64 %lsr.iv.next to i32
  %exitcond = icmp ne i32 %tmp, 0
  br i1 %exitcond, label %124, label %..loopexit_crit_edge

136:                                              ; preds = %111
  %137 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = icmp eq i32 %139, 16
  br i1 %140, label %141, label %181

141:                                              ; preds = %136
  %142 = lshr i32 %.1, 8
  %143 = and i32 %142, 255
  %144 = and i32 %.1, 255
  %145 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %146 = load i64, i64* %145, align 8
  %147 = getelementptr inbounds i8, i8* %1, i64 %146
  %148 = getelementptr i8, i8* %147, i64 -1
  %149 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %150 = load i64, i64* %149, align 8
  %151 = shl i64 %150, 1
  %152 = getelementptr inbounds i8, i8* %1, i64 %151
  %153 = getelementptr inbounds i8, i8* %152, i64 -1
  %154 = icmp ult i32 0, %5
  br i1 %154, label %.lr.ph40, label %.loopexit26

.lr.ph40:                                         ; preds = %141
  %155 = sub i32 0, %5
  %156 = zext i32 %155 to i64
  br label %157

157:                                              ; preds = %.lr.ph40, %175
  %lsr.iv74 = phi i64 [ 0, %.lr.ph40 ], [ %lsr.iv.next75, %175 ]
  %.5838 = phi i8* [ %153, %.lr.ph40 ], [ %180, %175 ]
  %158 = shl nsw i64 %lsr.iv74, 1
  %scevgep80 = getelementptr i8, i8* %148, i64 %158
  %159 = shl nsw i64 %lsr.iv74, 1
  %scevgep78 = getelementptr i8, i8* %148, i64 %159
  %scevgep79 = getelementptr i8, i8* %scevgep78, i64 -1
  %160 = load i8, i8* %scevgep79, align 1
  %161 = zext i8 %160 to i32
  %162 = and i32 %161, 255
  %163 = icmp eq i32 %162, %143
  br i1 %163, label %164, label %172

164:                                              ; preds = %157
  %165 = load i8, i8* %scevgep80, align 1
  %166 = zext i8 %165 to i32
  %167 = and i32 %166, 255
  %168 = icmp eq i32 %167, %144
  br i1 %168, label %169, label %172

169:                                              ; preds = %164
  %170 = getelementptr inbounds i8, i8* %.5838, i32 -1
  store i8 0, i8* %.5838, align 1
  %171 = getelementptr inbounds i8, i8* %170, i32 -1
  store i8 0, i8* %170, align 1
  br label %175

172:                                              ; preds = %164, %157
  %173 = getelementptr inbounds i8, i8* %.5838, i32 -1
  store i8 -1, i8* %.5838, align 1
  %174 = getelementptr inbounds i8, i8* %173, i32 -1
  store i8 -1, i8* %173, align 1
  br label %175

175:                                              ; preds = %172, %169
  %.69 = phi i8* [ %171, %169 ], [ %174, %172 ]
  %176 = shl nsw i64 %lsr.iv74, 1
  %scevgep81 = getelementptr i8, i8* %148, i64 %176
  %scevgep82 = getelementptr i8, i8* %scevgep81, i64 -1
  %177 = load i8, i8* %scevgep80, align 1
  %178 = getelementptr inbounds i8, i8* %.69, i32 -1
  store i8 %177, i8* %.69, align 1
  %179 = load i8, i8* %scevgep82, align 1
  %180 = getelementptr inbounds i8, i8* %178, i32 -1
  store i8 %179, i8* %178, align 1
  %lsr.iv.next75 = add nsw i64 %lsr.iv74, -1
  %tmp76 = trunc i64 %lsr.iv.next75 to i32
  %tmp77 = trunc i64 %156 to i32
  %exitcond41 = icmp ne i32 %tmp77, %tmp76
  br i1 %exitcond41, label %157, label %..loopexit26_crit_edge

..loopexit_crit_edge:                             ; preds = %133
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %116
  br label %181

..loopexit26_crit_edge:                           ; preds = %175
  br label %.loopexit26

.loopexit26:                                      ; preds = %..loopexit26_crit_edge, %141
  br label %181

181:                                              ; preds = %.loopexit26, %.loopexit, %136
  %182 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  store i8 4, i8* %182, align 8
  %183 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  store i8 2, i8* %183, align 2
  %184 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = shl i32 %186, 1
  %188 = trunc i32 %187 to i8
  %189 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 %188, i8* %189, align 1
  %190 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = icmp sge i32 %192, 8
  br i1 %193, label %194, label %201

194:                                              ; preds = %181
  %195 = zext i32 %5 to i64
  %196 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i64
  %199 = lshr i64 %198, 3
  %200 = mul i64 %195, %199
  br label %209

201:                                              ; preds = %181
  %202 = zext i32 %5 to i64
  %203 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i64
  %206 = mul i64 %202, %205
  %207 = add i64 %206, 7
  %208 = lshr i64 %207, 3
  br label %209

209:                                              ; preds = %201, %194
  %210 = phi i64 [ %200, %194 ], [ %208, %201 ]
  %211 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %210, i64* %211, align 8
  br label %411

212:                                              ; preds = %3
  %213 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %214 = load i8, i8* %213, align 8
  %215 = zext i8 %214 to i32
  %216 = icmp eq i32 %215, 2
  %217 = icmp ne %struct.png_color_16_struct* %2, null
  %or.cond = select i1 %216, i1 %217, i1 false
  br i1 %or.cond, label %218, label %411

218:                                              ; preds = %212
  %219 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %220 = load i8, i8* %219, align 1
  %221 = zext i8 %220 to i32
  %222 = icmp eq i32 %221, 8
  br i1 %222, label %223, label %277

223:                                              ; preds = %218
  %224 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 1
  %225 = load i16, i16* %224, align 2
  %226 = zext i16 %225 to i32
  %227 = and i32 %226, 255
  %228 = trunc i32 %227 to i8
  %229 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 2
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = and i32 %231, 255
  %233 = trunc i32 %232 to i8
  %234 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 3
  %235 = load i16, i16* %234, align 2
  %236 = zext i16 %235 to i32
  %237 = and i32 %236, 255
  %238 = trunc i32 %237 to i8
  %239 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %240 = load i64, i64* %239, align 8
  %241 = getelementptr inbounds i8, i8* %1, i64 %240
  %242 = getelementptr inbounds i8, i8* %241, i64 -1
  %243 = zext i32 %5 to i64
  %244 = shl i64 %243, 2
  %245 = getelementptr inbounds i8, i8* %1, i64 %244
  %246 = getelementptr inbounds i8, i8* %245, i64 -1
  %247 = zext i8 %228 to i32
  %248 = zext i8 %233 to i32
  %249 = zext i8 %238 to i32
  %250 = icmp ult i32 0, %5
  br i1 %250, label %.lr.ph66, label %.loopexit32

.lr.ph66:                                         ; preds = %223
  br label %251

251:                                              ; preds = %.lr.ph66, %267
  %lsr.iv95 = phi i32 [ %5, %.lr.ph66 ], [ %lsr.iv.next96, %267 ]
  %.764 = phi i8* [ %246, %.lr.ph66 ], [ %276, %267 ]
  %.82463 = phi i8* [ %242, %.lr.ph66 ], [ %274, %267 ]
  %scevgep97 = getelementptr i8, i8* %.82463, i64 -2
  %252 = load i8, i8* %scevgep97, align 1
  %253 = zext i8 %252 to i32
  %254 = icmp eq i32 %253, %247
  br i1 %254, label %255, label %265

255:                                              ; preds = %251
  %scevgep98 = getelementptr i8, i8* %.82463, i64 -1
  %256 = load i8, i8* %scevgep98, align 1
  %257 = zext i8 %256 to i32
  %258 = icmp eq i32 %257, %248
  br i1 %258, label %259, label %265

259:                                              ; preds = %255
  %260 = load i8, i8* %.82463, align 1
  %261 = zext i8 %260 to i32
  %262 = icmp eq i32 %261, %249
  br i1 %262, label %263, label %265

263:                                              ; preds = %259
  %264 = getelementptr inbounds i8, i8* %.764, i32 -1
  store i8 0, i8* %.764, align 1
  br label %267

265:                                              ; preds = %259, %255, %251
  %266 = getelementptr inbounds i8, i8* %.764, i32 -1
  store i8 -1, i8* %.764, align 1
  br label %267

267:                                              ; preds = %265, %263
  %.8 = phi i8* [ %264, %263 ], [ %266, %265 ]
  %268 = getelementptr inbounds i8, i8* %.82463, i32 -1
  %scevgep100 = getelementptr i8, i8* %.82463, i64 -1
  %269 = load i8, i8* %.82463, align 1
  %270 = getelementptr inbounds i8, i8* %.8, i32 -1
  store i8 %269, i8* %.8, align 1
  %271 = getelementptr inbounds i8, i8* %268, i32 -1
  %scevgep99 = getelementptr i8, i8* %.82463, i64 -2
  %272 = load i8, i8* %scevgep100, align 1
  %273 = getelementptr inbounds i8, i8* %270, i32 -1
  store i8 %272, i8* %270, align 1
  %274 = getelementptr inbounds i8, i8* %271, i32 -1
  %275 = load i8, i8* %scevgep99, align 1
  %276 = getelementptr inbounds i8, i8* %273, i32 -1
  store i8 %275, i8* %273, align 1
  %lsr.iv.next96 = add i32 %lsr.iv95, -1
  %exitcond67 = icmp ne i32 %lsr.iv.next96, 0
  br i1 %exitcond67, label %251, label %..loopexit32_crit_edge

277:                                              ; preds = %218
  %278 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %279 = load i8, i8* %278, align 1
  %280 = zext i8 %279 to i32
  %281 = icmp eq i32 %280, 16
  br i1 %281, label %282, label %380

282:                                              ; preds = %277
  %283 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 1
  %284 = load i16, i16* %283, align 2
  %285 = zext i16 %284 to i32
  %286 = ashr i32 %285, 8
  %287 = and i32 %286, 255
  %288 = trunc i32 %287 to i8
  %289 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 2
  %290 = load i16, i16* %289, align 2
  %291 = zext i16 %290 to i32
  %292 = ashr i32 %291, 8
  %293 = and i32 %292, 255
  %294 = trunc i32 %293 to i8
  %295 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 3
  %296 = load i16, i16* %295, align 2
  %297 = zext i16 %296 to i32
  %298 = ashr i32 %297, 8
  %299 = and i32 %298, 255
  %300 = trunc i32 %299 to i8
  %301 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 1
  %302 = load i16, i16* %301, align 2
  %303 = zext i16 %302 to i32
  %304 = and i32 %303, 255
  %305 = trunc i32 %304 to i8
  %306 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 2
  %307 = load i16, i16* %306, align 2
  %308 = zext i16 %307 to i32
  %309 = and i32 %308, 255
  %310 = trunc i32 %309 to i8
  %311 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 3
  %312 = load i16, i16* %311, align 2
  %313 = zext i16 %312 to i32
  %314 = and i32 %313, 255
  %315 = trunc i32 %314 to i8
  %316 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %317 = load i64, i64* %316, align 8
  %318 = getelementptr inbounds i8, i8* %1, i64 %317
  %319 = getelementptr inbounds i8, i8* %318, i64 -1
  %320 = zext i32 %5 to i64
  %321 = shl i64 %320, 3
  %322 = getelementptr inbounds i8, i8* %1, i64 %321
  %323 = getelementptr inbounds i8, i8* %322, i64 -1
  %324 = zext i8 %288 to i32
  %325 = zext i8 %305 to i32
  %326 = zext i8 %294 to i32
  %327 = zext i8 %310 to i32
  %328 = zext i8 %300 to i32
  %329 = zext i8 %315 to i32
  %330 = icmp ult i32 0, %5
  br i1 %330, label %.lr.ph71, label %.loopexit33

.lr.ph71:                                         ; preds = %282
  br label %331

331:                                              ; preds = %.lr.ph71, %361
  %lsr.iv101 = phi i32 [ %5, %.lr.ph71 ], [ %lsr.iv.next102, %361 ]
  %.969 = phi i8* [ %323, %.lr.ph71 ], [ %379, %361 ]
  %.92568 = phi i8* [ %319, %.lr.ph71 ], [ %377, %361 ]
  %scevgep103 = getelementptr i8, i8* %.92568, i64 -5
  %332 = load i8, i8* %scevgep103, align 1
  %333 = zext i8 %332 to i32
  %334 = icmp eq i32 %333, %324
  br i1 %334, label %335, label %358

335:                                              ; preds = %331
  %scevgep104 = getelementptr i8, i8* %.92568, i64 -4
  %336 = load i8, i8* %scevgep104, align 1
  %337 = zext i8 %336 to i32
  %338 = icmp eq i32 %337, %325
  br i1 %338, label %339, label %358

339:                                              ; preds = %335
  %scevgep105 = getelementptr i8, i8* %.92568, i64 -3
  %340 = load i8, i8* %scevgep105, align 1
  %341 = zext i8 %340 to i32
  %342 = icmp eq i32 %341, %326
  br i1 %342, label %343, label %358

343:                                              ; preds = %339
  %scevgep106 = getelementptr i8, i8* %.92568, i64 -2
  %344 = load i8, i8* %scevgep106, align 1
  %345 = zext i8 %344 to i32
  %346 = icmp eq i32 %345, %327
  br i1 %346, label %347, label %358

347:                                              ; preds = %343
  %scevgep107 = getelementptr i8, i8* %.92568, i64 -1
  %348 = load i8, i8* %scevgep107, align 1
  %349 = zext i8 %348 to i32
  %350 = icmp eq i32 %349, %328
  br i1 %350, label %351, label %358

351:                                              ; preds = %347
  %352 = load i8, i8* %.92568, align 1
  %353 = zext i8 %352 to i32
  %354 = icmp eq i32 %353, %329
  br i1 %354, label %355, label %358

355:                                              ; preds = %351
  %356 = getelementptr inbounds i8, i8* %.969, i32 -1
  store i8 0, i8* %.969, align 1
  %357 = getelementptr inbounds i8, i8* %356, i32 -1
  store i8 0, i8* %356, align 1
  br label %361

358:                                              ; preds = %351, %347, %343, %339, %335, %331
  %359 = getelementptr inbounds i8, i8* %.969, i32 -1
  store i8 -1, i8* %.969, align 1
  %360 = getelementptr inbounds i8, i8* %359, i32 -1
  store i8 -1, i8* %359, align 1
  br label %361

361:                                              ; preds = %358, %355
  %.10 = phi i8* [ %357, %355 ], [ %360, %358 ]
  %362 = getelementptr inbounds i8, i8* %.92568, i32 -1
  %scevgep112 = getelementptr i8, i8* %.92568, i64 -1
  %363 = load i8, i8* %.92568, align 1
  %364 = getelementptr inbounds i8, i8* %.10, i32 -1
  store i8 %363, i8* %.10, align 1
  %365 = getelementptr inbounds i8, i8* %362, i32 -1
  %scevgep111 = getelementptr i8, i8* %.92568, i64 -2
  %366 = load i8, i8* %scevgep112, align 1
  %367 = getelementptr inbounds i8, i8* %364, i32 -1
  store i8 %366, i8* %364, align 1
  %368 = getelementptr inbounds i8, i8* %365, i32 -1
  %scevgep110 = getelementptr i8, i8* %.92568, i64 -3
  %369 = load i8, i8* %scevgep111, align 1
  %370 = getelementptr inbounds i8, i8* %367, i32 -1
  store i8 %369, i8* %367, align 1
  %371 = getelementptr inbounds i8, i8* %368, i32 -1
  %scevgep109 = getelementptr i8, i8* %.92568, i64 -4
  %372 = load i8, i8* %scevgep110, align 1
  %373 = getelementptr inbounds i8, i8* %370, i32 -1
  store i8 %372, i8* %370, align 1
  %374 = getelementptr inbounds i8, i8* %371, i32 -1
  %scevgep108 = getelementptr i8, i8* %.92568, i64 -5
  %375 = load i8, i8* %scevgep109, align 1
  %376 = getelementptr inbounds i8, i8* %373, i32 -1
  store i8 %375, i8* %373, align 1
  %377 = getelementptr inbounds i8, i8* %374, i32 -1
  %378 = load i8, i8* %scevgep108, align 1
  %379 = getelementptr inbounds i8, i8* %376, i32 -1
  store i8 %378, i8* %376, align 1
  %lsr.iv.next102 = add i32 %lsr.iv101, -1
  %exitcond72 = icmp ne i32 %lsr.iv.next102, 0
  br i1 %exitcond72, label %331, label %..loopexit33_crit_edge

..loopexit32_crit_edge:                           ; preds = %267
  br label %.loopexit32

.loopexit32:                                      ; preds = %..loopexit32_crit_edge, %223
  br label %380

..loopexit33_crit_edge:                           ; preds = %361
  br label %.loopexit33

.loopexit33:                                      ; preds = %..loopexit33_crit_edge, %282
  br label %380

380:                                              ; preds = %.loopexit33, %.loopexit32, %277
  %381 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  store i8 6, i8* %381, align 8
  %382 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  store i8 4, i8* %382, align 2
  %383 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %384 = load i8, i8* %383, align 1
  %385 = zext i8 %384 to i32
  %386 = shl i32 %385, 2
  %387 = trunc i32 %386 to i8
  %388 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 %387, i8* %388, align 1
  %389 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %390 = load i8, i8* %389, align 1
  %391 = zext i8 %390 to i32
  %392 = icmp sge i32 %391, 8
  br i1 %392, label %393, label %400

393:                                              ; preds = %380
  %394 = zext i32 %5 to i64
  %395 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %396 = load i8, i8* %395, align 1
  %397 = zext i8 %396 to i64
  %398 = lshr i64 %397, 3
  %399 = mul i64 %394, %398
  br label %408

400:                                              ; preds = %380
  %401 = zext i32 %5 to i64
  %402 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %403 = load i8, i8* %402, align 1
  %404 = zext i8 %403 to i64
  %405 = mul i64 %401, %404
  %406 = add i64 %405, 7
  %407 = lshr i64 %406, 3
  br label %408

408:                                              ; preds = %400, %393
  %409 = phi i64 [ %399, %393 ], [ %407, %400 ]
  %410 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %409, i64* %410, align 8
  br label %411

411:                                              ; preds = %212, %408, %109, %209
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_do_strip_channel(%struct.png_row_info_struct* %0, i8* %1, i32 %2) #11 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  %8 = load i8, i8* %7, align 2
  %9 = zext i8 %8 to i32
  %10 = icmp eq i32 %9, 2
  br i1 %10, label %11, label %56

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = icmp eq i32 %14, 8
  br i1 %15, label %16, label %29

16:                                               ; preds = %11
  %17 = icmp ne i32 %2, 0
  %18 = getelementptr inbounds i8, i8* %1, i32 1
  %19 = getelementptr inbounds i8, i8* %1, i64 2
  %20 = getelementptr inbounds i8, i8* %1, i32 1
  %.01 = select i1 %17, i8* %18, i8* %19
  %.0 = select i1 %17, i8* %1, i8* %20
  %21 = icmp ult i8* %.01, %6
  br i1 %21, label %.lr.ph, label %27

.lr.ph:                                           ; preds = %16
  br label %22

22:                                               ; preds = %.lr.ph, %22
  %.110 = phi i8* [ %.0, %.lr.ph ], [ %24, %22 ]
  %.129 = phi i8* [ %.01, %.lr.ph ], [ %25, %22 ]
  %23 = load i8, i8* %.129, align 1
  %24 = getelementptr inbounds i8, i8* %.110, i32 1
  store i8 %23, i8* %.110, align 1
  %25 = getelementptr inbounds i8, i8* %.129, i64 2
  %26 = icmp ult i8* %25, %6
  br i1 %26, label %22, label %._crit_edge

._crit_edge:                                      ; preds = %22
  %split = phi i8* [ %24, %22 ]
  br label %27

27:                                               ; preds = %._crit_edge, %16
  %.1.lcssa = phi i8* [ %split, %._crit_edge ], [ %.0, %16 ]
  %28 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 8, i8* %28, align 1
  br label %48

29:                                               ; preds = %11
  %30 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = icmp eq i32 %32, 16
  br i1 %33, label %34, label %122

34:                                               ; preds = %29
  %35 = icmp ne i32 %2, 0
  %36 = getelementptr inbounds i8, i8* %1, i64 2
  %37 = getelementptr inbounds i8, i8* %1, i64 4
  %38 = getelementptr inbounds i8, i8* %1, i64 2
  %.23 = select i1 %35, i8* %36, i8* %37
  %.2 = select i1 %35, i8* %1, i8* %38
  %39 = icmp ult i8* %.23, %6
  br i1 %39, label %.lr.ph14, label %46

.lr.ph14:                                         ; preds = %34
  br label %40

40:                                               ; preds = %.lr.ph14, %40
  %.312 = phi i8* [ %.2, %.lr.ph14 ], [ %scevgep31, %40 ]
  %.3411 = phi i8* [ %.23, %.lr.ph14 ], [ %scevgep29, %40 ]
  %41 = load i8, i8* %.3411, align 1
  %42 = getelementptr inbounds i8, i8* %.312, i32 1
  store i8 %41, i8* %.312, align 1
  %scevgep = getelementptr i8, i8* %.3411, i64 1
  %43 = load i8, i8* %scevgep, align 1
  %44 = getelementptr inbounds i8, i8* %42, i32 1
  %scevgep30 = getelementptr i8, i8* %.312, i64 1
  store i8 %43, i8* %scevgep30, align 1
  %scevgep29 = getelementptr i8, i8* %.3411, i64 4
  %45 = icmp ult i8* %scevgep29, %6
  %scevgep31 = getelementptr i8, i8* %.312, i64 2
  br i1 %45, label %40, label %._crit_edge15

._crit_edge15:                                    ; preds = %40
  %split16 = phi i8* [ %44, %40 ]
  br label %46

46:                                               ; preds = %._crit_edge15, %34
  %.3.lcssa = phi i8* [ %split16, %._crit_edge15 ], [ %.2, %34 ]
  %47 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 16, i8* %47, align 1
  br label %48

48:                                               ; preds = %46, %27
  %.4 = phi i8* [ %.1.lcssa, %27 ], [ %.3.lcssa, %46 ]
  %49 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  store i8 1, i8* %49, align 2
  %50 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %51 = load i8, i8* %50, align 8
  %52 = zext i8 %51 to i32
  %53 = icmp eq i32 %52, 4
  br i1 %53, label %54, label %117

54:                                               ; preds = %48
  %55 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  store i8 0, i8* %55, align 8
  br label %117

56:                                               ; preds = %3
  %57 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  %58 = load i8, i8* %57, align 2
  %59 = zext i8 %58 to i32
  %60 = icmp eq i32 %59, 4
  br i1 %60, label %61, label %122

61:                                               ; preds = %56
  %62 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = icmp eq i32 %64, 8
  br i1 %65, label %66, label %82

66:                                               ; preds = %61
  %67 = icmp ne i32 %2, 0
  %68 = getelementptr inbounds i8, i8* %1, i32 1
  %69 = getelementptr inbounds i8, i8* %1, i64 4
  %70 = getelementptr inbounds i8, i8* %1, i64 3
  %.45 = select i1 %67, i8* %68, i8* %69
  %.5 = select i1 %67, i8* %1, i8* %70
  %71 = icmp ult i8* %.45, %6
  br i1 %71, label %.lr.ph20, label %80

.lr.ph20:                                         ; preds = %66
  br label %72

72:                                               ; preds = %.lr.ph20, %72
  %.618 = phi i8* [ %.5, %.lr.ph20 ], [ %scevgep37, %72 ]
  %.5617 = phi i8* [ %.45, %.lr.ph20 ], [ %scevgep34, %72 ]
  %73 = load i8, i8* %.5617, align 1
  %74 = getelementptr inbounds i8, i8* %.618, i32 1
  store i8 %73, i8* %.618, align 1
  %scevgep32 = getelementptr i8, i8* %.5617, i64 1
  %75 = load i8, i8* %scevgep32, align 1
  %76 = getelementptr inbounds i8, i8* %74, i32 1
  %scevgep35 = getelementptr i8, i8* %.618, i64 1
  store i8 %75, i8* %scevgep35, align 1
  %scevgep33 = getelementptr i8, i8* %.5617, i64 2
  %77 = load i8, i8* %scevgep33, align 1
  %78 = getelementptr inbounds i8, i8* %76, i32 1
  %scevgep36 = getelementptr i8, i8* %.618, i64 2
  store i8 %77, i8* %scevgep36, align 1
  %scevgep34 = getelementptr i8, i8* %.5617, i64 4
  %79 = icmp ult i8* %scevgep34, %6
  %scevgep37 = getelementptr i8, i8* %.618, i64 3
  br i1 %79, label %72, label %._crit_edge21

._crit_edge21:                                    ; preds = %72
  %split22 = phi i8* [ %78, %72 ]
  br label %80

80:                                               ; preds = %._crit_edge21, %66
  %.6.lcssa = phi i8* [ %split22, %._crit_edge21 ], [ %.5, %66 ]
  %81 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 24, i8* %81, align 1
  br label %109

82:                                               ; preds = %61
  %83 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = icmp eq i32 %85, 16
  br i1 %86, label %87, label %122

87:                                               ; preds = %82
  %88 = icmp ne i32 %2, 0
  %89 = getelementptr inbounds i8, i8* %1, i64 2
  %90 = getelementptr inbounds i8, i8* %1, i64 8
  %91 = getelementptr inbounds i8, i8* %1, i64 6
  %.67 = select i1 %88, i8* %89, i8* %90
  %.7 = select i1 %88, i8* %1, i8* %91
  %92 = icmp ult i8* %.67, %6
  br i1 %92, label %.lr.ph26, label %107

.lr.ph26:                                         ; preds = %87
  br label %93

93:                                               ; preds = %.lr.ph26, %93
  %.824 = phi i8* [ %.7, %.lr.ph26 ], [ %scevgep49, %93 ]
  %.7823 = phi i8* [ %.67, %.lr.ph26 ], [ %scevgep43, %93 ]
  %94 = load i8, i8* %.7823, align 1
  %95 = getelementptr inbounds i8, i8* %.824, i32 1
  store i8 %94, i8* %.824, align 1
  %scevgep38 = getelementptr i8, i8* %.7823, i64 1
  %96 = load i8, i8* %scevgep38, align 1
  %97 = getelementptr inbounds i8, i8* %95, i32 1
  %scevgep44 = getelementptr i8, i8* %.824, i64 1
  store i8 %96, i8* %scevgep44, align 1
  %scevgep39 = getelementptr i8, i8* %.7823, i64 2
  %98 = load i8, i8* %scevgep39, align 1
  %99 = getelementptr inbounds i8, i8* %97, i32 1
  %scevgep45 = getelementptr i8, i8* %.824, i64 2
  store i8 %98, i8* %scevgep45, align 1
  %scevgep40 = getelementptr i8, i8* %.7823, i64 3
  %100 = load i8, i8* %scevgep40, align 1
  %101 = getelementptr inbounds i8, i8* %99, i32 1
  %scevgep46 = getelementptr i8, i8* %.824, i64 3
  store i8 %100, i8* %scevgep46, align 1
  %scevgep41 = getelementptr i8, i8* %.7823, i64 4
  %102 = load i8, i8* %scevgep41, align 1
  %103 = getelementptr inbounds i8, i8* %101, i32 1
  %scevgep47 = getelementptr i8, i8* %.824, i64 4
  store i8 %102, i8* %scevgep47, align 1
  %scevgep42 = getelementptr i8, i8* %.7823, i64 5
  %104 = load i8, i8* %scevgep42, align 1
  %105 = getelementptr inbounds i8, i8* %103, i32 1
  %scevgep48 = getelementptr i8, i8* %.824, i64 5
  store i8 %104, i8* %scevgep48, align 1
  %scevgep43 = getelementptr i8, i8* %.7823, i64 8
  %106 = icmp ult i8* %scevgep43, %6
  %scevgep49 = getelementptr i8, i8* %.824, i64 6
  br i1 %106, label %93, label %._crit_edge27

._crit_edge27:                                    ; preds = %93
  %split28 = phi i8* [ %105, %93 ]
  br label %107

107:                                              ; preds = %._crit_edge27, %87
  %.8.lcssa = phi i8* [ %split28, %._crit_edge27 ], [ %.7, %87 ]
  %108 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 48, i8* %108, align 1
  br label %109

109:                                              ; preds = %107, %80
  %.9 = phi i8* [ %.6.lcssa, %80 ], [ %.8.lcssa, %107 ]
  %110 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  store i8 3, i8* %110, align 2
  %111 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %112 = load i8, i8* %111, align 8
  %113 = zext i8 %112 to i32
  %114 = icmp eq i32 %113, 6
  br i1 %114, label %115, label %117

115:                                              ; preds = %109
  %116 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  store i8 2, i8* %116, align 8
  br label %117

117:                                              ; preds = %115, %109, %48, %54
  %.10 = phi i8* [ %.4, %54 ], [ %.4, %48 ], [ %.9, %109 ], [ %.9, %115 ]
  %118 = ptrtoint i8* %.10 to i64
  %119 = ptrtoint i8* %1 to i64
  %120 = sub i64 %118, %119
  %121 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %120, i64* %121, align 8
  br label %122

122:                                              ; preds = %56, %82, %29, %117
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_do_rgb_to_gray(%struct.png_struct_def* noalias %0, %struct.png_row_info_struct* %1, i8* %2) #11 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 2
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %416

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 2
  %11 = load i8, i8* %10, align 8
  %12 = zext i8 %11 to i32
  %13 = and i32 %12, 2
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %416

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 120
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 121
  %20 = load i16, i16* %19, align 4
  %21 = zext i16 %20 to i32
  %22 = sub i32 32768, %18
  %23 = sub i32 %22, %21
  %24 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 2
  %27 = load i8, i8* %26, align 8
  %28 = zext i8 %27 to i32
  %29 = and i32 %28, 4
  %30 = icmp ne i32 %29, 0
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 3
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = icmp eq i32 %34, 8
  br i1 %35, label %36, label %147

36:                                               ; preds = %15
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 83
  %38 = load i8*, i8** %37, align 8
  %39 = icmp ne i8* %38, null
  br i1 %39, label %40, label %110

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 84
  %42 = load i8*, i8** %41, align 8
  %43 = icmp ne i8* %42, null
  br i1 %43, label %.preheader, label %110

.preheader:                                       ; preds = %40
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 81
  %45 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 81
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 84
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 84
  %48 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 84
  %49 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 83
  %50 = icmp ne i32 %31, 0
  %51 = icmp ult i32 0, %25
  br i1 %51, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  br label %52

52:                                               ; preds = %.lr.ph, %109
  %lsr.iv = phi i32 [ %25, %.lr.ph ], [ %lsr.iv.next, %109 ]
  %.0441 = phi i32 [ 0, %.lr.ph ], [ %.15, %109 ]
  %.01440 = phi i8* [ %2, %.lr.ph ], [ %.115, %109 ]
  %.01639 = phi i8* [ %2, %.lr.ph ], [ %.218, %109 ]
  %53 = getelementptr inbounds i8, i8* %.01440, i32 1
  %54 = load i8, i8* %.01440, align 1
  %55 = getelementptr inbounds i8, i8* %53, i32 1
  %56 = load i8, i8* %53, align 1
  %57 = getelementptr inbounds i8, i8* %55, i32 1
  %58 = load i8, i8* %55, align 1
  %59 = zext i8 %54 to i32
  %60 = zext i8 %56 to i32
  %61 = icmp ne i32 %59, %60
  %62 = zext i8 %54 to i32
  %63 = zext i8 %58 to i32
  %64 = icmp ne i32 %62, %63
  %or.cond = select i1 %61, i1 true, i1 %64
  br i1 %or.cond, label %65, label %94

65:                                               ; preds = %52
  %66 = load i8*, i8** %46, align 8
  %67 = zext i8 %54 to i64
  %68 = getelementptr inbounds i8, i8* %66, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = load i8*, i8** %47, align 8
  %71 = zext i8 %56 to i64
  %72 = getelementptr inbounds i8, i8* %70, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = load i8*, i8** %48, align 8
  %75 = zext i8 %58 to i64
  %76 = getelementptr inbounds i8, i8* %74, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = or i32 %.0441, 1
  %79 = load i8*, i8** %49, align 8
  %80 = zext i8 %69 to i32
  %81 = mul i32 %18, %80
  %82 = zext i8 %73 to i32
  %83 = mul i32 %21, %82
  %84 = add i32 %81, %83
  %85 = zext i8 %77 to i32
  %86 = mul i32 %23, %85
  %87 = add i32 %84, %86
  %88 = add i32 %87, 16384
  %89 = lshr i32 %88, 15
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %79, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = getelementptr inbounds i8, i8* %.01639, i32 1
  store i8 %92, i8* %.01639, align 1
  br label %104

94:                                               ; preds = %52
  %95 = load i8*, i8** %44, align 8
  %96 = icmp ne i8* %95, null
  br i1 %96, label %97, label %102

97:                                               ; preds = %94
  %98 = load i8*, i8** %45, align 8
  %99 = zext i8 %54 to i64
  %100 = getelementptr inbounds i8, i8* %98, i64 %99
  %101 = load i8, i8* %100, align 1
  br label %102

102:                                              ; preds = %97, %94
  %.020 = phi i8 [ %101, %97 ], [ %54, %94 ]
  %103 = getelementptr inbounds i8, i8* %.01639, i32 1
  store i8 %.020, i8* %.01639, align 1
  br label %104

104:                                              ; preds = %102, %65
  %.117 = phi i8* [ %93, %65 ], [ %103, %102 ]
  %.15 = phi i32 [ %78, %65 ], [ %.0441, %102 ]
  br i1 %50, label %105, label %109

105:                                              ; preds = %104
  %106 = getelementptr inbounds i8, i8* %57, i32 1
  %107 = load i8, i8* %57, align 1
  %108 = getelementptr inbounds i8, i8* %.117, i32 1
  store i8 %107, i8* %.117, align 1
  br label %109

109:                                              ; preds = %104, %105
  %.218 = phi i8* [ %108, %105 ], [ %.117, %104 ]
  %.115 = phi i8* [ %106, %105 ], [ %57, %104 ]
  %lsr.iv.next = add i32 %lsr.iv, -1
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  br i1 %exitcond, label %52, label %..loopexit_crit_edge

110:                                              ; preds = %40, %36
  %111 = icmp ne i32 %31, 0
  %112 = icmp ult i32 0, %25
  br i1 %112, label %.lr.ph46, label %.loopexit31

.lr.ph46:                                         ; preds = %110
  br label %113

113:                                              ; preds = %.lr.ph46, %146
  %lsr.iv65 = phi i32 [ %25, %.lr.ph46 ], [ %lsr.iv.next66, %146 ]
  %.245 = phi i32 [ 0, %.lr.ph46 ], [ %.3, %146 ]
  %.02143 = phi i8* [ %2, %.lr.ph46 ], [ %.122, %146 ]
  %.02342 = phi i8* [ %2, %.lr.ph46 ], [ %.225, %146 ]
  %114 = getelementptr inbounds i8, i8* %.02143, i32 1
  %115 = load i8, i8* %.02143, align 1
  %116 = getelementptr inbounds i8, i8* %114, i32 1
  %117 = load i8, i8* %114, align 1
  %118 = getelementptr inbounds i8, i8* %116, i32 1
  %119 = load i8, i8* %116, align 1
  %120 = zext i8 %115 to i32
  %121 = zext i8 %117 to i32
  %122 = icmp ne i32 %120, %121
  %123 = zext i8 %115 to i32
  %124 = zext i8 %119 to i32
  %125 = icmp ne i32 %123, %124
  %or.cond30 = select i1 %122, i1 true, i1 %125
  br i1 %or.cond30, label %126, label %139

126:                                              ; preds = %113
  %127 = or i32 %.245, 1
  %128 = zext i8 %115 to i32
  %129 = mul i32 %18, %128
  %130 = zext i8 %117 to i32
  %131 = mul i32 %21, %130
  %132 = add i32 %129, %131
  %133 = zext i8 %119 to i32
  %134 = mul i32 %23, %133
  %135 = add i32 %132, %134
  %136 = lshr i32 %135, 15
  %137 = trunc i32 %136 to i8
  %138 = getelementptr inbounds i8, i8* %.02342, i32 1
  store i8 %137, i8* %.02342, align 1
  br label %141

139:                                              ; preds = %113
  %140 = getelementptr inbounds i8, i8* %.02342, i32 1
  store i8 %115, i8* %.02342, align 1
  br label %141

141:                                              ; preds = %139, %126
  %.124 = phi i8* [ %138, %126 ], [ %140, %139 ]
  %.3 = phi i32 [ %127, %126 ], [ %.245, %139 ]
  br i1 %111, label %142, label %146

142:                                              ; preds = %141
  %143 = getelementptr inbounds i8, i8* %118, i32 1
  %144 = load i8, i8* %118, align 1
  %145 = getelementptr inbounds i8, i8* %.124, i32 1
  store i8 %144, i8* %.124, align 1
  br label %146

146:                                              ; preds = %141, %142
  %.225 = phi i8* [ %145, %142 ], [ %.124, %141 ]
  %.122 = phi i8* [ %143, %142 ], [ %118, %141 ]
  %lsr.iv.next66 = add i32 %lsr.iv65, -1
  %exitcond48 = icmp ne i32 %lsr.iv.next66, 0
  br i1 %exitcond48, label %113, label %..loopexit31_crit_edge

147:                                              ; preds = %15
  %148 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 86
  %149 = load i16**, i16*** %148, align 8
  %150 = icmp ne i16** %149, null
  br i1 %150, label %151, label %303

151:                                              ; preds = %147
  %152 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 85
  %153 = load i16**, i16*** %152, align 8
  %154 = icmp ne i16** %153, null
  br i1 %154, label %.preheader33, label %303

.preheader33:                                     ; preds = %151
  %155 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 86
  %156 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 79
  %157 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 86
  %158 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 79
  %159 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 86
  %160 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 79
  %161 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 85
  %162 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 79
  %163 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 82
  %164 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 82
  %165 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 79
  %166 = icmp ne i32 %31, 0
  %167 = icmp ult i32 0, %25
  br i1 %167, label %.lr.ph54, label %.loopexit34

.lr.ph54:                                         ; preds = %.preheader33
  br label %168

168:                                              ; preds = %.lr.ph54, %302
  %lsr.iv67 = phi i32 [ %25, %.lr.ph54 ], [ %lsr.iv.next68, %302 ]
  %.552 = phi i32 [ 0, %.lr.ph54 ], [ %.6, %302 ]
  %.0950 = phi i8* [ %2, %.lr.ph54 ], [ %.110, %302 ]
  %.01149 = phi i8* [ %2, %.lr.ph54 ], [ %.112, %302 ]
  %169 = getelementptr inbounds i8, i8* %.01149, i32 1
  %170 = load i8, i8* %.01149, align 1
  %171 = getelementptr inbounds i8, i8* %169, i32 1
  %172 = load i8, i8* %169, align 1
  %173 = zext i8 %170 to i32
  %174 = shl i32 %173, 8
  %175 = zext i8 %172 to i32
  %176 = or i32 %174, %175
  %177 = trunc i32 %176 to i16
  %178 = getelementptr inbounds i8, i8* %171, i32 1
  %179 = load i8, i8* %171, align 1
  %180 = getelementptr inbounds i8, i8* %178, i32 1
  %181 = load i8, i8* %178, align 1
  %182 = zext i8 %179 to i32
  %183 = shl i32 %182, 8
  %184 = zext i8 %181 to i32
  %185 = or i32 %183, %184
  %186 = trunc i32 %185 to i16
  %187 = getelementptr inbounds i8, i8* %180, i32 1
  %188 = load i8, i8* %180, align 1
  %189 = getelementptr inbounds i8, i8* %187, i32 1
  %190 = load i8, i8* %187, align 1
  %191 = zext i8 %188 to i32
  %192 = shl i32 %191, 8
  %193 = zext i8 %190 to i32
  %194 = or i32 %192, %193
  %195 = trunc i32 %194 to i16
  %196 = zext i16 %177 to i32
  %197 = zext i16 %186 to i32
  %198 = icmp eq i32 %196, %197
  br i1 %198, label %199, label %220

199:                                              ; preds = %168
  %200 = zext i16 %177 to i32
  %201 = zext i16 %195 to i32
  %202 = icmp eq i32 %200, %201
  br i1 %202, label %203, label %220

203:                                              ; preds = %199
  %204 = load i16**, i16*** %163, align 8
  %205 = icmp ne i16** %204, null
  br i1 %205, label %206, label %285

206:                                              ; preds = %203
  %207 = load i16**, i16*** %164, align 8
  %208 = zext i16 %177 to i32
  %209 = and i32 %208, 255
  %210 = load i32, i32* %165, align 8
  %211 = ashr i32 %209, %210
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds i16*, i16** %207, i64 %212
  %214 = load i16*, i16** %213, align 8
  %215 = zext i16 %177 to i32
  %216 = ashr i32 %215, 8
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i16, i16* %214, i64 %217
  %219 = load i16, i16* %218, align 2
  br label %285

220:                                              ; preds = %199, %168
  %.553 = phi i32 [ %.552, %199 ], [ %.552, %168 ]
  %221 = load i16**, i16*** %155, align 8
  %222 = zext i16 %177 to i32
  %223 = and i32 %222, 255
  %224 = load i32, i32* %156, align 8
  %225 = ashr i32 %223, %224
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds i16*, i16** %221, i64 %226
  %228 = load i16*, i16** %227, align 8
  %229 = zext i16 %177 to i32
  %230 = ashr i32 %229, 8
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds i16, i16* %228, i64 %231
  %233 = load i16, i16* %232, align 2
  %234 = load i16**, i16*** %157, align 8
  %235 = zext i16 %186 to i32
  %236 = and i32 %235, 255
  %237 = load i32, i32* %158, align 8
  %238 = ashr i32 %236, %237
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i16*, i16** %234, i64 %239
  %241 = load i16*, i16** %240, align 8
  %242 = zext i16 %186 to i32
  %243 = ashr i32 %242, 8
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds i16, i16* %241, i64 %244
  %246 = load i16, i16* %245, align 2
  %247 = load i16**, i16*** %159, align 8
  %248 = zext i16 %195 to i32
  %249 = and i32 %248, 255
  %250 = load i32, i32* %160, align 8
  %251 = ashr i32 %249, %250
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds i16*, i16** %247, i64 %252
  %254 = load i16*, i16** %253, align 8
  %255 = zext i16 %195 to i32
  %256 = ashr i32 %255, 8
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds i16, i16* %254, i64 %257
  %259 = load i16, i16* %258, align 2
  %260 = zext i16 %233 to i32
  %261 = mul i32 %18, %260
  %262 = zext i16 %246 to i32
  %263 = mul i32 %21, %262
  %264 = add i32 %261, %263
  %265 = zext i16 %259 to i32
  %266 = mul i32 %23, %265
  %267 = add i32 %264, %266
  %268 = add i32 %267, 16384
  %269 = lshr i32 %268, 15
  %270 = trunc i32 %269 to i16
  %271 = load i16**, i16*** %161, align 8
  %272 = zext i16 %270 to i32
  %273 = and i32 %272, 255
  %274 = load i32, i32* %162, align 8
  %275 = ashr i32 %273, %274
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i16*, i16** %271, i64 %276
  %278 = load i16*, i16** %277, align 8
  %279 = zext i16 %270 to i32
  %280 = ashr i32 %279, 8
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds i16, i16* %278, i64 %281
  %283 = load i16, i16* %282, align 2
  %284 = or i32 %.553, 1
  br label %285

285:                                              ; preds = %206, %203, %220
  %.17 = phi i16 [ %283, %220 ], [ %219, %206 ], [ %177, %203 ]
  %.6 = phi i32 [ %284, %220 ], [ %.552, %203 ], [ %.552, %206 ]
  %286 = zext i16 %.17 to i32
  %287 = ashr i32 %286, 8
  %288 = and i32 %287, 255
  %289 = trunc i32 %288 to i8
  %290 = getelementptr inbounds i8, i8* %.0950, i32 1
  store i8 %289, i8* %.0950, align 1
  %291 = zext i16 %.17 to i32
  %292 = and i32 %291, 255
  %293 = trunc i32 %292 to i8
  %294 = getelementptr inbounds i8, i8* %290, i32 1
  store i8 %293, i8* %290, align 1
  br i1 %166, label %295, label %302

295:                                              ; preds = %285
  %296 = getelementptr inbounds i8, i8* %189, i32 1
  %297 = load i8, i8* %189, align 1
  %298 = getelementptr inbounds i8, i8* %294, i32 1
  store i8 %297, i8* %294, align 1
  %299 = getelementptr inbounds i8, i8* %296, i32 1
  %300 = load i8, i8* %296, align 1
  %301 = getelementptr inbounds i8, i8* %298, i32 1
  store i8 %300, i8* %298, align 1
  br label %302

302:                                              ; preds = %285, %295
  %.112 = phi i8* [ %299, %295 ], [ %189, %285 ]
  %.110 = phi i8* [ %301, %295 ], [ %294, %285 ]
  %lsr.iv.next68 = add i32 %lsr.iv67, -1
  %exitcond56 = icmp ne i32 %lsr.iv.next68, 0
  br i1 %exitcond56, label %168, label %..loopexit34_crit_edge

303:                                              ; preds = %151, %147
  %304 = icmp ne i32 %31, 0
  %305 = icmp ult i32 0, %25
  br i1 %305, label %.lr.ph62, label %.loopexit36

.lr.ph62:                                         ; preds = %303
  br label %306

306:                                              ; preds = %.lr.ph62, %371
  %lsr.iv69 = phi i32 [ %25, %.lr.ph62 ], [ %lsr.iv.next70, %371 ]
  %.0160 = phi i8* [ %2, %.lr.ph62 ], [ %.1, %371 ]
  %.0259 = phi i8* [ %2, %.lr.ph62 ], [ %.13, %371 ]
  %.757 = phi i32 [ 0, %.lr.ph62 ], [ %.8, %371 ]
  %307 = getelementptr inbounds i8, i8* %.0259, i32 1
  %308 = load i8, i8* %.0259, align 1
  %309 = getelementptr inbounds i8, i8* %307, i32 1
  %310 = load i8, i8* %307, align 1
  %311 = zext i8 %308 to i32
  %312 = shl i32 %311, 8
  %313 = zext i8 %310 to i32
  %314 = or i32 %312, %313
  %315 = trunc i32 %314 to i16
  %316 = getelementptr inbounds i8, i8* %309, i32 1
  %317 = load i8, i8* %309, align 1
  %318 = getelementptr inbounds i8, i8* %316, i32 1
  %319 = load i8, i8* %316, align 1
  %320 = zext i8 %317 to i32
  %321 = shl i32 %320, 8
  %322 = zext i8 %319 to i32
  %323 = or i32 %321, %322
  %324 = trunc i32 %323 to i16
  %325 = getelementptr inbounds i8, i8* %318, i32 1
  %326 = load i8, i8* %318, align 1
  %327 = getelementptr inbounds i8, i8* %325, i32 1
  %328 = load i8, i8* %325, align 1
  %329 = zext i8 %326 to i32
  %330 = shl i32 %329, 8
  %331 = zext i8 %328 to i32
  %332 = or i32 %330, %331
  %333 = trunc i32 %332 to i16
  %334 = zext i16 %315 to i32
  %335 = zext i16 %324 to i32
  %336 = icmp ne i32 %334, %335
  br i1 %336, label %341, label %337

337:                                              ; preds = %306
  %338 = zext i16 %315 to i32
  %339 = zext i16 %333 to i32
  %340 = icmp ne i32 %338, %339
  br i1 %340, label %341, label %343

341:                                              ; preds = %337, %306
  %.758 = phi i32 [ %.757, %337 ], [ %.757, %306 ]
  %342 = or i32 %.758, 1
  br label %343

343:                                              ; preds = %341, %337
  %.8 = phi i32 [ %342, %341 ], [ %.757, %337 ]
  %344 = zext i16 %315 to i32
  %345 = mul i32 %18, %344
  %346 = zext i16 %324 to i32
  %347 = mul i32 %21, %346
  %348 = add i32 %345, %347
  %349 = zext i16 %333 to i32
  %350 = mul i32 %23, %349
  %351 = add i32 %348, %350
  %352 = add i32 %351, 16384
  %353 = lshr i32 %352, 15
  %354 = trunc i32 %353 to i16
  %355 = zext i16 %354 to i32
  %356 = ashr i32 %355, 8
  %357 = and i32 %356, 255
  %358 = trunc i32 %357 to i8
  %359 = getelementptr inbounds i8, i8* %.0160, i32 1
  store i8 %358, i8* %.0160, align 1
  %360 = zext i16 %354 to i32
  %361 = and i32 %360, 255
  %362 = trunc i32 %361 to i8
  %363 = getelementptr inbounds i8, i8* %359, i32 1
  store i8 %362, i8* %359, align 1
  br i1 %304, label %364, label %371

364:                                              ; preds = %343
  %365 = getelementptr inbounds i8, i8* %327, i32 1
  %366 = load i8, i8* %327, align 1
  %367 = getelementptr inbounds i8, i8* %363, i32 1
  store i8 %366, i8* %363, align 1
  %368 = getelementptr inbounds i8, i8* %365, i32 1
  %369 = load i8, i8* %365, align 1
  %370 = getelementptr inbounds i8, i8* %367, i32 1
  store i8 %369, i8* %367, align 1
  br label %371

371:                                              ; preds = %343, %364
  %.13 = phi i8* [ %368, %364 ], [ %327, %343 ]
  %.1 = phi i8* [ %370, %364 ], [ %363, %343 ]
  %lsr.iv.next70 = add i32 %lsr.iv69, -1
  %exitcond64 = icmp ne i32 %lsr.iv.next70, 0
  br i1 %exitcond64, label %306, label %..loopexit36_crit_edge

..loopexit_crit_edge:                             ; preds = %109
  %split = phi i32 [ %.15, %109 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader
  %.10.ph = phi i32 [ %split, %..loopexit_crit_edge ], [ 0, %.preheader ]
  br label %372

..loopexit31_crit_edge:                           ; preds = %146
  %split47 = phi i32 [ %.3, %146 ]
  br label %.loopexit31

.loopexit31:                                      ; preds = %..loopexit31_crit_edge, %110
  %.10.ph32 = phi i32 [ %split47, %..loopexit31_crit_edge ], [ 0, %110 ]
  br label %372

..loopexit34_crit_edge:                           ; preds = %302
  %split55 = phi i32 [ %.6, %302 ]
  br label %.loopexit34

.loopexit34:                                      ; preds = %..loopexit34_crit_edge, %.preheader33
  %.10.ph35 = phi i32 [ %split55, %..loopexit34_crit_edge ], [ 0, %.preheader33 ]
  br label %372

..loopexit36_crit_edge:                           ; preds = %371
  %split63 = phi i32 [ %.8, %371 ]
  br label %.loopexit36

.loopexit36:                                      ; preds = %..loopexit36_crit_edge, %303
  %.10.ph37 = phi i32 [ %split63, %..loopexit36_crit_edge ], [ 0, %303 ]
  br label %372

372:                                              ; preds = %.loopexit36, %.loopexit34, %.loopexit31, %.loopexit
  %.10 = phi i32 [ %.10.ph, %.loopexit ], [ %.10.ph32, %.loopexit31 ], [ %.10.ph35, %.loopexit34 ], [ %.10.ph37, %.loopexit36 ]
  %373 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 4
  %374 = load i8, i8* %373, align 2
  %375 = zext i8 %374 to i32
  %376 = sub nsw i32 %375, 2
  %377 = trunc i32 %376 to i8
  %378 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 4
  store i8 %377, i8* %378, align 2
  %379 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 2
  %380 = load i8, i8* %379, align 8
  %381 = zext i8 %380 to i32
  %382 = and i32 %381, -3
  %383 = trunc i32 %382 to i8
  %384 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 2
  store i8 %383, i8* %384, align 8
  %385 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 4
  %386 = load i8, i8* %385, align 2
  %387 = zext i8 %386 to i32
  %388 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 3
  %389 = load i8, i8* %388, align 1
  %390 = zext i8 %389 to i32
  %391 = mul nsw i32 %387, %390
  %392 = trunc i32 %391 to i8
  %393 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 5
  store i8 %392, i8* %393, align 1
  %394 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 5
  %395 = load i8, i8* %394, align 1
  %396 = zext i8 %395 to i32
  %397 = icmp sge i32 %396, 8
  br i1 %397, label %398, label %405

398:                                              ; preds = %372
  %399 = zext i32 %25 to i64
  %400 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 5
  %401 = load i8, i8* %400, align 1
  %402 = zext i8 %401 to i64
  %403 = lshr i64 %402, 3
  %404 = mul i64 %399, %403
  br label %413

405:                                              ; preds = %372
  %406 = zext i32 %25 to i64
  %407 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 5
  %408 = load i8, i8* %407, align 1
  %409 = zext i8 %408 to i64
  %410 = mul i64 %406, %409
  %411 = add i64 %410, 7
  %412 = lshr i64 %411, 3
  br label %413

413:                                              ; preds = %405, %398
  %414 = phi i64 [ %404, %398 ], [ %412, %405 ]
  %415 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 1
  store i64 %414, i64* %415, align 8
  br label %416

416:                                              ; preds = %413, %9, %3
  %.11 = phi i32 [ %.10, %413 ], [ 0, %9 ], [ 0, %3 ]
  ret i32 %.11
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_gray_to_rgb(%struct.png_row_info_struct* %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = icmp sge i32 %7, 8
  br i1 %8, label %9, label %123

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %11 = load i8, i8* %10, align 8
  %12 = zext i8 %11 to i32
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %123

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %17 = load i8, i8* %16, align 8
  %18 = zext i8 %17 to i32
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %46

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = icmp eq i32 %23, 8
  br i1 %24, label %25, label %33

25:                                               ; preds = %20
  %26 = zext i32 %4 to i64
  %27 = icmp ult i32 0, %4
  br i1 %27, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %25
  %scevgep = getelementptr i8, i8* %1, i64 -1
  %28 = mul nuw nsw i64 %26, 3
  br label %29

29:                                               ; preds = %.lr.ph, %29
  %lsr.iv31 = phi i64 [ %28, %.lr.ph ], [ %lsr.iv.next32, %29 ]
  %lsr.iv = phi i64 [ %26, %.lr.ph ], [ %lsr.iv.next, %29 ]
  %scevgep30 = getelementptr i8, i8* %scevgep, i64 %lsr.iv
  %scevgep33 = getelementptr i8, i8* %scevgep, i64 %lsr.iv31
  %30 = load i8, i8* %scevgep30, align 1
  store i8 %30, i8* %scevgep33, align 1
  %31 = load i8, i8* %scevgep30, align 1
  %scevgep34 = getelementptr i8, i8* %scevgep33, i64 -1
  store i8 %31, i8* %scevgep34, align 1
  %32 = load i8, i8* %scevgep30, align 1
  %scevgep35 = getelementptr i8, i8* %scevgep33, i64 -2
  store i8 %32, i8* %scevgep35, align 1
  %lsr.iv.next = add nsw i64 %lsr.iv, -1
  %tmp = trunc i64 %lsr.iv.next to i32
  %lsr.iv.next32 = add nsw i64 %lsr.iv31, -3
  %exitcond = icmp ne i32 %tmp, 0
  br i1 %exitcond, label %29, label %..loopexit_crit_edge

33:                                               ; preds = %20
  %34 = zext i32 %4 to i64
  %35 = icmp ult i32 0, %4
  br i1 %35, label %.lr.ph18, label %.loopexit9

.lr.ph18:                                         ; preds = %33
  %scevgep40 = getelementptr i8, i8* %1, i64 -1
  %36 = mul nuw nsw i64 %34, 3
  br label %37

37:                                               ; preds = %.lr.ph18, %37
  %lsr.iv42 = phi i64 [ %36, %.lr.ph18 ], [ %lsr.iv.next43, %37 ]
  %lsr.iv37 = phi i64 [ %34, %.lr.ph18 ], [ %lsr.iv.next38, %37 ]
  %38 = shl nsw i64 %lsr.iv37, 1
  %scevgep41 = getelementptr i8, i8* %scevgep40, i64 %38
  %39 = shl nsw i64 %lsr.iv42, 1
  %scevgep44 = getelementptr i8, i8* %scevgep40, i64 %39
  %40 = load i8, i8* %scevgep41, align 1
  store i8 %40, i8* %scevgep44, align 1
  %scevgep45 = getelementptr i8, i8* %scevgep41, i64 -1
  %41 = load i8, i8* %scevgep45, align 1
  %scevgep49 = getelementptr i8, i8* %scevgep44, i64 -1
  store i8 %41, i8* %scevgep49, align 1
  %42 = load i8, i8* %scevgep41, align 1
  %scevgep50 = getelementptr i8, i8* %scevgep44, i64 -2
  store i8 %42, i8* %scevgep50, align 1
  %scevgep46 = getelementptr i8, i8* %scevgep41, i64 -1
  %43 = load i8, i8* %scevgep46, align 1
  %scevgep51 = getelementptr i8, i8* %scevgep44, i64 -3
  store i8 %43, i8* %scevgep51, align 1
  %44 = load i8, i8* %scevgep41, align 1
  %scevgep52 = getelementptr i8, i8* %scevgep44, i64 -4
  store i8 %44, i8* %scevgep52, align 1
  %scevgep47 = getelementptr i8, i8* %scevgep41, i64 -1
  %45 = load i8, i8* %scevgep47, align 1
  %scevgep53 = getelementptr i8, i8* %scevgep44, i64 -5
  store i8 %45, i8* %scevgep53, align 1
  %lsr.iv.next38 = add nsw i64 %lsr.iv37, -1
  %tmp39 = trunc i64 %lsr.iv.next38 to i32
  %lsr.iv.next43 = add nsw i64 %lsr.iv42, -3
  %exitcond19 = icmp ne i32 %tmp39, 0
  br i1 %exitcond19, label %37, label %..loopexit9_crit_edge

46:                                               ; preds = %15
  %47 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %48 = load i8, i8* %47, align 8
  %49 = zext i8 %48 to i32
  %50 = icmp eq i32 %49, 4
  br i1 %50, label %51, label %80

51:                                               ; preds = %46
  %52 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = icmp eq i32 %54, 8
  br i1 %55, label %56, label %66

56:                                               ; preds = %51
  %57 = zext i32 %4 to i64
  %58 = icmp ult i32 0, %4
  br i1 %58, label %.lr.ph23, label %.loopexit10

.lr.ph23:                                         ; preds = %56
  %scevgep58 = getelementptr i8, i8* %1, i64 -1
  br label %59

59:                                               ; preds = %.lr.ph23, %59
  %lsr.iv55 = phi i64 [ %57, %.lr.ph23 ], [ %lsr.iv.next56, %59 ]
  %60 = shl nsw i64 %lsr.iv55, 2
  %scevgep59 = getelementptr i8, i8* %scevgep58, i64 %60
  %61 = shl nsw i64 %lsr.iv55, 1
  %scevgep60 = getelementptr i8, i8* %scevgep58, i64 %61
  %62 = load i8, i8* %scevgep60, align 1
  store i8 %62, i8* %scevgep59, align 1
  %scevgep61 = getelementptr i8, i8* %scevgep60, i64 -1
  %63 = load i8, i8* %scevgep61, align 1
  %scevgep65 = getelementptr i8, i8* %scevgep59, i64 -1
  store i8 %63, i8* %scevgep65, align 1
  %scevgep62 = getelementptr i8, i8* %scevgep60, i64 -1
  %64 = load i8, i8* %scevgep62, align 1
  %scevgep66 = getelementptr i8, i8* %scevgep59, i64 -2
  store i8 %64, i8* %scevgep66, align 1
  %scevgep63 = getelementptr i8, i8* %scevgep60, i64 -1
  %65 = load i8, i8* %scevgep63, align 1
  %scevgep67 = getelementptr i8, i8* %scevgep59, i64 -3
  store i8 %65, i8* %scevgep67, align 1
  %lsr.iv.next56 = add nsw i64 %lsr.iv55, -1
  %tmp57 = trunc i64 %lsr.iv.next56 to i32
  %exitcond24 = icmp ne i32 %tmp57, 0
  br i1 %exitcond24, label %59, label %..loopexit10_crit_edge

66:                                               ; preds = %51
  %67 = zext i32 %4 to i64
  %68 = icmp ult i32 0, %4
  br i1 %68, label %.lr.ph28, label %.loopexit11

.lr.ph28:                                         ; preds = %66
  %scevgep69 = getelementptr i8, i8* %1, i64 -1
  br label %69

69:                                               ; preds = %.lr.ph28, %69
  %lsr.iv70 = phi i64 [ %67, %.lr.ph28 ], [ %lsr.iv.next71, %69 ]
  %70 = shl nsw i64 %lsr.iv70, 3
  %scevgep72 = getelementptr i8, i8* %scevgep69, i64 %70
  %71 = shl nsw i64 %lsr.iv70, 2
  %scevgep73 = getelementptr i8, i8* %scevgep69, i64 %71
  %72 = load i8, i8* %scevgep73, align 1
  store i8 %72, i8* %scevgep72, align 1
  %scevgep75 = getelementptr i8, i8* %scevgep73, i64 -1
  %73 = load i8, i8* %scevgep75, align 1
  %scevgep83 = getelementptr i8, i8* %scevgep72, i64 -1
  store i8 %73, i8* %scevgep83, align 1
  %scevgep76 = getelementptr i8, i8* %scevgep73, i64 -2
  %74 = load i8, i8* %scevgep76, align 1
  %scevgep84 = getelementptr i8, i8* %scevgep72, i64 -2
  store i8 %74, i8* %scevgep84, align 1
  %scevgep77 = getelementptr i8, i8* %scevgep73, i64 -3
  %75 = load i8, i8* %scevgep77, align 1
  %scevgep85 = getelementptr i8, i8* %scevgep72, i64 -3
  store i8 %75, i8* %scevgep85, align 1
  %scevgep78 = getelementptr i8, i8* %scevgep73, i64 -2
  %76 = load i8, i8* %scevgep78, align 1
  %scevgep86 = getelementptr i8, i8* %scevgep72, i64 -4
  store i8 %76, i8* %scevgep86, align 1
  %scevgep79 = getelementptr i8, i8* %scevgep73, i64 -3
  %77 = load i8, i8* %scevgep79, align 1
  %scevgep87 = getelementptr i8, i8* %scevgep72, i64 -5
  store i8 %77, i8* %scevgep87, align 1
  %scevgep80 = getelementptr i8, i8* %scevgep73, i64 -2
  %78 = load i8, i8* %scevgep80, align 1
  %scevgep88 = getelementptr i8, i8* %scevgep72, i64 -6
  store i8 %78, i8* %scevgep88, align 1
  %scevgep81 = getelementptr i8, i8* %scevgep73, i64 -3
  %79 = load i8, i8* %scevgep81, align 1
  %scevgep89 = getelementptr i8, i8* %scevgep72, i64 -7
  store i8 %79, i8* %scevgep89, align 1
  %lsr.iv.next71 = add nsw i64 %lsr.iv70, -1
  %tmp74 = trunc i64 %lsr.iv.next71 to i32
  %exitcond29 = icmp ne i32 %tmp74, 0
  br i1 %exitcond29, label %69, label %..loopexit11_crit_edge

..loopexit_crit_edge:                             ; preds = %29
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %25
  br label %80

..loopexit9_crit_edge:                            ; preds = %37
  br label %.loopexit9

.loopexit9:                                       ; preds = %..loopexit9_crit_edge, %33
  br label %80

..loopexit10_crit_edge:                           ; preds = %59
  br label %.loopexit10

.loopexit10:                                      ; preds = %..loopexit10_crit_edge, %56
  br label %80

..loopexit11_crit_edge:                           ; preds = %69
  br label %.loopexit11

.loopexit11:                                      ; preds = %..loopexit11_crit_edge, %66
  br label %80

80:                                               ; preds = %.loopexit11, %.loopexit10, %.loopexit9, %.loopexit, %46
  %81 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  %82 = load i8, i8* %81, align 2
  %83 = zext i8 %82 to i32
  %84 = add nsw i32 %83, 2
  %85 = trunc i32 %84 to i8
  %86 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  store i8 %85, i8* %86, align 2
  %87 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %88 = load i8, i8* %87, align 8
  %89 = zext i8 %88 to i32
  %90 = or i32 %89, 2
  %91 = trunc i32 %90 to i8
  store i8 %91, i8* %87, align 8
  %92 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  %93 = load i8, i8* %92, align 2
  %94 = zext i8 %93 to i32
  %95 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = mul nsw i32 %94, %97
  %99 = trunc i32 %98 to i8
  %100 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 %99, i8* %100, align 1
  %101 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = icmp sge i32 %103, 8
  br i1 %104, label %105, label %112

105:                                              ; preds = %80
  %106 = zext i32 %4 to i64
  %107 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i64
  %110 = lshr i64 %109, 3
  %111 = mul i64 %106, %110
  br label %120

112:                                              ; preds = %80
  %113 = zext i32 %4 to i64
  %114 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i64
  %117 = mul i64 %113, %116
  %118 = add i64 %117, 7
  %119 = lshr i64 %118, 3
  br label %120

120:                                              ; preds = %112, %105
  %121 = phi i64 [ %111, %105 ], [ %119, %112 ]
  %122 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %121, i64* %122, align 8
  br label %123

123:                                              ; preds = %120, %9, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_compose(%struct.png_row_info_struct* %0, i8* %1, %struct.png_struct_def* noalias %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 81
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 83
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 84
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 82
  %11 = load i16**, i16*** %10, align 8
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 85
  %13 = load i16**, i16*** %12, align 8
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 86
  %15 = load i16**, i16*** %14, align 8
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 79
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 16
  %19 = load i32, i32* %18, align 8
  %20 = and i32 %19, 8192
  %21 = icmp ne i32 %20, 0
  %22 = zext i1 %21 to i32
  %23 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %26 = load i8, i8* %25, align 8
  %27 = zext i8 %26 to i32
  switch i32 %27, label %1704 [
    i32 0, label %28
    i32 2, label %367
    i32 4, label %687
    i32 6, label %974
  ]

28:                                               ; preds = %3
  %29 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  switch i32 %31, label %1704 [
    i32 1, label %.preheader
    i32 2, label %63
    i32 4, label %153
    i32 8, label %239
    i32 16, label %278
  ]

.preheader:                                       ; preds = %28
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %33 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %32, i32 0, i32 4
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %35 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %34, i32 0, i32 4
  %36 = icmp ult i32 0, %24
  br i1 %36, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  br label %37

37:                                               ; preds = %.lr.ph, %59
  %lsr.iv = phi i32 [ %24, %.lr.ph ], [ %lsr.iv.next, %59 ]
  %.0692 = phi i32 [ 7, %.lr.ph ], [ %.17, %59 ]
  %.02190 = phi i8* [ %1, %.lr.ph ], [ %.122, %59 ]
  %38 = load i8, i8* %.02190, align 1
  %39 = zext i8 %38 to i32
  %40 = ashr i32 %39, %.0692
  %41 = and i32 %40, 1
  %42 = trunc i32 %41 to i16
  %43 = zext i16 %42 to i32
  %44 = load i16, i16* %33, align 8
  %45 = zext i16 %44 to i32
  %46 = icmp eq i32 %43, %45
  br i1 %46, label %47, label %59

47:                                               ; preds = %37
  %48 = load i8, i8* %.02190, align 1
  %49 = zext i8 %48 to i32
  %50 = sub nsw i32 7, %.0692
  %51 = ashr i32 32639, %50
  %52 = and i32 %49, %51
  %53 = load i16, i16* %35, align 4
  %54 = zext i16 %53 to i32
  %55 = shl i32 %54, %.0692
  %56 = or i32 %52, %55
  %57 = and i32 %56, 255
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %.02190, align 1
  br label %59

59:                                               ; preds = %47, %37
  %60 = icmp eq i32 %.0692, 0
  %61 = getelementptr inbounds i8, i8* %.02190, i32 1
  %62 = add nsw i32 %.0692, -1
  %.122 = select i1 %60, i8* %61, i8* %.02190
  %.17 = select i1 %60, i32 7, i32 %62
  %lsr.iv.next = add i32 %lsr.iv, -1
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  br i1 %exitcond, label %37, label %..loopexit_crit_edge

63:                                               ; preds = %28
  %64 = icmp ne i8* %5, null
  br i1 %64, label %.preheader50, label %.preheader52

.preheader52:                                     ; preds = %63
  %65 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %66 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %65, i32 0, i32 4
  %67 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %68 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %67, i32 0, i32 4
  %69 = icmp ult i32 0, %24
  br i1 %69, label %.lr.ph102, label %.loopexit53

.lr.ph102:                                        ; preds = %.preheader52
  br label %127

.preheader50:                                     ; preds = %63
  %70 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %71 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %70, i32 0, i32 4
  %72 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %73 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %72, i32 0, i32 4
  %74 = icmp ult i32 0, %24
  br i1 %74, label %.lr.ph97, label %.loopexit51

.lr.ph97:                                         ; preds = %.preheader50
  br label %75

75:                                               ; preds = %.lr.ph97, %123
  %lsr.iv191 = phi i32 [ %24, %.lr.ph97 ], [ %lsr.iv.next192, %123 ]
  %.2895 = phi i32 [ 6, %.lr.ph97 ], [ %.3, %123 ]
  %.22393 = phi i8* [ %1, %.lr.ph97 ], [ %.324, %123 ]
  %76 = load i8, i8* %.22393, align 1
  %77 = zext i8 %76 to i32
  %78 = ashr i32 %77, %.2895
  %79 = and i32 %78, 3
  %80 = trunc i32 %79 to i16
  %81 = zext i16 %80 to i32
  %82 = load i16, i16* %71, align 8
  %83 = zext i16 %82 to i32
  %84 = icmp eq i32 %81, %83
  br i1 %84, label %85, label %97

85:                                               ; preds = %75
  %86 = load i8, i8* %.22393, align 1
  %87 = zext i8 %86 to i32
  %88 = sub nsw i32 6, %.2895
  %89 = ashr i32 16191, %88
  %90 = and i32 %87, %89
  %91 = load i16, i16* %73, align 4
  %92 = zext i16 %91 to i32
  %93 = shl i32 %92, %.2895
  %94 = or i32 %90, %93
  %95 = and i32 %94, 255
  %96 = trunc i32 %95 to i8
  store i8 %96, i8* %.22393, align 1
  br label %123

97:                                               ; preds = %75
  %98 = load i8, i8* %.22393, align 1
  %99 = zext i8 %98 to i32
  %100 = ashr i32 %99, %.2895
  %101 = and i32 %100, 3
  %102 = shl i32 %101, 2
  %103 = or i32 %101, %102
  %104 = shl i32 %101, 4
  %105 = or i32 %103, %104
  %106 = shl i32 %101, 6
  %107 = or i32 %105, %106
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %5, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = ashr i32 %111, 6
  %113 = and i32 %112, 3
  %114 = load i8, i8* %.22393, align 1
  %115 = zext i8 %114 to i32
  %116 = sub nsw i32 6, %.2895
  %117 = ashr i32 16191, %116
  %118 = and i32 %115, %117
  %119 = shl i32 %113, %.2895
  %120 = or i32 %118, %119
  %121 = and i32 %120, 255
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %.22393, align 1
  br label %123

123:                                              ; preds = %97, %85
  %.2896 = phi i32 [ %.2895, %97 ], [ %.2895, %85 ]
  %124 = icmp eq i32 %.2895, 0
  %125 = getelementptr inbounds i8, i8* %.22393, i32 1
  %126 = sub nsw i32 %.2896, 2
  %.324 = select i1 %124, i8* %125, i8* %.22393
  %.3 = select i1 %124, i32 6, i32 %126
  %lsr.iv.next192 = add i32 %lsr.iv191, -1
  %exitcond98 = icmp ne i32 %lsr.iv.next192, 0
  br i1 %exitcond98, label %75, label %..loopexit51_crit_edge

127:                                              ; preds = %.lr.ph102, %149
  %lsr.iv193 = phi i32 [ %24, %.lr.ph102 ], [ %lsr.iv.next194, %149 ]
  %.4101 = phi i32 [ 6, %.lr.ph102 ], [ %.5, %149 ]
  %.42599 = phi i8* [ %1, %.lr.ph102 ], [ %.526, %149 ]
  %128 = load i8, i8* %.42599, align 1
  %129 = zext i8 %128 to i32
  %130 = ashr i32 %129, %.4101
  %131 = and i32 %130, 3
  %132 = trunc i32 %131 to i16
  %133 = zext i16 %132 to i32
  %134 = load i16, i16* %66, align 8
  %135 = zext i16 %134 to i32
  %136 = icmp eq i32 %133, %135
  br i1 %136, label %137, label %149

137:                                              ; preds = %127
  %138 = load i8, i8* %.42599, align 1
  %139 = zext i8 %138 to i32
  %140 = sub nsw i32 6, %.4101
  %141 = ashr i32 16191, %140
  %142 = and i32 %139, %141
  %143 = load i16, i16* %68, align 4
  %144 = zext i16 %143 to i32
  %145 = shl i32 %144, %.4101
  %146 = or i32 %142, %145
  %147 = and i32 %146, 255
  %148 = trunc i32 %147 to i8
  store i8 %148, i8* %.42599, align 1
  br label %149

149:                                              ; preds = %137, %127
  %150 = icmp eq i32 %.4101, 0
  %151 = getelementptr inbounds i8, i8* %.42599, i32 1
  %152 = sub nsw i32 %.4101, 2
  %.526 = select i1 %150, i8* %151, i8* %.42599
  %.5 = select i1 %150, i32 6, i32 %152
  %lsr.iv.next194 = add i32 %lsr.iv193, -1
  %exitcond103 = icmp ne i32 %lsr.iv.next194, 0
  br i1 %exitcond103, label %127, label %..loopexit53_crit_edge

153:                                              ; preds = %28
  %154 = icmp ne i8* %5, null
  br i1 %154, label %.preheader54, label %.preheader56

.preheader56:                                     ; preds = %153
  %155 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %156 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %155, i32 0, i32 4
  %157 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %158 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %157, i32 0, i32 4
  %159 = icmp ult i32 0, %24
  br i1 %159, label %.lr.ph113, label %.loopexit57

.lr.ph113:                                        ; preds = %.preheader56
  br label %213

.preheader54:                                     ; preds = %153
  %160 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %161 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %160, i32 0, i32 4
  %162 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %163 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %162, i32 0, i32 4
  %164 = icmp ult i32 0, %24
  br i1 %164, label %.lr.ph108, label %.loopexit55

.lr.ph108:                                        ; preds = %.preheader54
  br label %165

165:                                              ; preds = %.lr.ph108, %209
  %lsr.iv195 = phi i32 [ %24, %.lr.ph108 ], [ %lsr.iv.next196, %209 ]
  %.6106 = phi i32 [ 4, %.lr.ph108 ], [ %.7, %209 ]
  %.627104 = phi i8* [ %1, %.lr.ph108 ], [ %.728, %209 ]
  %166 = load i8, i8* %.627104, align 1
  %167 = zext i8 %166 to i32
  %168 = ashr i32 %167, %.6106
  %169 = and i32 %168, 15
  %170 = trunc i32 %169 to i16
  %171 = zext i16 %170 to i32
  %172 = load i16, i16* %161, align 8
  %173 = zext i16 %172 to i32
  %174 = icmp eq i32 %171, %173
  br i1 %174, label %175, label %187

175:                                              ; preds = %165
  %176 = load i8, i8* %.627104, align 1
  %177 = zext i8 %176 to i32
  %178 = sub nsw i32 4, %.6106
  %179 = ashr i32 3855, %178
  %180 = and i32 %177, %179
  %181 = load i16, i16* %163, align 4
  %182 = zext i16 %181 to i32
  %183 = shl i32 %182, %.6106
  %184 = or i32 %180, %183
  %185 = and i32 %184, 255
  %186 = trunc i32 %185 to i8
  store i8 %186, i8* %.627104, align 1
  br label %209

187:                                              ; preds = %165
  %188 = load i8, i8* %.627104, align 1
  %189 = zext i8 %188 to i32
  %190 = ashr i32 %189, %.6106
  %191 = and i32 %190, 15
  %192 = shl i32 %191, 4
  %193 = or i32 %191, %192
  %194 = zext i32 %193 to i64
  %195 = getelementptr inbounds i8, i8* %5, i64 %194
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i32
  %198 = ashr i32 %197, 4
  %199 = and i32 %198, 15
  %200 = load i8, i8* %.627104, align 1
  %201 = zext i8 %200 to i32
  %202 = sub nsw i32 4, %.6106
  %203 = ashr i32 3855, %202
  %204 = and i32 %201, %203
  %205 = shl i32 %199, %.6106
  %206 = or i32 %204, %205
  %207 = and i32 %206, 255
  %208 = trunc i32 %207 to i8
  store i8 %208, i8* %.627104, align 1
  br label %209

209:                                              ; preds = %187, %175
  %.6107 = phi i32 [ %.6106, %187 ], [ %.6106, %175 ]
  %210 = icmp eq i32 %.6106, 0
  %211 = getelementptr inbounds i8, i8* %.627104, i32 1
  %212 = sub nsw i32 %.6107, 4
  %.728 = select i1 %210, i8* %211, i8* %.627104
  %.7 = select i1 %210, i32 4, i32 %212
  %lsr.iv.next196 = add i32 %lsr.iv195, -1
  %exitcond109 = icmp ne i32 %lsr.iv.next196, 0
  br i1 %exitcond109, label %165, label %..loopexit55_crit_edge

213:                                              ; preds = %.lr.ph113, %235
  %lsr.iv197 = phi i32 [ %24, %.lr.ph113 ], [ %lsr.iv.next198, %235 ]
  %.8112 = phi i32 [ 4, %.lr.ph113 ], [ %.9, %235 ]
  %.829110 = phi i8* [ %1, %.lr.ph113 ], [ %.930, %235 ]
  %214 = load i8, i8* %.829110, align 1
  %215 = zext i8 %214 to i32
  %216 = ashr i32 %215, %.8112
  %217 = and i32 %216, 15
  %218 = trunc i32 %217 to i16
  %219 = zext i16 %218 to i32
  %220 = load i16, i16* %156, align 8
  %221 = zext i16 %220 to i32
  %222 = icmp eq i32 %219, %221
  br i1 %222, label %223, label %235

223:                                              ; preds = %213
  %224 = load i8, i8* %.829110, align 1
  %225 = zext i8 %224 to i32
  %226 = sub nsw i32 4, %.8112
  %227 = ashr i32 3855, %226
  %228 = and i32 %225, %227
  %229 = load i16, i16* %158, align 4
  %230 = zext i16 %229 to i32
  %231 = shl i32 %230, %.8112
  %232 = or i32 %228, %231
  %233 = and i32 %232, 255
  %234 = trunc i32 %233 to i8
  store i8 %234, i8* %.829110, align 1
  br label %235

235:                                              ; preds = %223, %213
  %236 = icmp eq i32 %.8112, 0
  %237 = getelementptr inbounds i8, i8* %.829110, i32 1
  %238 = sub nsw i32 %.8112, 4
  %.930 = select i1 %236, i8* %237, i8* %.829110
  %.9 = select i1 %236, i32 4, i32 %238
  %lsr.iv.next198 = add i32 %lsr.iv197, -1
  %exitcond114 = icmp ne i32 %lsr.iv.next198, 0
  br i1 %exitcond114, label %213, label %..loopexit57_crit_edge

239:                                              ; preds = %28
  %240 = icmp ne i8* %5, null
  br i1 %240, label %.preheader58, label %.preheader60

.preheader60:                                     ; preds = %239
  %241 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %242 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %241, i32 0, i32 4
  %243 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %244 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %243, i32 0, i32 4
  %245 = icmp ult i32 0, %24
  br i1 %245, label %.lr.ph122, label %.loopexit61

.lr.ph122:                                        ; preds = %.preheader60
  %246 = zext i32 %24 to i64
  br label %268

.preheader58:                                     ; preds = %239
  %247 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %248 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %247, i32 0, i32 4
  %249 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %250 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %249, i32 0, i32 4
  %251 = icmp ult i32 0, %24
  br i1 %251, label %.lr.ph118, label %.loopexit59

.lr.ph118:                                        ; preds = %.preheader58
  br label %252

252:                                              ; preds = %.lr.ph118, %266
  %lsr.iv199 = phi i32 [ %24, %.lr.ph118 ], [ %lsr.iv.next200, %266 ]
  %.1031115 = phi i8* [ %1, %.lr.ph118 ], [ %267, %266 ]
  %253 = load i8, i8* %.1031115, align 1
  %254 = zext i8 %253 to i32
  %255 = load i16, i16* %248, align 8
  %256 = zext i16 %255 to i32
  %257 = icmp eq i32 %254, %256
  br i1 %257, label %258, label %261

258:                                              ; preds = %252
  %259 = load i16, i16* %250, align 4
  %260 = trunc i16 %259 to i8
  store i8 %260, i8* %.1031115, align 1
  br label %266

261:                                              ; preds = %252
  %262 = load i8, i8* %.1031115, align 1
  %263 = zext i8 %262 to i64
  %264 = getelementptr inbounds i8, i8* %5, i64 %263
  %265 = load i8, i8* %264, align 1
  store i8 %265, i8* %.1031115, align 1
  br label %266

266:                                              ; preds = %258, %261
  %.1031116 = phi i8* [ %.1031115, %258 ], [ %.1031115, %261 ]
  %267 = getelementptr inbounds i8, i8* %.1031116, i32 1
  %lsr.iv.next200 = add i32 %lsr.iv199, -1
  %exitcond119 = icmp ne i32 %lsr.iv.next200, 0
  br i1 %exitcond119, label %252, label %..loopexit59_crit_edge

268:                                              ; preds = %.lr.ph122, %277
  %lsr.iv201 = phi i64 [ 0, %.lr.ph122 ], [ %lsr.iv.next202, %277 ]
  %scevgep = getelementptr i8, i8* %1, i64 %lsr.iv201
  %269 = load i8, i8* %scevgep, align 1
  %270 = zext i8 %269 to i32
  %271 = load i16, i16* %242, align 8
  %272 = zext i16 %271 to i32
  %273 = icmp eq i32 %270, %272
  br i1 %273, label %274, label %277

274:                                              ; preds = %268
  %275 = load i16, i16* %244, align 4
  %276 = trunc i16 %275 to i8
  store i8 %276, i8* %scevgep, align 1
  br label %277

277:                                              ; preds = %268, %274
  %lsr.iv.next202 = add nuw nsw i64 %lsr.iv201, 1
  %tmp = trunc i64 %lsr.iv.next202 to i32
  %tmp203 = trunc i64 %246 to i32
  %exitcond123 = icmp ne i32 %tmp203, %tmp
  br i1 %exitcond123, label %268, label %..loopexit61_crit_edge

278:                                              ; preds = %28
  %279 = icmp ne i16** %11, null
  br i1 %279, label %.preheader62, label %.preheader64

.preheader64:                                     ; preds = %278
  %280 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %281 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %280, i32 0, i32 4
  %282 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %283 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %282, i32 0, i32 4
  %284 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %285 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %284, i32 0, i32 4
  %286 = icmp ult i32 0, %24
  br i1 %286, label %.lr.ph131, label %.loopexit65

.lr.ph131:                                        ; preds = %.preheader64
  %287 = zext i32 %24 to i64
  %scevgep210 = getelementptr i8, i8* %1, i64 1
  br label %341

.preheader62:                                     ; preds = %278
  %288 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %289 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %288, i32 0, i32 4
  %290 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %291 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %290, i32 0, i32 4
  %292 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %293 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %292, i32 0, i32 4
  %294 = icmp ult i32 0, %24
  br i1 %294, label %.lr.ph127, label %.loopexit63

.lr.ph127:                                        ; preds = %.preheader62
  br label %295

295:                                              ; preds = %.lr.ph127, %339
  %lsr.iv204 = phi i32 [ %24, %.lr.ph127 ], [ %lsr.iv.next205, %339 ]
  %.1233124 = phi i8* [ %1, %.lr.ph127 ], [ %340, %339 ]
  %296 = load i8, i8* %.1233124, align 1
  %297 = zext i8 %296 to i32
  %298 = shl i32 %297, 8
  %299 = getelementptr inbounds i8, i8* %.1233124, i64 1
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i32
  %302 = add nsw i32 %298, %301
  %303 = trunc i32 %302 to i16
  %304 = zext i16 %303 to i32
  %305 = load i16, i16* %289, align 8
  %306 = zext i16 %305 to i32
  %307 = icmp eq i32 %304, %306
  br i1 %307, label %308, label %319

308:                                              ; preds = %295
  %309 = load i16, i16* %291, align 4
  %310 = zext i16 %309 to i32
  %311 = ashr i32 %310, 8
  %312 = and i32 %311, 255
  %313 = trunc i32 %312 to i8
  store i8 %313, i8* %.1233124, align 1
  %314 = load i16, i16* %293, align 4
  %315 = zext i16 %314 to i32
  %316 = and i32 %315, 255
  %317 = trunc i32 %316 to i8
  %318 = getelementptr inbounds i8, i8* %.1233124, i64 1
  store i8 %317, i8* %318, align 1
  br label %339

319:                                              ; preds = %295
  %320 = getelementptr inbounds i8, i8* %.1233124, i64 1
  %321 = load i8, i8* %320, align 1
  %322 = zext i8 %321 to i32
  %323 = ashr i32 %322, %17
  %324 = sext i32 %323 to i64
  %325 = getelementptr inbounds i16*, i16** %11, i64 %324
  %326 = load i16*, i16** %325, align 8
  %327 = load i8, i8* %.1233124, align 1
  %328 = zext i8 %327 to i64
  %329 = getelementptr inbounds i16, i16* %326, i64 %328
  %330 = load i16, i16* %329, align 2
  %331 = zext i16 %330 to i32
  %332 = ashr i32 %331, 8
  %333 = and i32 %332, 255
  %334 = trunc i32 %333 to i8
  store i8 %334, i8* %.1233124, align 1
  %335 = zext i16 %330 to i32
  %336 = and i32 %335, 255
  %337 = trunc i32 %336 to i8
  %338 = getelementptr inbounds i8, i8* %.1233124, i64 1
  store i8 %337, i8* %338, align 1
  br label %339

339:                                              ; preds = %308, %319
  %.1233125 = phi i8* [ %.1233124, %308 ], [ %.1233124, %319 ]
  %340 = getelementptr inbounds i8, i8* %.1233125, i64 2
  %lsr.iv.next205 = add i32 %lsr.iv204, -1
  %exitcond128 = icmp ne i32 %lsr.iv.next205, 0
  br i1 %exitcond128, label %295, label %..loopexit63_crit_edge

341:                                              ; preds = %.lr.ph131, %366
  %lsr.iv206 = phi i64 [ 0, %.lr.ph131 ], [ %lsr.iv.next207, %366 ]
  %342 = shl nuw nsw i64 %lsr.iv206, 1
  %scevgep211 = getelementptr i8, i8* %scevgep210, i64 %342
  %scevgep212 = getelementptr i8, i8* %scevgep211, i64 -1
  %343 = load i8, i8* %scevgep212, align 1
  %344 = zext i8 %343 to i32
  %345 = shl i32 %344, 8
  %346 = shl nuw nsw i64 %lsr.iv206, 1
  %scevgep213 = getelementptr i8, i8* %scevgep210, i64 %346
  %347 = load i8, i8* %scevgep213, align 1
  %348 = zext i8 %347 to i32
  %349 = add nsw i32 %345, %348
  %350 = trunc i32 %349 to i16
  %351 = zext i16 %350 to i32
  %352 = load i16, i16* %281, align 8
  %353 = zext i16 %352 to i32
  %354 = icmp eq i32 %351, %353
  br i1 %354, label %355, label %366

355:                                              ; preds = %341
  %356 = load i16, i16* %283, align 4
  %357 = zext i16 %356 to i32
  %358 = ashr i32 %357, 8
  %359 = and i32 %358, 255
  %360 = trunc i32 %359 to i8
  store i8 %360, i8* %scevgep212, align 1
  %361 = load i16, i16* %285, align 4
  %362 = zext i16 %361 to i32
  %363 = and i32 %362, 255
  %364 = trunc i32 %363 to i8
  %365 = shl nuw nsw i64 %lsr.iv206, 1
  %scevgep214 = getelementptr i8, i8* %scevgep210, i64 %365
  store i8 %364, i8* %scevgep214, align 1
  br label %366

366:                                              ; preds = %341, %355
  %lsr.iv.next207 = add nuw nsw i64 %lsr.iv206, 1
  %tmp208 = trunc i64 %lsr.iv.next207 to i32
  %tmp209 = trunc i64 %287 to i32
  %exitcond132 = icmp ne i32 %tmp209, %tmp208
  br i1 %exitcond132, label %341, label %..loopexit65_crit_edge

367:                                              ; preds = %3
  %368 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %369 = load i8, i8* %368, align 1
  %370 = zext i8 %369 to i32
  %371 = icmp eq i32 %370, 8
  br i1 %371, label %372, label %465

372:                                              ; preds = %367
  %373 = icmp ne i8* %5, null
  br i1 %373, label %.preheader66, label %.preheader68

.preheader68:                                     ; preds = %372
  %374 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %375 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %374, i32 0, i32 1
  %376 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %377 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %376, i32 0, i32 2
  %378 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %379 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %378, i32 0, i32 3
  %380 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %381 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %380, i32 0, i32 1
  %382 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %383 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %382, i32 0, i32 2
  %384 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %385 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %384, i32 0, i32 3
  %386 = icmp ult i32 0, %24
  br i1 %386, label %.lr.ph140, label %.loopexit69

.lr.ph140:                                        ; preds = %.preheader68
  %scevgep227 = getelementptr i8, i8* %1, i64 2
  br label %439

.preheader66:                                     ; preds = %372
  %387 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %388 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %387, i32 0, i32 1
  %389 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %390 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %389, i32 0, i32 2
  %391 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %392 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %391, i32 0, i32 3
  %393 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %394 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %393, i32 0, i32 1
  %395 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %396 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %395, i32 0, i32 2
  %397 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %398 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %397, i32 0, i32 3
  %399 = icmp ult i32 0, %24
  br i1 %399, label %.lr.ph136, label %.loopexit67

.lr.ph136:                                        ; preds = %.preheader66
  %scevgep217 = getelementptr i8, i8* %1, i64 2
  br label %400

400:                                              ; preds = %.lr.ph136, %438
  %lsr.iv218 = phi i8* [ %scevgep217, %.lr.ph136 ], [ %scevgep219, %438 ]
  %lsr.iv215 = phi i32 [ %24, %.lr.ph136 ], [ %lsr.iv.next216, %438 ]
  %scevgep220 = getelementptr i8, i8* %lsr.iv218, i64 -2
  %401 = load i8, i8* %scevgep220, align 1
  %402 = zext i8 %401 to i32
  %403 = load i16, i16* %388, align 2
  %404 = zext i16 %403 to i32
  %405 = icmp eq i32 %402, %404
  br i1 %405, label %406, label %425

406:                                              ; preds = %400
  %scevgep221 = getelementptr i8, i8* %lsr.iv218, i64 -1
  %407 = load i8, i8* %scevgep221, align 1
  %408 = zext i8 %407 to i32
  %409 = load i16, i16* %390, align 4
  %410 = zext i16 %409 to i32
  %411 = icmp eq i32 %408, %410
  br i1 %411, label %412, label %425

412:                                              ; preds = %406
  %413 = load i8, i8* %lsr.iv218, align 1
  %414 = zext i8 %413 to i32
  %415 = load i16, i16* %392, align 2
  %416 = zext i16 %415 to i32
  %417 = icmp eq i32 %414, %416
  br i1 %417, label %418, label %425

418:                                              ; preds = %412
  %419 = load i16, i16* %394, align 2
  %420 = trunc i16 %419 to i8
  store i8 %420, i8* %scevgep220, align 1
  %421 = load i16, i16* %396, align 4
  %422 = trunc i16 %421 to i8
  %scevgep222 = getelementptr i8, i8* %lsr.iv218, i64 -1
  store i8 %422, i8* %scevgep222, align 1
  %423 = load i16, i16* %398, align 2
  %424 = trunc i16 %423 to i8
  store i8 %424, i8* %lsr.iv218, align 1
  br label %438

425:                                              ; preds = %412, %406, %400
  %426 = load i8, i8* %scevgep220, align 1
  %427 = zext i8 %426 to i64
  %428 = getelementptr inbounds i8, i8* %5, i64 %427
  %429 = load i8, i8* %428, align 1
  store i8 %429, i8* %scevgep220, align 1
  %scevgep223 = getelementptr i8, i8* %lsr.iv218, i64 -1
  %430 = load i8, i8* %scevgep223, align 1
  %431 = zext i8 %430 to i64
  %432 = getelementptr inbounds i8, i8* %5, i64 %431
  %433 = load i8, i8* %432, align 1
  %scevgep224 = getelementptr i8, i8* %lsr.iv218, i64 -1
  store i8 %433, i8* %scevgep224, align 1
  %434 = load i8, i8* %lsr.iv218, align 1
  %435 = zext i8 %434 to i64
  %436 = getelementptr inbounds i8, i8* %5, i64 %435
  %437 = load i8, i8* %436, align 1
  store i8 %437, i8* %lsr.iv218, align 1
  br label %438

438:                                              ; preds = %418, %425
  %lsr.iv.next216 = add i32 %lsr.iv215, -1
  %scevgep219 = getelementptr i8, i8* %lsr.iv218, i64 3
  %exitcond137 = icmp ne i32 %lsr.iv.next216, 0
  br i1 %exitcond137, label %400, label %..loopexit67_crit_edge

439:                                              ; preds = %.lr.ph140, %464
  %lsr.iv228 = phi i8* [ %scevgep227, %.lr.ph140 ], [ %scevgep229, %464 ]
  %lsr.iv225 = phi i32 [ %24, %.lr.ph140 ], [ %lsr.iv.next226, %464 ]
  %scevgep230 = getelementptr i8, i8* %lsr.iv228, i64 -2
  %440 = load i8, i8* %scevgep230, align 1
  %441 = zext i8 %440 to i32
  %442 = load i16, i16* %375, align 2
  %443 = zext i16 %442 to i32
  %444 = icmp eq i32 %441, %443
  br i1 %444, label %445, label %464

445:                                              ; preds = %439
  %scevgep231 = getelementptr i8, i8* %lsr.iv228, i64 -1
  %446 = load i8, i8* %scevgep231, align 1
  %447 = zext i8 %446 to i32
  %448 = load i16, i16* %377, align 4
  %449 = zext i16 %448 to i32
  %450 = icmp eq i32 %447, %449
  br i1 %450, label %451, label %464

451:                                              ; preds = %445
  %452 = load i8, i8* %lsr.iv228, align 1
  %453 = zext i8 %452 to i32
  %454 = load i16, i16* %379, align 2
  %455 = zext i16 %454 to i32
  %456 = icmp eq i32 %453, %455
  br i1 %456, label %457, label %464

457:                                              ; preds = %451
  %458 = load i16, i16* %381, align 2
  %459 = trunc i16 %458 to i8
  store i8 %459, i8* %scevgep230, align 1
  %460 = load i16, i16* %383, align 4
  %461 = trunc i16 %460 to i8
  %scevgep232 = getelementptr i8, i8* %lsr.iv228, i64 -1
  store i8 %461, i8* %scevgep232, align 1
  %462 = load i16, i16* %385, align 2
  %463 = trunc i16 %462 to i8
  store i8 %463, i8* %lsr.iv228, align 1
  br label %464

464:                                              ; preds = %439, %445, %451, %457
  %lsr.iv.next226 = add i32 %lsr.iv225, -1
  %scevgep229 = getelementptr i8, i8* %lsr.iv228, i64 3
  %exitcond141 = icmp ne i32 %lsr.iv.next226, 0
  br i1 %exitcond141, label %439, label %..loopexit69_crit_edge

465:                                              ; preds = %367
  %466 = icmp ne i16** %11, null
  br i1 %466, label %.preheader70, label %.preheader72

.preheader72:                                     ; preds = %465
  %467 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %468 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %467, i32 0, i32 1
  %469 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %470 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %469, i32 0, i32 2
  %471 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %472 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %471, i32 0, i32 3
  %473 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %474 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %473, i32 0, i32 1
  %475 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %476 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %475, i32 0, i32 1
  %477 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %478 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %477, i32 0, i32 2
  %479 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %480 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %479, i32 0, i32 2
  %481 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %482 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %481, i32 0, i32 3
  %483 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %484 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %483, i32 0, i32 3
  %485 = icmp ult i32 0, %24
  br i1 %485, label %.lr.ph149, label %.loopexit73

.lr.ph149:                                        ; preds = %.preheader72
  %scevgep257 = getelementptr i8, i8* %1, i64 5
  br label %622

.preheader70:                                     ; preds = %465
  %486 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %487 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %486, i32 0, i32 1
  %488 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %489 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %488, i32 0, i32 2
  %490 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 90
  %491 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %490, i32 0, i32 3
  %492 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %493 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %492, i32 0, i32 1
  %494 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %495 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %494, i32 0, i32 1
  %496 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %497 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %496, i32 0, i32 2
  %498 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %499 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %498, i32 0, i32 2
  %500 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %501 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %500, i32 0, i32 3
  %502 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %503 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %502, i32 0, i32 3
  %504 = icmp ult i32 0, %24
  br i1 %504, label %.lr.ph145, label %.loopexit71

.lr.ph145:                                        ; preds = %.preheader70
  %scevgep235 = getelementptr i8, i8* %1, i64 5
  br label %505

505:                                              ; preds = %.lr.ph145, %621
  %lsr.iv236 = phi i8* [ %scevgep235, %.lr.ph145 ], [ %scevgep237, %621 ]
  %lsr.iv233 = phi i32 [ %24, %.lr.ph145 ], [ %lsr.iv.next234, %621 ]
  %scevgep238 = getelementptr i8, i8* %lsr.iv236, i64 -5
  %506 = load i8, i8* %scevgep238, align 1
  %507 = zext i8 %506 to i32
  %508 = shl i32 %507, 8
  %scevgep239 = getelementptr i8, i8* %lsr.iv236, i64 -4
  %509 = load i8, i8* %scevgep239, align 1
  %510 = zext i8 %509 to i32
  %511 = add nsw i32 %508, %510
  %512 = trunc i32 %511 to i16
  %scevgep240 = getelementptr i8, i8* %lsr.iv236, i64 -3
  %513 = load i8, i8* %scevgep240, align 1
  %514 = zext i8 %513 to i32
  %515 = shl i32 %514, 8
  %scevgep241 = getelementptr i8, i8* %lsr.iv236, i64 -2
  %516 = load i8, i8* %scevgep241, align 1
  %517 = zext i8 %516 to i32
  %518 = add nsw i32 %515, %517
  %519 = trunc i32 %518 to i16
  %scevgep242 = getelementptr i8, i8* %lsr.iv236, i64 -1
  %520 = load i8, i8* %scevgep242, align 1
  %521 = zext i8 %520 to i32
  %522 = shl i32 %521, 8
  %523 = load i8, i8* %lsr.iv236, align 1
  %524 = zext i8 %523 to i32
  %525 = add nsw i32 %522, %524
  %526 = trunc i32 %525 to i16
  %527 = zext i16 %512 to i32
  %528 = load i16, i16* %487, align 2
  %529 = zext i16 %528 to i32
  %530 = icmp eq i32 %527, %529
  br i1 %530, label %531, label %569

531:                                              ; preds = %505
  %532 = zext i16 %519 to i32
  %533 = load i16, i16* %489, align 4
  %534 = zext i16 %533 to i32
  %535 = icmp eq i32 %532, %534
  br i1 %535, label %536, label %569

536:                                              ; preds = %531
  %537 = zext i16 %526 to i32
  %538 = load i16, i16* %491, align 2
  %539 = zext i16 %538 to i32
  %540 = icmp eq i32 %537, %539
  br i1 %540, label %541, label %569

541:                                              ; preds = %536
  %542 = load i16, i16* %493, align 2
  %543 = zext i16 %542 to i32
  %544 = ashr i32 %543, 8
  %545 = and i32 %544, 255
  %546 = trunc i32 %545 to i8
  store i8 %546, i8* %scevgep238, align 1
  %547 = load i16, i16* %495, align 2
  %548 = zext i16 %547 to i32
  %549 = and i32 %548, 255
  %550 = trunc i32 %549 to i8
  %scevgep243 = getelementptr i8, i8* %lsr.iv236, i64 -4
  store i8 %550, i8* %scevgep243, align 1
  %551 = load i16, i16* %497, align 4
  %552 = zext i16 %551 to i32
  %553 = ashr i32 %552, 8
  %554 = and i32 %553, 255
  %555 = trunc i32 %554 to i8
  %scevgep244 = getelementptr i8, i8* %lsr.iv236, i64 -3
  store i8 %555, i8* %scevgep244, align 1
  %556 = load i16, i16* %499, align 4
  %557 = zext i16 %556 to i32
  %558 = and i32 %557, 255
  %559 = trunc i32 %558 to i8
  %scevgep245 = getelementptr i8, i8* %lsr.iv236, i64 -2
  store i8 %559, i8* %scevgep245, align 1
  %560 = load i16, i16* %501, align 2
  %561 = zext i16 %560 to i32
  %562 = ashr i32 %561, 8
  %563 = and i32 %562, 255
  %564 = trunc i32 %563 to i8
  %scevgep246 = getelementptr i8, i8* %lsr.iv236, i64 -1
  store i8 %564, i8* %scevgep246, align 1
  %565 = load i16, i16* %503, align 2
  %566 = zext i16 %565 to i32
  %567 = and i32 %566, 255
  %568 = trunc i32 %567 to i8
  store i8 %568, i8* %lsr.iv236, align 1
  br label %621

569:                                              ; preds = %536, %531, %505
  %scevgep247 = getelementptr i8, i8* %lsr.iv236, i64 -4
  %570 = load i8, i8* %scevgep247, align 1
  %571 = zext i8 %570 to i32
  %572 = ashr i32 %571, %17
  %573 = sext i32 %572 to i64
  %574 = getelementptr inbounds i16*, i16** %11, i64 %573
  %575 = load i16*, i16** %574, align 8
  %576 = load i8, i8* %scevgep238, align 1
  %577 = zext i8 %576 to i64
  %578 = getelementptr inbounds i16, i16* %575, i64 %577
  %579 = load i16, i16* %578, align 2
  %580 = zext i16 %579 to i32
  %581 = ashr i32 %580, 8
  %582 = and i32 %581, 255
  %583 = trunc i32 %582 to i8
  store i8 %583, i8* %scevgep238, align 1
  %584 = zext i16 %579 to i32
  %585 = and i32 %584, 255
  %586 = trunc i32 %585 to i8
  %scevgep248 = getelementptr i8, i8* %lsr.iv236, i64 -4
  store i8 %586, i8* %scevgep248, align 1
  %scevgep249 = getelementptr i8, i8* %lsr.iv236, i64 -2
  %587 = load i8, i8* %scevgep249, align 1
  %588 = zext i8 %587 to i32
  %589 = ashr i32 %588, %17
  %590 = sext i32 %589 to i64
  %591 = getelementptr inbounds i16*, i16** %11, i64 %590
  %592 = load i16*, i16** %591, align 8
  %scevgep250 = getelementptr i8, i8* %lsr.iv236, i64 -3
  %593 = load i8, i8* %scevgep250, align 1
  %594 = zext i8 %593 to i64
  %595 = getelementptr inbounds i16, i16* %592, i64 %594
  %596 = load i16, i16* %595, align 2
  %597 = zext i16 %596 to i32
  %598 = ashr i32 %597, 8
  %599 = and i32 %598, 255
  %600 = trunc i32 %599 to i8
  %scevgep251 = getelementptr i8, i8* %lsr.iv236, i64 -3
  store i8 %600, i8* %scevgep251, align 1
  %601 = zext i16 %596 to i32
  %602 = and i32 %601, 255
  %603 = trunc i32 %602 to i8
  %scevgep252 = getelementptr i8, i8* %lsr.iv236, i64 -2
  store i8 %603, i8* %scevgep252, align 1
  %604 = load i8, i8* %lsr.iv236, align 1
  %605 = zext i8 %604 to i32
  %606 = ashr i32 %605, %17
  %607 = sext i32 %606 to i64
  %608 = getelementptr inbounds i16*, i16** %11, i64 %607
  %609 = load i16*, i16** %608, align 8
  %scevgep253 = getelementptr i8, i8* %lsr.iv236, i64 -1
  %610 = load i8, i8* %scevgep253, align 1
  %611 = zext i8 %610 to i64
  %612 = getelementptr inbounds i16, i16* %609, i64 %611
  %613 = load i16, i16* %612, align 2
  %614 = zext i16 %613 to i32
  %615 = ashr i32 %614, 8
  %616 = and i32 %615, 255
  %617 = trunc i32 %616 to i8
  %scevgep254 = getelementptr i8, i8* %lsr.iv236, i64 -1
  store i8 %617, i8* %scevgep254, align 1
  %618 = zext i16 %613 to i32
  %619 = and i32 %618, 255
  %620 = trunc i32 %619 to i8
  store i8 %620, i8* %lsr.iv236, align 1
  br label %621

621:                                              ; preds = %541, %569
  %lsr.iv.next234 = add i32 %lsr.iv233, -1
  %scevgep237 = getelementptr i8, i8* %lsr.iv236, i64 6
  %exitcond146 = icmp ne i32 %lsr.iv.next234, 0
  br i1 %exitcond146, label %505, label %..loopexit71_crit_edge

622:                                              ; preds = %.lr.ph149, %686
  %lsr.iv258 = phi i8* [ %scevgep257, %.lr.ph149 ], [ %scevgep259, %686 ]
  %lsr.iv255 = phi i32 [ %24, %.lr.ph149 ], [ %lsr.iv.next256, %686 ]
  %scevgep260 = getelementptr i8, i8* %lsr.iv258, i64 -5
  %623 = load i8, i8* %scevgep260, align 1
  %624 = zext i8 %623 to i32
  %625 = shl i32 %624, 8
  %scevgep261 = getelementptr i8, i8* %lsr.iv258, i64 -4
  %626 = load i8, i8* %scevgep261, align 1
  %627 = zext i8 %626 to i32
  %628 = add nsw i32 %625, %627
  %629 = trunc i32 %628 to i16
  %scevgep262 = getelementptr i8, i8* %lsr.iv258, i64 -3
  %630 = load i8, i8* %scevgep262, align 1
  %631 = zext i8 %630 to i32
  %632 = shl i32 %631, 8
  %scevgep263 = getelementptr i8, i8* %lsr.iv258, i64 -2
  %633 = load i8, i8* %scevgep263, align 1
  %634 = zext i8 %633 to i32
  %635 = add nsw i32 %632, %634
  %636 = trunc i32 %635 to i16
  %scevgep264 = getelementptr i8, i8* %lsr.iv258, i64 -1
  %637 = load i8, i8* %scevgep264, align 1
  %638 = zext i8 %637 to i32
  %639 = shl i32 %638, 8
  %640 = load i8, i8* %lsr.iv258, align 1
  %641 = zext i8 %640 to i32
  %642 = add nsw i32 %639, %641
  %643 = trunc i32 %642 to i16
  %644 = zext i16 %629 to i32
  %645 = load i16, i16* %468, align 2
  %646 = zext i16 %645 to i32
  %647 = icmp eq i32 %644, %646
  br i1 %647, label %648, label %686

648:                                              ; preds = %622
  %649 = zext i16 %636 to i32
  %650 = load i16, i16* %470, align 4
  %651 = zext i16 %650 to i32
  %652 = icmp eq i32 %649, %651
  br i1 %652, label %653, label %686

653:                                              ; preds = %648
  %654 = zext i16 %643 to i32
  %655 = load i16, i16* %472, align 2
  %656 = zext i16 %655 to i32
  %657 = icmp eq i32 %654, %656
  br i1 %657, label %658, label %686

658:                                              ; preds = %653
  %659 = load i16, i16* %474, align 2
  %660 = zext i16 %659 to i32
  %661 = ashr i32 %660, 8
  %662 = and i32 %661, 255
  %663 = trunc i32 %662 to i8
  store i8 %663, i8* %scevgep260, align 1
  %664 = load i16, i16* %476, align 2
  %665 = zext i16 %664 to i32
  %666 = and i32 %665, 255
  %667 = trunc i32 %666 to i8
  %scevgep265 = getelementptr i8, i8* %lsr.iv258, i64 -4
  store i8 %667, i8* %scevgep265, align 1
  %668 = load i16, i16* %478, align 4
  %669 = zext i16 %668 to i32
  %670 = ashr i32 %669, 8
  %671 = and i32 %670, 255
  %672 = trunc i32 %671 to i8
  %scevgep266 = getelementptr i8, i8* %lsr.iv258, i64 -3
  store i8 %672, i8* %scevgep266, align 1
  %673 = load i16, i16* %480, align 4
  %674 = zext i16 %673 to i32
  %675 = and i32 %674, 255
  %676 = trunc i32 %675 to i8
  %scevgep267 = getelementptr i8, i8* %lsr.iv258, i64 -2
  store i8 %676, i8* %scevgep267, align 1
  %677 = load i16, i16* %482, align 2
  %678 = zext i16 %677 to i32
  %679 = ashr i32 %678, 8
  %680 = and i32 %679, 255
  %681 = trunc i32 %680 to i8
  %scevgep268 = getelementptr i8, i8* %lsr.iv258, i64 -1
  store i8 %681, i8* %scevgep268, align 1
  %682 = load i16, i16* %484, align 2
  %683 = zext i16 %682 to i32
  %684 = and i32 %683, 255
  %685 = trunc i32 %684 to i8
  store i8 %685, i8* %lsr.iv258, align 1
  br label %686

686:                                              ; preds = %622, %648, %653, %658
  %lsr.iv.next256 = add i32 %lsr.iv255, -1
  %scevgep259 = getelementptr i8, i8* %lsr.iv258, i64 6
  %exitcond150 = icmp ne i32 %lsr.iv.next256, 0
  br i1 %exitcond150, label %622, label %..loopexit73_crit_edge

687:                                              ; preds = %3
  %688 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %689 = load i8, i8* %688, align 1
  %690 = zext i8 %689 to i32
  %691 = icmp eq i32 %690, 8
  br i1 %691, label %692, label %797

692:                                              ; preds = %687
  %693 = icmp ne i8* %9, null
  %694 = icmp ne i8* %7, null
  %or.cond = select i1 %693, i1 %694, i1 false
  %695 = icmp ne i8* %5, null
  %or.cond43 = select i1 %or.cond, i1 %695, i1 false
  br i1 %or.cond43, label %.preheader74, label %.preheader76

.preheader76:                                     ; preds = %692
  %696 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %697 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %696, i32 0, i32 4
  %698 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %699 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %698, i32 0, i32 4
  %700 = icmp ult i32 0, %24
  br i1 %700, label %.lr.ph159, label %.loopexit77

.lr.ph159:                                        ; preds = %.preheader76
  %701 = zext i32 %24 to i64
  br label %759

.preheader74:                                     ; preds = %692
  %702 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 75
  %703 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %702, i32 0, i32 4
  %704 = icmp eq i32 %22, 0
  %705 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %706 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %705, i32 0, i32 4
  %707 = icmp ult i32 0, %24
  br i1 %707, label %.lr.ph154, label %.loopexit75

.lr.ph154:                                        ; preds = %.preheader74
  %708 = zext i32 %24 to i64
  br label %709

709:                                              ; preds = %.lr.ph154, %758
  %lsr.iv269 = phi i64 [ 0, %.lr.ph154 ], [ %lsr.iv.next270, %758 ]
  %710 = shl nuw nsw i64 %lsr.iv269, 1
  %scevgep275 = getelementptr i8, i8* %1, i64 %710
  %711 = shl nuw nsw i64 %lsr.iv269, 1
  %scevgep273 = getelementptr i8, i8* %1, i64 %711
  %scevgep274 = getelementptr i8, i8* %scevgep273, i64 1
  %712 = load i8, i8* %scevgep274, align 1
  %713 = zext i8 %712 to i16
  %714 = zext i16 %713 to i32
  %715 = icmp eq i32 %714, 255
  br i1 %715, label %716, label %721

716:                                              ; preds = %709
  %717 = load i8, i8* %scevgep275, align 1
  %718 = zext i8 %717 to i64
  %719 = getelementptr inbounds i8, i8* %5, i64 %718
  %720 = load i8, i8* %719, align 1
  store i8 %720, i8* %scevgep275, align 1
  br label %758

721:                                              ; preds = %709
  %722 = zext i16 %713 to i32
  %723 = icmp eq i32 %722, 0
  br i1 %723, label %724, label %727

724:                                              ; preds = %721
  %725 = load i16, i16* %706, align 4
  %726 = trunc i16 %725 to i8
  store i8 %726, i8* %scevgep275, align 1
  br label %758

727:                                              ; preds = %721
  %728 = load i8, i8* %scevgep275, align 1
  %729 = zext i8 %728 to i64
  %730 = getelementptr inbounds i8, i8* %9, i64 %729
  %731 = load i8, i8* %730, align 1
  %732 = zext i8 %731 to i16
  %733 = zext i16 %732 to i32
  %734 = zext i16 %713 to i32
  %735 = mul nsw i32 %733, %734
  %736 = load i16, i16* %703, align 2
  %737 = zext i16 %736 to i32
  %738 = zext i16 %713 to i32
  %739 = sub nsw i32 255, %738
  %740 = trunc i32 %739 to i16
  %741 = zext i16 %740 to i32
  %742 = mul nsw i32 %737, %741
  %743 = add nsw i32 %735, %742
  %744 = add nsw i32 %743, 128
  %745 = trunc i32 %744 to i16
  %746 = zext i16 %745 to i32
  %747 = zext i16 %745 to i32
  %748 = ashr i32 %747, 8
  %749 = add nsw i32 %746, %748
  %750 = ashr i32 %749, 8
  %751 = and i32 %750, 255
  %752 = trunc i32 %751 to i8
  br i1 %704, label %753, label %757

753:                                              ; preds = %727
  %754 = zext i8 %752 to i64
  %755 = getelementptr inbounds i8, i8* %7, i64 %754
  %756 = load i8, i8* %755, align 1
  br label %757

757:                                              ; preds = %753, %727
  %.05 = phi i8 [ %756, %753 ], [ %752, %727 ]
  store i8 %.05, i8* %scevgep275, align 1
  br label %758

758:                                              ; preds = %716, %757, %724
  %lsr.iv.next270 = add nuw nsw i64 %lsr.iv269, 1
  %tmp271 = trunc i64 %lsr.iv.next270 to i32
  %tmp272 = trunc i64 %708 to i32
  %exitcond155 = icmp ne i32 %tmp272, %tmp271
  br i1 %exitcond155, label %709, label %..loopexit75_crit_edge

759:                                              ; preds = %.lr.ph159, %796
  %lsr.iv276 = phi i64 [ 0, %.lr.ph159 ], [ %lsr.iv.next277, %796 ]
  %760 = shl nuw nsw i64 %lsr.iv276, 1
  %scevgep282 = getelementptr i8, i8* %1, i64 %760
  %761 = shl nuw nsw i64 %lsr.iv276, 1
  %scevgep280 = getelementptr i8, i8* %1, i64 %761
  %scevgep281 = getelementptr i8, i8* %scevgep280, i64 1
  %762 = load i8, i8* %scevgep281, align 1
  %763 = zext i8 %762 to i32
  %764 = icmp eq i32 %763, 0
  br i1 %764, label %765, label %768

765:                                              ; preds = %759
  %766 = load i16, i16* %699, align 4
  %767 = trunc i16 %766 to i8
  store i8 %767, i8* %scevgep282, align 1
  br label %796

768:                                              ; preds = %759
  %769 = zext i8 %762 to i32
  %770 = icmp slt i32 %769, 255
  br i1 %770, label %771, label %796

771:                                              ; preds = %768
  %772 = load i8, i8* %scevgep282, align 1
  %773 = zext i8 %772 to i16
  %774 = zext i16 %773 to i32
  %775 = zext i8 %762 to i16
  %776 = zext i16 %775 to i32
  %777 = mul nsw i32 %774, %776
  %778 = load i16, i16* %697, align 4
  %779 = zext i16 %778 to i32
  %780 = zext i8 %762 to i16
  %781 = zext i16 %780 to i32
  %782 = sub nsw i32 255, %781
  %783 = trunc i32 %782 to i16
  %784 = zext i16 %783 to i32
  %785 = mul nsw i32 %779, %784
  %786 = add nsw i32 %777, %785
  %787 = add nsw i32 %786, 128
  %788 = trunc i32 %787 to i16
  %789 = zext i16 %788 to i32
  %790 = zext i16 %788 to i32
  %791 = ashr i32 %790, 8
  %792 = add nsw i32 %789, %791
  %793 = ashr i32 %792, 8
  %794 = and i32 %793, 255
  %795 = trunc i32 %794 to i8
  store i8 %795, i8* %scevgep282, align 1
  br label %796

796:                                              ; preds = %765, %771, %768
  %lsr.iv.next277 = add nuw nsw i64 %lsr.iv276, 1
  %tmp278 = trunc i64 %lsr.iv.next277 to i32
  %tmp279 = trunc i64 %701 to i32
  %exitcond160 = icmp ne i32 %tmp279, %tmp278
  br i1 %exitcond160, label %759, label %..loopexit77_crit_edge

797:                                              ; preds = %687
  %798 = icmp ne i16** %11, null
  %799 = icmp ne i16** %13, null
  %or.cond44 = select i1 %798, i1 %799, i1 false
  %800 = icmp ne i16** %15, null
  %or.cond45 = select i1 %or.cond44, i1 %800, i1 false
  br i1 %or.cond45, label %.preheader78, label %.preheader80

.preheader80:                                     ; preds = %797
  %801 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %802 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %801, i32 0, i32 4
  %803 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %804 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %803, i32 0, i32 4
  %805 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %806 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %805, i32 0, i32 4
  %807 = icmp ult i32 0, %24
  br i1 %807, label %.lr.ph169, label %.loopexit81

.lr.ph169:                                        ; preds = %.preheader80
  %808 = zext i32 %24 to i64
  br label %914

.preheader78:                                     ; preds = %797
  %809 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 75
  %810 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %809, i32 0, i32 4
  %811 = icmp ne i32 %22, 0
  %812 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %813 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %812, i32 0, i32 4
  %814 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %815 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %814, i32 0, i32 4
  %816 = icmp ult i32 0, %24
  br i1 %816, label %.lr.ph164, label %.loopexit79

.lr.ph164:                                        ; preds = %.preheader78
  %817 = zext i32 %24 to i64
  br label %818

818:                                              ; preds = %.lr.ph164, %913
  %lsr.iv283 = phi i64 [ 0, %.lr.ph164 ], [ %lsr.iv.next284, %913 ]
  %819 = shl nuw nsw i64 %lsr.iv283, 2
  %scevgep293 = getelementptr i8, i8* %1, i64 %819
  %820 = shl nuw nsw i64 %lsr.iv283, 2
  %scevgep287 = getelementptr i8, i8* %1, i64 %820
  %scevgep288 = getelementptr i8, i8* %scevgep287, i64 2
  %821 = load i8, i8* %scevgep288, align 1
  %822 = zext i8 %821 to i32
  %823 = shl i32 %822, 8
  %824 = shl nuw nsw i64 %lsr.iv283, 2
  %scevgep289 = getelementptr i8, i8* %1, i64 %824
  %scevgep290 = getelementptr i8, i8* %scevgep289, i64 3
  %825 = load i8, i8* %scevgep290, align 1
  %826 = zext i8 %825 to i32
  %827 = add nsw i32 %823, %826
  %828 = trunc i32 %827 to i16
  %829 = zext i16 %828 to i32
  %830 = icmp eq i32 %829, 65535
  br i1 %830, label %831, label %851

831:                                              ; preds = %818
  %832 = shl nuw nsw i64 %lsr.iv283, 2
  %scevgep291 = getelementptr i8, i8* %1, i64 %832
  %scevgep292 = getelementptr i8, i8* %scevgep291, i64 1
  %833 = load i8, i8* %scevgep292, align 1
  %834 = zext i8 %833 to i32
  %835 = ashr i32 %834, %17
  %836 = sext i32 %835 to i64
  %837 = getelementptr inbounds i16*, i16** %11, i64 %836
  %838 = load i16*, i16** %837, align 8
  %839 = load i8, i8* %scevgep293, align 1
  %840 = zext i8 %839 to i64
  %841 = getelementptr inbounds i16, i16* %838, i64 %840
  %842 = load i16, i16* %841, align 2
  %843 = zext i16 %842 to i32
  %844 = ashr i32 %843, 8
  %845 = and i32 %844, 255
  %846 = trunc i32 %845 to i8
  store i8 %846, i8* %scevgep293, align 1
  %847 = zext i16 %842 to i32
  %848 = and i32 %847, 255
  %849 = trunc i32 %848 to i8
  %850 = shl nuw nsw i64 %lsr.iv283, 2
  %scevgep294 = getelementptr i8, i8* %1, i64 %850
  %scevgep295 = getelementptr i8, i8* %scevgep294, i64 1
  store i8 %849, i8* %scevgep295, align 1
  br label %913

851:                                              ; preds = %818
  %852 = zext i16 %828 to i32
  %853 = icmp eq i32 %852, 0
  br i1 %853, label %854, label %865

854:                                              ; preds = %851
  %855 = load i16, i16* %813, align 4
  %856 = zext i16 %855 to i32
  %857 = ashr i32 %856, 8
  %858 = and i32 %857, 255
  %859 = trunc i32 %858 to i8
  store i8 %859, i8* %scevgep293, align 1
  %860 = load i16, i16* %815, align 4
  %861 = zext i16 %860 to i32
  %862 = and i32 %861, 255
  %863 = trunc i32 %862 to i8
  %864 = shl nuw nsw i64 %lsr.iv283, 2
  %scevgep296 = getelementptr i8, i8* %1, i64 %864
  %scevgep297 = getelementptr i8, i8* %scevgep296, i64 1
  store i8 %863, i8* %scevgep297, align 1
  br label %913

865:                                              ; preds = %851
  %866 = shl nuw nsw i64 %lsr.iv283, 2
  %scevgep298 = getelementptr i8, i8* %1, i64 %866
  %scevgep299 = getelementptr i8, i8* %scevgep298, i64 1
  %867 = load i8, i8* %scevgep299, align 1
  %868 = zext i8 %867 to i32
  %869 = ashr i32 %868, %17
  %870 = sext i32 %869 to i64
  %871 = getelementptr inbounds i16*, i16** %15, i64 %870
  %872 = load i16*, i16** %871, align 8
  %873 = load i8, i8* %scevgep293, align 1
  %874 = zext i8 %873 to i64
  %875 = getelementptr inbounds i16, i16* %872, i64 %874
  %876 = load i16, i16* %875, align 2
  %877 = zext i16 %876 to i32
  %878 = zext i16 %828 to i32
  %879 = mul i32 %877, %878
  %880 = load i16, i16* %810, align 2
  %881 = zext i16 %880 to i32
  %882 = zext i16 %828 to i32
  %883 = sub i32 65535, %882
  %884 = mul i32 %881, %883
  %885 = add i32 %879, %884
  %886 = add i32 %885, 32768
  %887 = lshr i32 %886, 16
  %888 = add i32 %886, %887
  %889 = lshr i32 %888, 16
  %890 = and i32 65535, %889
  %891 = trunc i32 %890 to i16
  br i1 %811, label %904, label %892

892:                                              ; preds = %865
  %893 = zext i16 %891 to i32
  %894 = and i32 %893, 255
  %895 = ashr i32 %894, %17
  %896 = sext i32 %895 to i64
  %897 = getelementptr inbounds i16*, i16** %13, i64 %896
  %898 = load i16*, i16** %897, align 8
  %899 = zext i16 %891 to i32
  %900 = ashr i32 %899, 8
  %901 = sext i32 %900 to i64
  %902 = getelementptr inbounds i16, i16* %898, i64 %901
  %903 = load i16, i16* %902, align 2
  br label %904

904:                                              ; preds = %865, %892
  %.04 = phi i16 [ %903, %892 ], [ %891, %865 ]
  %905 = zext i16 %.04 to i32
  %906 = ashr i32 %905, 8
  %907 = and i32 %906, 255
  %908 = trunc i32 %907 to i8
  store i8 %908, i8* %scevgep293, align 1
  %909 = zext i16 %.04 to i32
  %910 = and i32 %909, 255
  %911 = trunc i32 %910 to i8
  %912 = shl nuw nsw i64 %lsr.iv283, 2
  %scevgep300 = getelementptr i8, i8* %1, i64 %912
  %scevgep301 = getelementptr i8, i8* %scevgep300, i64 1
  store i8 %911, i8* %scevgep301, align 1
  br label %913

913:                                              ; preds = %831, %904, %854
  %lsr.iv.next284 = add nuw nsw i64 %lsr.iv283, 1
  %tmp285 = trunc i64 %lsr.iv.next284 to i32
  %tmp286 = trunc i64 %817 to i32
  %exitcond165 = icmp ne i32 %tmp286, %tmp285
  br i1 %exitcond165, label %818, label %..loopexit79_crit_edge

914:                                              ; preds = %.lr.ph169, %973
  %lsr.iv302 = phi i64 [ 0, %.lr.ph169 ], [ %lsr.iv.next303, %973 ]
  %915 = shl nuw nsw i64 %lsr.iv302, 2
  %scevgep310 = getelementptr i8, i8* %1, i64 %915
  %916 = shl nuw nsw i64 %lsr.iv302, 2
  %scevgep306 = getelementptr i8, i8* %1, i64 %916
  %scevgep307 = getelementptr i8, i8* %scevgep306, i64 2
  %917 = load i8, i8* %scevgep307, align 1
  %918 = zext i8 %917 to i32
  %919 = shl i32 %918, 8
  %920 = shl nuw nsw i64 %lsr.iv302, 2
  %scevgep308 = getelementptr i8, i8* %1, i64 %920
  %scevgep309 = getelementptr i8, i8* %scevgep308, i64 3
  %921 = load i8, i8* %scevgep309, align 1
  %922 = zext i8 %921 to i32
  %923 = add nsw i32 %919, %922
  %924 = trunc i32 %923 to i16
  %925 = zext i16 %924 to i32
  %926 = icmp eq i32 %925, 0
  br i1 %926, label %927, label %938

927:                                              ; preds = %914
  %928 = load i16, i16* %804, align 4
  %929 = zext i16 %928 to i32
  %930 = ashr i32 %929, 8
  %931 = and i32 %930, 255
  %932 = trunc i32 %931 to i8
  store i8 %932, i8* %scevgep310, align 1
  %933 = load i16, i16* %806, align 4
  %934 = zext i16 %933 to i32
  %935 = and i32 %934, 255
  %936 = trunc i32 %935 to i8
  %937 = shl nuw nsw i64 %lsr.iv302, 2
  %scevgep311 = getelementptr i8, i8* %1, i64 %937
  %scevgep312 = getelementptr i8, i8* %scevgep311, i64 1
  store i8 %936, i8* %scevgep312, align 1
  br label %973

938:                                              ; preds = %914
  %939 = zext i16 %924 to i32
  %940 = icmp slt i32 %939, 65535
  br i1 %940, label %941, label %973

941:                                              ; preds = %938
  %942 = load i8, i8* %scevgep310, align 1
  %943 = zext i8 %942 to i32
  %944 = shl i32 %943, 8
  %945 = shl nuw nsw i64 %lsr.iv302, 2
  %scevgep313 = getelementptr i8, i8* %1, i64 %945
  %scevgep314 = getelementptr i8, i8* %scevgep313, i64 1
  %946 = load i8, i8* %scevgep314, align 1
  %947 = zext i8 %946 to i32
  %948 = add nsw i32 %944, %947
  %949 = trunc i32 %948 to i16
  %950 = zext i16 %949 to i32
  %951 = zext i16 %924 to i32
  %952 = mul i32 %950, %951
  %953 = load i16, i16* %802, align 4
  %954 = zext i16 %953 to i32
  %955 = zext i16 %924 to i32
  %956 = sub i32 65535, %955
  %957 = mul i32 %954, %956
  %958 = add i32 %952, %957
  %959 = add i32 %958, 32768
  %960 = lshr i32 %959, 16
  %961 = add i32 %959, %960
  %962 = lshr i32 %961, 16
  %963 = and i32 65535, %962
  %964 = trunc i32 %963 to i16
  %965 = zext i16 %964 to i32
  %966 = ashr i32 %965, 8
  %967 = and i32 %966, 255
  %968 = trunc i32 %967 to i8
  store i8 %968, i8* %scevgep310, align 1
  %969 = zext i16 %964 to i32
  %970 = and i32 %969, 255
  %971 = trunc i32 %970 to i8
  %972 = shl nuw nsw i64 %lsr.iv302, 2
  %scevgep315 = getelementptr i8, i8* %1, i64 %972
  %scevgep316 = getelementptr i8, i8* %scevgep315, i64 1
  store i8 %971, i8* %scevgep316, align 1
  br label %973

973:                                              ; preds = %927, %941, %938
  %lsr.iv.next303 = add nuw nsw i64 %lsr.iv302, 1
  %tmp304 = trunc i64 %lsr.iv.next303 to i32
  %tmp305 = trunc i64 %808 to i32
  %exitcond170 = icmp ne i32 %tmp305, %tmp304
  br i1 %exitcond170, label %914, label %..loopexit81_crit_edge

974:                                              ; preds = %3
  %975 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %976 = load i8, i8* %975, align 1
  %977 = zext i8 %976 to i32
  %978 = icmp eq i32 %977, 8
  br i1 %978, label %979, label %1247

979:                                              ; preds = %974
  %980 = icmp ne i8* %9, null
  %981 = icmp ne i8* %7, null
  %or.cond46 = select i1 %980, i1 %981, i1 false
  %982 = icmp ne i8* %5, null
  %or.cond47 = select i1 %or.cond46, i1 %982, i1 false
  br i1 %or.cond47, label %.preheader82, label %.preheader84

.preheader84:                                     ; preds = %979
  %983 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %984 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %983, i32 0, i32 1
  %985 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %986 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %985, i32 0, i32 2
  %987 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %988 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %987, i32 0, i32 3
  %989 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %990 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %989, i32 0, i32 1
  %991 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %992 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %991, i32 0, i32 2
  %993 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %994 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %993, i32 0, i32 3
  %995 = icmp ult i32 0, %24
  br i1 %995, label %.lr.ph179, label %.loopexit85

.lr.ph179:                                        ; preds = %.preheader84
  %996 = zext i32 %24 to i64
  br label %1151

.preheader82:                                     ; preds = %979
  %997 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 75
  %998 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %997, i32 0, i32 1
  %999 = icmp eq i32 %22, 0
  %1000 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 75
  %1001 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1000, i32 0, i32 2
  %1002 = icmp eq i32 %22, 0
  %1003 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 75
  %1004 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1003, i32 0, i32 3
  %1005 = icmp eq i32 %22, 0
  %1006 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1007 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1006, i32 0, i32 1
  %1008 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1009 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1008, i32 0, i32 2
  %1010 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1011 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1010, i32 0, i32 3
  %1012 = icmp ult i32 0, %24
  br i1 %1012, label %.lr.ph174, label %.loopexit83

.lr.ph174:                                        ; preds = %.preheader82
  %1013 = zext i32 %24 to i64
  br label %1014

1014:                                             ; preds = %.lr.ph174, %1150
  %lsr.iv317 = phi i64 [ 0, %.lr.ph174 ], [ %lsr.iv.next318, %1150 ]
  %1015 = shl nuw nsw i64 %lsr.iv317, 2
  %scevgep323 = getelementptr i8, i8* %1, i64 %1015
  %1016 = shl nuw nsw i64 %lsr.iv317, 2
  %scevgep321 = getelementptr i8, i8* %1, i64 %1016
  %scevgep322 = getelementptr i8, i8* %scevgep321, i64 3
  %1017 = load i8, i8* %scevgep322, align 1
  %1018 = zext i8 %1017 to i32
  %1019 = icmp eq i32 %1018, 255
  br i1 %1019, label %1020, label %1037

1020:                                             ; preds = %1014
  %1021 = load i8, i8* %scevgep323, align 1
  %1022 = zext i8 %1021 to i64
  %1023 = getelementptr inbounds i8, i8* %5, i64 %1022
  %1024 = load i8, i8* %1023, align 1
  store i8 %1024, i8* %scevgep323, align 1
  %1025 = shl nuw nsw i64 %lsr.iv317, 2
  %scevgep324 = getelementptr i8, i8* %1, i64 %1025
  %scevgep325 = getelementptr i8, i8* %scevgep324, i64 1
  %1026 = load i8, i8* %scevgep325, align 1
  %1027 = zext i8 %1026 to i64
  %1028 = getelementptr inbounds i8, i8* %5, i64 %1027
  %1029 = load i8, i8* %1028, align 1
  %1030 = shl nuw nsw i64 %lsr.iv317, 2
  %scevgep326 = getelementptr i8, i8* %1, i64 %1030
  %scevgep327 = getelementptr i8, i8* %scevgep326, i64 1
  store i8 %1029, i8* %scevgep327, align 1
  %1031 = shl nuw nsw i64 %lsr.iv317, 2
  %scevgep328 = getelementptr i8, i8* %1, i64 %1031
  %scevgep329 = getelementptr i8, i8* %scevgep328, i64 2
  %1032 = load i8, i8* %scevgep329, align 1
  %1033 = zext i8 %1032 to i64
  %1034 = getelementptr inbounds i8, i8* %5, i64 %1033
  %1035 = load i8, i8* %1034, align 1
  %1036 = shl nuw nsw i64 %lsr.iv317, 2
  %scevgep330 = getelementptr i8, i8* %1, i64 %1036
  %scevgep331 = getelementptr i8, i8* %scevgep330, i64 2
  store i8 %1035, i8* %scevgep331, align 1
  br label %1150

1037:                                             ; preds = %1014
  %1038 = zext i8 %1017 to i32
  %1039 = icmp eq i32 %1038, 0
  br i1 %1039, label %1040, label %1049

1040:                                             ; preds = %1037
  %1041 = load i16, i16* %1007, align 2
  %1042 = trunc i16 %1041 to i8
  store i8 %1042, i8* %scevgep323, align 1
  %1043 = load i16, i16* %1009, align 4
  %1044 = trunc i16 %1043 to i8
  %1045 = shl nuw nsw i64 %lsr.iv317, 2
  %scevgep332 = getelementptr i8, i8* %1, i64 %1045
  %scevgep333 = getelementptr i8, i8* %scevgep332, i64 1
  store i8 %1044, i8* %scevgep333, align 1
  %1046 = load i16, i16* %1011, align 2
  %1047 = trunc i16 %1046 to i8
  %1048 = shl nuw nsw i64 %lsr.iv317, 2
  %scevgep334 = getelementptr i8, i8* %1, i64 %1048
  %scevgep335 = getelementptr i8, i8* %scevgep334, i64 2
  store i8 %1047, i8* %scevgep335, align 1
  br label %1150

1049:                                             ; preds = %1037
  %1050 = load i8, i8* %scevgep323, align 1
  %1051 = zext i8 %1050 to i64
  %1052 = getelementptr inbounds i8, i8* %9, i64 %1051
  %1053 = load i8, i8* %1052, align 1
  %1054 = zext i8 %1053 to i16
  %1055 = zext i16 %1054 to i32
  %1056 = zext i8 %1017 to i16
  %1057 = zext i16 %1056 to i32
  %1058 = mul nsw i32 %1055, %1057
  %1059 = load i16, i16* %998, align 2
  %1060 = zext i16 %1059 to i32
  %1061 = zext i8 %1017 to i16
  %1062 = zext i16 %1061 to i32
  %1063 = sub nsw i32 255, %1062
  %1064 = trunc i32 %1063 to i16
  %1065 = zext i16 %1064 to i32
  %1066 = mul nsw i32 %1060, %1065
  %1067 = add nsw i32 %1058, %1066
  %1068 = add nsw i32 %1067, 128
  %1069 = trunc i32 %1068 to i16
  %1070 = zext i16 %1069 to i32
  %1071 = zext i16 %1069 to i32
  %1072 = ashr i32 %1071, 8
  %1073 = add nsw i32 %1070, %1072
  %1074 = ashr i32 %1073, 8
  %1075 = and i32 %1074, 255
  %1076 = trunc i32 %1075 to i8
  br i1 %999, label %1077, label %1081

1077:                                             ; preds = %1049
  %1078 = zext i8 %1076 to i64
  %1079 = getelementptr inbounds i8, i8* %7, i64 %1078
  %1080 = load i8, i8* %1079, align 1
  br label %1081

1081:                                             ; preds = %1077, %1049
  %.01 = phi i8 [ %1080, %1077 ], [ %1076, %1049 ]
  store i8 %.01, i8* %scevgep323, align 1
  %1082 = shl nuw nsw i64 %lsr.iv317, 2
  %scevgep336 = getelementptr i8, i8* %1, i64 %1082
  %scevgep337 = getelementptr i8, i8* %scevgep336, i64 1
  %1083 = load i8, i8* %scevgep337, align 1
  %1084 = zext i8 %1083 to i64
  %1085 = getelementptr inbounds i8, i8* %9, i64 %1084
  %1086 = load i8, i8* %1085, align 1
  %1087 = zext i8 %1086 to i16
  %1088 = zext i16 %1087 to i32
  %1089 = zext i8 %1017 to i16
  %1090 = zext i16 %1089 to i32
  %1091 = mul nsw i32 %1088, %1090
  %1092 = load i16, i16* %1001, align 2
  %1093 = zext i16 %1092 to i32
  %1094 = zext i8 %1017 to i16
  %1095 = zext i16 %1094 to i32
  %1096 = sub nsw i32 255, %1095
  %1097 = trunc i32 %1096 to i16
  %1098 = zext i16 %1097 to i32
  %1099 = mul nsw i32 %1093, %1098
  %1100 = add nsw i32 %1091, %1099
  %1101 = add nsw i32 %1100, 128
  %1102 = trunc i32 %1101 to i16
  %1103 = zext i16 %1102 to i32
  %1104 = zext i16 %1102 to i32
  %1105 = ashr i32 %1104, 8
  %1106 = add nsw i32 %1103, %1105
  %1107 = ashr i32 %1106, 8
  %1108 = and i32 %1107, 255
  %1109 = trunc i32 %1108 to i8
  br i1 %1002, label %1110, label %1114

1110:                                             ; preds = %1081
  %1111 = zext i8 %1109 to i64
  %1112 = getelementptr inbounds i8, i8* %7, i64 %1111
  %1113 = load i8, i8* %1112, align 1
  br label %1114

1114:                                             ; preds = %1110, %1081
  %.12 = phi i8 [ %1113, %1110 ], [ %1109, %1081 ]
  %1115 = shl nuw nsw i64 %lsr.iv317, 2
  %scevgep338 = getelementptr i8, i8* %1, i64 %1115
  %scevgep339 = getelementptr i8, i8* %scevgep338, i64 1
  store i8 %.12, i8* %scevgep339, align 1
  %1116 = shl nuw nsw i64 %lsr.iv317, 2
  %scevgep340 = getelementptr i8, i8* %1, i64 %1116
  %scevgep341 = getelementptr i8, i8* %scevgep340, i64 2
  %1117 = load i8, i8* %scevgep341, align 1
  %1118 = zext i8 %1117 to i64
  %1119 = getelementptr inbounds i8, i8* %9, i64 %1118
  %1120 = load i8, i8* %1119, align 1
  %1121 = zext i8 %1120 to i16
  %1122 = zext i16 %1121 to i32
  %1123 = zext i8 %1017 to i16
  %1124 = zext i16 %1123 to i32
  %1125 = mul nsw i32 %1122, %1124
  %1126 = load i16, i16* %1004, align 2
  %1127 = zext i16 %1126 to i32
  %1128 = zext i8 %1017 to i16
  %1129 = zext i16 %1128 to i32
  %1130 = sub nsw i32 255, %1129
  %1131 = trunc i32 %1130 to i16
  %1132 = zext i16 %1131 to i32
  %1133 = mul nsw i32 %1127, %1132
  %1134 = add nsw i32 %1125, %1133
  %1135 = add nsw i32 %1134, 128
  %1136 = trunc i32 %1135 to i16
  %1137 = zext i16 %1136 to i32
  %1138 = zext i16 %1136 to i32
  %1139 = ashr i32 %1138, 8
  %1140 = add nsw i32 %1137, %1139
  %1141 = ashr i32 %1140, 8
  %1142 = and i32 %1141, 255
  %1143 = trunc i32 %1142 to i8
  br i1 %1005, label %1144, label %1148

1144:                                             ; preds = %1114
  %1145 = zext i8 %1143 to i64
  %1146 = getelementptr inbounds i8, i8* %7, i64 %1145
  %1147 = load i8, i8* %1146, align 1
  br label %1148

1148:                                             ; preds = %1144, %1114
  %.23 = phi i8 [ %1147, %1144 ], [ %1143, %1114 ]
  %1149 = shl nuw nsw i64 %lsr.iv317, 2
  %scevgep342 = getelementptr i8, i8* %1, i64 %1149
  %scevgep343 = getelementptr i8, i8* %scevgep342, i64 2
  store i8 %.23, i8* %scevgep343, align 1
  br label %1150

1150:                                             ; preds = %1020, %1148, %1040
  %lsr.iv.next318 = add nuw nsw i64 %lsr.iv317, 1
  %tmp319 = trunc i64 %lsr.iv.next318 to i32
  %tmp320 = trunc i64 %1013 to i32
  %exitcond175 = icmp ne i32 %tmp320, %tmp319
  br i1 %exitcond175, label %1014, label %..loopexit83_crit_edge

1151:                                             ; preds = %.lr.ph179, %1246
  %lsr.iv344 = phi i64 [ 0, %.lr.ph179 ], [ %lsr.iv.next345, %1246 ]
  %1152 = shl nuw nsw i64 %lsr.iv344, 2
  %scevgep350 = getelementptr i8, i8* %1, i64 %1152
  %1153 = shl nuw nsw i64 %lsr.iv344, 2
  %scevgep348 = getelementptr i8, i8* %1, i64 %1153
  %scevgep349 = getelementptr i8, i8* %scevgep348, i64 3
  %1154 = load i8, i8* %scevgep349, align 1
  %1155 = zext i8 %1154 to i32
  %1156 = icmp eq i32 %1155, 0
  br i1 %1156, label %1157, label %1166

1157:                                             ; preds = %1151
  %1158 = load i16, i16* %990, align 2
  %1159 = trunc i16 %1158 to i8
  store i8 %1159, i8* %scevgep350, align 1
  %1160 = load i16, i16* %992, align 4
  %1161 = trunc i16 %1160 to i8
  %1162 = shl nuw nsw i64 %lsr.iv344, 2
  %scevgep351 = getelementptr i8, i8* %1, i64 %1162
  %scevgep352 = getelementptr i8, i8* %scevgep351, i64 1
  store i8 %1161, i8* %scevgep352, align 1
  %1163 = load i16, i16* %994, align 2
  %1164 = trunc i16 %1163 to i8
  %1165 = shl nuw nsw i64 %lsr.iv344, 2
  %scevgep353 = getelementptr i8, i8* %1, i64 %1165
  %scevgep354 = getelementptr i8, i8* %scevgep353, i64 2
  store i8 %1164, i8* %scevgep354, align 1
  br label %1246

1166:                                             ; preds = %1151
  %1167 = zext i8 %1154 to i32
  %1168 = icmp slt i32 %1167, 255
  br i1 %1168, label %1169, label %1246

1169:                                             ; preds = %1166
  %1170 = load i8, i8* %scevgep350, align 1
  %1171 = zext i8 %1170 to i16
  %1172 = zext i16 %1171 to i32
  %1173 = zext i8 %1154 to i16
  %1174 = zext i16 %1173 to i32
  %1175 = mul nsw i32 %1172, %1174
  %1176 = load i16, i16* %984, align 2
  %1177 = zext i16 %1176 to i32
  %1178 = zext i8 %1154 to i16
  %1179 = zext i16 %1178 to i32
  %1180 = sub nsw i32 255, %1179
  %1181 = trunc i32 %1180 to i16
  %1182 = zext i16 %1181 to i32
  %1183 = mul nsw i32 %1177, %1182
  %1184 = add nsw i32 %1175, %1183
  %1185 = add nsw i32 %1184, 128
  %1186 = trunc i32 %1185 to i16
  %1187 = zext i16 %1186 to i32
  %1188 = zext i16 %1186 to i32
  %1189 = ashr i32 %1188, 8
  %1190 = add nsw i32 %1187, %1189
  %1191 = ashr i32 %1190, 8
  %1192 = and i32 %1191, 255
  %1193 = trunc i32 %1192 to i8
  store i8 %1193, i8* %scevgep350, align 1
  %1194 = shl nuw nsw i64 %lsr.iv344, 2
  %scevgep355 = getelementptr i8, i8* %1, i64 %1194
  %scevgep356 = getelementptr i8, i8* %scevgep355, i64 1
  %1195 = load i8, i8* %scevgep356, align 1
  %1196 = zext i8 %1195 to i16
  %1197 = zext i16 %1196 to i32
  %1198 = zext i8 %1154 to i16
  %1199 = zext i16 %1198 to i32
  %1200 = mul nsw i32 %1197, %1199
  %1201 = load i16, i16* %986, align 4
  %1202 = zext i16 %1201 to i32
  %1203 = zext i8 %1154 to i16
  %1204 = zext i16 %1203 to i32
  %1205 = sub nsw i32 255, %1204
  %1206 = trunc i32 %1205 to i16
  %1207 = zext i16 %1206 to i32
  %1208 = mul nsw i32 %1202, %1207
  %1209 = add nsw i32 %1200, %1208
  %1210 = add nsw i32 %1209, 128
  %1211 = trunc i32 %1210 to i16
  %1212 = zext i16 %1211 to i32
  %1213 = zext i16 %1211 to i32
  %1214 = ashr i32 %1213, 8
  %1215 = add nsw i32 %1212, %1214
  %1216 = ashr i32 %1215, 8
  %1217 = and i32 %1216, 255
  %1218 = trunc i32 %1217 to i8
  %1219 = shl nuw nsw i64 %lsr.iv344, 2
  %scevgep357 = getelementptr i8, i8* %1, i64 %1219
  %scevgep358 = getelementptr i8, i8* %scevgep357, i64 1
  store i8 %1218, i8* %scevgep358, align 1
  %1220 = shl nuw nsw i64 %lsr.iv344, 2
  %scevgep359 = getelementptr i8, i8* %1, i64 %1220
  %scevgep360 = getelementptr i8, i8* %scevgep359, i64 2
  %1221 = load i8, i8* %scevgep360, align 1
  %1222 = zext i8 %1221 to i16
  %1223 = zext i16 %1222 to i32
  %1224 = zext i8 %1154 to i16
  %1225 = zext i16 %1224 to i32
  %1226 = mul nsw i32 %1223, %1225
  %1227 = load i16, i16* %988, align 2
  %1228 = zext i16 %1227 to i32
  %1229 = zext i8 %1154 to i16
  %1230 = zext i16 %1229 to i32
  %1231 = sub nsw i32 255, %1230
  %1232 = trunc i32 %1231 to i16
  %1233 = zext i16 %1232 to i32
  %1234 = mul nsw i32 %1228, %1233
  %1235 = add nsw i32 %1226, %1234
  %1236 = add nsw i32 %1235, 128
  %1237 = trunc i32 %1236 to i16
  %1238 = zext i16 %1237 to i32
  %1239 = zext i16 %1237 to i32
  %1240 = ashr i32 %1239, 8
  %1241 = add nsw i32 %1238, %1240
  %1242 = ashr i32 %1241, 8
  %1243 = and i32 %1242, 255
  %1244 = trunc i32 %1243 to i8
  %1245 = shl nuw nsw i64 %lsr.iv344, 2
  %scevgep361 = getelementptr i8, i8* %1, i64 %1245
  %scevgep362 = getelementptr i8, i8* %scevgep361, i64 2
  store i8 %1244, i8* %scevgep362, align 1
  br label %1246

1246:                                             ; preds = %1157, %1169, %1166
  %lsr.iv.next345 = add nuw nsw i64 %lsr.iv344, 1
  %tmp346 = trunc i64 %lsr.iv.next345 to i32
  %tmp347 = trunc i64 %996 to i32
  %exitcond180 = icmp ne i32 %tmp347, %tmp346
  br i1 %exitcond180, label %1151, label %..loopexit85_crit_edge

1247:                                             ; preds = %974
  %1248 = icmp ne i16** %11, null
  %1249 = icmp ne i16** %13, null
  %or.cond48 = select i1 %1248, i1 %1249, i1 false
  %1250 = icmp ne i16** %15, null
  %or.cond49 = select i1 %or.cond48, i1 %1250, i1 false
  br i1 %or.cond49, label %.preheader86, label %.preheader88

.preheader88:                                     ; preds = %1247
  %1251 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1252 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1251, i32 0, i32 1
  %1253 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1254 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1253, i32 0, i32 2
  %1255 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1256 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1255, i32 0, i32 3
  %1257 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1258 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1257, i32 0, i32 1
  %1259 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1260 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1259, i32 0, i32 1
  %1261 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1262 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1261, i32 0, i32 2
  %1263 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1264 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1263, i32 0, i32 2
  %1265 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1266 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1265, i32 0, i32 3
  %1267 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1268 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1267, i32 0, i32 3
  %1269 = icmp ult i32 0, %24
  br i1 %1269, label %.lr.ph189, label %.loopexit89

.lr.ph189:                                        ; preds = %.preheader88
  %1270 = zext i32 %24 to i64
  br label %1554

.preheader86:                                     ; preds = %1247
  %1271 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 75
  %1272 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1271, i32 0, i32 1
  %1273 = icmp eq i32 %22, 0
  %1274 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 75
  %1275 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1274, i32 0, i32 2
  %1276 = icmp eq i32 %22, 0
  %1277 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 75
  %1278 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1277, i32 0, i32 3
  %1279 = icmp eq i32 %22, 0
  %1280 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1281 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1280, i32 0, i32 1
  %1282 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1283 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1282, i32 0, i32 1
  %1284 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1285 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1284, i32 0, i32 2
  %1286 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1287 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1286, i32 0, i32 2
  %1288 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1289 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1288, i32 0, i32 3
  %1290 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 74
  %1291 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1290, i32 0, i32 3
  %1292 = icmp ult i32 0, %24
  br i1 %1292, label %.lr.ph184, label %.loopexit87

.lr.ph184:                                        ; preds = %.preheader86
  %1293 = zext i32 %24 to i64
  br label %1294

1294:                                             ; preds = %.lr.ph184, %1553
  %lsr.iv363 = phi i64 [ 0, %.lr.ph184 ], [ %lsr.iv.next364, %1553 ]
  %1295 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep373 = getelementptr i8, i8* %1, i64 %1295
  %1296 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep367 = getelementptr i8, i8* %1, i64 %1296
  %scevgep368 = getelementptr i8, i8* %scevgep367, i64 6
  %1297 = load i8, i8* %scevgep368, align 1
  %1298 = zext i8 %1297 to i16
  %1299 = zext i16 %1298 to i32
  %1300 = shl i32 %1299, 8
  %1301 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep369 = getelementptr i8, i8* %1, i64 %1301
  %scevgep370 = getelementptr i8, i8* %scevgep369, i64 7
  %1302 = load i8, i8* %scevgep370, align 1
  %1303 = zext i8 %1302 to i16
  %1304 = zext i16 %1303 to i32
  %1305 = add nsw i32 %1300, %1304
  %1306 = trunc i32 %1305 to i16
  %1307 = zext i16 %1306 to i32
  %1308 = icmp eq i32 %1307, 65535
  br i1 %1308, label %1309, label %1371

1309:                                             ; preds = %1294
  %1310 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep371 = getelementptr i8, i8* %1, i64 %1310
  %scevgep372 = getelementptr i8, i8* %scevgep371, i64 1
  %1311 = load i8, i8* %scevgep372, align 1
  %1312 = zext i8 %1311 to i32
  %1313 = ashr i32 %1312, %17
  %1314 = sext i32 %1313 to i64
  %1315 = getelementptr inbounds i16*, i16** %11, i64 %1314
  %1316 = load i16*, i16** %1315, align 8
  %1317 = load i8, i8* %scevgep373, align 1
  %1318 = zext i8 %1317 to i64
  %1319 = getelementptr inbounds i16, i16* %1316, i64 %1318
  %1320 = load i16, i16* %1319, align 2
  %1321 = zext i16 %1320 to i32
  %1322 = ashr i32 %1321, 8
  %1323 = and i32 %1322, 255
  %1324 = trunc i32 %1323 to i8
  store i8 %1324, i8* %scevgep373, align 1
  %1325 = zext i16 %1320 to i32
  %1326 = and i32 %1325, 255
  %1327 = trunc i32 %1326 to i8
  %1328 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep374 = getelementptr i8, i8* %1, i64 %1328
  %scevgep375 = getelementptr i8, i8* %scevgep374, i64 1
  store i8 %1327, i8* %scevgep375, align 1
  %1329 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep376 = getelementptr i8, i8* %1, i64 %1329
  %scevgep377 = getelementptr i8, i8* %scevgep376, i64 3
  %1330 = load i8, i8* %scevgep377, align 1
  %1331 = zext i8 %1330 to i32
  %1332 = ashr i32 %1331, %17
  %1333 = sext i32 %1332 to i64
  %1334 = getelementptr inbounds i16*, i16** %11, i64 %1333
  %1335 = load i16*, i16** %1334, align 8
  %1336 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep378 = getelementptr i8, i8* %1, i64 %1336
  %scevgep379 = getelementptr i8, i8* %scevgep378, i64 2
  %1337 = load i8, i8* %scevgep379, align 1
  %1338 = zext i8 %1337 to i64
  %1339 = getelementptr inbounds i16, i16* %1335, i64 %1338
  %1340 = load i16, i16* %1339, align 2
  %1341 = zext i16 %1340 to i32
  %1342 = ashr i32 %1341, 8
  %1343 = and i32 %1342, 255
  %1344 = trunc i32 %1343 to i8
  %1345 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep380 = getelementptr i8, i8* %1, i64 %1345
  %scevgep381 = getelementptr i8, i8* %scevgep380, i64 2
  store i8 %1344, i8* %scevgep381, align 1
  %1346 = zext i16 %1340 to i32
  %1347 = and i32 %1346, 255
  %1348 = trunc i32 %1347 to i8
  %1349 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep382 = getelementptr i8, i8* %1, i64 %1349
  %scevgep383 = getelementptr i8, i8* %scevgep382, i64 3
  store i8 %1348, i8* %scevgep383, align 1
  %1350 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep384 = getelementptr i8, i8* %1, i64 %1350
  %scevgep385 = getelementptr i8, i8* %scevgep384, i64 5
  %1351 = load i8, i8* %scevgep385, align 1
  %1352 = zext i8 %1351 to i32
  %1353 = ashr i32 %1352, %17
  %1354 = sext i32 %1353 to i64
  %1355 = getelementptr inbounds i16*, i16** %11, i64 %1354
  %1356 = load i16*, i16** %1355, align 8
  %1357 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep386 = getelementptr i8, i8* %1, i64 %1357
  %scevgep387 = getelementptr i8, i8* %scevgep386, i64 4
  %1358 = load i8, i8* %scevgep387, align 1
  %1359 = zext i8 %1358 to i64
  %1360 = getelementptr inbounds i16, i16* %1356, i64 %1359
  %1361 = load i16, i16* %1360, align 2
  %1362 = zext i16 %1361 to i32
  %1363 = ashr i32 %1362, 8
  %1364 = and i32 %1363, 255
  %1365 = trunc i32 %1364 to i8
  %1366 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep388 = getelementptr i8, i8* %1, i64 %1366
  %scevgep389 = getelementptr i8, i8* %scevgep388, i64 4
  store i8 %1365, i8* %scevgep389, align 1
  %1367 = zext i16 %1361 to i32
  %1368 = and i32 %1367, 255
  %1369 = trunc i32 %1368 to i8
  %1370 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep390 = getelementptr i8, i8* %1, i64 %1370
  %scevgep391 = getelementptr i8, i8* %scevgep390, i64 5
  store i8 %1369, i8* %scevgep391, align 1
  br label %1553

1371:                                             ; preds = %1294
  %1372 = zext i16 %1306 to i32
  %1373 = icmp eq i32 %1372, 0
  br i1 %1373, label %1374, label %1407

1374:                                             ; preds = %1371
  %1375 = load i16, i16* %1281, align 2
  %1376 = zext i16 %1375 to i32
  %1377 = ashr i32 %1376, 8
  %1378 = and i32 %1377, 255
  %1379 = trunc i32 %1378 to i8
  store i8 %1379, i8* %scevgep373, align 1
  %1380 = load i16, i16* %1283, align 2
  %1381 = zext i16 %1380 to i32
  %1382 = and i32 %1381, 255
  %1383 = trunc i32 %1382 to i8
  %1384 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep392 = getelementptr i8, i8* %1, i64 %1384
  %scevgep393 = getelementptr i8, i8* %scevgep392, i64 1
  store i8 %1383, i8* %scevgep393, align 1
  %1385 = load i16, i16* %1285, align 4
  %1386 = zext i16 %1385 to i32
  %1387 = ashr i32 %1386, 8
  %1388 = and i32 %1387, 255
  %1389 = trunc i32 %1388 to i8
  %1390 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep394 = getelementptr i8, i8* %1, i64 %1390
  %scevgep395 = getelementptr i8, i8* %scevgep394, i64 2
  store i8 %1389, i8* %scevgep395, align 1
  %1391 = load i16, i16* %1287, align 4
  %1392 = zext i16 %1391 to i32
  %1393 = and i32 %1392, 255
  %1394 = trunc i32 %1393 to i8
  %1395 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep396 = getelementptr i8, i8* %1, i64 %1395
  %scevgep397 = getelementptr i8, i8* %scevgep396, i64 3
  store i8 %1394, i8* %scevgep397, align 1
  %1396 = load i16, i16* %1289, align 2
  %1397 = zext i16 %1396 to i32
  %1398 = ashr i32 %1397, 8
  %1399 = and i32 %1398, 255
  %1400 = trunc i32 %1399 to i8
  %1401 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep398 = getelementptr i8, i8* %1, i64 %1401
  %scevgep399 = getelementptr i8, i8* %scevgep398, i64 4
  store i8 %1400, i8* %scevgep399, align 1
  %1402 = load i16, i16* %1291, align 2
  %1403 = zext i16 %1402 to i32
  %1404 = and i32 %1403, 255
  %1405 = trunc i32 %1404 to i8
  %1406 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep400 = getelementptr i8, i8* %1, i64 %1406
  %scevgep401 = getelementptr i8, i8* %scevgep400, i64 5
  store i8 %1405, i8* %scevgep401, align 1
  br label %1553

1407:                                             ; preds = %1371
  %1408 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep402 = getelementptr i8, i8* %1, i64 %1408
  %scevgep403 = getelementptr i8, i8* %scevgep402, i64 1
  %1409 = load i8, i8* %scevgep403, align 1
  %1410 = zext i8 %1409 to i32
  %1411 = ashr i32 %1410, %17
  %1412 = sext i32 %1411 to i64
  %1413 = getelementptr inbounds i16*, i16** %15, i64 %1412
  %1414 = load i16*, i16** %1413, align 8
  %1415 = load i8, i8* %scevgep373, align 1
  %1416 = zext i8 %1415 to i64
  %1417 = getelementptr inbounds i16, i16* %1414, i64 %1416
  %1418 = load i16, i16* %1417, align 2
  %1419 = zext i16 %1418 to i32
  %1420 = zext i16 %1306 to i32
  %1421 = mul i32 %1419, %1420
  %1422 = load i16, i16* %1272, align 2
  %1423 = zext i16 %1422 to i32
  %1424 = zext i16 %1306 to i32
  %1425 = sub i32 65535, %1424
  %1426 = mul i32 %1423, %1425
  %1427 = add i32 %1421, %1426
  %1428 = add i32 %1427, 32768
  %1429 = lshr i32 %1428, 16
  %1430 = add i32 %1428, %1429
  %1431 = lshr i32 %1430, 16
  %1432 = and i32 65535, %1431
  %1433 = trunc i32 %1432 to i16
  br i1 %1273, label %1434, label %1446

1434:                                             ; preds = %1407
  %1435 = zext i16 %1433 to i32
  %1436 = and i32 %1435, 255
  %1437 = ashr i32 %1436, %17
  %1438 = sext i32 %1437 to i64
  %1439 = getelementptr inbounds i16*, i16** %13, i64 %1438
  %1440 = load i16*, i16** %1439, align 8
  %1441 = zext i16 %1433 to i32
  %1442 = ashr i32 %1441, 8
  %1443 = sext i32 %1442 to i64
  %1444 = getelementptr inbounds i16, i16* %1440, i64 %1443
  %1445 = load i16, i16* %1444, align 2
  br label %1446

1446:                                             ; preds = %1434, %1407
  %.0 = phi i16 [ %1445, %1434 ], [ %1433, %1407 ]
  %1447 = zext i16 %.0 to i32
  %1448 = ashr i32 %1447, 8
  %1449 = and i32 %1448, 255
  %1450 = trunc i32 %1449 to i8
  store i8 %1450, i8* %scevgep373, align 1
  %1451 = zext i16 %.0 to i32
  %1452 = and i32 %1451, 255
  %1453 = trunc i32 %1452 to i8
  %1454 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep404 = getelementptr i8, i8* %1, i64 %1454
  %scevgep405 = getelementptr i8, i8* %scevgep404, i64 1
  store i8 %1453, i8* %scevgep405, align 1
  %1455 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep406 = getelementptr i8, i8* %1, i64 %1455
  %scevgep407 = getelementptr i8, i8* %scevgep406, i64 3
  %1456 = load i8, i8* %scevgep407, align 1
  %1457 = zext i8 %1456 to i32
  %1458 = ashr i32 %1457, %17
  %1459 = sext i32 %1458 to i64
  %1460 = getelementptr inbounds i16*, i16** %15, i64 %1459
  %1461 = load i16*, i16** %1460, align 8
  %1462 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep408 = getelementptr i8, i8* %1, i64 %1462
  %scevgep409 = getelementptr i8, i8* %scevgep408, i64 2
  %1463 = load i8, i8* %scevgep409, align 1
  %1464 = zext i8 %1463 to i64
  %1465 = getelementptr inbounds i16, i16* %1461, i64 %1464
  %1466 = load i16, i16* %1465, align 2
  %1467 = zext i16 %1466 to i32
  %1468 = zext i16 %1306 to i32
  %1469 = mul i32 %1467, %1468
  %1470 = load i16, i16* %1275, align 2
  %1471 = zext i16 %1470 to i32
  %1472 = zext i16 %1306 to i32
  %1473 = sub i32 65535, %1472
  %1474 = mul i32 %1471, %1473
  %1475 = add i32 %1469, %1474
  %1476 = add i32 %1475, 32768
  %1477 = lshr i32 %1476, 16
  %1478 = add i32 %1476, %1477
  %1479 = lshr i32 %1478, 16
  %1480 = and i32 65535, %1479
  %1481 = trunc i32 %1480 to i16
  br i1 %1276, label %1482, label %1494

1482:                                             ; preds = %1446
  %1483 = zext i16 %1481 to i32
  %1484 = and i32 %1483, 255
  %1485 = ashr i32 %1484, %17
  %1486 = sext i32 %1485 to i64
  %1487 = getelementptr inbounds i16*, i16** %13, i64 %1486
  %1488 = load i16*, i16** %1487, align 8
  %1489 = zext i16 %1481 to i32
  %1490 = ashr i32 %1489, 8
  %1491 = sext i32 %1490 to i64
  %1492 = getelementptr inbounds i16, i16* %1488, i64 %1491
  %1493 = load i16, i16* %1492, align 2
  br label %1494

1494:                                             ; preds = %1482, %1446
  %.1 = phi i16 [ %1493, %1482 ], [ %1481, %1446 ]
  %1495 = zext i16 %.1 to i32
  %1496 = ashr i32 %1495, 8
  %1497 = and i32 %1496, 255
  %1498 = trunc i32 %1497 to i8
  %1499 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep410 = getelementptr i8, i8* %1, i64 %1499
  %scevgep411 = getelementptr i8, i8* %scevgep410, i64 2
  store i8 %1498, i8* %scevgep411, align 1
  %1500 = zext i16 %.1 to i32
  %1501 = and i32 %1500, 255
  %1502 = trunc i32 %1501 to i8
  %1503 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep412 = getelementptr i8, i8* %1, i64 %1503
  %scevgep413 = getelementptr i8, i8* %scevgep412, i64 3
  store i8 %1502, i8* %scevgep413, align 1
  %1504 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep414 = getelementptr i8, i8* %1, i64 %1504
  %scevgep415 = getelementptr i8, i8* %scevgep414, i64 5
  %1505 = load i8, i8* %scevgep415, align 1
  %1506 = zext i8 %1505 to i32
  %1507 = ashr i32 %1506, %17
  %1508 = sext i32 %1507 to i64
  %1509 = getelementptr inbounds i16*, i16** %15, i64 %1508
  %1510 = load i16*, i16** %1509, align 8
  %1511 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep416 = getelementptr i8, i8* %1, i64 %1511
  %scevgep417 = getelementptr i8, i8* %scevgep416, i64 4
  %1512 = load i8, i8* %scevgep417, align 1
  %1513 = zext i8 %1512 to i64
  %1514 = getelementptr inbounds i16, i16* %1510, i64 %1513
  %1515 = load i16, i16* %1514, align 2
  %1516 = zext i16 %1515 to i32
  %1517 = zext i16 %1306 to i32
  %1518 = mul i32 %1516, %1517
  %1519 = load i16, i16* %1278, align 2
  %1520 = zext i16 %1519 to i32
  %1521 = zext i16 %1306 to i32
  %1522 = sub i32 65535, %1521
  %1523 = mul i32 %1520, %1522
  %1524 = add i32 %1518, %1523
  %1525 = add i32 %1524, 32768
  %1526 = lshr i32 %1525, 16
  %1527 = add i32 %1525, %1526
  %1528 = lshr i32 %1527, 16
  %1529 = and i32 65535, %1528
  %1530 = trunc i32 %1529 to i16
  br i1 %1279, label %1531, label %1543

1531:                                             ; preds = %1494
  %1532 = zext i16 %1530 to i32
  %1533 = and i32 %1532, 255
  %1534 = ashr i32 %1533, %17
  %1535 = sext i32 %1534 to i64
  %1536 = getelementptr inbounds i16*, i16** %13, i64 %1535
  %1537 = load i16*, i16** %1536, align 8
  %1538 = zext i16 %1530 to i32
  %1539 = ashr i32 %1538, 8
  %1540 = sext i32 %1539 to i64
  %1541 = getelementptr inbounds i16, i16* %1537, i64 %1540
  %1542 = load i16, i16* %1541, align 2
  br label %1543

1543:                                             ; preds = %1531, %1494
  %.2 = phi i16 [ %1542, %1531 ], [ %1530, %1494 ]
  %1544 = zext i16 %.2 to i32
  %1545 = ashr i32 %1544, 8
  %1546 = and i32 %1545, 255
  %1547 = trunc i32 %1546 to i8
  %1548 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep418 = getelementptr i8, i8* %1, i64 %1548
  %scevgep419 = getelementptr i8, i8* %scevgep418, i64 4
  store i8 %1547, i8* %scevgep419, align 1
  %1549 = zext i16 %.2 to i32
  %1550 = and i32 %1549, 255
  %1551 = trunc i32 %1550 to i8
  %1552 = shl nuw nsw i64 %lsr.iv363, 3
  %scevgep420 = getelementptr i8, i8* %1, i64 %1552
  %scevgep421 = getelementptr i8, i8* %scevgep420, i64 5
  store i8 %1551, i8* %scevgep421, align 1
  br label %1553

1553:                                             ; preds = %1309, %1543, %1374
  %lsr.iv.next364 = add nuw nsw i64 %lsr.iv363, 1
  %tmp365 = trunc i64 %lsr.iv.next364 to i32
  %tmp366 = trunc i64 %1293 to i32
  %exitcond185 = icmp ne i32 %tmp366, %tmp365
  br i1 %exitcond185, label %1294, label %..loopexit87_crit_edge

1554:                                             ; preds = %.lr.ph189, %1703
  %lsr.iv422 = phi i64 [ 0, %.lr.ph189 ], [ %lsr.iv.next423, %1703 ]
  %1555 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep430 = getelementptr i8, i8* %1, i64 %1555
  %1556 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep426 = getelementptr i8, i8* %1, i64 %1556
  %scevgep427 = getelementptr i8, i8* %scevgep426, i64 6
  %1557 = load i8, i8* %scevgep427, align 1
  %1558 = zext i8 %1557 to i16
  %1559 = zext i16 %1558 to i32
  %1560 = shl i32 %1559, 8
  %1561 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep428 = getelementptr i8, i8* %1, i64 %1561
  %scevgep429 = getelementptr i8, i8* %scevgep428, i64 7
  %1562 = load i8, i8* %scevgep429, align 1
  %1563 = zext i8 %1562 to i16
  %1564 = zext i16 %1563 to i32
  %1565 = add nsw i32 %1560, %1564
  %1566 = trunc i32 %1565 to i16
  %1567 = zext i16 %1566 to i32
  %1568 = icmp eq i32 %1567, 0
  br i1 %1568, label %1569, label %1602

1569:                                             ; preds = %1554
  %1570 = load i16, i16* %1258, align 2
  %1571 = zext i16 %1570 to i32
  %1572 = ashr i32 %1571, 8
  %1573 = and i32 %1572, 255
  %1574 = trunc i32 %1573 to i8
  store i8 %1574, i8* %scevgep430, align 1
  %1575 = load i16, i16* %1260, align 2
  %1576 = zext i16 %1575 to i32
  %1577 = and i32 %1576, 255
  %1578 = trunc i32 %1577 to i8
  %1579 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep431 = getelementptr i8, i8* %1, i64 %1579
  %scevgep432 = getelementptr i8, i8* %scevgep431, i64 1
  store i8 %1578, i8* %scevgep432, align 1
  %1580 = load i16, i16* %1262, align 4
  %1581 = zext i16 %1580 to i32
  %1582 = ashr i32 %1581, 8
  %1583 = and i32 %1582, 255
  %1584 = trunc i32 %1583 to i8
  %1585 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep433 = getelementptr i8, i8* %1, i64 %1585
  %scevgep434 = getelementptr i8, i8* %scevgep433, i64 2
  store i8 %1584, i8* %scevgep434, align 1
  %1586 = load i16, i16* %1264, align 4
  %1587 = zext i16 %1586 to i32
  %1588 = and i32 %1587, 255
  %1589 = trunc i32 %1588 to i8
  %1590 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep435 = getelementptr i8, i8* %1, i64 %1590
  %scevgep436 = getelementptr i8, i8* %scevgep435, i64 3
  store i8 %1589, i8* %scevgep436, align 1
  %1591 = load i16, i16* %1266, align 2
  %1592 = zext i16 %1591 to i32
  %1593 = ashr i32 %1592, 8
  %1594 = and i32 %1593, 255
  %1595 = trunc i32 %1594 to i8
  %1596 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep437 = getelementptr i8, i8* %1, i64 %1596
  %scevgep438 = getelementptr i8, i8* %scevgep437, i64 4
  store i8 %1595, i8* %scevgep438, align 1
  %1597 = load i16, i16* %1268, align 2
  %1598 = zext i16 %1597 to i32
  %1599 = and i32 %1598, 255
  %1600 = trunc i32 %1599 to i8
  %1601 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep439 = getelementptr i8, i8* %1, i64 %1601
  %scevgep440 = getelementptr i8, i8* %scevgep439, i64 5
  store i8 %1600, i8* %scevgep440, align 1
  br label %1703

1602:                                             ; preds = %1554
  %1603 = zext i16 %1566 to i32
  %1604 = icmp slt i32 %1603, 65535
  br i1 %1604, label %1605, label %1703

1605:                                             ; preds = %1602
  %1606 = load i8, i8* %scevgep430, align 1
  %1607 = zext i8 %1606 to i32
  %1608 = shl i32 %1607, 8
  %1609 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep441 = getelementptr i8, i8* %1, i64 %1609
  %scevgep442 = getelementptr i8, i8* %scevgep441, i64 1
  %1610 = load i8, i8* %scevgep442, align 1
  %1611 = zext i8 %1610 to i32
  %1612 = add nsw i32 %1608, %1611
  %1613 = trunc i32 %1612 to i16
  %1614 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep443 = getelementptr i8, i8* %1, i64 %1614
  %scevgep444 = getelementptr i8, i8* %scevgep443, i64 2
  %1615 = load i8, i8* %scevgep444, align 1
  %1616 = zext i8 %1615 to i32
  %1617 = shl i32 %1616, 8
  %1618 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep445 = getelementptr i8, i8* %1, i64 %1618
  %scevgep446 = getelementptr i8, i8* %scevgep445, i64 3
  %1619 = load i8, i8* %scevgep446, align 1
  %1620 = zext i8 %1619 to i32
  %1621 = add nsw i32 %1617, %1620
  %1622 = trunc i32 %1621 to i16
  %1623 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep447 = getelementptr i8, i8* %1, i64 %1623
  %scevgep448 = getelementptr i8, i8* %scevgep447, i64 4
  %1624 = load i8, i8* %scevgep448, align 1
  %1625 = zext i8 %1624 to i32
  %1626 = shl i32 %1625, 8
  %1627 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep449 = getelementptr i8, i8* %1, i64 %1627
  %scevgep450 = getelementptr i8, i8* %scevgep449, i64 5
  %1628 = load i8, i8* %scevgep450, align 1
  %1629 = zext i8 %1628 to i32
  %1630 = add nsw i32 %1626, %1629
  %1631 = trunc i32 %1630 to i16
  %1632 = zext i16 %1613 to i32
  %1633 = zext i16 %1566 to i32
  %1634 = mul i32 %1632, %1633
  %1635 = load i16, i16* %1252, align 2
  %1636 = zext i16 %1635 to i32
  %1637 = zext i16 %1566 to i32
  %1638 = sub i32 65535, %1637
  %1639 = mul i32 %1636, %1638
  %1640 = add i32 %1634, %1639
  %1641 = add i32 %1640, 32768
  %1642 = lshr i32 %1641, 16
  %1643 = add i32 %1641, %1642
  %1644 = lshr i32 %1643, 16
  %1645 = and i32 65535, %1644
  %1646 = trunc i32 %1645 to i16
  %1647 = zext i16 %1646 to i32
  %1648 = ashr i32 %1647, 8
  %1649 = and i32 %1648, 255
  %1650 = trunc i32 %1649 to i8
  store i8 %1650, i8* %scevgep430, align 1
  %1651 = zext i16 %1646 to i32
  %1652 = and i32 %1651, 255
  %1653 = trunc i32 %1652 to i8
  %1654 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep451 = getelementptr i8, i8* %1, i64 %1654
  %scevgep452 = getelementptr i8, i8* %scevgep451, i64 1
  store i8 %1653, i8* %scevgep452, align 1
  %1655 = zext i16 %1622 to i32
  %1656 = zext i16 %1566 to i32
  %1657 = mul i32 %1655, %1656
  %1658 = load i16, i16* %1254, align 4
  %1659 = zext i16 %1658 to i32
  %1660 = zext i16 %1566 to i32
  %1661 = sub i32 65535, %1660
  %1662 = mul i32 %1659, %1661
  %1663 = add i32 %1657, %1662
  %1664 = add i32 %1663, 32768
  %1665 = lshr i32 %1664, 16
  %1666 = add i32 %1664, %1665
  %1667 = lshr i32 %1666, 16
  %1668 = and i32 65535, %1667
  %1669 = trunc i32 %1668 to i16
  %1670 = zext i16 %1669 to i32
  %1671 = ashr i32 %1670, 8
  %1672 = and i32 %1671, 255
  %1673 = trunc i32 %1672 to i8
  %1674 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep453 = getelementptr i8, i8* %1, i64 %1674
  %scevgep454 = getelementptr i8, i8* %scevgep453, i64 2
  store i8 %1673, i8* %scevgep454, align 1
  %1675 = zext i16 %1669 to i32
  %1676 = and i32 %1675, 255
  %1677 = trunc i32 %1676 to i8
  %1678 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep455 = getelementptr i8, i8* %1, i64 %1678
  %scevgep456 = getelementptr i8, i8* %scevgep455, i64 3
  store i8 %1677, i8* %scevgep456, align 1
  %1679 = zext i16 %1631 to i32
  %1680 = zext i16 %1566 to i32
  %1681 = mul i32 %1679, %1680
  %1682 = load i16, i16* %1256, align 2
  %1683 = zext i16 %1682 to i32
  %1684 = zext i16 %1566 to i32
  %1685 = sub i32 65535, %1684
  %1686 = mul i32 %1683, %1685
  %1687 = add i32 %1681, %1686
  %1688 = add i32 %1687, 32768
  %1689 = lshr i32 %1688, 16
  %1690 = add i32 %1688, %1689
  %1691 = lshr i32 %1690, 16
  %1692 = and i32 65535, %1691
  %1693 = trunc i32 %1692 to i16
  %1694 = zext i16 %1693 to i32
  %1695 = ashr i32 %1694, 8
  %1696 = and i32 %1695, 255
  %1697 = trunc i32 %1696 to i8
  %1698 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep457 = getelementptr i8, i8* %1, i64 %1698
  %scevgep458 = getelementptr i8, i8* %scevgep457, i64 4
  store i8 %1697, i8* %scevgep458, align 1
  %1699 = zext i16 %1693 to i32
  %1700 = and i32 %1699, 255
  %1701 = trunc i32 %1700 to i8
  %1702 = shl nuw nsw i64 %lsr.iv422, 3
  %scevgep459 = getelementptr i8, i8* %1, i64 %1702
  %scevgep460 = getelementptr i8, i8* %scevgep459, i64 5
  store i8 %1701, i8* %scevgep460, align 1
  br label %1703

1703:                                             ; preds = %1569, %1605, %1602
  %lsr.iv.next423 = add nuw nsw i64 %lsr.iv422, 1
  %tmp424 = trunc i64 %lsr.iv.next423 to i32
  %tmp425 = trunc i64 %1270 to i32
  %exitcond190 = icmp ne i32 %tmp425, %tmp424
  br i1 %exitcond190, label %1554, label %..loopexit89_crit_edge

..loopexit_crit_edge:                             ; preds = %59
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader
  br label %1704

..loopexit51_crit_edge:                           ; preds = %123
  br label %.loopexit51

.loopexit51:                                      ; preds = %..loopexit51_crit_edge, %.preheader50
  br label %1704

..loopexit53_crit_edge:                           ; preds = %149
  br label %.loopexit53

.loopexit53:                                      ; preds = %..loopexit53_crit_edge, %.preheader52
  br label %1704

..loopexit55_crit_edge:                           ; preds = %209
  br label %.loopexit55

.loopexit55:                                      ; preds = %..loopexit55_crit_edge, %.preheader54
  br label %1704

..loopexit57_crit_edge:                           ; preds = %235
  br label %.loopexit57

.loopexit57:                                      ; preds = %..loopexit57_crit_edge, %.preheader56
  br label %1704

..loopexit59_crit_edge:                           ; preds = %266
  br label %.loopexit59

.loopexit59:                                      ; preds = %..loopexit59_crit_edge, %.preheader58
  br label %1704

..loopexit61_crit_edge:                           ; preds = %277
  br label %.loopexit61

.loopexit61:                                      ; preds = %..loopexit61_crit_edge, %.preheader60
  br label %1704

..loopexit63_crit_edge:                           ; preds = %339
  br label %.loopexit63

.loopexit63:                                      ; preds = %..loopexit63_crit_edge, %.preheader62
  br label %1704

..loopexit65_crit_edge:                           ; preds = %366
  br label %.loopexit65

.loopexit65:                                      ; preds = %..loopexit65_crit_edge, %.preheader64
  br label %1704

..loopexit67_crit_edge:                           ; preds = %438
  br label %.loopexit67

.loopexit67:                                      ; preds = %..loopexit67_crit_edge, %.preheader66
  br label %1704

..loopexit69_crit_edge:                           ; preds = %464
  br label %.loopexit69

.loopexit69:                                      ; preds = %..loopexit69_crit_edge, %.preheader68
  br label %1704

..loopexit71_crit_edge:                           ; preds = %621
  br label %.loopexit71

.loopexit71:                                      ; preds = %..loopexit71_crit_edge, %.preheader70
  br label %1704

..loopexit73_crit_edge:                           ; preds = %686
  br label %.loopexit73

.loopexit73:                                      ; preds = %..loopexit73_crit_edge, %.preheader72
  br label %1704

..loopexit75_crit_edge:                           ; preds = %758
  br label %.loopexit75

.loopexit75:                                      ; preds = %..loopexit75_crit_edge, %.preheader74
  br label %1704

..loopexit77_crit_edge:                           ; preds = %796
  br label %.loopexit77

.loopexit77:                                      ; preds = %..loopexit77_crit_edge, %.preheader76
  br label %1704

..loopexit79_crit_edge:                           ; preds = %913
  br label %.loopexit79

.loopexit79:                                      ; preds = %..loopexit79_crit_edge, %.preheader78
  br label %1704

..loopexit81_crit_edge:                           ; preds = %973
  br label %.loopexit81

.loopexit81:                                      ; preds = %..loopexit81_crit_edge, %.preheader80
  br label %1704

..loopexit83_crit_edge:                           ; preds = %1150
  br label %.loopexit83

.loopexit83:                                      ; preds = %..loopexit83_crit_edge, %.preheader82
  br label %1704

..loopexit85_crit_edge:                           ; preds = %1246
  br label %.loopexit85

.loopexit85:                                      ; preds = %..loopexit85_crit_edge, %.preheader84
  br label %1704

..loopexit87_crit_edge:                           ; preds = %1553
  br label %.loopexit87

.loopexit87:                                      ; preds = %..loopexit87_crit_edge, %.preheader86
  br label %1704

..loopexit89_crit_edge:                           ; preds = %1703
  br label %.loopexit89

.loopexit89:                                      ; preds = %..loopexit89_crit_edge, %.preheader88
  br label %1704

1704:                                             ; preds = %.loopexit89, %.loopexit87, %.loopexit85, %.loopexit83, %.loopexit81, %.loopexit79, %.loopexit77, %.loopexit75, %.loopexit73, %.loopexit71, %.loopexit69, %.loopexit67, %.loopexit65, %.loopexit63, %.loopexit61, %.loopexit59, %.loopexit57, %.loopexit55, %.loopexit53, %.loopexit51, %.loopexit, %3, %28
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_gamma(%struct.png_row_info_struct* %0, i8* %1, %struct.png_struct_def* noalias %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 81
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 82
  %7 = load i16**, i16*** %6, align 8
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 79
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = icmp sle i32 %14, 8
  %16 = icmp ne i8* %5, null
  %or.cond = select i1 %15, i1 %16, i1 false
  br i1 %or.cond, label %23, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = icmp eq i32 %20, 16
  %22 = icmp ne i16** %7, null
  %or.cond11 = select i1 %21, i1 %22, i1 false
  br i1 %or.cond11, label %23, label %363

23:                                               ; preds = %17, %3
  %24 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %25 = load i8, i8* %24, align 8
  %26 = zext i8 %25 to i32
  switch i32 %26, label %363 [
    i32 2, label %27
    i32 6, label %99
    i32 4, label %183
    i32 0, label %219
  ]

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = icmp eq i32 %30, 8
  br i1 %31, label %.preheader, label %.preheader12

.preheader12:                                     ; preds = %27
  %32 = icmp ult i32 0, %11
  br i1 %32, label %.lr.ph34, label %.loopexit13

.lr.ph34:                                         ; preds = %.preheader12
  %scevgep72 = getelementptr i8, i8* %1, i64 5
  br label %47

.preheader:                                       ; preds = %27
  %33 = icmp ult i32 0, %11
  br i1 %33, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  br label %34

34:                                               ; preds = %.lr.ph, %34
  %lsr.iv = phi i32 [ %11, %.lr.ph ], [ %lsr.iv.next, %34 ]
  %.0130 = phi i8* [ %1, %.lr.ph ], [ %scevgep69, %34 ]
  %35 = load i8, i8* %.0130, align 1
  %36 = zext i8 %35 to i64
  %37 = getelementptr inbounds i8, i8* %5, i64 %36
  %38 = load i8, i8* %37, align 1
  store i8 %38, i8* %.0130, align 1
  %scevgep = getelementptr i8, i8* %.0130, i64 1
  %39 = load i8, i8* %scevgep, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds i8, i8* %5, i64 %40
  %42 = load i8, i8* %41, align 1
  %scevgep66 = getelementptr i8, i8* %.0130, i64 1
  store i8 %42, i8* %scevgep66, align 1
  %scevgep67 = getelementptr i8, i8* %.0130, i64 2
  %43 = load i8, i8* %scevgep67, align 1
  %44 = zext i8 %43 to i64
  %45 = getelementptr inbounds i8, i8* %5, i64 %44
  %46 = load i8, i8* %45, align 1
  %scevgep68 = getelementptr i8, i8* %.0130, i64 2
  store i8 %46, i8* %scevgep68, align 1
  %lsr.iv.next = add i32 %lsr.iv, -1
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  %scevgep69 = getelementptr i8, i8* %.0130, i64 3
  br i1 %exitcond, label %34, label %..loopexit_crit_edge

47:                                               ; preds = %.lr.ph34, %47
  %lsr.iv73 = phi i8* [ %scevgep72, %.lr.ph34 ], [ %scevgep74, %47 ]
  %lsr.iv70 = phi i32 [ %11, %.lr.ph34 ], [ %lsr.iv.next71, %47 ]
  %scevgep76 = getelementptr i8, i8* %lsr.iv73, i64 -5
  %scevgep75 = getelementptr i8, i8* %lsr.iv73, i64 -4
  %48 = load i8, i8* %scevgep75, align 1
  %49 = zext i8 %48 to i32
  %50 = ashr i32 %49, %9
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i16*, i16** %7, i64 %51
  %53 = load i16*, i16** %52, align 8
  %54 = load i8, i8* %scevgep76, align 1
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds i16, i16* %53, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = zext i16 %57 to i32
  %59 = ashr i32 %58, 8
  %60 = and i32 %59, 255
  %61 = trunc i32 %60 to i8
  store i8 %61, i8* %scevgep76, align 1
  %62 = zext i16 %57 to i32
  %63 = and i32 %62, 255
  %64 = trunc i32 %63 to i8
  %scevgep77 = getelementptr i8, i8* %lsr.iv73, i64 -4
  store i8 %64, i8* %scevgep77, align 1
  %scevgep80 = getelementptr i8, i8* %lsr.iv73, i64 -3
  %scevgep81 = getelementptr i8, i8* %lsr.iv73, i64 -2
  %65 = load i8, i8* %scevgep81, align 1
  %66 = zext i8 %65 to i32
  %67 = ashr i32 %66, %9
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i16*, i16** %7, i64 %68
  %70 = load i16*, i16** %69, align 8
  %71 = load i8, i8* %scevgep80, align 1
  %72 = zext i8 %71 to i64
  %73 = getelementptr inbounds i16, i16* %70, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = ashr i32 %75, 8
  %77 = and i32 %76, 255
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %scevgep80, align 1
  %79 = zext i16 %74 to i32
  %80 = and i32 %79, 255
  %81 = trunc i32 %80 to i8
  %scevgep79 = getelementptr i8, i8* %lsr.iv73, i64 -2
  store i8 %81, i8* %scevgep79, align 1
  %scevgep78 = getelementptr i8, i8* %lsr.iv73, i64 -1
  %82 = load i8, i8* %lsr.iv73, align 1
  %83 = zext i8 %82 to i32
  %84 = ashr i32 %83, %9
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i16*, i16** %7, i64 %85
  %87 = load i16*, i16** %86, align 8
  %88 = load i8, i8* %scevgep78, align 1
  %89 = zext i8 %88 to i64
  %90 = getelementptr inbounds i16, i16* %87, i64 %89
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = ashr i32 %92, 8
  %94 = and i32 %93, 255
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %scevgep78, align 1
  %96 = zext i16 %91 to i32
  %97 = and i32 %96, 255
  %98 = trunc i32 %97 to i8
  store i8 %98, i8* %lsr.iv73, align 1
  %lsr.iv.next71 = add i32 %lsr.iv70, -1
  %scevgep74 = getelementptr i8, i8* %lsr.iv73, i64 6
  %exitcond35 = icmp ne i32 %lsr.iv.next71, 0
  br i1 %exitcond35, label %47, label %..loopexit13_crit_edge

99:                                               ; preds = %23
  %100 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = icmp eq i32 %102, 8
  br i1 %103, label %.preheader14, label %.preheader16

.preheader16:                                     ; preds = %99
  %104 = icmp ult i32 0, %11
  br i1 %104, label %.lr.ph42, label %.loopexit17

.lr.ph42:                                         ; preds = %.preheader16
  %105 = zext i32 %11 to i64
  %scevgep95 = getelementptr i8, i8* %1, i64 5
  br label %122

.preheader14:                                     ; preds = %99
  %106 = icmp ult i32 0, %11
  br i1 %106, label %.lr.ph38, label %.loopexit15

.lr.ph38:                                         ; preds = %.preheader14
  %107 = zext i32 %11 to i64
  br label %108

108:                                              ; preds = %.lr.ph38, %108
  %lsr.iv82 = phi i64 [ 0, %.lr.ph38 ], [ %lsr.iv.next83, %108 ]
  %109 = shl nuw nsw i64 %lsr.iv82, 2
  %scevgep85 = getelementptr i8, i8* %1, i64 %109
  %110 = load i8, i8* %scevgep85, align 1
  %111 = zext i8 %110 to i64
  %112 = getelementptr inbounds i8, i8* %5, i64 %111
  %113 = load i8, i8* %112, align 1
  store i8 %113, i8* %scevgep85, align 1
  %scevgep86 = getelementptr i8, i8* %scevgep85, i64 1
  %114 = load i8, i8* %scevgep86, align 1
  %115 = zext i8 %114 to i64
  %116 = getelementptr inbounds i8, i8* %5, i64 %115
  %117 = load i8, i8* %116, align 1
  %scevgep87 = getelementptr i8, i8* %scevgep85, i64 1
  store i8 %117, i8* %scevgep87, align 1
  %scevgep88 = getelementptr i8, i8* %scevgep85, i64 2
  %118 = load i8, i8* %scevgep88, align 1
  %119 = zext i8 %118 to i64
  %120 = getelementptr inbounds i8, i8* %5, i64 %119
  %121 = load i8, i8* %120, align 1
  %scevgep89 = getelementptr i8, i8* %scevgep85, i64 2
  store i8 %121, i8* %scevgep89, align 1
  %lsr.iv.next83 = add nuw nsw i64 %lsr.iv82, 1
  %tmp = trunc i64 %lsr.iv.next83 to i32
  %tmp84 = trunc i64 %107 to i32
  %exitcond39 = icmp ne i32 %tmp84, %tmp
  br i1 %exitcond39, label %108, label %..loopexit15_crit_edge

122:                                              ; preds = %.lr.ph42, %122
  %lsr.iv91 = phi i64 [ 0, %.lr.ph42 ], [ %lsr.iv.next92, %122 ]
  %123 = shl nuw nsw i64 %lsr.iv91, 3
  %scevgep98 = getelementptr i8, i8* %scevgep95, i64 %123
  %scevgep99 = getelementptr i8, i8* %scevgep98, i64 -5
  %124 = shl nuw nsw i64 %lsr.iv91, 3
  %scevgep96 = getelementptr i8, i8* %scevgep95, i64 %124
  %scevgep97 = getelementptr i8, i8* %scevgep96, i64 -4
  %125 = load i8, i8* %scevgep97, align 1
  %126 = zext i8 %125 to i32
  %127 = ashr i32 %126, %9
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i16*, i16** %7, i64 %128
  %130 = load i16*, i16** %129, align 8
  %131 = load i8, i8* %scevgep99, align 1
  %132 = zext i8 %131 to i64
  %133 = getelementptr inbounds i16, i16* %130, i64 %132
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  %136 = ashr i32 %135, 8
  %137 = and i32 %136, 255
  %138 = trunc i32 %137 to i8
  store i8 %138, i8* %scevgep99, align 1
  %139 = zext i16 %134 to i32
  %140 = and i32 %139, 255
  %141 = trunc i32 %140 to i8
  %142 = shl nuw nsw i64 %lsr.iv91, 3
  %scevgep100 = getelementptr i8, i8* %scevgep95, i64 %142
  %scevgep101 = getelementptr i8, i8* %scevgep100, i64 -4
  store i8 %141, i8* %scevgep101, align 1
  %143 = shl nuw nsw i64 %lsr.iv91, 3
  %scevgep108 = getelementptr i8, i8* %scevgep95, i64 %143
  %scevgep109 = getelementptr i8, i8* %scevgep108, i64 -3
  %144 = shl nuw nsw i64 %lsr.iv91, 3
  %scevgep110 = getelementptr i8, i8* %scevgep95, i64 %144
  %scevgep111 = getelementptr i8, i8* %scevgep110, i64 -2
  %145 = load i8, i8* %scevgep111, align 1
  %146 = zext i8 %145 to i32
  %147 = ashr i32 %146, %9
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i16*, i16** %7, i64 %148
  %150 = load i16*, i16** %149, align 8
  %151 = load i8, i8* %scevgep109, align 1
  %152 = zext i8 %151 to i64
  %153 = getelementptr inbounds i16, i16* %150, i64 %152
  %154 = load i16, i16* %153, align 2
  %155 = zext i16 %154 to i32
  %156 = ashr i32 %155, 8
  %157 = and i32 %156, 255
  %158 = trunc i32 %157 to i8
  store i8 %158, i8* %scevgep109, align 1
  %159 = zext i16 %154 to i32
  %160 = and i32 %159, 255
  %161 = trunc i32 %160 to i8
  %162 = shl nuw nsw i64 %lsr.iv91, 3
  %scevgep106 = getelementptr i8, i8* %scevgep95, i64 %162
  %scevgep107 = getelementptr i8, i8* %scevgep106, i64 -2
  store i8 %161, i8* %scevgep107, align 1
  %163 = shl nuw nsw i64 %lsr.iv91, 3
  %scevgep103 = getelementptr i8, i8* %scevgep95, i64 %163
  %scevgep104 = getelementptr i8, i8* %scevgep103, i64 -1
  %164 = shl nuw nsw i64 %lsr.iv91, 3
  %scevgep105 = getelementptr i8, i8* %scevgep95, i64 %164
  %165 = load i8, i8* %scevgep105, align 1
  %166 = zext i8 %165 to i32
  %167 = ashr i32 %166, %9
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i16*, i16** %7, i64 %168
  %170 = load i16*, i16** %169, align 8
  %171 = load i8, i8* %scevgep104, align 1
  %172 = zext i8 %171 to i64
  %173 = getelementptr inbounds i16, i16* %170, i64 %172
  %174 = load i16, i16* %173, align 2
  %175 = zext i16 %174 to i32
  %176 = ashr i32 %175, 8
  %177 = and i32 %176, 255
  %178 = trunc i32 %177 to i8
  store i8 %178, i8* %scevgep104, align 1
  %179 = zext i16 %174 to i32
  %180 = and i32 %179, 255
  %181 = trunc i32 %180 to i8
  %182 = shl nuw nsw i64 %lsr.iv91, 3
  %scevgep102 = getelementptr i8, i8* %scevgep95, i64 %182
  store i8 %181, i8* %scevgep102, align 1
  %lsr.iv.next92 = add nuw nsw i64 %lsr.iv91, 1
  %tmp93 = trunc i64 %lsr.iv.next92 to i32
  %tmp94 = trunc i64 %105 to i32
  %exitcond43 = icmp ne i32 %tmp94, %tmp93
  br i1 %exitcond43, label %122, label %..loopexit17_crit_edge

183:                                              ; preds = %23
  %184 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = icmp eq i32 %186, 8
  br i1 %187, label %.preheader18, label %.preheader20

.preheader20:                                     ; preds = %183
  %188 = icmp ult i32 0, %11
  br i1 %188, label %.lr.ph50, label %.loopexit21

.lr.ph50:                                         ; preds = %.preheader20
  %189 = zext i32 %11 to i64
  %scevgep121 = getelementptr i8, i8* %1, i64 1
  br label %198

.preheader18:                                     ; preds = %183
  %190 = icmp ult i32 0, %11
  br i1 %190, label %.lr.ph46, label %.loopexit19

.lr.ph46:                                         ; preds = %.preheader18
  %191 = zext i32 %11 to i64
  br label %192

192:                                              ; preds = %.lr.ph46, %192
  %lsr.iv112 = phi i64 [ 0, %.lr.ph46 ], [ %lsr.iv.next113, %192 ]
  %193 = shl nuw nsw i64 %lsr.iv112, 1
  %scevgep116 = getelementptr i8, i8* %1, i64 %193
  %194 = load i8, i8* %scevgep116, align 1
  %195 = zext i8 %194 to i64
  %196 = getelementptr inbounds i8, i8* %5, i64 %195
  %197 = load i8, i8* %196, align 1
  store i8 %197, i8* %scevgep116, align 1
  %lsr.iv.next113 = add nuw nsw i64 %lsr.iv112, 1
  %tmp114 = trunc i64 %lsr.iv.next113 to i32
  %tmp115 = trunc i64 %191 to i32
  %exitcond47 = icmp ne i32 %tmp115, %tmp114
  br i1 %exitcond47, label %192, label %..loopexit19_crit_edge

198:                                              ; preds = %.lr.ph50, %198
  %lsr.iv117 = phi i64 [ 0, %.lr.ph50 ], [ %lsr.iv.next118, %198 ]
  %199 = shl nuw nsw i64 %lsr.iv117, 2
  %scevgep123 = getelementptr i8, i8* %scevgep121, i64 %199
  %scevgep124 = getelementptr i8, i8* %scevgep123, i64 -1
  %200 = shl nuw nsw i64 %lsr.iv117, 2
  %scevgep122 = getelementptr i8, i8* %scevgep121, i64 %200
  %201 = load i8, i8* %scevgep122, align 1
  %202 = zext i8 %201 to i32
  %203 = ashr i32 %202, %9
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds i16*, i16** %7, i64 %204
  %206 = load i16*, i16** %205, align 8
  %207 = load i8, i8* %scevgep124, align 1
  %208 = zext i8 %207 to i64
  %209 = getelementptr inbounds i16, i16* %206, i64 %208
  %210 = load i16, i16* %209, align 2
  %211 = zext i16 %210 to i32
  %212 = ashr i32 %211, 8
  %213 = and i32 %212, 255
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %scevgep124, align 1
  %215 = zext i16 %210 to i32
  %216 = and i32 %215, 255
  %217 = trunc i32 %216 to i8
  %218 = shl nuw nsw i64 %lsr.iv117, 2
  %scevgep125 = getelementptr i8, i8* %scevgep121, i64 %218
  store i8 %217, i8* %scevgep125, align 1
  %lsr.iv.next118 = add nuw nsw i64 %lsr.iv117, 1
  %tmp119 = trunc i64 %lsr.iv.next118 to i32
  %tmp120 = trunc i64 %189 to i32
  %exitcond51 = icmp ne i32 %tmp120, %tmp119
  br i1 %exitcond51, label %198, label %..loopexit21_crit_edge

219:                                              ; preds = %23
  %220 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i32
  %223 = icmp eq i32 %222, 2
  br i1 %223, label %.preheader28, label %291

.preheader28:                                     ; preds = %219
  %224 = icmp ult i32 0, %11
  br i1 %224, label %.lr.ph65, label %.loopexit29

.lr.ph65:                                         ; preds = %.preheader28
  br label %225

225:                                              ; preds = %.lr.ph65, %225
  %.664 = phi i32 [ 0, %.lr.ph65 ], [ %289, %225 ]
  %.6763 = phi i8* [ %1, %.lr.ph65 ], [ %288, %225 ]
  %226 = load i8, i8* %.6763, align 1
  %227 = zext i8 %226 to i32
  %228 = and i32 %227, 192
  %229 = load i8, i8* %.6763, align 1
  %230 = zext i8 %229 to i32
  %231 = and i32 %230, 48
  %232 = load i8, i8* %.6763, align 1
  %233 = zext i8 %232 to i32
  %234 = and i32 %233, 12
  %235 = load i8, i8* %.6763, align 1
  %236 = zext i8 %235 to i32
  %237 = and i32 %236, 3
  %238 = ashr i32 %228, 2
  %239 = or i32 %228, %238
  %240 = ashr i32 %228, 4
  %241 = or i32 %239, %240
  %242 = ashr i32 %228, 6
  %243 = or i32 %241, %242
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds i8, i8* %5, i64 %244
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i32
  %248 = and i32 %247, 192
  %249 = shl i32 %231, 2
  %250 = or i32 %249, %231
  %251 = ashr i32 %231, 2
  %252 = or i32 %250, %251
  %253 = ashr i32 %231, 4
  %254 = or i32 %252, %253
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds i8, i8* %5, i64 %255
  %257 = load i8, i8* %256, align 1
  %258 = zext i8 %257 to i32
  %259 = ashr i32 %258, 2
  %260 = and i32 %259, 48
  %261 = or i32 %248, %260
  %262 = shl i32 %234, 4
  %263 = shl i32 %234, 2
  %264 = or i32 %262, %263
  %265 = or i32 %264, %234
  %266 = ashr i32 %234, 2
  %267 = or i32 %265, %266
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds i8, i8* %5, i64 %268
  %270 = load i8, i8* %269, align 1
  %271 = zext i8 %270 to i32
  %272 = ashr i32 %271, 4
  %273 = and i32 %272, 12
  %274 = or i32 %261, %273
  %275 = shl i32 %237, 6
  %276 = shl i32 %237, 4
  %277 = or i32 %275, %276
  %278 = shl i32 %237, 2
  %279 = or i32 %277, %278
  %280 = or i32 %279, %237
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds i8, i8* %5, i64 %281
  %283 = load i8, i8* %282, align 1
  %284 = zext i8 %283 to i32
  %285 = ashr i32 %284, 6
  %286 = or i32 %274, %285
  %287 = trunc i32 %286 to i8
  store i8 %287, i8* %.6763, align 1
  %288 = getelementptr inbounds i8, i8* %.6763, i32 1
  %289 = add i32 %.664, 4
  %290 = icmp ult i32 %289, %11
  br i1 %290, label %225, label %..loopexit29_crit_edge

..loopexit29_crit_edge:                           ; preds = %225
  br label %.loopexit29

.loopexit29:                                      ; preds = %..loopexit29_crit_edge, %.preheader28
  br label %291

291:                                              ; preds = %.loopexit29, %219
  %292 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %293 = load i8, i8* %292, align 1
  %294 = zext i8 %293 to i32
  %295 = icmp eq i32 %294, 4
  br i1 %295, label %.preheader22, label %323

.preheader22:                                     ; preds = %291
  %296 = icmp ult i32 0, %11
  br i1 %296, label %.lr.ph54, label %.loopexit23

.lr.ph54:                                         ; preds = %.preheader22
  br label %297

297:                                              ; preds = %.lr.ph54, %297
  %.753 = phi i32 [ 0, %.lr.ph54 ], [ %321, %297 ]
  %.7852 = phi i8* [ %1, %.lr.ph54 ], [ %320, %297 ]
  %298 = load i8, i8* %.7852, align 1
  %299 = zext i8 %298 to i32
  %300 = and i32 %299, 240
  %301 = load i8, i8* %.7852, align 1
  %302 = zext i8 %301 to i32
  %303 = and i32 %302, 15
  %304 = ashr i32 %300, 4
  %305 = or i32 %300, %304
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i8, i8* %5, i64 %306
  %308 = load i8, i8* %307, align 1
  %309 = zext i8 %308 to i32
  %310 = and i32 %309, 240
  %311 = shl i32 %303, 4
  %312 = or i32 %311, %303
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds i8, i8* %5, i64 %313
  %315 = load i8, i8* %314, align 1
  %316 = zext i8 %315 to i32
  %317 = ashr i32 %316, 4
  %318 = or i32 %310, %317
  %319 = trunc i32 %318 to i8
  store i8 %319, i8* %.7852, align 1
  %320 = getelementptr inbounds i8, i8* %.7852, i32 1
  %321 = add i32 %.753, 2
  %322 = icmp ult i32 %321, %11
  br i1 %322, label %297, label %..loopexit23_crit_edge

323:                                              ; preds = %291
  %324 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %325 = load i8, i8* %324, align 1
  %326 = zext i8 %325 to i32
  %327 = icmp eq i32 %326, 8
  br i1 %327, label %.preheader24, label %335

.preheader24:                                     ; preds = %323
  %328 = icmp ult i32 0, %11
  br i1 %328, label %.lr.ph57, label %.loopexit25

.lr.ph57:                                         ; preds = %.preheader24
  %329 = zext i32 %11 to i64
  br label %330

330:                                              ; preds = %.lr.ph57, %330
  %lsr.iv126 = phi i64 [ 0, %.lr.ph57 ], [ %lsr.iv.next127, %330 ]
  %scevgep130 = getelementptr i8, i8* %1, i64 %lsr.iv126
  %331 = load i8, i8* %scevgep130, align 1
  %332 = zext i8 %331 to i64
  %333 = getelementptr inbounds i8, i8* %5, i64 %332
  %334 = load i8, i8* %333, align 1
  store i8 %334, i8* %scevgep130, align 1
  %lsr.iv.next127 = add nuw nsw i64 %lsr.iv126, 1
  %tmp128 = trunc i64 %lsr.iv.next127 to i32
  %tmp129 = trunc i64 %329 to i32
  %exitcond58 = icmp ne i32 %tmp129, %tmp128
  br i1 %exitcond58, label %330, label %..loopexit25_crit_edge

335:                                              ; preds = %323
  %336 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %337 = load i8, i8* %336, align 1
  %338 = zext i8 %337 to i32
  %339 = icmp eq i32 %338, 16
  br i1 %339, label %.preheader26, label %363

.preheader26:                                     ; preds = %335
  %340 = icmp ult i32 0, %11
  br i1 %340, label %.lr.ph61, label %.loopexit27

.lr.ph61:                                         ; preds = %.preheader26
  %341 = zext i32 %11 to i64
  %scevgep135 = getelementptr i8, i8* %1, i64 1
  br label %342

342:                                              ; preds = %.lr.ph61, %342
  %lsr.iv131 = phi i64 [ 0, %.lr.ph61 ], [ %lsr.iv.next132, %342 ]
  %343 = shl nuw nsw i64 %lsr.iv131, 1
  %scevgep137 = getelementptr i8, i8* %scevgep135, i64 %343
  %scevgep138 = getelementptr i8, i8* %scevgep137, i64 -1
  %344 = shl nuw nsw i64 %lsr.iv131, 1
  %scevgep136 = getelementptr i8, i8* %scevgep135, i64 %344
  %345 = load i8, i8* %scevgep136, align 1
  %346 = zext i8 %345 to i32
  %347 = ashr i32 %346, %9
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds i16*, i16** %7, i64 %348
  %350 = load i16*, i16** %349, align 8
  %351 = load i8, i8* %scevgep138, align 1
  %352 = zext i8 %351 to i64
  %353 = getelementptr inbounds i16, i16* %350, i64 %352
  %354 = load i16, i16* %353, align 2
  %355 = zext i16 %354 to i32
  %356 = ashr i32 %355, 8
  %357 = and i32 %356, 255
  %358 = trunc i32 %357 to i8
  store i8 %358, i8* %scevgep138, align 1
  %359 = zext i16 %354 to i32
  %360 = and i32 %359, 255
  %361 = trunc i32 %360 to i8
  %362 = shl nuw nsw i64 %lsr.iv131, 1
  %scevgep139 = getelementptr i8, i8* %scevgep135, i64 %362
  store i8 %361, i8* %scevgep139, align 1
  %lsr.iv.next132 = add nuw nsw i64 %lsr.iv131, 1
  %tmp133 = trunc i64 %lsr.iv.next132 to i32
  %tmp134 = trunc i64 %341 to i32
  %exitcond62 = icmp ne i32 %tmp134, %tmp133
  br i1 %exitcond62, label %342, label %..loopexit27_crit_edge

..loopexit_crit_edge:                             ; preds = %34
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader
  br label %363

..loopexit13_crit_edge:                           ; preds = %47
  br label %.loopexit13

.loopexit13:                                      ; preds = %..loopexit13_crit_edge, %.preheader12
  br label %363

..loopexit15_crit_edge:                           ; preds = %108
  br label %.loopexit15

.loopexit15:                                      ; preds = %..loopexit15_crit_edge, %.preheader14
  br label %363

..loopexit17_crit_edge:                           ; preds = %122
  br label %.loopexit17

.loopexit17:                                      ; preds = %..loopexit17_crit_edge, %.preheader16
  br label %363

..loopexit19_crit_edge:                           ; preds = %192
  br label %.loopexit19

.loopexit19:                                      ; preds = %..loopexit19_crit_edge, %.preheader18
  br label %363

..loopexit21_crit_edge:                           ; preds = %198
  br label %.loopexit21

.loopexit21:                                      ; preds = %..loopexit21_crit_edge, %.preheader20
  br label %363

..loopexit23_crit_edge:                           ; preds = %297
  br label %.loopexit23

.loopexit23:                                      ; preds = %..loopexit23_crit_edge, %.preheader22
  br label %363

..loopexit25_crit_edge:                           ; preds = %330
  br label %.loopexit25

.loopexit25:                                      ; preds = %..loopexit25_crit_edge, %.preheader24
  br label %363

..loopexit27_crit_edge:                           ; preds = %342
  br label %.loopexit27

.loopexit27:                                      ; preds = %..loopexit27_crit_edge, %.preheader26
  br label %363

363:                                              ; preds = %.loopexit27, %.loopexit25, %.loopexit23, %.loopexit21, %.loopexit19, %.loopexit17, %.loopexit15, %.loopexit13, %.loopexit, %335, %23, %17
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_encode_alpha(%struct.png_row_info_struct* %0, i8* %1, %struct.png_struct_def* noalias %2) #11 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %7 = load i8, i8* %6, align 8
  %8 = zext i8 %7 to i32
  %9 = and i32 %8, 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %84

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = icmp eq i32 %14, 8
  br i1 %15, label %16, label %41

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 83
  %18 = load i8*, i8** %17, align 8
  %19 = icmp ne i8* %18, null
  br i1 %19, label %20, label %84

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %22 = load i8, i8* %21, align 8
  %23 = zext i8 %22 to i32
  %24 = and i32 %23, 2
  %25 = icmp ne i32 %24, 0
  %26 = zext i1 %25 to i64
  %27 = select i1 %25, i32 4, i32 2
  %28 = sub nsw i32 %27, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %1, i64 %29
  %31 = sext i32 %27 to i64
  %32 = icmp ugt i32 %5, 0
  br i1 %32, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %20
  br label %33

33:                                               ; preds = %.lr.ph, %33
  %.05 = phi i32 [ %5, %.lr.ph ], [ %38, %33 ]
  %.014 = phi i8* [ %30, %.lr.ph ], [ %39, %33 ]
  %34 = load i8, i8* %.014, align 1
  %35 = zext i8 %34 to i64
  %36 = getelementptr inbounds i8, i8* %18, i64 %35
  %37 = load i8, i8* %36, align 1
  store i8 %37, i8* %.014, align 1
  %38 = add i32 %.05, -1
  %39 = getelementptr inbounds i8, i8* %.014, i64 %31
  %40 = icmp ugt i32 %38, 0
  br i1 %40, label %33, label %..loopexit_crit_edge

41:                                               ; preds = %11
  %42 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = icmp eq i32 %44, 16
  br i1 %45, label %46, label %84

46:                                               ; preds = %41
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 85
  %48 = load i16**, i16*** %47, align 8
  %49 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %2, i32 0, i32 79
  %50 = load i32, i32* %49, align 8
  %51 = icmp ne i16** %48, null
  br i1 %51, label %52, label %84

52:                                               ; preds = %46
  %53 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %54 = load i8, i8* %53, align 8
  %55 = zext i8 %54 to i32
  %56 = and i32 %55, 2
  %57 = icmp ne i32 %56, 0
  %58 = zext i1 %57 to i64
  %59 = select i1 %57, i32 8, i32 4
  %60 = sext i32 %59 to i64
  %61 = icmp ugt i32 %5, 0
  br i1 %61, label %.lr.ph8, label %.loopexit3

.lr.ph8:                                          ; preds = %52
  %62 = add nsw i64 %60, -1
  %scevgep = getelementptr i8, i8* %1, i64 %62
  br label %63

63:                                               ; preds = %.lr.ph8, %63
  %lsr.iv = phi i8* [ %scevgep, %.lr.ph8 ], [ %82, %63 ]
  %.17 = phi i32 [ %5, %.lr.ph8 ], [ %81, %63 ]
  %lsr.iv9 = bitcast i8* %lsr.iv to i1*
  %scevgep11 = getelementptr i8, i8* %lsr.iv, i64 -1
  %64 = load i8, i8* %lsr.iv, align 1
  %65 = zext i8 %64 to i32
  %66 = ashr i32 %65, %50
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i16*, i16** %48, i64 %67
  %69 = load i16*, i16** %68, align 8
  %70 = load i8, i8* %scevgep11, align 1
  %71 = zext i8 %70 to i64
  %72 = getelementptr inbounds i16, i16* %69, i64 %71
  %73 = load i16, i16* %72, align 2
  %74 = zext i16 %73 to i32
  %75 = ashr i32 %74, 8
  %76 = and i32 %75, 255
  %77 = trunc i32 %76 to i8
  store i8 %77, i8* %scevgep11, align 1
  %78 = zext i16 %73 to i32
  %79 = and i32 %78, 255
  %80 = trunc i32 %79 to i8
  store i8 %80, i8* %lsr.iv, align 1
  %81 = add i32 %.17, -1
  %scevgep10 = getelementptr i1, i1* %lsr.iv9, i64 %60
  %82 = bitcast i1* %scevgep10 to i8*
  %83 = icmp ugt i32 %81, 0
  br i1 %83, label %63, label %..loopexit3_crit_edge

84:                                               ; preds = %16, %46, %41, %3
  call void @png_warning(%struct.png_struct_def* %2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.21.239, i32 0, i32 0))
  br label %85

..loopexit_crit_edge:                             ; preds = %33
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %20
  br label %85

..loopexit3_crit_edge:                            ; preds = %63
  br label %.loopexit3

.loopexit3:                                       ; preds = %..loopexit3_crit_edge, %52
  br label %85

85:                                               ; preds = %.loopexit3, %.loopexit, %84
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_scale_16_to_8(%struct.png_row_info_struct* %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = icmp eq i32 %5, 16
  br i1 %6, label %7, label %41

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds i8, i8* %1, i64 %9
  %11 = icmp ult i8* %1, %10
  br i1 %11, label %.lr.ph, label %25

.lr.ph:                                           ; preds = %7
  br label %12

12:                                               ; preds = %.lr.ph, %12
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %12 ]
  %scevgep = getelementptr i8, i8* %1, i64 %lsr.iv
  %13 = shl i64 %lsr.iv, 1
  %scevgep4 = getelementptr i8, i8* %1, i64 %13
  %14 = load i8, i8* %scevgep4, align 1
  %15 = zext i8 %14 to i32
  %scevgep5 = getelementptr i8, i8* %scevgep4, i64 1
  %16 = load i8, i8* %scevgep5, align 1
  %17 = zext i8 %16 to i32
  %18 = sub nsw i32 %17, %15
  %19 = add nsw i32 %18, 128
  %20 = mul nsw i32 %19, 65535
  %21 = ashr i32 %20, 24
  %22 = add nsw i32 %15, %21
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %scevgep, align 1
  %lsr.iv.next = add i64 %lsr.iv, 1
  %scevgep6 = getelementptr i8, i8* %scevgep4, i64 2
  %24 = icmp ult i8* %scevgep6, %10
  br i1 %24, label %12, label %._crit_edge

._crit_edge:                                      ; preds = %12
  br label %25

25:                                               ; preds = %._crit_edge, %7
  %26 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  store i8 8, i8* %26, align 1
  %27 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  %28 = load i8, i8* %27, align 2
  %29 = zext i8 %28 to i32
  %30 = mul nsw i32 8, %29
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  %36 = load i8, i8* %35, align 2
  %37 = zext i8 %36 to i32
  %38 = mul i32 %34, %37
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %39, i64* %40, align 8
  br label %41

41:                                               ; preds = %25, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_chop(%struct.png_row_info_struct* %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = icmp eq i32 %5, 16
  br i1 %6, label %7, label %33

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds i8, i8* %1, i64 %9
  %11 = icmp ult i8* %1, %10
  br i1 %11, label %.lr.ph, label %17

.lr.ph:                                           ; preds = %7
  br label %12

12:                                               ; preds = %.lr.ph, %12
  %.03 = phi i8* [ %1, %.lr.ph ], [ %14, %12 ]
  %.012 = phi i8* [ %1, %.lr.ph ], [ %15, %12 ]
  %13 = load i8, i8* %.012, align 1
  %14 = getelementptr inbounds i8, i8* %.03, i32 1
  store i8 %13, i8* %.03, align 1
  %15 = getelementptr inbounds i8, i8* %.012, i64 2
  %16 = icmp ult i8* %15, %10
  br i1 %16, label %12, label %._crit_edge

._crit_edge:                                      ; preds = %12
  br label %17

17:                                               ; preds = %._crit_edge, %7
  %18 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  store i8 8, i8* %18, align 1
  %19 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  %20 = load i8, i8* %19, align 2
  %21 = zext i8 %20 to i32
  %22 = mul nsw i32 8, %21
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  %28 = load i8, i8* %27, align 2
  %29 = zext i8 %28 to i32
  %30 = mul i32 %26, %29
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %31, i64* %32, align 8
  br label %33

33:                                               ; preds = %17, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_quantize(%struct.png_row_info_struct* %0, i8* %1, i8* %2, i8* %3) #11 {
  %5 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = icmp eq i32 %9, 8
  br i1 %10, label %11, label %137

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %13 = load i8, i8* %12, align 8
  %14 = zext i8 %13 to i32
  %15 = icmp eq i32 %14, 2
  %16 = icmp ne i8* %2, null
  %or.cond = select i1 %15, i1 %16, i1 false
  br i1 %or.cond, label %.preheader, label %67

.preheader:                                       ; preds = %11
  %17 = icmp ult i32 0, %6
  br i1 %17, label %.lr.ph, label %39

.lr.ph:                                           ; preds = %.preheader
  %18 = zext i32 %6 to i64
  br label %19

19:                                               ; preds = %.lr.ph, %19
  %lsr.iv24 = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next25, %19 ]
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %19 ]
  %scevgep = getelementptr i8, i8* %1, i64 %lsr.iv
  %scevgep26 = getelementptr i8, i8* %1, i64 %lsr.iv24
  %20 = load i8, i8* %scevgep26, align 1
  %21 = zext i8 %20 to i32
  %scevgep27 = getelementptr i8, i8* %scevgep26, i64 1
  %22 = load i8, i8* %scevgep27, align 1
  %23 = zext i8 %22 to i32
  %scevgep28 = getelementptr i8, i8* %scevgep26, i64 2
  %24 = load i8, i8* %scevgep28, align 1
  %25 = zext i8 %24 to i32
  %26 = ashr i32 %21, 3
  %27 = and i32 %26, 31
  %28 = shl i32 %27, 10
  %29 = ashr i32 %23, 3
  %30 = and i32 %29, 31
  %31 = shl i32 %30, 5
  %32 = or i32 %28, %31
  %33 = ashr i32 %25, 3
  %34 = and i32 %33, 31
  %35 = or i32 %32, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %2, i64 %36
  %38 = load i8, i8* %37, align 1
  store i8 %38, i8* %scevgep, align 1
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 1
  %tmp = trunc i64 %lsr.iv.next to i32
  %tmp23 = trunc i64 %18 to i32
  %lsr.iv.next25 = add nuw nsw i64 %lsr.iv24, 3
  %exitcond = icmp ne i32 %tmp23, %tmp
  br i1 %exitcond, label %19, label %._crit_edge

._crit_edge:                                      ; preds = %19
  br label %39

39:                                               ; preds = %._crit_edge, %.preheader
  %40 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  store i8 3, i8* %40, align 8
  %41 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  store i8 1, i8* %41, align 2
  %42 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = icmp sge i32 %47, 8
  br i1 %48, label %49, label %56

49:                                               ; preds = %39
  %50 = zext i32 %6 to i64
  %51 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i64
  %54 = lshr i64 %53, 3
  %55 = mul i64 %50, %54
  br label %64

56:                                               ; preds = %39
  %57 = zext i32 %6 to i64
  %58 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i64
  %61 = mul i64 %57, %60
  %62 = add i64 %61, 7
  %63 = lshr i64 %62, 3
  br label %64

64:                                               ; preds = %56, %49
  %65 = phi i64 [ %55, %49 ], [ %63, %56 ]
  %66 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %65, i64* %66, align 8
  br label %137

67:                                               ; preds = %11
  %68 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %69 = load i8, i8* %68, align 8
  %70 = zext i8 %69 to i32
  %71 = icmp eq i32 %70, 6
  %72 = icmp ne i8* %2, null
  %or.cond6 = select i1 %71, i1 %72, i1 false
  br i1 %or.cond6, label %.preheader8, label %124

.preheader8:                                      ; preds = %67
  %73 = icmp ult i32 0, %6
  br i1 %73, label %.lr.ph16, label %96

.lr.ph16:                                         ; preds = %.preheader8
  %74 = zext i32 %6 to i64
  br label %75

75:                                               ; preds = %.lr.ph16, %75
  %lsr.iv30 = phi i64 [ 0, %.lr.ph16 ], [ %lsr.iv.next31, %75 ]
  %scevgep34 = getelementptr i8, i8* %1, i64 %lsr.iv30
  %76 = shl nuw nsw i64 %lsr.iv30, 2
  %scevgep35 = getelementptr i8, i8* %1, i64 %76
  %77 = load i8, i8* %scevgep35, align 1
  %78 = zext i8 %77 to i32
  %scevgep36 = getelementptr i8, i8* %scevgep35, i64 1
  %79 = load i8, i8* %scevgep36, align 1
  %80 = zext i8 %79 to i32
  %scevgep37 = getelementptr i8, i8* %scevgep35, i64 2
  %81 = load i8, i8* %scevgep37, align 1
  %82 = zext i8 %81 to i32
  %83 = ashr i32 %78, 3
  %84 = and i32 %83, 31
  %85 = shl i32 %84, 10
  %86 = ashr i32 %80, 3
  %87 = and i32 %86, 31
  %88 = shl i32 %87, 5
  %89 = or i32 %85, %88
  %90 = ashr i32 %82, 3
  %91 = and i32 %90, 31
  %92 = or i32 %89, %91
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8, i8* %2, i64 %93
  %95 = load i8, i8* %94, align 1
  store i8 %95, i8* %scevgep34, align 1
  %lsr.iv.next31 = add nuw nsw i64 %lsr.iv30, 1
  %tmp32 = trunc i64 %lsr.iv.next31 to i32
  %tmp33 = trunc i64 %74 to i32
  %exitcond18 = icmp ne i32 %tmp33, %tmp32
  br i1 %exitcond18, label %75, label %._crit_edge17

._crit_edge17:                                    ; preds = %75
  br label %96

96:                                               ; preds = %._crit_edge17, %.preheader8
  %97 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  store i8 3, i8* %97, align 8
  %98 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  store i8 1, i8* %98, align 2
  %99 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %100 = load i8, i8* %99, align 1
  %101 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 %100, i8* %101, align 1
  %102 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = icmp sge i32 %104, 8
  br i1 %105, label %106, label %113

106:                                              ; preds = %96
  %107 = zext i32 %6 to i64
  %108 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i64
  %111 = lshr i64 %110, 3
  %112 = mul i64 %107, %111
  br label %121

113:                                              ; preds = %96
  %114 = zext i32 %6 to i64
  %115 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i64
  %118 = mul i64 %114, %117
  %119 = add i64 %118, 7
  %120 = lshr i64 %119, 3
  br label %121

121:                                              ; preds = %113, %106
  %122 = phi i64 [ %112, %106 ], [ %120, %113 ]
  %123 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %122, i64* %123, align 8
  br label %137

124:                                              ; preds = %67
  %125 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %126 = load i8, i8* %125, align 8
  %127 = zext i8 %126 to i32
  %128 = icmp eq i32 %127, 3
  %129 = icmp ne i8* %3, null
  %or.cond7 = select i1 %128, i1 %129, i1 false
  br i1 %or.cond7, label %.preheader9, label %137

.preheader9:                                      ; preds = %124
  %130 = icmp ult i32 0, %6
  br i1 %130, label %.lr.ph21, label %.loopexit

.lr.ph21:                                         ; preds = %.preheader9
  %131 = zext i32 %6 to i64
  br label %132

132:                                              ; preds = %.lr.ph21, %132
  %lsr.iv39 = phi i64 [ 0, %.lr.ph21 ], [ %lsr.iv.next40, %132 ]
  %scevgep43 = getelementptr i8, i8* %1, i64 %lsr.iv39
  %133 = load i8, i8* %scevgep43, align 1
  %134 = zext i8 %133 to i64
  %135 = getelementptr inbounds i8, i8* %3, i64 %134
  %136 = load i8, i8* %135, align 1
  store i8 %136, i8* %scevgep43, align 1
  %lsr.iv.next40 = add nuw nsw i64 %lsr.iv39, 1
  %tmp41 = trunc i64 %lsr.iv.next40 to i32
  %tmp42 = trunc i64 %131 to i32
  %exitcond22 = icmp ne i32 %tmp42, %tmp41
  br i1 %exitcond22, label %132, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %132
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader9
  br label %137

137:                                              ; preds = %.loopexit, %64, %124, %121, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_expand_16(%struct.png_row_info_struct* %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = icmp eq i32 %5, 8
  br i1 %6, label %7, label %36

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %9 = load i8, i8* %8, align 8
  %10 = zext i8 %9 to i32
  %11 = icmp ne i32 %10, 3
  br i1 %11, label %12, label %36

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds i8, i8* %1, i64 %14
  %16 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds i8, i8* %15, i64 %17
  %19 = icmp ugt i8* %18, %15
  br i1 %19, label %.lr.ph, label %25

.lr.ph:                                           ; preds = %12
  %20 = add i64 %14, -1
  %scevgep5 = getelementptr i8, i8* %1, i64 %20
  br label %21

21:                                               ; preds = %.lr.ph, %21
  %lsr.iv = phi i8* [ %scevgep5, %.lr.ph ], [ %scevgep6, %21 ]
  %.03 = phi i8* [ %18, %.lr.ph ], [ %23, %21 ]
  %22 = load i8, i8* %lsr.iv, align 1
  %scevgep = getelementptr i8, i8* %.03, i64 -1
  store i8 %22, i8* %scevgep, align 1
  %scevgep4 = getelementptr i8, i8* %.03, i64 -2
  store i8 %22, i8* %scevgep4, align 1
  %23 = getelementptr inbounds i8, i8* %.03, i64 -2
  %scevgep6 = getelementptr i8, i8* %lsr.iv, i64 -1
  %24 = icmp ugt i8* %23, %lsr.iv
  br i1 %24, label %21, label %._crit_edge

._crit_edge:                                      ; preds = %21
  br label %25

25:                                               ; preds = %._crit_edge, %12
  %26 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = mul i64 %27, 2
  store i64 %28, i64* %26, align 8
  %29 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  store i8 16, i8* %29, align 1
  %30 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  %31 = load i8, i8* %30, align 2
  %32 = zext i8 %31 to i32
  %33 = mul nsw i32 %32, 16
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 %34, i8* %35, align 1
  br label %36

36:                                               ; preds = %25, %7, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_do_invert(%struct.png_row_info_struct* %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %4 = load i8, i8* %3, align 8
  %5 = zext i8 %4 to i32
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %17

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp ult i64 0, %9
  br i1 %10, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %7
  br label %11

11:                                               ; preds = %.lr.ph, %11
  %.038 = phi i64 [ 0, %.lr.ph ], [ %16, %11 ]
  %scevgep = getelementptr i8, i8* %1, i64 %.038
  %12 = load i8, i8* %scevgep, align 1
  %13 = zext i8 %12 to i32
  %14 = xor i32 %13, -1
  %15 = trunc i32 %14 to i8
  store i8 %15, i8* %scevgep, align 1
  %16 = add nuw i64 %.038, 1
  %exitcond = icmp ne i64 %9, %16
  br i1 %exitcond, label %11, label %..loopexit_crit_edge

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %19 = load i8, i8* %18, align 8
  %20 = zext i8 %19 to i32
  %21 = icmp eq i32 %20, 4
  br i1 %21, label %22, label %38

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = icmp eq i32 %25, 8
  br i1 %26, label %27, label %38

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = icmp ult i64 0, %29
  br i1 %30, label %.lr.ph12, label %.loopexit6

.lr.ph12:                                         ; preds = %27
  br label %31

31:                                               ; preds = %.lr.ph12, %31
  %.0411 = phi i64 [ 0, %.lr.ph12 ], [ %36, %31 ]
  %scevgep16 = getelementptr i8, i8* %1, i64 %.0411
  %32 = load i8, i8* %scevgep16, align 1
  %33 = zext i8 %32 to i32
  %34 = xor i32 %33, -1
  %35 = trunc i32 %34 to i8
  store i8 %35, i8* %scevgep16, align 1
  %36 = add i64 %.0411, 2
  %37 = icmp ult i64 %36, %29
  br i1 %37, label %31, label %..loopexit6_crit_edge

38:                                               ; preds = %22, %17
  %39 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %40 = load i8, i8* %39, align 8
  %41 = zext i8 %40 to i32
  %42 = icmp eq i32 %41, 4
  br i1 %42, label %43, label %63

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = icmp eq i32 %46, 16
  br i1 %47, label %48, label %63

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = icmp ult i64 0, %50
  br i1 %51, label %.lr.ph15, label %.loopexit7

.lr.ph15:                                         ; preds = %48
  br label %52

52:                                               ; preds = %.lr.ph15, %52
  %.014 = phi i64 [ 0, %.lr.ph15 ], [ %61, %52 ]
  %scevgep17 = getelementptr i8, i8* %1, i64 %.014
  %53 = load i8, i8* %scevgep17, align 1
  %54 = zext i8 %53 to i32
  %55 = xor i32 %54, -1
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %scevgep17, align 1
  %scevgep18 = getelementptr i8, i8* %scevgep17, i64 1
  %57 = load i8, i8* %scevgep18, align 1
  %58 = zext i8 %57 to i32
  %59 = xor i32 %58, -1
  %60 = trunc i32 %59 to i8
  %scevgep19 = getelementptr i8, i8* %scevgep17, i64 1
  store i8 %60, i8* %scevgep19, align 1
  %61 = add i64 %.014, 4
  %62 = icmp ult i64 %61, %50
  br i1 %62, label %52, label %..loopexit7_crit_edge

..loopexit_crit_edge:                             ; preds = %11
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %7
  br label %63

..loopexit6_crit_edge:                            ; preds = %31
  br label %.loopexit6

.loopexit6:                                       ; preds = %..loopexit6_crit_edge, %27
  br label %63

..loopexit7_crit_edge:                            ; preds = %52
  br label %.loopexit7

.loopexit7:                                       ; preds = %..loopexit7_crit_edge, %48
  br label %63

63:                                               ; preds = %.loopexit7, %.loopexit6, %.loopexit, %43, %38
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_read_invert_alpha(%struct.png_row_info_struct* %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %6 = load i8, i8* %5, align 8
  %7 = zext i8 %6 to i32
  %8 = icmp eq i32 %7, 6
  br i1 %8, label %9, label %48

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = icmp eq i32 %12, 8
  br i1 %13, label %14, label %28

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i32 0, %4
  br i1 %17, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %14
  %18 = add i64 %16, -1
  %scevgep = getelementptr i8, i8* %1, i64 %18
  %19 = sub i32 0, %4
  %20 = zext i32 %19 to i64
  br label %21

21:                                               ; preds = %.lr.ph, %21
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %21 ]
  %22 = shl nsw i64 %lsr.iv, 2
  %scevgep31 = getelementptr i8, i8* %scevgep, i64 %22
  %23 = load i8, i8* %scevgep31, align 1
  %24 = zext i8 %23 to i32
  %25 = sub nsw i32 255, %24
  %26 = trunc i32 %25 to i8
  %27 = shl nsw i64 %lsr.iv, 2
  %scevgep30 = getelementptr i8, i8* %scevgep, i64 %27
  store i8 %26, i8* %scevgep30, align 1
  %lsr.iv.next = add nsw i64 %lsr.iv, -1
  %tmp = trunc i64 %lsr.iv.next to i32
  %tmp32 = trunc i64 %20 to i32
  %exitcond = icmp ne i32 %tmp32, %tmp
  br i1 %exitcond, label %21, label %..loopexit_crit_edge

28:                                               ; preds = %9
  %29 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = icmp ult i32 0, %4
  br i1 %31, label %.lr.ph19, label %.loopexit12

.lr.ph19:                                         ; preds = %28
  %32 = add i64 %30, -1
  %scevgep33 = getelementptr i8, i8* %1, i64 %32
  %33 = sub i32 0, %4
  %34 = zext i32 %33 to i64
  br label %35

35:                                               ; preds = %.lr.ph19, %35
  %lsr.iv34 = phi i64 [ 0, %.lr.ph19 ], [ %lsr.iv.next35, %35 ]
  %36 = shl nsw i64 %lsr.iv34, 3
  %scevgep41 = getelementptr i8, i8* %scevgep33, i64 %36
  %37 = load i8, i8* %scevgep41, align 1
  %38 = zext i8 %37 to i32
  %39 = sub nsw i32 255, %38
  %40 = trunc i32 %39 to i8
  %41 = shl nsw i64 %lsr.iv34, 3
  %scevgep38 = getelementptr i8, i8* %scevgep33, i64 %41
  store i8 %40, i8* %scevgep38, align 1
  %42 = shl nsw i64 %lsr.iv34, 3
  %scevgep39 = getelementptr i8, i8* %scevgep33, i64 %42
  %scevgep40 = getelementptr i8, i8* %scevgep39, i64 -1
  %43 = load i8, i8* %scevgep40, align 1
  %44 = zext i8 %43 to i32
  %45 = sub nsw i32 255, %44
  %46 = trunc i32 %45 to i8
  %47 = shl nsw i64 %lsr.iv34, 3
  %scevgep36 = getelementptr i8, i8* %scevgep33, i64 %47
  %scevgep37 = getelementptr i8, i8* %scevgep36, i64 -1
  store i8 %46, i8* %scevgep37, align 1
  %lsr.iv.next35 = add nsw i64 %lsr.iv34, -1
  %tmp42 = trunc i64 %lsr.iv.next35 to i32
  %tmp43 = trunc i64 %34 to i32
  %exitcond20 = icmp ne i32 %tmp43, %tmp42
  br i1 %exitcond20, label %35, label %..loopexit12_crit_edge

48:                                               ; preds = %2
  %49 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %50 = load i8, i8* %49, align 8
  %51 = zext i8 %50 to i32
  %52 = icmp eq i32 %51, 4
  br i1 %52, label %53, label %94

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = icmp eq i32 %56, 8
  br i1 %57, label %58, label %74

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = icmp ult i32 0, %4
  br i1 %61, label %.lr.ph24, label %.loopexit13

.lr.ph24:                                         ; preds = %58
  %62 = add i64 %60, -1
  %scevgep44 = getelementptr i8, i8* %1, i64 %62
  %63 = sub i32 0, %4
  %64 = zext i32 %63 to i64
  br label %65

65:                                               ; preds = %.lr.ph24, %65
  %lsr.iv45 = phi i64 [ 0, %.lr.ph24 ], [ %lsr.iv.next46, %65 ]
  %66 = shl nsw i64 %lsr.iv45, 1
  %scevgep50 = getelementptr i8, i8* %scevgep44, i64 %66
  %67 = load i8, i8* %scevgep50, align 1
  %68 = zext i8 %67 to i32
  %69 = sub nsw i32 255, %68
  %70 = trunc i32 %69 to i8
  %71 = shl nsw i64 %lsr.iv45, 1
  %scevgep47 = getelementptr i8, i8* %scevgep44, i64 %71
  store i8 %70, i8* %scevgep47, align 1
  %72 = shl nsw i64 %lsr.iv45, 1
  %scevgep48 = getelementptr i8, i8* %scevgep44, i64 %72
  %scevgep49 = getelementptr i8, i8* %scevgep48, i64 -1
  %73 = load i8, i8* %scevgep49, align 1
  store i8 %73, i8* %scevgep49, align 1
  %lsr.iv.next46 = add nsw i64 %lsr.iv45, -1
  %tmp51 = trunc i64 %lsr.iv.next46 to i32
  %tmp52 = trunc i64 %64 to i32
  %exitcond25 = icmp ne i32 %tmp52, %tmp51
  br i1 %exitcond25, label %65, label %..loopexit13_crit_edge

74:                                               ; preds = %53
  %75 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = icmp ult i32 0, %4
  br i1 %77, label %.lr.ph28, label %.loopexit14

.lr.ph28:                                         ; preds = %74
  %78 = sub i32 0, %4
  %79 = zext i32 %78 to i64
  %80 = add i64 %76, -1
  %scevgep57 = getelementptr i8, i8* %1, i64 %80
  br label %81

81:                                               ; preds = %.lr.ph28, %81
  %lsr.iv53 = phi i64 [ 0, %.lr.ph28 ], [ %lsr.iv.next54, %81 ]
  %82 = shl nsw i64 %lsr.iv53, 2
  %scevgep60 = getelementptr i8, i8* %scevgep57, i64 %82
  %83 = load i8, i8* %scevgep60, align 1
  %84 = zext i8 %83 to i32
  %85 = sub nsw i32 255, %84
  %86 = trunc i32 %85 to i8
  %87 = shl nsw i64 %lsr.iv53, 2
  %scevgep63 = getelementptr i8, i8* %scevgep57, i64 %87
  store i8 %86, i8* %scevgep63, align 1
  %88 = shl nsw i64 %lsr.iv53, 2
  %scevgep58 = getelementptr i8, i8* %scevgep57, i64 %88
  %scevgep59 = getelementptr i8, i8* %scevgep58, i64 -1
  %89 = load i8, i8* %scevgep59, align 1
  %90 = zext i8 %89 to i32
  %91 = sub nsw i32 255, %90
  %92 = trunc i32 %91 to i8
  %93 = shl nsw i64 %lsr.iv53, 2
  %scevgep61 = getelementptr i8, i8* %scevgep57, i64 %93
  %scevgep62 = getelementptr i8, i8* %scevgep61, i64 -1
  store i8 %92, i8* %scevgep62, align 1
  %lsr.iv.next54 = add nsw i64 %lsr.iv53, -1
  %tmp55 = trunc i64 %lsr.iv.next54 to i32
  %tmp56 = trunc i64 %79 to i32
  %exitcond29 = icmp ne i32 %tmp56, %tmp55
  br i1 %exitcond29, label %81, label %..loopexit14_crit_edge

..loopexit_crit_edge:                             ; preds = %21
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %14
  br label %94

..loopexit12_crit_edge:                           ; preds = %35
  br label %.loopexit12

.loopexit12:                                      ; preds = %..loopexit12_crit_edge, %28
  br label %94

..loopexit13_crit_edge:                           ; preds = %65
  br label %.loopexit13

.loopexit13:                                      ; preds = %..loopexit13_crit_edge, %58
  br label %94

..loopexit14_crit_edge:                           ; preds = %81
  br label %.loopexit14

.loopexit14:                                      ; preds = %..loopexit14_crit_edge, %74
  br label %94

94:                                               ; preds = %.loopexit14, %.loopexit13, %.loopexit12, %.loopexit, %48
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_unshift(%struct.png_row_info_struct* %0, i8* %1, %struct.png_color_8_struct* %2) #11 {
  %4 = alloca [4 x i32], align 16
  %5 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %6 = load i8, i8* %5, align 8
  %7 = zext i8 %6 to i32
  %8 = icmp ne i32 %7, 3
  br i1 %8, label %9, label %148

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = and i32 %7, 2
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %37

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = sub nsw i32 %12, %18
  %20 = add nsw i32 0, 1
  %21 = sext i32 0 to i64
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %21
  store i32 %19, i32* %22, align 4
  %23 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = sub nsw i32 %12, %25
  %27 = add nsw i32 %20, 1
  %28 = sext i32 %20 to i64
  %29 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %28
  store i32 %26, i32* %29, align 4
  %30 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 2
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = sub nsw i32 %12, %32
  %34 = add nsw i32 %27, 1
  %35 = sext i32 %27 to i64
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %35
  store i32 %33, i32* %36, align 4
  br label %45

37:                                               ; preds = %9
  %38 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = sub nsw i32 %12, %40
  %42 = add nsw i32 0, 1
  %43 = sext i32 0 to i64
  %44 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %43
  store i32 %41, i32* %44, align 4
  br label %45

45:                                               ; preds = %37, %15
  %.04 = phi i32 [ %34, %15 ], [ %42, %37 ]
  %46 = and i32 %7, 4
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %56

48:                                               ; preds = %45
  %49 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 4
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = sub nsw i32 %12, %51
  %53 = add nsw i32 %.04, 1
  %54 = sext i32 %.04 to i64
  %55 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %54
  store i32 %52, i32* %55, align 4
  br label %56

56:                                               ; preds = %48, %45
  %.15 = phi i32 [ %53, %48 ], [ %.04, %45 ]
  %57 = icmp slt i32 0, %.15
  br i1 %57, label %.lr.ph31, label %74

.lr.ph31:                                         ; preds = %56
  br label %58

58:                                               ; preds = %.lr.ph31, %71
  %.0728 = phi i32 [ 0, %.lr.ph31 ], [ %72, %71 ]
  %.0827 = phi i32 [ 0, %.lr.ph31 ], [ %.19, %71 ]
  %59 = sext i32 %.0728 to i64
  %60 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = icmp sle i32 %61, 0
  br i1 %62, label %68, label %63

63:                                               ; preds = %58
  %64 = sext i32 %.0728 to i64
  %65 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = icmp sge i32 %66, %12
  br i1 %67, label %68, label %71

68:                                               ; preds = %63, %58
  %.0730 = phi i32 [ %.0728, %63 ], [ %.0728, %58 ]
  %69 = sext i32 %.0728 to i64
  %70 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %69
  store i32 0, i32* %70, align 4
  br label %71

71:                                               ; preds = %68, %63
  %.0729 = phi i32 [ %.0730, %68 ], [ %.0728, %63 ]
  %.19 = phi i32 [ %.0827, %68 ], [ 1, %63 ]
  %72 = add nsw i32 %.0729, 1
  %73 = icmp slt i32 %72, %.15
  br i1 %73, label %58, label %._crit_edge

._crit_edge:                                      ; preds = %71
  %split = phi i32 [ %.19, %71 ]
  br label %74

74:                                               ; preds = %._crit_edge, %56
  %.08.lcssa = phi i32 [ %split, %._crit_edge ], [ 0, %56 ]
  %75 = icmp eq i32 %.08.lcssa, 0
  br i1 %75, label %148, label %76

76:                                               ; preds = %74
  %77 = sub i32 %12, 2
  %78 = lshr i32 %77, 1
  %79 = shl i32 %77, 31
  %80 = or i32 %78, %79
  switch i32 %80, label %148 [
    i32 0, label %81
    i32 1, label %93
    i32 3, label %110
    i32 7, label %126
  ]

81:                                               ; preds = %76
  %82 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = inttoptr i64 %83 to i8*
  %85 = getelementptr i8, i8* %1, i64 %83
  %86 = icmp ult i8* %1, %85
  br i1 %86, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %81
  br label %87

87:                                               ; preds = %.lr.ph, %87
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %87 ]
  %scevgep = getelementptr i8, i8* %1, i64 %lsr.iv
  %88 = load i8, i8* %scevgep, align 1
  %89 = zext i8 %88 to i32
  %90 = ashr i32 %89, 1
  %91 = and i32 %90, 85
  %92 = trunc i32 %91 to i8
  store i8 %92, i8* %scevgep, align 1
  %lsr.iv.next = add i64 %lsr.iv, 1
  %tmp = inttoptr i64 %lsr.iv.next to i8*
  %exitcond = icmp ne i8* %84, %tmp
  br i1 %exitcond, label %87, label %..loopexit_crit_edge

93:                                               ; preds = %76
  %94 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %95 = load i64, i64* %94, align 8
  %96 = inttoptr i64 %95 to i8*
  %97 = getelementptr i8, i8* %1, i64 %95
  %98 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 0
  %99 = load i32, i32* %98, align 16
  %100 = ashr i32 15, %99
  %101 = shl i32 %100, 4
  %102 = or i32 %100, %101
  %103 = icmp ult i8* %1, %97
  br i1 %103, label %.lr.ph18, label %.loopexit13

.lr.ph18:                                         ; preds = %93
  br label %104

104:                                              ; preds = %.lr.ph18, %104
  %lsr.iv32 = phi i64 [ 0, %.lr.ph18 ], [ %lsr.iv.next33, %104 ]
  %scevgep34 = getelementptr i8, i8* %1, i64 %lsr.iv32
  %105 = load i8, i8* %scevgep34, align 1
  %106 = zext i8 %105 to i32
  %107 = ashr i32 %106, %99
  %108 = and i32 %107, %102
  %109 = trunc i32 %108 to i8
  store i8 %109, i8* %scevgep34, align 1
  %lsr.iv.next33 = add i64 %lsr.iv32, 1
  %tmp35 = inttoptr i64 %lsr.iv.next33 to i8*
  %exitcond19 = icmp ne i8* %96, %tmp35
  br i1 %exitcond19, label %104, label %..loopexit13_crit_edge

110:                                              ; preds = %76
  %111 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = inttoptr i64 %112 to i8*
  %114 = getelementptr i8, i8* %1, i64 %112
  %115 = icmp ult i8* %1, %114
  br i1 %115, label %.lr.ph22, label %.loopexit14

.lr.ph22:                                         ; preds = %110
  br label %116

116:                                              ; preds = %.lr.ph22, %116
  %lsr.iv36 = phi i64 [ 0, %.lr.ph22 ], [ %lsr.iv.next37, %116 ]
  %.0221 = phi i32 [ 0, %.lr.ph22 ], [ %spec.select, %116 ]
  %scevgep38 = getelementptr i8, i8* %1, i64 %lsr.iv36
  %117 = load i8, i8* %scevgep38, align 1
  %118 = zext i8 %117 to i32
  %119 = sext i32 %.0221 to i64
  %120 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %119
  %121 = load i32, i32* %120, align 4
  %122 = ashr i32 %118, %121
  %123 = add nsw i32 %.0221, 1
  %124 = icmp sge i32 %123, %.15
  %spec.select = select i1 %124, i32 0, i32 %123
  %125 = trunc i32 %122 to i8
  store i8 %125, i8* %scevgep38, align 1
  %lsr.iv.next37 = add i64 %lsr.iv36, 1
  %tmp39 = inttoptr i64 %lsr.iv.next37 to i8*
  %exitcond23 = icmp ne i8* %113, %tmp39
  br i1 %exitcond23, label %116, label %..loopexit14_crit_edge

126:                                              ; preds = %76
  %127 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %128 = load i64, i64* %127, align 8
  %129 = getelementptr inbounds i8, i8* %1, i64 %128
  %130 = icmp ult i8* %1, %129
  br i1 %130, label %.lr.ph26, label %.loopexit15

.lr.ph26:                                         ; preds = %126
  br label %131

131:                                              ; preds = %.lr.ph26, %131
  %.025 = phi i32 [ 0, %.lr.ph26 ], [ %spec.select12, %131 ]
  %.0124 = phi i8* [ %1, %.lr.ph26 ], [ %scevgep42, %131 ]
  %132 = load i8, i8* %.0124, align 1
  %133 = zext i8 %132 to i32
  %134 = shl i32 %133, 8
  %scevgep40 = getelementptr i8, i8* %.0124, i64 1
  %135 = load i8, i8* %scevgep40, align 1
  %136 = zext i8 %135 to i32
  %137 = add nsw i32 %134, %136
  %138 = sext i32 %.025 to i64
  %139 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %138
  %140 = load i32, i32* %139, align 4
  %141 = ashr i32 %137, %140
  %142 = add nsw i32 %.025, 1
  %143 = icmp sge i32 %142, %.15
  %spec.select12 = select i1 %143, i32 0, i32 %142
  %144 = ashr i32 %141, 8
  %145 = trunc i32 %144 to i8
  store i8 %145, i8* %.0124, align 1
  %146 = trunc i32 %141 to i8
  %scevgep41 = getelementptr i8, i8* %.0124, i64 1
  store i8 %146, i8* %scevgep41, align 1
  %scevgep42 = getelementptr i8, i8* %.0124, i64 2
  %147 = icmp ult i8* %scevgep42, %129
  br i1 %147, label %131, label %..loopexit15_crit_edge

..loopexit_crit_edge:                             ; preds = %87
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %81
  br label %148

..loopexit13_crit_edge:                           ; preds = %104
  br label %.loopexit13

.loopexit13:                                      ; preds = %..loopexit13_crit_edge, %93
  br label %148

..loopexit14_crit_edge:                           ; preds = %116
  br label %.loopexit14

.loopexit14:                                      ; preds = %..loopexit14_crit_edge, %110
  br label %148

..loopexit15_crit_edge:                           ; preds = %131
  br label %.loopexit15

.loopexit15:                                      ; preds = %..loopexit15_crit_edge, %126
  br label %148

148:                                              ; preds = %.loopexit15, %.loopexit14, %.loopexit13, %.loopexit, %76, %74, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_unpack(%struct.png_row_info_struct* %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = icmp slt i32 %5, 8
  br i1 %6, label %7, label %85

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  switch i32 %12, label %71 [
    i32 1, label %13
    i32 2, label %32
    i32 4, label %52
  ]

13:                                               ; preds = %7
  %14 = sub i32 %9, 1
  %15 = lshr i32 %14, 3
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %1, i64 %16
  %18 = zext i32 %9 to i64
  %19 = add i32 %9, 7
  %20 = and i32 %19, 7
  %21 = sub i32 7, %20
  %22 = icmp ult i32 0, %9
  br i1 %22, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %13
  %scevgep = getelementptr i8, i8* %1, i64 -1
  br label %23

23:                                               ; preds = %.lr.ph, %23
  %lsr.iv = phi i64 [ %18, %.lr.ph ], [ %lsr.iv.next, %23 ]
  %.0620 = phi i8* [ %17, %.lr.ph ], [ %.17, %23 ]
  %.0918 = phi i32 [ %21, %.lr.ph ], [ %.110, %23 ]
  %scevgep34 = getelementptr i8, i8* %scevgep, i64 %lsr.iv
  %24 = load i8, i8* %.0620, align 1
  %25 = zext i8 %24 to i32
  %26 = ashr i32 %25, %.0918
  %27 = and i32 %26, 1
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %scevgep34, align 1
  %29 = icmp eq i32 %.0918, 7
  %30 = getelementptr inbounds i8, i8* %.0620, i32 -1
  %31 = add i32 %.0918, 1
  %.110 = select i1 %29, i32 0, i32 %31
  %.17 = select i1 %29, i8* %30, i8* %.0620
  %lsr.iv.next = add nsw i64 %lsr.iv, -1
  %tmp = trunc i64 %lsr.iv.next to i32
  %exitcond = icmp ne i32 %tmp, 0
  br i1 %exitcond, label %23, label %..loopexit_crit_edge

32:                                               ; preds = %7
  %33 = sub i32 %9, 1
  %34 = lshr i32 %33, 2
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %1, i64 %35
  %37 = zext i32 %9 to i64
  %38 = add i32 %9, 3
  %39 = and i32 %38, 3
  %40 = sub i32 3, %39
  %41 = shl i32 %40, 1
  %42 = icmp ult i32 0, %9
  br i1 %42, label %.lr.ph26, label %.loopexit16

.lr.ph26:                                         ; preds = %32
  %scevgep38 = getelementptr i8, i8* %1, i64 -1
  br label %43

43:                                               ; preds = %.lr.ph26, %43
  %lsr.iv35 = phi i64 [ %37, %.lr.ph26 ], [ %lsr.iv.next36, %43 ]
  %.01124 = phi i8* [ %36, %.lr.ph26 ], [ %.112, %43 ]
  %.01422 = phi i32 [ %41, %.lr.ph26 ], [ %.115, %43 ]
  %scevgep39 = getelementptr i8, i8* %scevgep38, i64 %lsr.iv35
  %44 = load i8, i8* %.01124, align 1
  %45 = zext i8 %44 to i32
  %46 = ashr i32 %45, %.01422
  %47 = and i32 %46, 3
  %48 = trunc i32 %47 to i8
  store i8 %48, i8* %scevgep39, align 1
  %49 = icmp eq i32 %.01422, 6
  %50 = getelementptr inbounds i8, i8* %.01124, i32 -1
  %51 = add i32 %.01422, 2
  %.115 = select i1 %49, i32 0, i32 %51
  %.112 = select i1 %49, i8* %50, i8* %.01124
  %lsr.iv.next36 = add nsw i64 %lsr.iv35, -1
  %tmp37 = trunc i64 %lsr.iv.next36 to i32
  %exitcond27 = icmp ne i32 %tmp37, 0
  br i1 %exitcond27, label %43, label %..loopexit16_crit_edge

52:                                               ; preds = %7
  %53 = sub i32 %9, 1
  %54 = lshr i32 %53, 1
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %1, i64 %55
  %57 = zext i32 %9 to i64
  %58 = add i32 %9, 1
  %59 = and i32 %58, 1
  %60 = sub i32 1, %59
  %61 = shl i32 %60, 2
  %62 = icmp ult i32 0, %9
  br i1 %62, label %.lr.ph32, label %.loopexit17

.lr.ph32:                                         ; preds = %52
  %scevgep40 = getelementptr i8, i8* %1, i64 -1
  br label %63

63:                                               ; preds = %.lr.ph32, %63
  %lsr.iv41 = phi i64 [ %57, %.lr.ph32 ], [ %lsr.iv.next42, %63 ]
  %.031 = phi i32 [ %61, %.lr.ph32 ], [ %.1, %63 ]
  %.0428 = phi i8* [ %56, %.lr.ph32 ], [ %.15, %63 ]
  %scevgep43 = getelementptr i8, i8* %scevgep40, i64 %lsr.iv41
  %64 = load i8, i8* %.0428, align 1
  %65 = zext i8 %64 to i32
  %66 = ashr i32 %65, %.031
  %67 = and i32 %66, 15
  %68 = trunc i32 %67 to i8
  store i8 %68, i8* %scevgep43, align 1
  %69 = icmp eq i32 %.031, 4
  %70 = getelementptr inbounds i8, i8* %.0428, i32 -1
  %.15 = select i1 %69, i8* %70, i8* %.0428
  %.1 = select i1 %69, i32 0, i32 4
  %lsr.iv.next42 = add nsw i64 %lsr.iv41, -1
  %tmp44 = trunc i64 %lsr.iv.next42 to i32
  %exitcond33 = icmp ne i32 %tmp44, 0
  br i1 %exitcond33, label %63, label %..loopexit17_crit_edge

..loopexit_crit_edge:                             ; preds = %23
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %13
  br label %71

..loopexit16_crit_edge:                           ; preds = %43
  br label %.loopexit16

.loopexit16:                                      ; preds = %..loopexit16_crit_edge, %32
  br label %71

..loopexit17_crit_edge:                           ; preds = %63
  br label %.loopexit17

.loopexit17:                                      ; preds = %..loopexit17_crit_edge, %52
  br label %71

71:                                               ; preds = %.loopexit17, %.loopexit16, %.loopexit, %7
  %72 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  store i8 8, i8* %72, align 1
  %73 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  %74 = load i8, i8* %73, align 2
  %75 = zext i8 %74 to i32
  %76 = mul nsw i32 8, %75
  %77 = trunc i32 %76 to i8
  %78 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 %77, i8* %78, align 1
  %79 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  %80 = load i8, i8* %79, align 2
  %81 = zext i8 %80 to i32
  %82 = mul i32 %9, %81
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %83, i64* %84, align 8
  br label %85

85:                                               ; preds = %71, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_do_check_palette_indexes(%struct.png_struct_def.199* noalias %0, %struct.png_row_info_struct* %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 53
  %4 = load i16, i16* %3, align 8
  %5 = zext i16 %4 to i32
  %6 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 3
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = shl i32 1, %8
  %10 = icmp slt i32 %5, %9
  br i1 %10, label %11, label %141

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 53
  %13 = load i16, i16* %12, align 8
  %14 = zext i16 %13 to i32
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %141

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 5
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = urem i32 %21, 8
  %23 = mul i32 %19, %22
  %24 = urem i32 %23, 8
  %25 = sub i32 8, %24
  %26 = urem i32 %25, 8
  %27 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 46
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds i8, i8* %28, i64 %30
  %32 = getelementptr inbounds i8, i8* %31, i64 -1
  %33 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 3
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  switch i32 %35, label %141 [
    i32 1, label %.preheader
    i32 2, label %.preheader4
    i32 4, label %.preheader6
    i32 8, label %.preheader8
  ]

.preheader8:                                      ; preds = %16
  %36 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 46
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 54
  %39 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 54
  %40 = icmp ugt i8* %32, %37
  br i1 %40, label %.lr.ph19, label %.loopexit9

.lr.ph19:                                         ; preds = %.preheader8
  br label %130

.preheader6:                                      ; preds = %16
  %41 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 46
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 54
  %44 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 54
  %45 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 54
  %46 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 54
  %47 = icmp ugt i8* %32, %42
  br i1 %47, label %.lr.ph17, label %.loopexit7

.lr.ph17:                                         ; preds = %.preheader6
  br label %110

.preheader4:                                      ; preds = %16
  %48 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 46
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 54
  %51 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 54
  %52 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 54
  %53 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 54
  %54 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 54
  %55 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 54
  %56 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 54
  %57 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 54
  %58 = icmp ugt i8* %32, %49
  br i1 %58, label %.lr.ph14, label %.loopexit5

.lr.ph14:                                         ; preds = %.preheader4
  br label %72

.preheader:                                       ; preds = %16
  %59 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 46
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 54
  %62 = icmp ugt i8* %32, %60
  br i1 %62, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  br label %63

63:                                               ; preds = %.lr.ph, %69
  %.011 = phi i32 [ %26, %.lr.ph ], [ 0, %69 ]
  %.0110 = phi i8* [ %32, %.lr.ph ], [ %70, %69 ]
  %64 = load i8, i8* %.0110, align 1
  %65 = zext i8 %64 to i32
  %66 = ashr i32 %65, %.011
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %63
  store i32 1, i32* %61, align 4
  br label %69

69:                                               ; preds = %63, %68
  %70 = getelementptr inbounds i8, i8* %.0110, i32 -1
  %71 = icmp ugt i8* %70, %60
  br i1 %71, label %63, label %..loopexit_crit_edge

72:                                               ; preds = %.lr.ph14, %107
  %.113 = phi i32 [ %26, %.lr.ph14 ], [ 0, %107 ]
  %.1212 = phi i8* [ %32, %.lr.ph14 ], [ %108, %107 ]
  %73 = load i8, i8* %.1212, align 1
  %74 = zext i8 %73 to i32
  %75 = ashr i32 %74, %.113
  %76 = and i32 %75, 3
  %77 = load i32, i32* %50, align 4
  %78 = icmp sgt i32 %76, %77
  br i1 %78, label %79, label %80

79:                                               ; preds = %72
  store i32 %76, i32* %51, align 4
  br label %80

80:                                               ; preds = %79, %72
  %81 = load i8, i8* %.1212, align 1
  %82 = zext i8 %81 to i32
  %83 = ashr i32 %82, %.113
  %84 = ashr i32 %83, 2
  %85 = and i32 %84, 3
  %86 = load i32, i32* %52, align 4
  %87 = icmp sgt i32 %85, %86
  br i1 %87, label %88, label %89

88:                                               ; preds = %80
  store i32 %85, i32* %53, align 4
  br label %89

89:                                               ; preds = %88, %80
  %90 = load i8, i8* %.1212, align 1
  %91 = zext i8 %90 to i32
  %92 = ashr i32 %91, %.113
  %93 = ashr i32 %92, 4
  %94 = and i32 %93, 3
  %95 = load i32, i32* %54, align 4
  %96 = icmp sgt i32 %94, %95
  br i1 %96, label %97, label %98

97:                                               ; preds = %89
  store i32 %94, i32* %55, align 4
  br label %98

98:                                               ; preds = %97, %89
  %99 = load i8, i8* %.1212, align 1
  %100 = zext i8 %99 to i32
  %101 = ashr i32 %100, %.113
  %102 = ashr i32 %101, 6
  %103 = and i32 %102, 3
  %104 = load i32, i32* %56, align 4
  %105 = icmp sgt i32 %103, %104
  br i1 %105, label %106, label %107

106:                                              ; preds = %98
  store i32 %103, i32* %57, align 4
  br label %107

107:                                              ; preds = %98, %106
  %108 = getelementptr inbounds i8, i8* %.1212, i32 -1
  %109 = icmp ugt i8* %108, %49
  br i1 %109, label %72, label %..loopexit5_crit_edge

110:                                              ; preds = %.lr.ph17, %127
  %.216 = phi i32 [ %26, %.lr.ph17 ], [ 0, %127 ]
  %.2315 = phi i8* [ %32, %.lr.ph17 ], [ %128, %127 ]
  %111 = load i8, i8* %.2315, align 1
  %112 = zext i8 %111 to i32
  %113 = ashr i32 %112, %.216
  %114 = and i32 %113, 15
  %115 = load i32, i32* %43, align 4
  %116 = icmp sgt i32 %114, %115
  br i1 %116, label %117, label %118

117:                                              ; preds = %110
  store i32 %114, i32* %44, align 4
  br label %118

118:                                              ; preds = %117, %110
  %119 = load i8, i8* %.2315, align 1
  %120 = zext i8 %119 to i32
  %121 = ashr i32 %120, %.216
  %122 = ashr i32 %121, 4
  %123 = and i32 %122, 15
  %124 = load i32, i32* %45, align 4
  %125 = icmp sgt i32 %123, %124
  br i1 %125, label %126, label %127

126:                                              ; preds = %118
  store i32 %123, i32* %46, align 4
  br label %127

127:                                              ; preds = %118, %126
  %128 = getelementptr inbounds i8, i8* %.2315, i32 -1
  %129 = icmp ugt i8* %128, %42
  br i1 %129, label %110, label %..loopexit7_crit_edge

130:                                              ; preds = %.lr.ph19, %138
  %.318 = phi i8* [ %32, %.lr.ph19 ], [ %139, %138 ]
  %131 = load i8, i8* %.318, align 1
  %132 = zext i8 %131 to i32
  %133 = load i32, i32* %38, align 4
  %134 = icmp sgt i32 %132, %133
  br i1 %134, label %135, label %138

135:                                              ; preds = %130
  %136 = load i8, i8* %.318, align 1
  %137 = zext i8 %136 to i32
  store i32 %137, i32* %39, align 4
  br label %138

138:                                              ; preds = %130, %135
  %139 = getelementptr inbounds i8, i8* %.318, i32 -1
  %140 = icmp ugt i8* %139, %37
  br i1 %140, label %130, label %..loopexit9_crit_edge

..loopexit_crit_edge:                             ; preds = %69
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader
  br label %141

..loopexit5_crit_edge:                            ; preds = %107
  br label %.loopexit5

.loopexit5:                                       ; preds = %..loopexit5_crit_edge, %.preheader4
  br label %141

..loopexit7_crit_edge:                            ; preds = %127
  br label %.loopexit7

.loopexit7:                                       ; preds = %..loopexit7_crit_edge, %.preheader6
  br label %141

..loopexit9_crit_edge:                            ; preds = %138
  br label %.loopexit9

.loopexit9:                                       ; preds = %..loopexit9_crit_edge, %.preheader8
  br label %141

141:                                              ; preds = %.loopexit9, %.loopexit7, %.loopexit5, %.loopexit, %16, %11, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_do_bgr(%struct.png_row_info_struct* %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %4 = load i8, i8* %3, align 8
  %5 = zext i8 %4 to i32
  %6 = and i32 %5, 2
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %64

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, 8
  br i1 %14, label %15, label %35

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %17 = load i8, i8* %16, align 8
  %18 = zext i8 %17 to i32
  %19 = icmp eq i32 %18, 2
  br i1 %19, label %.preheader, label %24

.preheader:                                       ; preds = %15
  %20 = icmp ult i32 0, %10
  br i1 %20, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  br label %21

21:                                               ; preds = %.lr.ph, %21
  %lsr.iv = phi i32 [ %10, %.lr.ph ], [ %lsr.iv.next, %21 ]
  %.0315 = phi i8* [ %1, %.lr.ph ], [ %scevgep29, %21 ]
  %22 = load i8, i8* %.0315, align 1
  %scevgep = getelementptr i8, i8* %.0315, i64 2
  %23 = load i8, i8* %scevgep, align 1
  store i8 %23, i8* %.0315, align 1
  %scevgep28 = getelementptr i8, i8* %.0315, i64 2
  store i8 %22, i8* %scevgep28, align 1
  %lsr.iv.next = add i32 %lsr.iv, -1
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  %scevgep29 = getelementptr i8, i8* %.0315, i64 3
  br i1 %exitcond, label %21, label %..loopexit_crit_edge

24:                                               ; preds = %15
  %25 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %26 = load i8, i8* %25, align 8
  %27 = zext i8 %26 to i32
  %28 = icmp eq i32 %27, 6
  br i1 %28, label %.preheader8, label %64

.preheader8:                                      ; preds = %24
  %29 = icmp ult i32 0, %10
  br i1 %29, label %.lr.ph18, label %.loopexit9

.lr.ph18:                                         ; preds = %.preheader8
  %30 = zext i32 %10 to i64
  br label %31

31:                                               ; preds = %.lr.ph18, %31
  %lsr.iv30 = phi i64 [ 0, %.lr.ph18 ], [ %lsr.iv.next31, %31 ]
  %32 = shl nuw nsw i64 %lsr.iv30, 2
  %scevgep32 = getelementptr i8, i8* %1, i64 %32
  %33 = load i8, i8* %scevgep32, align 1
  %scevgep34 = getelementptr i8, i8* %scevgep32, i64 2
  %34 = load i8, i8* %scevgep34, align 1
  store i8 %34, i8* %scevgep32, align 1
  %scevgep35 = getelementptr i8, i8* %scevgep32, i64 2
  store i8 %33, i8* %scevgep35, align 1
  %lsr.iv.next31 = add nuw nsw i64 %lsr.iv30, 1
  %tmp = trunc i64 %lsr.iv.next31 to i32
  %tmp33 = trunc i64 %30 to i32
  %exitcond19 = icmp ne i32 %tmp33, %tmp
  br i1 %exitcond19, label %31, label %..loopexit9_crit_edge

35:                                               ; preds = %8
  %36 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = icmp eq i32 %38, 16
  br i1 %39, label %40, label %64

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %42 = load i8, i8* %41, align 8
  %43 = zext i8 %42 to i32
  %44 = icmp eq i32 %43, 2
  br i1 %44, label %.preheader10, label %51

.preheader10:                                     ; preds = %40
  %45 = icmp ult i32 0, %10
  br i1 %45, label %.lr.ph22, label %.loopexit11

.lr.ph22:                                         ; preds = %.preheader10
  br label %46

46:                                               ; preds = %.lr.ph22, %46
  %lsr.iv37 = phi i32 [ %10, %.lr.ph22 ], [ %lsr.iv.next38, %46 ]
  %.0520 = phi i8* [ %1, %.lr.ph22 ], [ %scevgep45, %46 ]
  %47 = load i8, i8* %.0520, align 1
  %scevgep39 = getelementptr i8, i8* %.0520, i64 4
  %48 = load i8, i8* %scevgep39, align 1
  store i8 %48, i8* %.0520, align 1
  %scevgep40 = getelementptr i8, i8* %.0520, i64 4
  store i8 %47, i8* %scevgep40, align 1
  %scevgep41 = getelementptr i8, i8* %.0520, i64 1
  %49 = load i8, i8* %scevgep41, align 1
  %scevgep42 = getelementptr i8, i8* %.0520, i64 5
  %50 = load i8, i8* %scevgep42, align 1
  %scevgep43 = getelementptr i8, i8* %.0520, i64 1
  store i8 %50, i8* %scevgep43, align 1
  %scevgep44 = getelementptr i8, i8* %.0520, i64 5
  store i8 %49, i8* %scevgep44, align 1
  %lsr.iv.next38 = add i32 %lsr.iv37, -1
  %exitcond23 = icmp ne i32 %lsr.iv.next38, 0
  %scevgep45 = getelementptr i8, i8* %.0520, i64 6
  br i1 %exitcond23, label %46, label %..loopexit11_crit_edge

51:                                               ; preds = %40
  %52 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %53 = load i8, i8* %52, align 8
  %54 = zext i8 %53 to i32
  %55 = icmp eq i32 %54, 6
  br i1 %55, label %.preheader12, label %64

.preheader12:                                     ; preds = %51
  %56 = icmp ult i32 0, %10
  br i1 %56, label %.lr.ph26, label %.loopexit13

.lr.ph26:                                         ; preds = %.preheader12
  %57 = zext i32 %10 to i64
  br label %58

58:                                               ; preds = %.lr.ph26, %58
  %lsr.iv46 = phi i64 [ 0, %.lr.ph26 ], [ %lsr.iv.next47, %58 ]
  %59 = shl nuw nsw i64 %lsr.iv46, 3
  %scevgep50 = getelementptr i8, i8* %1, i64 %59
  %60 = load i8, i8* %scevgep50, align 1
  %scevgep51 = getelementptr i8, i8* %scevgep50, i64 4
  %61 = load i8, i8* %scevgep51, align 1
  store i8 %61, i8* %scevgep50, align 1
  %scevgep52 = getelementptr i8, i8* %scevgep50, i64 4
  store i8 %60, i8* %scevgep52, align 1
  %scevgep53 = getelementptr i8, i8* %scevgep50, i64 1
  %62 = load i8, i8* %scevgep53, align 1
  %scevgep54 = getelementptr i8, i8* %scevgep50, i64 5
  %63 = load i8, i8* %scevgep54, align 1
  %scevgep55 = getelementptr i8, i8* %scevgep50, i64 1
  store i8 %63, i8* %scevgep55, align 1
  %scevgep56 = getelementptr i8, i8* %scevgep50, i64 5
  store i8 %62, i8* %scevgep56, align 1
  %lsr.iv.next47 = add nuw nsw i64 %lsr.iv46, 1
  %tmp48 = trunc i64 %lsr.iv.next47 to i32
  %tmp49 = trunc i64 %57 to i32
  %exitcond27 = icmp ne i32 %tmp49, %tmp48
  br i1 %exitcond27, label %58, label %..loopexit13_crit_edge

..loopexit_crit_edge:                             ; preds = %21
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader
  br label %64

..loopexit9_crit_edge:                            ; preds = %31
  br label %.loopexit9

.loopexit9:                                       ; preds = %..loopexit9_crit_edge, %.preheader8
  br label %64

..loopexit11_crit_edge:                           ; preds = %46
  br label %.loopexit11

.loopexit11:                                      ; preds = %..loopexit11_crit_edge, %.preheader10
  br label %64

..loopexit13_crit_edge:                           ; preds = %58
  br label %.loopexit13

.loopexit13:                                      ; preds = %..loopexit13_crit_edge, %.preheader12
  br label %64

64:                                               ; preds = %.loopexit13, %.loopexit11, %.loopexit9, %.loopexit, %24, %51, %35, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_do_packswap(%struct.png_row_info_struct* %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = icmp slt i32 %5, 8
  br i1 %6, label %7, label %33

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = inttoptr i64 %9 to i8*
  %11 = getelementptr i8, i8* %1, i64 %9
  %12 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %26, label %16

16:                                               ; preds = %7
  %17 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = icmp eq i32 %19, 2
  br i1 %20, label %26, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = icmp eq i32 %24, 4
  br i1 %25, label %26, label %33

26:                                               ; preds = %16, %21, %7
  %.1 = phi i8* [ getelementptr inbounds ([256 x i8], [256 x i8]* @onebppswaptable, i32 0, i32 0), %7 ], [ getelementptr inbounds ([256 x i8], [256 x i8]* @twobppswaptable, i32 0, i32 0), %16 ], [ getelementptr inbounds ([256 x i8], [256 x i8]* @fourbppswaptable, i32 0, i32 0), %21 ]
  %27 = icmp ult i8* %1, %11
  br i1 %27, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %26
  br label %28

28:                                               ; preds = %.lr.ph, %28
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %28 ]
  %scevgep = getelementptr i8, i8* %1, i64 %lsr.iv
  %29 = load i8, i8* %scevgep, align 1
  %30 = zext i8 %29 to i64
  %31 = getelementptr inbounds i8, i8* %.1, i64 %30
  %32 = load i8, i8* %31, align 1
  store i8 %32, i8* %scevgep, align 1
  %lsr.iv.next = add i64 %lsr.iv, 1
  %tmp = inttoptr i64 %lsr.iv.next to i8*
  %exitcond = icmp ne i8* %10, %tmp
  br i1 %exitcond, label %28, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %28
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %26
  br label %33

33:                                               ; preds = %.loopexit, %21, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_read_filler(%struct.png_row_info_struct* %0, i8* %1, i32 %2, i32 %3) #11 {
  %5 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = lshr i32 %2, 8
  %8 = trunc i32 %7 to i8
  %9 = trunc i32 %2 to i8
  %10 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %11 = load i8, i8* %10, align 8
  %12 = zext i8 %11 to i32
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %103

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = icmp eq i32 %17, 8
  br i1 %18, label %19, label %52

19:                                               ; preds = %14
  %20 = and i32 %3, 128
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %39

22:                                               ; preds = %19
  %23 = zext i32 %6 to i64
  %24 = getelementptr inbounds i8, i8* %1, i64 %23
  %25 = zext i32 %6 to i64
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  %27 = icmp ult i32 1, %6
  br i1 %27, label %.lr.ph, label %32

.lr.ph:                                           ; preds = %22
  %scevgep = getelementptr i8, i8* %1, i64 -1
  br label %28

28:                                               ; preds = %.lr.ph, %28
  %lsr.iv = phi i64 [ %25, %.lr.ph ], [ %lsr.iv.next, %28 ]
  %.0917 = phi i8* [ %26, %.lr.ph ], [ %31, %28 ]
  %29 = getelementptr inbounds i8, i8* %.0917, i32 -1
  %scevgep74 = getelementptr i8, i8* %.0917, i64 -1
  store i8 %9, i8* %scevgep74, align 1
  %scevgep72 = getelementptr i8, i8* %scevgep, i64 %lsr.iv
  %30 = load i8, i8* %scevgep72, align 1
  %31 = getelementptr inbounds i8, i8* %29, i32 -1
  %scevgep73 = getelementptr i8, i8* %.0917, i64 -2
  store i8 %30, i8* %scevgep73, align 1
  %lsr.iv.next = add nsw i64 %lsr.iv, -1
  %tmp = trunc i64 %lsr.iv.next to i32
  %exitcond = icmp ne i32 %tmp, 1
  br i1 %exitcond, label %28, label %._crit_edge

._crit_edge:                                      ; preds = %28
  %split = phi i8* [ %31, %28 ]
  br label %32

32:                                               ; preds = %._crit_edge, %22
  %.09.lcssa = phi i8* [ %split, %._crit_edge ], [ %26, %22 ]
  %33 = getelementptr inbounds i8, i8* %.09.lcssa, i32 -1
  store i8 %9, i8* %33, align 1
  %34 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  store i8 2, i8* %34, align 2
  %35 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 16, i8* %35, align 1
  %36 = mul i32 %6, 2
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %37, i64* %38, align 8
  br label %225

39:                                               ; preds = %19
  %40 = zext i32 %6 to i64
  %41 = icmp ult i32 0, %6
  br i1 %41, label %.lr.ph24, label %46

.lr.ph24:                                         ; preds = %39
  %scevgep78 = getelementptr i8, i8* %1, i64 -1
  br label %42

42:                                               ; preds = %.lr.ph24, %42
  %lsr.iv75 = phi i64 [ %40, %.lr.ph24 ], [ %lsr.iv.next76, %42 ]
  %scevgep79 = getelementptr i8, i8* %scevgep78, i64 %lsr.iv75
  %43 = load i8, i8* %scevgep79, align 1
  %44 = shl nsw i64 %lsr.iv75, 1
  %scevgep82 = getelementptr i8, i8* %scevgep78, i64 %44
  store i8 %43, i8* %scevgep82, align 1
  %45 = shl nsw i64 %lsr.iv75, 1
  %scevgep80 = getelementptr i8, i8* %scevgep78, i64 %45
  %scevgep81 = getelementptr i8, i8* %scevgep80, i64 -1
  store i8 %9, i8* %scevgep81, align 1
  %lsr.iv.next76 = add nsw i64 %lsr.iv75, -1
  %tmp77 = trunc i64 %lsr.iv.next76 to i32
  %exitcond26 = icmp ne i32 %tmp77, 0
  br i1 %exitcond26, label %42, label %._crit_edge25

._crit_edge25:                                    ; preds = %42
  br label %46

46:                                               ; preds = %._crit_edge25, %39
  %47 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  store i8 2, i8* %47, align 2
  %48 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 16, i8* %48, align 1
  %49 = mul i32 %6, 2
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %50, i64* %51, align 8
  br label %225

52:                                               ; preds = %14
  %53 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = icmp eq i32 %55, 16
  br i1 %56, label %57, label %225

57:                                               ; preds = %52
  %58 = and i32 %3, 128
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %60, label %85

60:                                               ; preds = %57
  %61 = zext i32 %6 to i64
  %62 = mul i64 %61, 2
  %63 = getelementptr inbounds i8, i8* %1, i64 %62
  %64 = zext i32 %6 to i64
  %65 = mul i64 %64, 2
  %66 = getelementptr inbounds i8, i8* %63, i64 %65
  %67 = icmp ult i32 1, %6
  br i1 %67, label %.lr.ph31, label %77

.lr.ph31:                                         ; preds = %60
  %scevgep86 = getelementptr i8, i8* %1, i64 -1
  br label %68

68:                                               ; preds = %.lr.ph31, %68
  %lsr.iv83 = phi i64 [ %64, %.lr.ph31 ], [ %lsr.iv.next84, %68 ]
  %.01327 = phi i8* [ %66, %.lr.ph31 ], [ %76, %68 ]
  %69 = getelementptr inbounds i8, i8* %.01327, i32 -1
  %scevgep93 = getelementptr i8, i8* %.01327, i64 -1
  store i8 %9, i8* %scevgep93, align 1
  %70 = getelementptr inbounds i8, i8* %69, i32 -1
  %scevgep92 = getelementptr i8, i8* %.01327, i64 -2
  store i8 %8, i8* %scevgep92, align 1
  %71 = shl nsw i64 %lsr.iv83, 1
  %scevgep89 = getelementptr i8, i8* %scevgep86, i64 %71
  %72 = load i8, i8* %scevgep89, align 1
  %73 = getelementptr inbounds i8, i8* %70, i32 -1
  %scevgep91 = getelementptr i8, i8* %.01327, i64 -3
  store i8 %72, i8* %scevgep91, align 1
  %74 = shl nsw i64 %lsr.iv83, 1
  %scevgep87 = getelementptr i8, i8* %scevgep86, i64 %74
  %scevgep88 = getelementptr i8, i8* %scevgep87, i64 -1
  %75 = load i8, i8* %scevgep88, align 1
  %76 = getelementptr inbounds i8, i8* %73, i32 -1
  %scevgep90 = getelementptr i8, i8* %.01327, i64 -4
  store i8 %75, i8* %scevgep90, align 1
  %lsr.iv.next84 = add nsw i64 %lsr.iv83, -1
  %tmp85 = trunc i64 %lsr.iv.next84 to i32
  %exitcond34 = icmp ne i32 %tmp85, 1
  br i1 %exitcond34, label %68, label %._crit_edge32

._crit_edge32:                                    ; preds = %68
  %split33 = phi i8* [ %76, %68 ]
  br label %77

77:                                               ; preds = %._crit_edge32, %60
  %.013.lcssa = phi i8* [ %split33, %._crit_edge32 ], [ %66, %60 ]
  %78 = getelementptr inbounds i8, i8* %.013.lcssa, i32 -1
  store i8 %9, i8* %78, align 1
  %79 = getelementptr inbounds i8, i8* %78, i32 -1
  store i8 %8, i8* %79, align 1
  %80 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  store i8 2, i8* %80, align 2
  %81 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 32, i8* %81, align 1
  %82 = mul i32 %6, 4
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %83, i64* %84, align 8
  br label %225

85:                                               ; preds = %57
  %86 = zext i32 %6 to i64
  %87 = icmp ult i32 0, %6
  br i1 %87, label %.lr.ph39, label %97

.lr.ph39:                                         ; preds = %85
  %scevgep97 = getelementptr i8, i8* %1, i64 -1
  br label %88

88:                                               ; preds = %.lr.ph39, %88
  %lsr.iv94 = phi i64 [ %86, %.lr.ph39 ], [ %lsr.iv.next95, %88 ]
  %89 = shl nsw i64 %lsr.iv94, 1
  %scevgep100 = getelementptr i8, i8* %scevgep97, i64 %89
  %90 = load i8, i8* %scevgep100, align 1
  %91 = shl nsw i64 %lsr.iv94, 2
  %scevgep107 = getelementptr i8, i8* %scevgep97, i64 %91
  store i8 %90, i8* %scevgep107, align 1
  %92 = shl nsw i64 %lsr.iv94, 1
  %scevgep98 = getelementptr i8, i8* %scevgep97, i64 %92
  %scevgep99 = getelementptr i8, i8* %scevgep98, i64 -1
  %93 = load i8, i8* %scevgep99, align 1
  %94 = shl nsw i64 %lsr.iv94, 2
  %scevgep105 = getelementptr i8, i8* %scevgep97, i64 %94
  %scevgep106 = getelementptr i8, i8* %scevgep105, i64 -1
  store i8 %93, i8* %scevgep106, align 1
  %95 = shl nsw i64 %lsr.iv94, 2
  %scevgep103 = getelementptr i8, i8* %scevgep97, i64 %95
  %scevgep104 = getelementptr i8, i8* %scevgep103, i64 -2
  store i8 %9, i8* %scevgep104, align 1
  %96 = shl nsw i64 %lsr.iv94, 2
  %scevgep101 = getelementptr i8, i8* %scevgep97, i64 %96
  %scevgep102 = getelementptr i8, i8* %scevgep101, i64 -3
  store i8 %8, i8* %scevgep102, align 1
  %lsr.iv.next95 = add nsw i64 %lsr.iv94, -1
  %tmp96 = trunc i64 %lsr.iv.next95 to i32
  %exitcond41 = icmp ne i32 %tmp96, 0
  br i1 %exitcond41, label %88, label %._crit_edge40

._crit_edge40:                                    ; preds = %88
  br label %97

97:                                               ; preds = %._crit_edge40, %85
  %98 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  store i8 2, i8* %98, align 2
  %99 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 32, i8* %99, align 1
  %100 = mul i32 %6, 4
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %101, i64* %102, align 8
  br label %225

103:                                              ; preds = %4
  %104 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %105 = load i8, i8* %104, align 8
  %106 = zext i8 %105 to i32
  %107 = icmp eq i32 %106, 2
  br i1 %107, label %108, label %225

108:                                              ; preds = %103
  %109 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = icmp eq i32 %111, 8
  br i1 %112, label %113, label %158

113:                                              ; preds = %108
  %114 = and i32 %3, 128
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %140

116:                                              ; preds = %113
  %117 = zext i32 %6 to i64
  %118 = mul i64 %117, 3
  %119 = getelementptr inbounds i8, i8* %1, i64 %118
  %120 = zext i32 %6 to i64
  %121 = getelementptr inbounds i8, i8* %119, i64 %120
  %122 = icmp ult i32 1, %6
  br i1 %122, label %.lr.ph46, label %133

.lr.ph46:                                         ; preds = %116
  %123 = add i32 %6, -1
  %124 = add nsw i64 %118, -1
  %scevgep114 = getelementptr i8, i8* %1, i64 %124
  br label %125

125:                                              ; preds = %.lr.ph46, %125
  %lsr.iv115 = phi i8* [ %scevgep114, %.lr.ph46 ], [ %scevgep116, %125 ]
  %lsr.iv108 = phi i32 [ %123, %.lr.ph46 ], [ %lsr.iv.next109, %125 ]
  %.0743 = phi i8* [ %121, %.lr.ph46 ], [ %132, %125 ]
  %126 = getelementptr inbounds i8, i8* %.0743, i32 -1
  %scevgep113 = getelementptr i8, i8* %.0743, i64 -1
  store i8 %9, i8* %scevgep113, align 1
  %127 = load i8, i8* %lsr.iv115, align 1
  %128 = getelementptr inbounds i8, i8* %126, i32 -1
  %scevgep112 = getelementptr i8, i8* %.0743, i64 -2
  store i8 %127, i8* %scevgep112, align 1
  %scevgep118 = getelementptr i8, i8* %lsr.iv115, i64 -1
  %129 = load i8, i8* %scevgep118, align 1
  %130 = getelementptr inbounds i8, i8* %128, i32 -1
  %scevgep111 = getelementptr i8, i8* %.0743, i64 -3
  store i8 %129, i8* %scevgep111, align 1
  %scevgep117 = getelementptr i8, i8* %lsr.iv115, i64 -2
  %131 = load i8, i8* %scevgep117, align 1
  %132 = getelementptr inbounds i8, i8* %130, i32 -1
  %scevgep110 = getelementptr i8, i8* %.0743, i64 -4
  store i8 %131, i8* %scevgep110, align 1
  %lsr.iv.next109 = add i32 %lsr.iv108, -1
  %scevgep116 = getelementptr i8, i8* %lsr.iv115, i64 -3
  %exitcond49 = icmp ne i32 %lsr.iv.next109, 0
  br i1 %exitcond49, label %125, label %._crit_edge47

._crit_edge47:                                    ; preds = %125
  %split48 = phi i8* [ %132, %125 ]
  br label %133

133:                                              ; preds = %._crit_edge47, %116
  %.07.lcssa = phi i8* [ %split48, %._crit_edge47 ], [ %121, %116 ]
  %134 = getelementptr inbounds i8, i8* %.07.lcssa, i32 -1
  store i8 %9, i8* %134, align 1
  %135 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  store i8 4, i8* %135, align 2
  %136 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 32, i8* %136, align 1
  %137 = mul i32 %6, 4
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %138, i64* %139, align 8
  br label %225

140:                                              ; preds = %113
  %141 = zext i32 %6 to i64
  %142 = mul i64 %141, 3
  %143 = icmp ult i32 0, %6
  br i1 %143, label %.lr.ph54, label %152

.lr.ph54:                                         ; preds = %140
  %scevgep122 = getelementptr i8, i8* %1, i64 -1
  br label %144

144:                                              ; preds = %.lr.ph54, %144
  %lsr.iv130 = phi i64 [ %142, %.lr.ph54 ], [ %lsr.iv.next131, %144 ]
  %lsr.iv119 = phi i64 [ %141, %.lr.ph54 ], [ %lsr.iv.next120, %144 ]
  %scevgep136 = getelementptr i8, i8* %scevgep122, i64 %lsr.iv130
  %145 = load i8, i8* %scevgep136, align 1
  %146 = shl nsw i64 %lsr.iv119, 2
  %scevgep129 = getelementptr i8, i8* %scevgep122, i64 %146
  store i8 %145, i8* %scevgep129, align 1
  %scevgep134 = getelementptr i8, i8* %scevgep122, i64 %lsr.iv130
  %scevgep135 = getelementptr i8, i8* %scevgep134, i64 -1
  %147 = load i8, i8* %scevgep135, align 1
  %148 = shl nsw i64 %lsr.iv119, 2
  %scevgep127 = getelementptr i8, i8* %scevgep122, i64 %148
  %scevgep128 = getelementptr i8, i8* %scevgep127, i64 -1
  store i8 %147, i8* %scevgep128, align 1
  %scevgep132 = getelementptr i8, i8* %scevgep122, i64 %lsr.iv130
  %scevgep133 = getelementptr i8, i8* %scevgep132, i64 -2
  %149 = load i8, i8* %scevgep133, align 1
  %150 = shl nsw i64 %lsr.iv119, 2
  %scevgep125 = getelementptr i8, i8* %scevgep122, i64 %150
  %scevgep126 = getelementptr i8, i8* %scevgep125, i64 -2
  store i8 %149, i8* %scevgep126, align 1
  %151 = shl nsw i64 %lsr.iv119, 2
  %scevgep123 = getelementptr i8, i8* %scevgep122, i64 %151
  %scevgep124 = getelementptr i8, i8* %scevgep123, i64 -3
  store i8 %9, i8* %scevgep124, align 1
  %lsr.iv.next120 = add nsw i64 %lsr.iv119, -1
  %tmp121 = trunc i64 %lsr.iv.next120 to i32
  %lsr.iv.next131 = add nsw i64 %lsr.iv130, -3
  %exitcond56 = icmp ne i32 %tmp121, 0
  br i1 %exitcond56, label %144, label %._crit_edge55

._crit_edge55:                                    ; preds = %144
  br label %152

152:                                              ; preds = %._crit_edge55, %140
  %153 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  store i8 4, i8* %153, align 2
  %154 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 32, i8* %154, align 1
  %155 = mul i32 %6, 4
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %156, i64* %157, align 8
  br label %225

158:                                              ; preds = %108
  %159 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = icmp eq i32 %161, 16
  br i1 %162, label %163, label %225

163:                                              ; preds = %158
  %164 = and i32 %3, 128
  %165 = icmp ne i32 %164, 0
  br i1 %165, label %166, label %199

166:                                              ; preds = %163
  %167 = zext i32 %6 to i64
  %168 = mul i64 %167, 6
  %169 = getelementptr inbounds i8, i8* %1, i64 %168
  %170 = zext i32 %6 to i64
  %171 = mul i64 %170, 2
  %172 = getelementptr inbounds i8, i8* %169, i64 %171
  %173 = icmp ult i32 1, %6
  br i1 %173, label %.lr.ph61, label %191

.lr.ph61:                                         ; preds = %166
  %174 = add nsw i64 %168, -1
  %scevgep145 = getelementptr i8, i8* %1, i64 %174
  %175 = add i32 %6, -1
  br label %176

176:                                              ; preds = %.lr.ph61, %176
  %lsr.iv153 = phi i32 [ %175, %.lr.ph61 ], [ %lsr.iv.next154, %176 ]
  %lsr.iv146 = phi i8* [ %scevgep145, %.lr.ph61 ], [ %scevgep147, %176 ]
  %.0259 = phi i8* [ %172, %.lr.ph61 ], [ %190, %176 ]
  %177 = getelementptr inbounds i8, i8* %.0259, i32 -1
  %scevgep144 = getelementptr i8, i8* %.0259, i64 -1
  store i8 %9, i8* %scevgep144, align 1
  %178 = getelementptr inbounds i8, i8* %177, i32 -1
  %scevgep143 = getelementptr i8, i8* %.0259, i64 -2
  store i8 %8, i8* %scevgep143, align 1
  %179 = load i8, i8* %lsr.iv146, align 1
  %180 = getelementptr inbounds i8, i8* %178, i32 -1
  %scevgep142 = getelementptr i8, i8* %.0259, i64 -3
  store i8 %179, i8* %scevgep142, align 1
  %scevgep152 = getelementptr i8, i8* %lsr.iv146, i64 -1
  %181 = load i8, i8* %scevgep152, align 1
  %182 = getelementptr inbounds i8, i8* %180, i32 -1
  %scevgep141 = getelementptr i8, i8* %.0259, i64 -4
  store i8 %181, i8* %scevgep141, align 1
  %scevgep151 = getelementptr i8, i8* %lsr.iv146, i64 -2
  %183 = load i8, i8* %scevgep151, align 1
  %184 = getelementptr inbounds i8, i8* %182, i32 -1
  %scevgep140 = getelementptr i8, i8* %.0259, i64 -5
  store i8 %183, i8* %scevgep140, align 1
  %scevgep150 = getelementptr i8, i8* %lsr.iv146, i64 -3
  %185 = load i8, i8* %scevgep150, align 1
  %186 = getelementptr inbounds i8, i8* %184, i32 -1
  %scevgep139 = getelementptr i8, i8* %.0259, i64 -6
  store i8 %185, i8* %scevgep139, align 1
  %scevgep149 = getelementptr i8, i8* %lsr.iv146, i64 -4
  %187 = load i8, i8* %scevgep149, align 1
  %188 = getelementptr inbounds i8, i8* %186, i32 -1
  %scevgep138 = getelementptr i8, i8* %.0259, i64 -7
  store i8 %187, i8* %scevgep138, align 1
  %scevgep148 = getelementptr i8, i8* %lsr.iv146, i64 -5
  %189 = load i8, i8* %scevgep148, align 1
  %190 = getelementptr inbounds i8, i8* %188, i32 -1
  %scevgep137 = getelementptr i8, i8* %.0259, i64 -8
  store i8 %189, i8* %scevgep137, align 1
  %scevgep147 = getelementptr i8, i8* %lsr.iv146, i64 -6
  %lsr.iv.next154 = add i32 %lsr.iv153, -1
  %exitcond64 = icmp ne i32 %lsr.iv.next154, 0
  br i1 %exitcond64, label %176, label %._crit_edge62

._crit_edge62:                                    ; preds = %176
  %split63 = phi i8* [ %190, %176 ]
  br label %191

191:                                              ; preds = %._crit_edge62, %166
  %.02.lcssa = phi i8* [ %split63, %._crit_edge62 ], [ %172, %166 ]
  %192 = getelementptr inbounds i8, i8* %.02.lcssa, i32 -1
  store i8 %9, i8* %192, align 1
  %193 = getelementptr inbounds i8, i8* %192, i32 -1
  store i8 %8, i8* %193, align 1
  %194 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  store i8 4, i8* %194, align 2
  %195 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 64, i8* %195, align 1
  %196 = mul i32 %6, 8
  %197 = zext i32 %196 to i64
  %198 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %197, i64* %198, align 8
  br label %225

199:                                              ; preds = %163
  %200 = zext i32 %6 to i64
  %201 = mul i64 %200, 6
  %202 = icmp ult i32 0, %6
  br i1 %202, label %.lr.ph69, label %219

.lr.ph69:                                         ; preds = %199
  %scevgep155 = getelementptr i8, i8* %1, i64 -1
  %203 = add nsw i64 %201, -1
  br label %204

204:                                              ; preds = %.lr.ph69, %204
  %lsr.iv173 = phi i64 [ %203, %.lr.ph69 ], [ %lsr.iv.next174, %204 ]
  %lsr.iv156 = phi i64 [ %200, %.lr.ph69 ], [ %lsr.iv.next157, %204 ]
  %scevgep184 = getelementptr i8, i8* %scevgep155, i64 %lsr.iv173
  %scevgep185 = getelementptr i8, i8* %scevgep184, i64 1
  %205 = load i8, i8* %scevgep185, align 1
  %206 = shl nsw i64 %lsr.iv156, 3
  %scevgep172 = getelementptr i8, i8* %scevgep155, i64 %206
  store i8 %205, i8* %scevgep172, align 1
  %scevgep183 = getelementptr i8, i8* %scevgep155, i64 %lsr.iv173
  %207 = load i8, i8* %scevgep183, align 1
  %208 = shl nsw i64 %lsr.iv156, 3
  %scevgep170 = getelementptr i8, i8* %scevgep155, i64 %208
  %scevgep171 = getelementptr i8, i8* %scevgep170, i64 -1
  store i8 %207, i8* %scevgep171, align 1
  %scevgep181 = getelementptr i8, i8* %scevgep155, i64 %lsr.iv173
  %scevgep182 = getelementptr i8, i8* %scevgep181, i64 -1
  %209 = load i8, i8* %scevgep182, align 1
  %210 = shl nsw i64 %lsr.iv156, 3
  %scevgep168 = getelementptr i8, i8* %scevgep155, i64 %210
  %scevgep169 = getelementptr i8, i8* %scevgep168, i64 -2
  store i8 %209, i8* %scevgep169, align 1
  %scevgep179 = getelementptr i8, i8* %scevgep155, i64 %lsr.iv173
  %scevgep180 = getelementptr i8, i8* %scevgep179, i64 -2
  %211 = load i8, i8* %scevgep180, align 1
  %212 = shl nsw i64 %lsr.iv156, 3
  %scevgep166 = getelementptr i8, i8* %scevgep155, i64 %212
  %scevgep167 = getelementptr i8, i8* %scevgep166, i64 -3
  store i8 %211, i8* %scevgep167, align 1
  %scevgep177 = getelementptr i8, i8* %scevgep155, i64 %lsr.iv173
  %scevgep178 = getelementptr i8, i8* %scevgep177, i64 -3
  %213 = load i8, i8* %scevgep178, align 1
  %214 = shl nsw i64 %lsr.iv156, 3
  %scevgep164 = getelementptr i8, i8* %scevgep155, i64 %214
  %scevgep165 = getelementptr i8, i8* %scevgep164, i64 -4
  store i8 %213, i8* %scevgep165, align 1
  %scevgep175 = getelementptr i8, i8* %scevgep155, i64 %lsr.iv173
  %scevgep176 = getelementptr i8, i8* %scevgep175, i64 -4
  %215 = load i8, i8* %scevgep176, align 1
  %216 = shl nsw i64 %lsr.iv156, 3
  %scevgep162 = getelementptr i8, i8* %scevgep155, i64 %216
  %scevgep163 = getelementptr i8, i8* %scevgep162, i64 -5
  store i8 %215, i8* %scevgep163, align 1
  %217 = shl nsw i64 %lsr.iv156, 3
  %scevgep160 = getelementptr i8, i8* %scevgep155, i64 %217
  %scevgep161 = getelementptr i8, i8* %scevgep160, i64 -6
  store i8 %9, i8* %scevgep161, align 1
  %218 = shl nsw i64 %lsr.iv156, 3
  %scevgep158 = getelementptr i8, i8* %scevgep155, i64 %218
  %scevgep159 = getelementptr i8, i8* %scevgep158, i64 -7
  store i8 %8, i8* %scevgep159, align 1
  %lsr.iv.next157 = add nsw i64 %lsr.iv156, -1
  %lsr.iv.next174 = add nsw i64 %lsr.iv173, -6
  %tmp186 = trunc i64 %lsr.iv.next157 to i32
  %exitcond71 = icmp ne i32 %tmp186, 0
  br i1 %exitcond71, label %204, label %._crit_edge70

._crit_edge70:                                    ; preds = %204
  br label %219

219:                                              ; preds = %._crit_edge70, %199
  %220 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  store i8 4, i8* %220, align 2
  %221 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 64, i8* %221, align 1
  %222 = mul i32 %6, 8
  %223 = zext i32 %222 to i64
  %224 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %223, i64* %224, align 8
  br label %225

225:                                              ; preds = %103, %158, %219, %191, %133, %152, %46, %32, %77, %97, %52
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_read_swap_alpha(%struct.png_row_info_struct* %0, i8* %1) #11 {
  %3 = alloca [2 x i8], align 1
  %4 = alloca [2 x i8], align 1
  %5 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %8 = load i8, i8* %7, align 8
  %9 = zext i8 %8 to i32
  %10 = icmp eq i32 %9, 6
  br i1 %10, label %11, label %72

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = icmp eq i32 %14, 8
  br i1 %15, label %16, label %35

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i32 0, %6
  br i1 %19, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %16
  %20 = add i64 %18, -1
  %scevgep = getelementptr i8, i8* %1, i64 %20
  %21 = sub i32 0, %6
  %22 = zext i32 %21 to i64
  br label %23

23:                                               ; preds = %.lr.ph, %23
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %23 ]
  %24 = shl nsw i64 %lsr.iv, 2
  %scevgep47 = getelementptr i8, i8* %scevgep, i64 %24
  %25 = load i8, i8* %scevgep47, align 1
  %26 = shl nsw i64 %lsr.iv, 2
  %scevgep45 = getelementptr i8, i8* %scevgep, i64 %26
  %scevgep46 = getelementptr i8, i8* %scevgep45, i64 -1
  %27 = load i8, i8* %scevgep46, align 1
  %28 = shl nsw i64 %lsr.iv, 2
  %scevgep40 = getelementptr i8, i8* %scevgep, i64 %28
  store i8 %27, i8* %scevgep40, align 1
  %29 = shl nsw i64 %lsr.iv, 2
  %scevgep43 = getelementptr i8, i8* %scevgep, i64 %29
  %scevgep44 = getelementptr i8, i8* %scevgep43, i64 -2
  %30 = load i8, i8* %scevgep44, align 1
  %31 = shl nsw i64 %lsr.iv, 2
  %scevgep38 = getelementptr i8, i8* %scevgep, i64 %31
  %scevgep39 = getelementptr i8, i8* %scevgep38, i64 -1
  store i8 %30, i8* %scevgep39, align 1
  %32 = shl nsw i64 %lsr.iv, 2
  %scevgep41 = getelementptr i8, i8* %scevgep, i64 %32
  %scevgep42 = getelementptr i8, i8* %scevgep41, i64 -3
  %33 = load i8, i8* %scevgep42, align 1
  %34 = shl nsw i64 %lsr.iv, 2
  %scevgep36 = getelementptr i8, i8* %scevgep, i64 %34
  %scevgep37 = getelementptr i8, i8* %scevgep36, i64 -2
  store i8 %33, i8* %scevgep37, align 1
  store i8 %25, i8* %scevgep42, align 1
  %lsr.iv.next = add nsw i64 %lsr.iv, -1
  %tmp = trunc i64 %lsr.iv.next to i32
  %tmp48 = trunc i64 %22 to i32
  %exitcond = icmp ne i32 %tmp48, %tmp
  br i1 %exitcond, label %23, label %..loopexit_crit_edge

35:                                               ; preds = %11
  %36 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds [2 x i8], [2 x i8]* %3, i64 0, i64 0
  %39 = getelementptr inbounds [2 x i8], [2 x i8]* %3, i64 0, i64 1
  %40 = getelementptr inbounds [2 x i8], [2 x i8]* %3, i64 0, i64 0
  %41 = getelementptr inbounds [2 x i8], [2 x i8]* %3, i64 0, i64 1
  %42 = icmp ult i32 0, %6
  br i1 %42, label %.lr.ph21, label %.loopexit12

.lr.ph21:                                         ; preds = %35
  %43 = add i64 %37, -1
  %scevgep49 = getelementptr i8, i8* %1, i64 %43
  %44 = sub i32 0, %6
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %.lr.ph21, %46
  %lsr.iv50 = phi i64 [ 0, %.lr.ph21 ], [ %lsr.iv.next51, %46 ]
  %47 = shl nsw i64 %lsr.iv50, 3
  %scevgep79 = getelementptr i8, i8* %scevgep49, i64 %47
  %48 = load i8, i8* %scevgep79, align 1
  store i8 %48, i8* %38, align 1
  %49 = shl nsw i64 %lsr.iv50, 3
  %scevgep77 = getelementptr i8, i8* %scevgep49, i64 %49
  %scevgep78 = getelementptr i8, i8* %scevgep77, i64 -1
  %50 = load i8, i8* %scevgep78, align 1
  store i8 %50, i8* %39, align 1
  %51 = shl nsw i64 %lsr.iv50, 3
  %scevgep75 = getelementptr i8, i8* %scevgep49, i64 %51
  %scevgep76 = getelementptr i8, i8* %scevgep75, i64 -2
  %52 = load i8, i8* %scevgep76, align 1
  %53 = shl nsw i64 %lsr.iv50, 3
  %scevgep64 = getelementptr i8, i8* %scevgep49, i64 %53
  store i8 %52, i8* %scevgep64, align 1
  %54 = shl nsw i64 %lsr.iv50, 3
  %scevgep73 = getelementptr i8, i8* %scevgep49, i64 %54
  %scevgep74 = getelementptr i8, i8* %scevgep73, i64 -3
  %55 = load i8, i8* %scevgep74, align 1
  %56 = shl nsw i64 %lsr.iv50, 3
  %scevgep62 = getelementptr i8, i8* %scevgep49, i64 %56
  %scevgep63 = getelementptr i8, i8* %scevgep62, i64 -1
  store i8 %55, i8* %scevgep63, align 1
  %57 = shl nsw i64 %lsr.iv50, 3
  %scevgep71 = getelementptr i8, i8* %scevgep49, i64 %57
  %scevgep72 = getelementptr i8, i8* %scevgep71, i64 -4
  %58 = load i8, i8* %scevgep72, align 1
  %59 = shl nsw i64 %lsr.iv50, 3
  %scevgep60 = getelementptr i8, i8* %scevgep49, i64 %59
  %scevgep61 = getelementptr i8, i8* %scevgep60, i64 -2
  store i8 %58, i8* %scevgep61, align 1
  %60 = shl nsw i64 %lsr.iv50, 3
  %scevgep69 = getelementptr i8, i8* %scevgep49, i64 %60
  %scevgep70 = getelementptr i8, i8* %scevgep69, i64 -5
  %61 = load i8, i8* %scevgep70, align 1
  %62 = shl nsw i64 %lsr.iv50, 3
  %scevgep58 = getelementptr i8, i8* %scevgep49, i64 %62
  %scevgep59 = getelementptr i8, i8* %scevgep58, i64 -3
  store i8 %61, i8* %scevgep59, align 1
  %63 = shl nsw i64 %lsr.iv50, 3
  %scevgep67 = getelementptr i8, i8* %scevgep49, i64 %63
  %scevgep68 = getelementptr i8, i8* %scevgep67, i64 -6
  %64 = load i8, i8* %scevgep68, align 1
  %65 = shl nsw i64 %lsr.iv50, 3
  %scevgep56 = getelementptr i8, i8* %scevgep49, i64 %65
  %scevgep57 = getelementptr i8, i8* %scevgep56, i64 -4
  store i8 %64, i8* %scevgep57, align 1
  %66 = shl nsw i64 %lsr.iv50, 3
  %scevgep65 = getelementptr i8, i8* %scevgep49, i64 %66
  %scevgep66 = getelementptr i8, i8* %scevgep65, i64 -7
  %67 = load i8, i8* %scevgep66, align 1
  %68 = shl nsw i64 %lsr.iv50, 3
  %scevgep54 = getelementptr i8, i8* %scevgep49, i64 %68
  %scevgep55 = getelementptr i8, i8* %scevgep54, i64 -5
  store i8 %67, i8* %scevgep55, align 1
  %69 = load i8, i8* %40, align 1
  %70 = shl nsw i64 %lsr.iv50, 3
  %scevgep52 = getelementptr i8, i8* %scevgep49, i64 %70
  %scevgep53 = getelementptr i8, i8* %scevgep52, i64 -6
  store i8 %69, i8* %scevgep53, align 1
  %71 = load i8, i8* %41, align 1
  store i8 %71, i8* %scevgep66, align 1
  %lsr.iv.next51 = add nsw i64 %lsr.iv50, -1
  %tmp80 = trunc i64 %lsr.iv.next51 to i32
  %tmp81 = trunc i64 %45 to i32
  %exitcond22 = icmp ne i32 %tmp81, %tmp80
  br i1 %exitcond22, label %46, label %..loopexit12_crit_edge

72:                                               ; preds = %2
  %73 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %74 = load i8, i8* %73, align 8
  %75 = zext i8 %74 to i32
  %76 = icmp eq i32 %75, 4
  br i1 %76, label %77, label %118

77:                                               ; preds = %72
  %78 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = icmp eq i32 %80, 8
  br i1 %81, label %82, label %95

82:                                               ; preds = %77
  %83 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = icmp ult i32 0, %6
  br i1 %85, label %.lr.ph26, label %.loopexit13

.lr.ph26:                                         ; preds = %82
  %86 = sub i32 0, %6
  %87 = zext i32 %86 to i64
  %88 = add i64 %84, -1
  %scevgep86 = getelementptr i8, i8* %1, i64 %88
  br label %89

89:                                               ; preds = %.lr.ph26, %89
  %lsr.iv82 = phi i64 [ 0, %.lr.ph26 ], [ %lsr.iv.next83, %89 ]
  %90 = shl nsw i64 %lsr.iv82, 1
  %scevgep90 = getelementptr i8, i8* %scevgep86, i64 %90
  %91 = load i8, i8* %scevgep90, align 1
  %92 = shl nsw i64 %lsr.iv82, 1
  %scevgep88 = getelementptr i8, i8* %scevgep86, i64 %92
  %scevgep89 = getelementptr i8, i8* %scevgep88, i64 -1
  %93 = load i8, i8* %scevgep89, align 1
  %94 = shl nsw i64 %lsr.iv82, 1
  %scevgep87 = getelementptr i8, i8* %scevgep86, i64 %94
  store i8 %93, i8* %scevgep87, align 1
  store i8 %91, i8* %scevgep89, align 1
  %lsr.iv.next83 = add nsw i64 %lsr.iv82, -1
  %tmp84 = trunc i64 %lsr.iv.next83 to i32
  %tmp85 = trunc i64 %87 to i32
  %exitcond27 = icmp ne i32 %tmp85, %tmp84
  br i1 %exitcond27, label %89, label %..loopexit13_crit_edge

95:                                               ; preds = %77
  %96 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %97 = load i64, i64* %96, align 8
  %98 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 0
  %99 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 1
  %100 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 0
  %101 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 1
  %.promoted = load i8, i8* %98, align 1
  %.promoted28 = load i8, i8* %99, align 1
  %102 = icmp ult i32 0, %6
  br i1 %102, label %.lr.ph33, label %.loopexit14

.lr.ph33:                                         ; preds = %95
  %103 = sub i32 0, %6
  %104 = zext i32 %103 to i64
  %105 = add i64 %97, -1
  %scevgep95 = getelementptr i8, i8* %1, i64 %105
  br label %106

106:                                              ; preds = %.lr.ph33, %106
  %lsr.iv91 = phi i64 [ 0, %.lr.ph33 ], [ %lsr.iv.next92, %106 ]
  %107 = shl nsw i64 %lsr.iv91, 2
  %scevgep100 = getelementptr i8, i8* %scevgep95, i64 %107
  %108 = load i8, i8* %scevgep100, align 1
  %109 = shl nsw i64 %lsr.iv91, 2
  %scevgep98 = getelementptr i8, i8* %scevgep95, i64 %109
  %scevgep99 = getelementptr i8, i8* %scevgep98, i64 -1
  %110 = load i8, i8* %scevgep99, align 1
  %111 = shl nsw i64 %lsr.iv91, 2
  %scevgep96 = getelementptr i8, i8* %scevgep95, i64 %111
  %scevgep97 = getelementptr i8, i8* %scevgep96, i64 -2
  %112 = load i8, i8* %scevgep97, align 1
  %113 = shl nsw i64 %lsr.iv91, 2
  %scevgep107 = getelementptr i8, i8* %scevgep95, i64 %113
  store i8 %112, i8* %scevgep107, align 1
  %114 = shl nsw i64 %lsr.iv91, 2
  %scevgep105 = getelementptr i8, i8* %scevgep95, i64 %114
  %scevgep106 = getelementptr i8, i8* %scevgep105, i64 -1
  %115 = shl nsw i64 %lsr.iv91, 2
  %scevgep103 = getelementptr i8, i8* %scevgep95, i64 %115
  %scevgep104 = getelementptr i8, i8* %scevgep103, i64 -2
  %116 = shl nsw i64 %lsr.iv91, 2
  %scevgep101 = getelementptr i8, i8* %scevgep95, i64 %116
  %scevgep102 = getelementptr i8, i8* %scevgep101, i64 -3
  %117 = load i8, i8* %scevgep102, align 1
  store i8 %117, i8* %scevgep106, align 1
  store i8 %108, i8* %scevgep104, align 1
  store i8 %110, i8* %scevgep102, align 1
  %lsr.iv.next92 = add nsw i64 %lsr.iv91, -1
  %tmp93 = trunc i64 %lsr.iv.next92 to i32
  %tmp94 = trunc i64 %104 to i32
  %exitcond35 = icmp ne i32 %tmp94, %tmp93
  br i1 %exitcond35, label %106, label %..loopexit14_crit_edge

..loopexit_crit_edge:                             ; preds = %23
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %16
  br label %118

..loopexit12_crit_edge:                           ; preds = %46
  br label %.loopexit12

.loopexit12:                                      ; preds = %..loopexit12_crit_edge, %35
  br label %118

..loopexit13_crit_edge:                           ; preds = %89
  br label %.loopexit13

.loopexit13:                                      ; preds = %..loopexit13_crit_edge, %82
  br label %118

..loopexit14_crit_edge:                           ; preds = %106
  %split = phi i8 [ %110, %106 ]
  %split34 = phi i8 [ %108, %106 ]
  br label %.loopexit14

.loopexit14:                                      ; preds = %..loopexit14_crit_edge, %95
  %.lcssa29 = phi i8 [ %split, %..loopexit14_crit_edge ], [ %.promoted28, %95 ]
  %.lcssa = phi i8 [ %split34, %..loopexit14_crit_edge ], [ %.promoted, %95 ]
  store i8 %.lcssa, i8* %98, align 1
  store i8 %.lcssa29, i8* %99, align 1
  br label %118

118:                                              ; preds = %.loopexit14, %.loopexit13, %.loopexit12, %.loopexit, %72
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_do_swap(%struct.png_row_info_struct* %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = icmp eq i32 %5, 16
  br i1 %6, label %7, label %20

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  %11 = load i8, i8* %10, align 2
  %12 = zext i8 %11 to i32
  %13 = mul i32 %9, %12
  %14 = icmp ult i32 0, %13
  br i1 %14, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %7
  %15 = zext i32 %13 to i64
  br label %16

16:                                               ; preds = %.lr.ph, %16
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %16 ]
  %17 = shl nuw nsw i64 %lsr.iv, 1
  %scevgep = getelementptr i8, i8* %1, i64 %17
  %18 = load i8, i8* %scevgep, align 1
  %scevgep5 = getelementptr i8, i8* %scevgep, i64 1
  %19 = load i8, i8* %scevgep5, align 1
  store i8 %19, i8* %scevgep, align 1
  %scevgep6 = getelementptr i8, i8* %scevgep, i64 1
  store i8 %18, i8* %scevgep6, align 1
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 1
  %tmp = trunc i64 %lsr.iv.next to i32
  %tmp4 = trunc i64 %15 to i32
  %exitcond = icmp ne i32 %tmp4, %tmp
  br i1 %exitcond, label %16, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %16
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %7
  br label %20

20:                                               ; preds = %.loopexit, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_init_filter_functions(%struct.png_struct_def* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 64
  %3 = load i8, i8* %2, align 2
  %4 = zext i8 %3 to i32
  %5 = add nsw i32 %4, 7
  %6 = ashr i32 %5, 3
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 143
  %8 = getelementptr inbounds [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], [4 x void (%struct.png_row_info_struct*, i8*, i8*)*]* %7, i64 0, i64 0
  store void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_sub, void (%struct.png_row_info_struct*, i8*, i8*)** %8, align 8
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 143
  %10 = getelementptr inbounds [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], [4 x void (%struct.png_row_info_struct*, i8*, i8*)*]* %9, i64 0, i64 1
  store void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_up, void (%struct.png_row_info_struct*, i8*, i8*)** %10, align 8
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 143
  %12 = getelementptr inbounds [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], [4 x void (%struct.png_row_info_struct*, i8*, i8*)*]* %11, i64 0, i64 2
  store void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_avg, void (%struct.png_row_info_struct*, i8*, i8*)** %12, align 8
  %13 = icmp eq i32 %6, 1
  br i1 %13, label %14, label %17

14:                                               ; preds = %1
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 143
  %16 = getelementptr inbounds [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], [4 x void (%struct.png_row_info_struct*, i8*, i8*)*]* %15, i64 0, i64 3
  store void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_paeth_1byte_pixel, void (%struct.png_row_info_struct*, i8*, i8*)** %16, align 8
  br label %20

17:                                               ; preds = %1
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 143
  %19 = getelementptr inbounds [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], [4 x void (%struct.png_row_info_struct*, i8*, i8*)*]* %18, i64 0, i64 3
  store void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_paeth_multibyte_pixel, void (%struct.png_row_info_struct*, i8*, i8*)** %19, align 8
  br label %20

20:                                               ; preds = %17, %14
  call void @png_init_filter_functions_sse2(%struct.png_struct_def* %0, i32 %6)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_read_filter_row_sub(%struct.png_row_info_struct* %0, i8* %1, i8* %2) #11 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = add nsw i32 %8, 7
  %10 = ashr i32 %9, 3
  %11 = zext i32 %10 to i64
  %12 = getelementptr i8, i8* %1, i64 %11
  %13 = zext i32 %10 to i64
  %14 = icmp ult i64 %13, %5
  br i1 %14, label %.lr.ph, label %24

.lr.ph:                                           ; preds = %3
  %15 = sub i64 %5, %13
  br label %16

16:                                               ; preds = %.lr.ph, %16
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %16 ]
  %scevgep = getelementptr i8, i8* %12, i64 %lsr.iv
  %17 = load i8, i8* %scevgep, align 1
  %18 = zext i8 %17 to i32
  %scevgep4 = getelementptr i8, i8* %1, i64 %lsr.iv
  %19 = load i8, i8* %scevgep4, align 1
  %20 = zext i8 %19 to i32
  %21 = add nsw i32 %18, %20
  %22 = and i32 %21, 255
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %scevgep, align 1
  %lsr.iv.next = add nuw i64 %lsr.iv, 1
  %exitcond = icmp ne i64 %15, %lsr.iv.next
  br i1 %exitcond, label %16, label %._crit_edge

._crit_edge:                                      ; preds = %16
  br label %24

24:                                               ; preds = %._crit_edge, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_read_filter_row_up(%struct.png_row_info_struct* %0, i8* %1, i8* %2) #11 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 0, %5
  br i1 %6, label %.lr.ph, label %16

.lr.ph:                                           ; preds = %3
  br label %7

7:                                                ; preds = %.lr.ph, %7
  %.023 = phi i64 [ 0, %.lr.ph ], [ %15, %7 ]
  %scevgep = getelementptr i8, i8* %2, i64 %.023
  %scevgep6 = getelementptr i8, i8* %1, i64 %.023
  %8 = load i8, i8* %scevgep6, align 1
  %9 = zext i8 %8 to i32
  %10 = load i8, i8* %scevgep, align 1
  %11 = zext i8 %10 to i32
  %12 = add nsw i32 %9, %11
  %13 = and i32 %12, 255
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %scevgep6, align 1
  %15 = add nuw i64 %.023, 1
  %exitcond = icmp ne i64 %5, %15
  br i1 %exitcond, label %7, label %._crit_edge

._crit_edge:                                      ; preds = %7
  br label %16

16:                                               ; preds = %._crit_edge, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_read_filter_row_avg(%struct.png_row_info_struct* %0, i8* %1, i8* %2) #11 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = add nsw i32 %6, 7
  %8 = ashr i32 %7, 3
  %9 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = zext i32 %8 to i64
  %12 = sub i64 %10, %11
  %13 = zext i32 %8 to i64
  %14 = icmp ult i64 0, %13
  br i1 %14, label %.lr.ph12, label %.preheader

.lr.ph12:                                         ; preds = %3
  br label %19

..preheader_crit_edge:                            ; preds = %19
  %split = phi i64 [ 0, %19 ]
  %split13 = phi i8* [ %29, %19 ]
  %split14 = phi i8* [ %22, %19 ]
  br label %.preheader

.preheader:                                       ; preds = %..preheader_crit_edge, %3
  %.14.ph = phi i64 [ %split, %..preheader_crit_edge ], [ 0, %3 ]
  %.12.ph = phi i8* [ %split13, %..preheader_crit_edge ], [ %1, %3 ]
  %.1.ph = phi i8* [ %split14, %..preheader_crit_edge ], [ %2, %3 ]
  %15 = zext i32 %8 to i64
  %16 = sub i64 0, %15
  %17 = icmp ult i64 %.14.ph, %12
  br i1 %17, label %.lr.ph, label %43

.lr.ph:                                           ; preds = %.preheader
  %scevgep17 = getelementptr i8, i8* %.12.ph, i64 %16
  %18 = add i64 %10, %16
  br label %30

19:                                               ; preds = %.lr.ph12, %19
  %lsr.iv = phi i64 [ %13, %.lr.ph12 ], [ %lsr.iv.next, %19 ]
  %.010 = phi i8* [ %2, %.lr.ph12 ], [ %22, %19 ]
  %.019 = phi i8* [ %1, %.lr.ph12 ], [ %29, %19 ]
  %20 = load i8, i8* %.019, align 1
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds i8, i8* %.010, i32 1
  %23 = load i8, i8* %.010, align 1
  %24 = zext i8 %23 to i32
  %25 = sdiv i32 %24, 2
  %26 = add nsw i32 %21, %25
  %27 = and i32 %26, 255
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %.019, align 1
  %29 = getelementptr inbounds i8, i8* %.019, i32 1
  %lsr.iv.next = add nsw i64 %lsr.iv, -1
  %exitcond15 = icmp ne i64 %lsr.iv.next, 0
  br i1 %exitcond15, label %19, label %..preheader_crit_edge

30:                                               ; preds = %.lr.ph, %30
  %.145 = phi i64 [ %.14.ph, %.lr.ph ], [ %42, %30 ]
  %scevgep = getelementptr i8, i8* %.1.ph, i64 %.145
  %scevgep16 = getelementptr i8, i8* %.12.ph, i64 %.145
  %31 = load i8, i8* %scevgep16, align 1
  %32 = zext i8 %31 to i32
  %33 = load i8, i8* %scevgep, align 1
  %34 = zext i8 %33 to i32
  %scevgep18 = getelementptr i8, i8* %scevgep17, i64 %.145
  %35 = load i8, i8* %scevgep18, align 1
  %36 = zext i8 %35 to i32
  %37 = add nsw i32 %34, %36
  %38 = sdiv i32 %37, 2
  %39 = add nsw i32 %32, %38
  %40 = and i32 %39, 255
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %scevgep16, align 1
  %42 = add nuw i64 %.145, 1
  %exitcond = icmp ne i64 %18, %42
  br i1 %exitcond, label %30, label %._crit_edge

._crit_edge:                                      ; preds = %30
  br label %43

43:                                               ; preds = %._crit_edge, %.preheader
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_read_filter_row_paeth_1byte_pixel(%struct.png_row_info_struct* %0, i8* %1, i8* %2) #11 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to i8*
  %7 = getelementptr i8, i8* %1, i64 %5
  %8 = load i8, i8* %2, align 1
  %9 = zext i8 %8 to i32
  %10 = load i8, i8* %1, align 1
  %11 = zext i8 %10 to i32
  %12 = add nsw i32 %11, %9
  %13 = trunc i32 %12 to i8
  %14 = getelementptr inbounds i8, i8* %1, i32 1
  store i8 %13, i8* %1, align 1
  %15 = icmp ult i8* %14, %7
  br i1 %15, label %.lr.ph, label %40

.lr.ph:                                           ; preds = %3
  br label %16

16:                                               ; preds = %.lr.ph, %16
  %lsr.iv = phi i64 [ 1, %.lr.ph ], [ %lsr.iv.next, %16 ]
  %.036 = phi i32 [ %12, %.lr.ph ], [ %38, %16 ]
  %.045 = phi i32 [ %9, %.lr.ph ], [ %19, %16 ]
  %scevgep = getelementptr i8, i8* %1, i64 %lsr.iv
  %scevgep9 = getelementptr i8, i8* %2, i64 %lsr.iv
  %17 = and i32 %.036, 255
  %18 = load i8, i8* %scevgep9, align 1
  %19 = zext i8 %18 to i32
  %20 = sub nsw i32 %19, %.045
  %21 = sub nsw i32 %17, %.045
  %22 = icmp slt i32 %20, 0
  %23 = sub nsw i32 0, %20
  %24 = select i1 %22, i32 %23, i32 %20
  %25 = icmp slt i32 %21, 0
  %26 = sub nsw i32 0, %21
  %27 = select i1 %25, i32 %26, i32 %21
  %28 = add nsw i32 %20, %21
  %29 = icmp slt i32 %28, 0
  %30 = add nsw i32 %20, %21
  %31 = sub nsw i32 0, %30
  %32 = add nsw i32 %20, %21
  %33 = select i1 %29, i32 %31, i32 %32
  %34 = icmp slt i32 %27, %24
  %.1 = select i1 %34, i32 %19, i32 %17
  %.02 = select i1 %34, i32 %27, i32 %24
  %35 = icmp slt i32 %33, %.02
  %.2 = select i1 %35, i32 %.045, i32 %.1
  %36 = load i8, i8* %scevgep, align 1
  %37 = zext i8 %36 to i32
  %38 = add nsw i32 %.2, %37
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %scevgep, align 1
  %lsr.iv.next = add i64 %lsr.iv, 1
  %tmp = inttoptr i64 %lsr.iv.next to i8*
  %exitcond = icmp ne i8* %6, %tmp
  br i1 %exitcond, label %16, label %._crit_edge

._crit_edge:                                      ; preds = %16
  br label %40

40:                                               ; preds = %._crit_edge, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_read_filter_row_paeth_multibyte_pixel(%struct.png_row_info_struct* %0, i8* %1, i8* %2) #11 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = add nsw i32 %6, 7
  %8 = ashr i32 %7, 3
  %9 = zext i32 %8 to i64
  %10 = getelementptr i8, i8* %1, i64 %9
  %11 = icmp ult i8* %1, %10
  br i1 %11, label %.lr.ph11, label %21

.lr.ph11:                                         ; preds = %3
  br label %12

12:                                               ; preds = %.lr.ph11, %12
  %lsr.iv = phi i64 [ %9, %.lr.ph11 ], [ %lsr.iv.next, %12 ]
  %.09 = phi i8* [ %1, %.lr.ph11 ], [ %20, %12 ]
  %.018 = phi i8* [ %2, %.lr.ph11 ], [ %15, %12 ]
  %13 = load i8, i8* %.09, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds i8, i8* %.018, i32 1
  %16 = load i8, i8* %.018, align 1
  %17 = zext i8 %16 to i32
  %18 = add nsw i32 %14, %17
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds i8, i8* %.09, i32 1
  store i8 %19, i8* %.09, align 1
  %lsr.iv.next = add i64 %lsr.iv, -1
  %lsr.iv.next15 = inttoptr i64 %lsr.iv.next to i8*
  %exitcond = icmp ne i8* %lsr.iv.next15, null
  br i1 %exitcond, label %12, label %._crit_edge12

._crit_edge12:                                    ; preds = %12
  %split = phi i8* [ %15, %12 ]
  %split13 = phi i8* [ %20, %12 ]
  br label %21

21:                                               ; preds = %._crit_edge12, %3
  %.01.lcssa = phi i8* [ %split, %._crit_edge12 ], [ %2, %3 ]
  %.0.lcssa = phi i8* [ %split13, %._crit_edge12 ], [ %1, %3 ]
  %22 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = zext i32 %8 to i64
  %25 = sub i64 %23, %24
  %26 = getelementptr inbounds i8, i8* %10, i64 %25
  %27 = zext i32 %8 to i64
  %28 = sub i64 0, %27
  %29 = icmp ult i8* %.0.lcssa, %26
  br i1 %29, label %.lr.ph, label %60

.lr.ph:                                           ; preds = %21
  br label %30

30:                                               ; preds = %.lr.ph, %30
  %.17 = phi i8* [ %.0.lcssa, %.lr.ph ], [ %58, %30 ]
  %.126 = phi i8* [ %.01.lcssa, %.lr.ph ], [ %35, %30 ]
  %scevgep14 = getelementptr i8, i8* %.126, i64 %28
  %31 = load i8, i8* %scevgep14, align 1
  %32 = zext i8 %31 to i32
  %scevgep = getelementptr i8, i8* %.17, i64 %28
  %33 = load i8, i8* %scevgep, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds i8, i8* %.126, i32 1
  %36 = load i8, i8* %.126, align 1
  %37 = zext i8 %36 to i32
  %38 = sub nsw i32 %37, %32
  %39 = sub nsw i32 %34, %32
  %40 = icmp slt i32 %38, 0
  %41 = sub nsw i32 0, %38
  %42 = select i1 %40, i32 %41, i32 %38
  %43 = icmp slt i32 %39, 0
  %44 = sub nsw i32 0, %39
  %45 = select i1 %43, i32 %44, i32 %39
  %46 = add nsw i32 %38, %39
  %47 = icmp slt i32 %46, 0
  %48 = add nsw i32 %38, %39
  %49 = sub nsw i32 0, %48
  %50 = add nsw i32 %38, %39
  %51 = select i1 %47, i32 %49, i32 %50
  %52 = icmp slt i32 %45, %42
  %.04 = select i1 %52, i32 %37, i32 %34
  %.03 = select i1 %52, i32 %45, i32 %42
  %53 = icmp slt i32 %51, %.03
  %.15 = select i1 %53, i32 %32, i32 %.04
  %54 = load i8, i8* %.17, align 1
  %55 = zext i8 %54 to i32
  %56 = add nsw i32 %.15, %55
  %57 = trunc i32 %56 to i8
  %58 = getelementptr inbounds i8, i8* %.17, i32 1
  store i8 %57, i8* %.17, align 1
  %59 = icmp ult i8* %58, %26
  br i1 %59, label %30, label %._crit_edge

._crit_edge:                                      ; preds = %30
  br label %60

60:                                               ; preds = %._crit_edge, %21
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_init_filter_functions_sse2(%struct.png_struct_def* %0, i32 %1) #11 {
  switch i32 %1, label %17 [
    i32 3, label %3
    i32 4, label %10
  ]

3:                                                ; preds = %2
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 143
  %5 = getelementptr inbounds [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], [4 x void (%struct.png_row_info_struct*, i8*, i8*)*]* %4, i64 0, i64 0
  store void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_sub3_sse2, void (%struct.png_row_info_struct*, i8*, i8*)** %5, align 8
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 143
  %7 = getelementptr inbounds [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], [4 x void (%struct.png_row_info_struct*, i8*, i8*)*]* %6, i64 0, i64 2
  store void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_avg3_sse2, void (%struct.png_row_info_struct*, i8*, i8*)** %7, align 8
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 143
  %9 = getelementptr inbounds [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], [4 x void (%struct.png_row_info_struct*, i8*, i8*)*]* %8, i64 0, i64 3
  store void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_paeth3_sse2, void (%struct.png_row_info_struct*, i8*, i8*)** %9, align 8
  br label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 143
  %12 = getelementptr inbounds [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], [4 x void (%struct.png_row_info_struct*, i8*, i8*)*]* %11, i64 0, i64 0
  store void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_sub4_sse2, void (%struct.png_row_info_struct*, i8*, i8*)** %12, align 8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 143
  %14 = getelementptr inbounds [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], [4 x void (%struct.png_row_info_struct*, i8*, i8*)*]* %13, i64 0, i64 2
  store void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_avg4_sse2, void (%struct.png_row_info_struct*, i8*, i8*)** %14, align 8
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 143
  %16 = getelementptr inbounds [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], [4 x void (%struct.png_row_info_struct*, i8*, i8*)*]* %15, i64 0, i64 3
  store void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_paeth4_sse2, void (%struct.png_row_info_struct*, i8*, i8*)** %16, align 8
  br label %17

17:                                               ; preds = %10, %2, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_filter_row_sub3_sse2(%struct.png_row_info_struct* %0, i8* %1, i8* %2) #19 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp uge i64 %5, 4
  br i1 %6, label %.lr.ph, label %16

.lr.ph:                                           ; preds = %3
  br label %7

7:                                                ; preds = %.lr.ph, %7
  %.05 = phi <2 x i64> [ zeroinitializer, %.lr.ph ], [ %12, %7 ]
  %.014 = phi i64 [ %5, %.lr.ph ], [ %14, %7 ]
  %.023 = phi i8* [ %1, %.lr.ph ], [ %13, %7 ]
  %8 = call <2 x i64> @load4(i8* %.023)
  %9 = bitcast <2 x i64> %8 to <16 x i8>
  %10 = bitcast <2 x i64> %.05 to <16 x i8>
  %11 = add <16 x i8> %9, %10
  %12 = bitcast <16 x i8> %11 to <2 x i64>
  call void @store3(i8* %.023, <2 x i64> %12)
  %13 = getelementptr inbounds i8, i8* %.023, i64 3
  %14 = sub i64 %.014, 3
  %15 = icmp uge i64 %14, 4
  br i1 %15, label %7, label %._crit_edge

._crit_edge:                                      ; preds = %7
  %split = phi i8* [ %13, %7 ]
  %split6 = phi i64 [ %14, %7 ]
  %split7 = phi <2 x i64> [ %12, %7 ]
  br label %16

16:                                               ; preds = %._crit_edge, %3
  %.02.lcssa = phi i8* [ %split, %._crit_edge ], [ %1, %3 ]
  %.01.lcssa = phi i64 [ %split6, %._crit_edge ], [ %5, %3 ]
  %.0.lcssa = phi <2 x i64> [ %split7, %._crit_edge ], [ zeroinitializer, %3 ]
  %17 = icmp ugt i64 %.01.lcssa, 0
  br i1 %17, label %18, label %26

18:                                               ; preds = %16
  %19 = call <2 x i64> @load3(i8* %.02.lcssa)
  %20 = bitcast <2 x i64> %19 to <16 x i8>
  %21 = bitcast <2 x i64> %.0.lcssa to <16 x i8>
  %22 = add <16 x i8> %20, %21
  %23 = bitcast <16 x i8> %22 to <2 x i64>
  call void @store3(i8* %.02.lcssa, <2 x i64> %23)
  %24 = getelementptr inbounds i8, i8* %.02.lcssa, i64 3
  %25 = sub i64 %.01.lcssa, 3
  br label %26

26:                                               ; preds = %18, %16
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_filter_row_avg3_sse2(%struct.png_row_info_struct* %0, i8* %1, i8* %2) #19 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp uge i64 %5, 4
  br i1 %6, label %.lr.ph, label %33

.lr.ph:                                           ; preds = %3
  br label %7

7:                                                ; preds = %.lr.ph, %7
  %.07 = phi <2 x i64> [ zeroinitializer, %.lr.ph ], [ %28, %7 ]
  %.016 = phi i64 [ %5, %.lr.ph ], [ %31, %7 ]
  %.025 = phi i8* [ %2, %.lr.ph ], [ %29, %7 ]
  %.034 = phi i8* [ %1, %.lr.ph ], [ %30, %7 ]
  %8 = call <2 x i64> @load4(i8* %.025)
  %9 = call <2 x i64> @load4(i8* %.034)
  %10 = bitcast <2 x i64> %.07 to <16 x i8>
  %11 = zext <16 x i8> %10 to <16 x i16>
  %12 = bitcast <2 x i64> %8 to <16 x i8>
  %13 = zext <16 x i8> %12 to <16 x i16>
  %14 = add <16 x i16> %11, %13
  %15 = add <16 x i16> %14, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16 = lshr <16 x i16> %15, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17 = trunc <16 x i16> %16 to <16 x i8>
  %18 = bitcast <16 x i8> %17 to <2 x i64>
  %19 = xor <2 x i64> %.07, %8
  %20 = and <2 x i64> %19, <i64 72340172838076673, i64 72340172838076673>
  %21 = bitcast <2 x i64> %18 to <16 x i8>
  %22 = bitcast <2 x i64> %20 to <16 x i8>
  %23 = sub <16 x i8> %21, %22
  %24 = bitcast <16 x i8> %23 to <2 x i64>
  %25 = bitcast <2 x i64> %9 to <16 x i8>
  %26 = bitcast <2 x i64> %24 to <16 x i8>
  %27 = add <16 x i8> %25, %26
  %28 = bitcast <16 x i8> %27 to <2 x i64>
  call void @store3(i8* %.034, <2 x i64> %28)
  %29 = getelementptr inbounds i8, i8* %.025, i64 3
  %30 = getelementptr inbounds i8, i8* %.034, i64 3
  %31 = sub i64 %.016, 3
  %32 = icmp uge i64 %31, 4
  br i1 %32, label %7, label %._crit_edge

._crit_edge:                                      ; preds = %7
  %split = phi i8* [ %30, %7 ]
  %split8 = phi i8* [ %29, %7 ]
  %split9 = phi i64 [ %31, %7 ]
  %split10 = phi <2 x i64> [ %28, %7 ]
  br label %33

33:                                               ; preds = %._crit_edge, %3
  %.03.lcssa = phi i8* [ %split, %._crit_edge ], [ %1, %3 ]
  %.02.lcssa = phi i8* [ %split8, %._crit_edge ], [ %2, %3 ]
  %.01.lcssa = phi i64 [ %split9, %._crit_edge ], [ %5, %3 ]
  %.0.lcssa = phi <2 x i64> [ %split10, %._crit_edge ], [ zeroinitializer, %3 ]
  %34 = icmp ugt i64 %.01.lcssa, 0
  br i1 %34, label %35, label %77

35:                                               ; preds = %33
  %36 = call <2 x i64> @load3(i8* %.02.lcssa)
  %37 = call <2 x i64> @load3(i8* %.03.lcssa)
  %38 = bitcast <2 x i64> %.0.lcssa to <16 x i8>
  %39 = zext <16 x i8> %38 to <16 x i16>
  %40 = bitcast <2 x i64> %36 to <16 x i8>
  %41 = zext <16 x i8> %40 to <16 x i16>
  %42 = add <16 x i16> %39, %41
  %43 = add <16 x i16> %42, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %44 = lshr <16 x i16> %43, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %45 = trunc <16 x i16> %44 to <16 x i8>
  %46 = bitcast <16 x i8> %45 to <2 x i64>
  %47 = xor <2 x i64> %.0.lcssa, %36
  %48 = insertelement <16 x i8> undef, i8 1, i32 0
  %49 = insertelement <16 x i8> %48, i8 1, i32 1
  %50 = insertelement <16 x i8> %49, i8 1, i32 2
  %51 = insertelement <16 x i8> %50, i8 1, i32 3
  %52 = insertelement <16 x i8> %51, i8 1, i32 4
  %53 = insertelement <16 x i8> %52, i8 1, i32 5
  %54 = insertelement <16 x i8> %53, i8 1, i32 6
  %55 = insertelement <16 x i8> %54, i8 1, i32 7
  %56 = insertelement <16 x i8> %55, i8 1, i32 8
  %57 = insertelement <16 x i8> %56, i8 1, i32 9
  %58 = insertelement <16 x i8> %57, i8 1, i32 10
  %59 = insertelement <16 x i8> %58, i8 1, i32 11
  %60 = insertelement <16 x i8> %59, i8 1, i32 12
  %61 = insertelement <16 x i8> %60, i8 1, i32 13
  %62 = insertelement <16 x i8> %61, i8 1, i32 14
  %63 = insertelement <16 x i8> %62, i8 1, i32 15
  %64 = bitcast <16 x i8> %63 to <2 x i64>
  %65 = and <2 x i64> %47, %64
  %66 = bitcast <2 x i64> %46 to <16 x i8>
  %67 = bitcast <2 x i64> %65 to <16 x i8>
  %68 = sub <16 x i8> %66, %67
  %69 = bitcast <16 x i8> %68 to <2 x i64>
  %70 = bitcast <2 x i64> %37 to <16 x i8>
  %71 = bitcast <2 x i64> %69 to <16 x i8>
  %72 = add <16 x i8> %70, %71
  %73 = bitcast <16 x i8> %72 to <2 x i64>
  call void @store3(i8* %.03.lcssa, <2 x i64> %73)
  %74 = getelementptr inbounds i8, i8* %.02.lcssa, i64 3
  %75 = getelementptr inbounds i8, i8* %.03.lcssa, i64 3
  %76 = sub i64 %.01.lcssa, 3
  br label %77

77:                                               ; preds = %35, %33
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_filter_row_paeth3_sse2(%struct.png_row_info_struct* %0, i8* %1, i8* %2) #19 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp uge i64 %5, 4
  br i1 %6, label %.lr.ph, label %65

.lr.ph:                                           ; preds = %3
  br label %7

7:                                                ; preds = %.lr.ph, %7
  %.09 = phi <2 x i64> [ zeroinitializer, %.lr.ph ], [ %56, %7 ]
  %.018 = phi <2 x i64> [ zeroinitializer, %.lr.ph ], [ %11, %7 ]
  %.027 = phi i64 [ %5, %.lr.ph ], [ %63, %7 ]
  %.036 = phi i8* [ %2, %.lr.ph ], [ %61, %7 ]
  %.045 = phi i8* [ %1, %.lr.ph ], [ %62, %7 ]
  %8 = call <2 x i64> @load4(i8* %.036)
  %9 = bitcast <2 x i64> %8 to <16 x i8>
  %10 = shufflevector <16 x i8> %9, <16 x i8> zeroinitializer, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %11 = bitcast <16 x i8> %10 to <2 x i64>
  %12 = call <2 x i64> @load4(i8* %.045)
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> zeroinitializer, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = bitcast <16 x i8> %14 to <2 x i64>
  %16 = bitcast <2 x i64> %11 to <8 x i16>
  %17 = bitcast <2 x i64> %.018 to <8 x i16>
  %18 = sub <8 x i16> %16, %17
  %19 = bitcast <8 x i16> %18 to <2 x i64>
  %20 = bitcast <2 x i64> %.09 to <8 x i16>
  %21 = bitcast <2 x i64> %.018 to <8 x i16>
  %22 = sub <8 x i16> %20, %21
  %23 = bitcast <8 x i16> %22 to <2 x i64>
  %24 = bitcast <2 x i64> %19 to <8 x i16>
  %25 = bitcast <2 x i64> %23 to <8 x i16>
  %26 = add <8 x i16> %24, %25
  %27 = bitcast <8 x i16> %26 to <2 x i64>
  %28 = call <2 x i64> @abs_i16(<2 x i64> %19)
  %29 = call <2 x i64> @abs_i16(<2 x i64> %23)
  %30 = call <2 x i64> @abs_i16(<2 x i64> %27)
  %31 = bitcast <2 x i64> %28 to <8 x i16>
  %32 = bitcast <2 x i64> %29 to <8 x i16>
  %33 = icmp slt <8 x i16> %31, %32
  %34 = select <8 x i1> %33, <8 x i16> %31, <8 x i16> %32
  %35 = bitcast <8 x i16> %34 to <2 x i64>
  %36 = bitcast <2 x i64> %30 to <8 x i16>
  %37 = bitcast <2 x i64> %35 to <8 x i16>
  %38 = icmp slt <8 x i16> %36, %37
  %39 = select <8 x i1> %38, <8 x i16> %36, <8 x i16> %37
  %40 = bitcast <8 x i16> %39 to <2 x i64>
  %41 = bitcast <2 x i64> %40 to <8 x i16>
  %42 = bitcast <2 x i64> %28 to <8 x i16>
  %43 = icmp eq <8 x i16> %41, %42
  %44 = sext <8 x i1> %43 to <8 x i16>
  %45 = bitcast <8 x i16> %44 to <2 x i64>
  %46 = bitcast <2 x i64> %40 to <8 x i16>
  %47 = bitcast <2 x i64> %29 to <8 x i16>
  %48 = icmp eq <8 x i16> %46, %47
  %49 = sext <8 x i1> %48 to <8 x i16>
  %50 = bitcast <8 x i16> %49 to <2 x i64>
  %51 = call <2 x i64> @if_then_else(<2 x i64> %50, <2 x i64> %11, <2 x i64> %.018)
  %52 = call <2 x i64> @if_then_else(<2 x i64> %45, <2 x i64> %.09, <2 x i64> %51)
  %53 = bitcast <2 x i64> %15 to <16 x i8>
  %54 = bitcast <2 x i64> %52 to <16 x i8>
  %55 = add <16 x i8> %53, %54
  %56 = bitcast <16 x i8> %55 to <2 x i64>
  %57 = bitcast <2 x i64> %56 to <8 x i16>
  %58 = bitcast <2 x i64> %56 to <8 x i16>
  %59 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %57, <8 x i16> %58) #22
  %60 = bitcast <16 x i8> %59 to <2 x i64>
  call void @store3(i8* %.045, <2 x i64> %60)
  %61 = getelementptr inbounds i8, i8* %.036, i64 3
  %62 = getelementptr inbounds i8, i8* %.045, i64 3
  %63 = sub i64 %.027, 3
  %64 = icmp uge i64 %63, 4
  br i1 %64, label %7, label %._crit_edge

._crit_edge:                                      ; preds = %7
  %split = phi i8* [ %62, %7 ]
  %split10 = phi i8* [ %61, %7 ]
  %split11 = phi i64 [ %63, %7 ]
  %split12 = phi <2 x i64> [ %11, %7 ]
  %split13 = phi <2 x i64> [ %56, %7 ]
  br label %65

65:                                               ; preds = %._crit_edge, %3
  %.04.lcssa = phi i8* [ %split, %._crit_edge ], [ %1, %3 ]
  %.03.lcssa = phi i8* [ %split10, %._crit_edge ], [ %2, %3 ]
  %.02.lcssa = phi i64 [ %split11, %._crit_edge ], [ %5, %3 ]
  %.01.lcssa = phi <2 x i64> [ %split12, %._crit_edge ], [ zeroinitializer, %3 ]
  %.0.lcssa = phi <2 x i64> [ %split13, %._crit_edge ], [ zeroinitializer, %3 ]
  %66 = icmp ugt i64 %.02.lcssa, 0
  br i1 %66, label %67, label %126

67:                                               ; preds = %65
  %68 = call <2 x i64> @load3(i8* %.03.lcssa)
  %69 = bitcast <2 x i64> %68 to <16 x i8>
  %70 = bitcast <2 x i64> zeroinitializer to <16 x i8>
  %71 = shufflevector <16 x i8> %69, <16 x i8> %70, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = bitcast <16 x i8> %71 to <2 x i64>
  %73 = call <2 x i64> @load3(i8* %.04.lcssa)
  %74 = bitcast <2 x i64> %73 to <16 x i8>
  %75 = bitcast <2 x i64> zeroinitializer to <16 x i8>
  %76 = shufflevector <16 x i8> %74, <16 x i8> %75, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %77 = bitcast <16 x i8> %76 to <2 x i64>
  %78 = bitcast <2 x i64> %72 to <8 x i16>
  %79 = bitcast <2 x i64> %.01.lcssa to <8 x i16>
  %80 = sub <8 x i16> %78, %79
  %81 = bitcast <8 x i16> %80 to <2 x i64>
  %82 = bitcast <2 x i64> %.0.lcssa to <8 x i16>
  %83 = bitcast <2 x i64> %.01.lcssa to <8 x i16>
  %84 = sub <8 x i16> %82, %83
  %85 = bitcast <8 x i16> %84 to <2 x i64>
  %86 = bitcast <2 x i64> %81 to <8 x i16>
  %87 = bitcast <2 x i64> %85 to <8 x i16>
  %88 = add <8 x i16> %86, %87
  %89 = bitcast <8 x i16> %88 to <2 x i64>
  %90 = call <2 x i64> @abs_i16(<2 x i64> %81)
  %91 = call <2 x i64> @abs_i16(<2 x i64> %85)
  %92 = call <2 x i64> @abs_i16(<2 x i64> %89)
  %93 = bitcast <2 x i64> %90 to <8 x i16>
  %94 = bitcast <2 x i64> %91 to <8 x i16>
  %95 = icmp slt <8 x i16> %93, %94
  %96 = select <8 x i1> %95, <8 x i16> %93, <8 x i16> %94
  %97 = bitcast <8 x i16> %96 to <2 x i64>
  %98 = bitcast <2 x i64> %92 to <8 x i16>
  %99 = bitcast <2 x i64> %97 to <8 x i16>
  %100 = icmp slt <8 x i16> %98, %99
  %101 = select <8 x i1> %100, <8 x i16> %98, <8 x i16> %99
  %102 = bitcast <8 x i16> %101 to <2 x i64>
  %103 = bitcast <2 x i64> %102 to <8 x i16>
  %104 = bitcast <2 x i64> %90 to <8 x i16>
  %105 = icmp eq <8 x i16> %103, %104
  %106 = sext <8 x i1> %105 to <8 x i16>
  %107 = bitcast <8 x i16> %106 to <2 x i64>
  %108 = bitcast <2 x i64> %102 to <8 x i16>
  %109 = bitcast <2 x i64> %91 to <8 x i16>
  %110 = icmp eq <8 x i16> %108, %109
  %111 = sext <8 x i1> %110 to <8 x i16>
  %112 = bitcast <8 x i16> %111 to <2 x i64>
  %113 = call <2 x i64> @if_then_else(<2 x i64> %112, <2 x i64> %72, <2 x i64> %.01.lcssa)
  %114 = call <2 x i64> @if_then_else(<2 x i64> %107, <2 x i64> %.0.lcssa, <2 x i64> %113)
  %115 = bitcast <2 x i64> %77 to <16 x i8>
  %116 = bitcast <2 x i64> %114 to <16 x i8>
  %117 = add <16 x i8> %115, %116
  %118 = bitcast <16 x i8> %117 to <2 x i64>
  %119 = bitcast <2 x i64> %118 to <8 x i16>
  %120 = bitcast <2 x i64> %118 to <8 x i16>
  %121 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %119, <8 x i16> %120) #22
  %122 = bitcast <16 x i8> %121 to <2 x i64>
  call void @store3(i8* %.04.lcssa, <2 x i64> %122)
  %123 = getelementptr inbounds i8, i8* %.03.lcssa, i64 3
  %124 = getelementptr inbounds i8, i8* %.04.lcssa, i64 3
  %125 = sub i64 %.02.lcssa, 3
  br label %126

126:                                              ; preds = %67, %65
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_filter_row_sub4_sse2(%struct.png_row_info_struct* %0, i8* %1, i8* %2) #19 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 4
  %7 = icmp ugt i64 %6, 4
  br i1 %7, label %.lr.ph, label %17

.lr.ph:                                           ; preds = %3
  br label %8

8:                                                ; preds = %.lr.ph, %8
  %.05 = phi <2 x i64> [ zeroinitializer, %.lr.ph ], [ %13, %8 ]
  %.014 = phi i64 [ %6, %.lr.ph ], [ %15, %8 ]
  %.023 = phi i8* [ %1, %.lr.ph ], [ %14, %8 ]
  %9 = call <2 x i64> @load4(i8* %.023)
  %10 = bitcast <2 x i64> %9 to <16 x i8>
  %11 = bitcast <2 x i64> %.05 to <16 x i8>
  %12 = add <16 x i8> %10, %11
  %13 = bitcast <16 x i8> %12 to <2 x i64>
  call void @store4(i8* %.023, <2 x i64> %13)
  %14 = getelementptr inbounds i8, i8* %.023, i64 4
  %15 = sub i64 %.014, 4
  %16 = icmp ugt i64 %15, 4
  br i1 %16, label %8, label %._crit_edge

._crit_edge:                                      ; preds = %8
  br label %17

17:                                               ; preds = %._crit_edge, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_filter_row_avg4_sse2(%struct.png_row_info_struct* %0, i8* %1, i8* %2) #19 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 4
  %7 = icmp ugt i64 %6, 4
  br i1 %7, label %.lr.ph, label %34

.lr.ph:                                           ; preds = %3
  br label %8

8:                                                ; preds = %.lr.ph, %8
  %.07 = phi <2 x i64> [ zeroinitializer, %.lr.ph ], [ %29, %8 ]
  %.016 = phi i64 [ %6, %.lr.ph ], [ %32, %8 ]
  %.025 = phi i8* [ %2, %.lr.ph ], [ %30, %8 ]
  %.034 = phi i8* [ %1, %.lr.ph ], [ %31, %8 ]
  %9 = call <2 x i64> @load4(i8* %.025)
  %10 = call <2 x i64> @load4(i8* %.034)
  %11 = bitcast <2 x i64> %.07 to <16 x i8>
  %12 = zext <16 x i8> %11 to <16 x i16>
  %13 = bitcast <2 x i64> %9 to <16 x i8>
  %14 = zext <16 x i8> %13 to <16 x i16>
  %15 = add <16 x i16> %12, %14
  %16 = add <16 x i16> %15, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17 = lshr <16 x i16> %16, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18 = trunc <16 x i16> %17 to <16 x i8>
  %19 = bitcast <16 x i8> %18 to <2 x i64>
  %20 = xor <2 x i64> %.07, %9
  %21 = and <2 x i64> %20, <i64 72340172838076673, i64 72340172838076673>
  %22 = bitcast <2 x i64> %19 to <16 x i8>
  %23 = bitcast <2 x i64> %21 to <16 x i8>
  %24 = sub <16 x i8> %22, %23
  %25 = bitcast <16 x i8> %24 to <2 x i64>
  %26 = bitcast <2 x i64> %10 to <16 x i8>
  %27 = bitcast <2 x i64> %25 to <16 x i8>
  %28 = add <16 x i8> %26, %27
  %29 = bitcast <16 x i8> %28 to <2 x i64>
  call void @store4(i8* %.034, <2 x i64> %29)
  %30 = getelementptr inbounds i8, i8* %.025, i64 4
  %31 = getelementptr inbounds i8, i8* %.034, i64 4
  %32 = sub i64 %.016, 4
  %33 = icmp ugt i64 %32, 4
  br i1 %33, label %8, label %._crit_edge

._crit_edge:                                      ; preds = %8
  br label %34

34:                                               ; preds = %._crit_edge, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_filter_row_paeth4_sse2(%struct.png_row_info_struct* %0, i8* %1, i8* %2) #19 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 4
  %7 = icmp ugt i64 %6, 4
  br i1 %7, label %.lr.ph, label %66

.lr.ph:                                           ; preds = %3
  br label %8

8:                                                ; preds = %.lr.ph, %8
  %.09 = phi <2 x i64> [ zeroinitializer, %.lr.ph ], [ %57, %8 ]
  %.018 = phi <2 x i64> [ zeroinitializer, %.lr.ph ], [ %12, %8 ]
  %.027 = phi i64 [ %6, %.lr.ph ], [ %64, %8 ]
  %.036 = phi i8* [ %2, %.lr.ph ], [ %62, %8 ]
  %.045 = phi i8* [ %1, %.lr.ph ], [ %63, %8 ]
  %9 = call <2 x i64> @load4(i8* %.036)
  %10 = bitcast <2 x i64> %9 to <16 x i8>
  %11 = shufflevector <16 x i8> %10, <16 x i8> zeroinitializer, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %12 = bitcast <16 x i8> %11 to <2 x i64>
  %13 = call <2 x i64> @load4(i8* %.045)
  %14 = bitcast <2 x i64> %13 to <16 x i8>
  %15 = shufflevector <16 x i8> %14, <16 x i8> zeroinitializer, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %16 = bitcast <16 x i8> %15 to <2 x i64>
  %17 = bitcast <2 x i64> %12 to <8 x i16>
  %18 = bitcast <2 x i64> %.018 to <8 x i16>
  %19 = sub <8 x i16> %17, %18
  %20 = bitcast <8 x i16> %19 to <2 x i64>
  %21 = bitcast <2 x i64> %.09 to <8 x i16>
  %22 = bitcast <2 x i64> %.018 to <8 x i16>
  %23 = sub <8 x i16> %21, %22
  %24 = bitcast <8 x i16> %23 to <2 x i64>
  %25 = bitcast <2 x i64> %20 to <8 x i16>
  %26 = bitcast <2 x i64> %24 to <8 x i16>
  %27 = add <8 x i16> %25, %26
  %28 = bitcast <8 x i16> %27 to <2 x i64>
  %29 = call <2 x i64> @abs_i16(<2 x i64> %20)
  %30 = call <2 x i64> @abs_i16(<2 x i64> %24)
  %31 = call <2 x i64> @abs_i16(<2 x i64> %28)
  %32 = bitcast <2 x i64> %29 to <8 x i16>
  %33 = bitcast <2 x i64> %30 to <8 x i16>
  %34 = icmp slt <8 x i16> %32, %33
  %35 = select <8 x i1> %34, <8 x i16> %32, <8 x i16> %33
  %36 = bitcast <8 x i16> %35 to <2 x i64>
  %37 = bitcast <2 x i64> %31 to <8 x i16>
  %38 = bitcast <2 x i64> %36 to <8 x i16>
  %39 = icmp slt <8 x i16> %37, %38
  %40 = select <8 x i1> %39, <8 x i16> %37, <8 x i16> %38
  %41 = bitcast <8 x i16> %40 to <2 x i64>
  %42 = bitcast <2 x i64> %41 to <8 x i16>
  %43 = bitcast <2 x i64> %29 to <8 x i16>
  %44 = icmp eq <8 x i16> %42, %43
  %45 = sext <8 x i1> %44 to <8 x i16>
  %46 = bitcast <8 x i16> %45 to <2 x i64>
  %47 = bitcast <2 x i64> %41 to <8 x i16>
  %48 = bitcast <2 x i64> %30 to <8 x i16>
  %49 = icmp eq <8 x i16> %47, %48
  %50 = sext <8 x i1> %49 to <8 x i16>
  %51 = bitcast <8 x i16> %50 to <2 x i64>
  %52 = call <2 x i64> @if_then_else(<2 x i64> %51, <2 x i64> %12, <2 x i64> %.018)
  %53 = call <2 x i64> @if_then_else(<2 x i64> %46, <2 x i64> %.09, <2 x i64> %52)
  %54 = bitcast <2 x i64> %16 to <16 x i8>
  %55 = bitcast <2 x i64> %53 to <16 x i8>
  %56 = add <16 x i8> %54, %55
  %57 = bitcast <16 x i8> %56 to <2 x i64>
  %58 = bitcast <2 x i64> %57 to <8 x i16>
  %59 = bitcast <2 x i64> %57 to <8 x i16>
  %60 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %58, <8 x i16> %59) #22
  %61 = bitcast <16 x i8> %60 to <2 x i64>
  call void @store4(i8* %.045, <2 x i64> %61)
  %62 = getelementptr inbounds i8, i8* %.036, i64 4
  %63 = getelementptr inbounds i8, i8* %.045, i64 4
  %64 = sub i64 %.027, 4
  %65 = icmp ugt i64 %64, 4
  br i1 %65, label %8, label %._crit_edge

._crit_edge:                                      ; preds = %8
  br label %66

66:                                               ; preds = %._crit_edge, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal <2 x i64> @load4(i8* %0) #19 {
  %2 = alloca i32, align 4
  %3 = bitcast i32* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 1 %0, i64 4, i1 false)
  %4 = load i32, i32* %2, align 4
  %5 = insertelement <4 x i32> undef, i32 %4, i32 0
  %6 = insertelement <4 x i32> %5, i32 0, i32 1
  %7 = insertelement <4 x i32> %6, i32 0, i32 2
  %8 = insertelement <4 x i32> %7, i32 0, i32 3
  %9 = bitcast <4 x i32> %8 to <2 x i64>
  ret <2 x i64> %9
}

; Function Attrs: noinline nounwind uwtable
define internal <2 x i64> @abs_i16(<2 x i64> %0) #19 {
  %2 = bitcast <2 x i64> zeroinitializer to <8 x i16>
  %3 = bitcast <2 x i64> %0 to <8 x i16>
  %4 = icmp sgt <8 x i16> %2, %3
  %5 = sext <8 x i1> %4 to <8 x i16>
  %6 = bitcast <8 x i16> %5 to <2 x i64>
  %7 = xor <2 x i64> %0, %6
  %8 = bitcast <2 x i64> %7 to <8 x i16>
  %9 = bitcast <2 x i64> %6 to <8 x i16>
  %10 = sub <8 x i16> %8, %9
  %11 = bitcast <8 x i16> %10 to <2 x i64>
  ret <2 x i64> %11
}

; Function Attrs: noinline nounwind uwtable
define internal <2 x i64> @if_then_else(<2 x i64> %0, <2 x i64> %1, <2 x i64> %2) #19 {
  %4 = and <2 x i64> %0, %1
  %5 = xor <2 x i64> %0, <i64 -1, i64 -1>
  %6 = and <2 x i64> %5, %2
  %7 = or <2 x i64> %4, %6
  ret <2 x i64> %7
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #20

; Function Attrs: noinline nounwind uwtable
define internal void @store4(i8* %0, <2 x i64> %1) #19 {
  %3 = alloca i32, align 4
  %4 = bitcast <2 x i64> %1 to <4 x i32>
  %5 = extractelement <4 x i32> %4, i32 0
  store i32 %5, i32* %3, align 4
  %6 = bitcast i32* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 4 %6, i64 4, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @store3(i8* %0, <2 x i64> %1) #19 {
  %3 = alloca i32, align 4
  %4 = bitcast <2 x i64> %1 to <4 x i32>
  %5 = extractelement <4 x i32> %4, i32 0
  store i32 %5, i32* %3, align 4
  %6 = bitcast i32* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 4 %6, i64 3, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal <2 x i64> @load3(i8* %0) #19 {
  %2 = alloca i32, align 4
  store i32 0, i32* %2, align 4
  %3 = bitcast i32* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 1 %0, i64 3, i1 false)
  %4 = load i32, i32* %2, align 4
  %5 = insertelement <4 x i32> undef, i32 %4, i32 0
  %6 = insertelement <4 x i32> %5, i32 0, i32 1
  %7 = insertelement <4 x i32> %6, i32 0, i32 2
  %8 = insertelement <4 x i32> %7, i32 0, i32 3
  %9 = bitcast <4 x i32> %8 to <2 x i64>
  ret <2 x i64> %9
}

declare i32 @inflate(%struct.z_stream_s*, i32) #13

; Function Attrs: noinline nounwind uwtable
define void @png_check_chunk_name(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  br label %3

3:                                                ; preds = %2, %11
  %lsr.iv = phi i32 [ 4, %2 ], [ %lsr.iv.next, %11 ]
  %.04 = phi i32 [ %1, %2 ], [ %12, %11 ]
  %4 = and i32 %.04, 255
  %5 = icmp slt i32 %4, 65
  %6 = icmp sgt i32 %4, 122
  %or.cond = or i1 %5, %6
  br i1 %or.cond, label %10, label %7

7:                                                ; preds = %3
  %8 = icmp sgt i32 %4, 90
  %9 = icmp slt i32 %4, 97
  %or.cond2 = and i1 %8, %9
  br i1 %or.cond2, label %10, label %11

10:                                               ; preds = %7, %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.49.254, i32 0, i32 0)) #24
  unreachable

11:                                               ; preds = %7
  %12 = lshr i32 %.04, 8
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  br i1 %exitcond, label %3, label %13

13:                                               ; preds = %11
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_check_chunk_length(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 135
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 0
  br i1 %5, label %6, label %13

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 135
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, 2147483647
  br i1 %9, label %10, label %13

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 135
  %12 = load i64, i64* %11, align 8
  br label %13

13:                                               ; preds = %10, %6, %2
  %.01 = phi i64 [ %12, %10 ], [ 2147483647, %6 ], [ 2147483647, %2 ]
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 1229209940
  br i1 %16, label %17, label %65

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %19 = load i32, i32* %18, align 8
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 65
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = mul i64 %20, %23
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %26 = load i8, i8* %25, align 8
  %27 = zext i8 %26 to i32
  %28 = icmp sgt i32 %27, 8
  %29 = zext i1 %28 to i64
  %30 = select i1 %28, i32 2, i32 1
  %31 = sext i32 %30 to i64
  %32 = mul i64 %24, %31
  %33 = add i64 %32, 1
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 58
  %35 = load i8, i8* %34, align 4
  %36 = zext i8 %35 to i32
  %37 = icmp ne i32 %36, 0
  %38 = zext i1 %37 to i64
  %39 = select i1 %37, i32 6, i32 0
  %40 = sext i32 %39 to i64
  %41 = add i64 %33, %40
  call void (...) @magma_bug001()
  %42 = trunc i64 %41 to i32
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 38
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i64
  %47 = udiv i64 4294967295, %43
  %48 = icmp ugt i64 %46, %47
  br i1 %48, label %54, label %49

49:                                               ; preds = %17
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 38
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i64
  %53 = mul i64 %52, %43
  br label %54

54:                                               ; preds = %17, %49
  %.0 = phi i64 [ %53, %49 ], [ 2147483647, %17 ]
  %55 = icmp ugt i64 %43, 32566
  %. = select i1 %55, i64 32566, i64 %43
  %56 = udiv i64 %.0, %.
  %57 = add i64 %56, 1
  %58 = mul i64 5, %57
  %59 = add i64 6, %58
  %60 = add i64 %.0, %59
  %61 = icmp ult i64 %60, 2147483647
  %62 = select i1 %61, i64 %60, i64 2147483647
  %63 = icmp ult i64 %.01, %62
  %64 = select i1 %63, i64 %62, i64 %.01
  br label %65

65:                                               ; preds = %54, %13
  %.1 = phi i64 [ %64, %54 ], [ %.01, %13 ]
  %66 = zext i32 %1 to i64
  %67 = icmp ugt i64 %66, %.1
  br i1 %67, label %68, label %69

68:                                               ; preds = %65
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.50.253, i32 0, i32 0)) #24
  unreachable

69:                                               ; preds = %65
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_IHDR(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca [13 x i8], align 1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0)) #24
  unreachable

10:                                               ; preds = %3
  %11 = icmp ne i32 %2, 13
  br i1 %11, label %12, label %13

12:                                               ; preds = %10
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0)) #24
  unreachable

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %15 = load i32, i32* %14, align 4
  %16 = or i32 %15, 1
  store i32 %16, i32* %14, align 4
  %17 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i32 0, i32 0
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %17, i32 13)
  %18 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %19 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i32 0, i32 0
  %20 = call i32 @png_get_uint_31(%struct.png_struct_def* %0, i8* %19)
  %21 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i32 0, i32 0
  %22 = getelementptr inbounds i8, i8* %21, i64 4
  %23 = call i32 @png_get_uint_31(%struct.png_struct_def* %0, i8* %22)
  %24 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 8
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 9
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 10
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 11
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 12
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  store i32 %20, i32* %39, align 8
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 38
  store i32 %23, i32* %40, align 4
  %41 = trunc i32 %26 to i8
  %42 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  store i8 %41, i8* %42, align 8
  %43 = trunc i32 %38 to i8
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 58
  store i8 %43, i8* %44, align 4
  %45 = trunc i32 %29 to i8
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  store i8 %45, i8* %46, align 1
  %47 = trunc i32 %35 to i8
  %48 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 123
  store i8 %47, i8* %48, align 4
  %49 = trunc i32 %32 to i8
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 131
  store i8 %49, i8* %50, align 8
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  switch i32 %53, label %54 [
    i32 6, label %60
    i32 4, label %58
    i32 2, label %56
  ]

54:                                               ; preds = %13
  %55 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 65
  store i8 1, i8* %55, align 1
  br label %62

56:                                               ; preds = %13
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 65
  store i8 3, i8* %57, align 1
  br label %62

58:                                               ; preds = %13
  %59 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 65
  store i8 2, i8* %59, align 1
  br label %62

60:                                               ; preds = %13
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 65
  store i8 4, i8* %61, align 1
  br label %62

62:                                               ; preds = %60, %58, %56, %54
  %63 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %64 = load i8, i8* %63, align 8
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 65
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = mul nsw i32 %65, %68
  %70 = trunc i32 %69 to i8
  %71 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 64
  store i8 %70, i8* %71, align 2
  %72 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 64
  %73 = load i8, i8* %72, align 2
  %74 = zext i8 %73 to i32
  %75 = icmp sge i32 %74, 8
  br i1 %75, label %76, label %85

76:                                               ; preds = %62
  %77 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %78 = load i32, i32* %77, align 8
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 64
  %81 = load i8, i8* %80, align 2
  %82 = zext i8 %81 to i64
  %83 = lshr i64 %82, 3
  %84 = mul i64 %79, %83
  br label %95

85:                                               ; preds = %62
  %86 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %87 = load i32, i32* %86, align 8
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 64
  %90 = load i8, i8* %89, align 2
  %91 = zext i8 %90 to i64
  %92 = mul i64 %88, %91
  %93 = add i64 %92, 7
  %94 = lshr i64 %93, 3
  br label %95

95:                                               ; preds = %85, %76
  %96 = phi i64 [ %84, %76 ], [ %94, %85 ]
  %97 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 41
  store i64 %96, i64* %97, align 8
  call void @png_set_IHDR(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %20, i32 %23, i32 %26, i32 %29, i32 %38, i32 %32, i32 %35)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_IEND(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %8, %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0)) #24
  unreachable

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %16 = load i32, i32* %15, align 4
  %17 = or i32 %16, 24
  store i32 %17, i32* %15, align 4
  %18 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  %19 = icmp ne i32 %2, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %14
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %21

21:                                               ; preds = %20, %14
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_push_have_end(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 95
  %4 = load void (%struct.png_struct_def*, %struct.png_info_def*)*, void (%struct.png_struct_def*, %struct.png_info_def*)** %3, align 8
  %5 = icmp ne void (%struct.png_struct_def*, %struct.png_info_def*)* %4, null
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 95
  %8 = load void (%struct.png_struct_def*, %struct.png_info_def*)*, void (%struct.png_struct_def*, %struct.png_info_def*)** %7, align 8
  call void %8(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %9

9:                                                ; preds = %6, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_unknown(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2, i32 %3) #11 {
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 114
  %6 = load i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)*, i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)** %5, align 8
  %7 = icmp ne i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)* %6, null
  br i1 %7, label %8, label %27

8:                                                ; preds = %4
  %9 = call i32 @png_cache_unknown_chunk(%struct.png_struct_def* %0, i32 %2)
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %44

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 114
  %13 = load i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)*, i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)** %12, align 8
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %15 = call i32 %13(%struct.png_struct_def* %0, %struct.png_unknown_chunk_t* %14)
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %11
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.45.352, i32 0, i32 0)) #24
  unreachable

18:                                               ; preds = %11
  %19 = icmp eq i32 %15, 0
  br i1 %19, label %20, label %44

20:                                               ; preds = %18
  %21 = icmp slt i32 %3, 2
  br i1 %21, label %22, label %44

22:                                               ; preds = %20
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 115
  %24 = load i32, i32* %23, align 8
  %25 = icmp slt i32 %24, 2
  br i1 %25, label %26, label %44

26:                                               ; preds = %22
  call void @png_chunk_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.46.353, i32 0, i32 0))
  call void @png_app_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.47.354, i32 0, i32 0))
  br label %44

27:                                               ; preds = %4
  %28 = icmp eq i32 %3, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 115
  %31 = load i32, i32* %30, align 8
  br label %32

32:                                               ; preds = %29, %27
  %.34 = phi i32 [ %31, %29 ], [ %3, %27 ]
  switch i32 %.34, label %42 [
    i32 3, label %39
    i32 2, label %33
  ]

33:                                               ; preds = %32
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %35 = load i32, i32* %34, align 8
  %36 = lshr i32 %35, 29
  %37 = and i32 1, %36
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %32, %33
  %40 = call i32 @png_cache_unknown_chunk(%struct.png_struct_def* %0, i32 %2)
  %41 = icmp eq i32 %40, 0
  %spec.select = select i1 %41, i32 1, i32 %.34
  br label %44

42:                                               ; preds = %32, %33
  %43 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  br label %44

44:                                               ; preds = %39, %42, %22, %26, %20, %18, %8
  %.6 = phi i32 [ %3, %20 ], [ 2, %26 ], [ 2, %22 ], [ 1, %18 ], [ 1, %8 ], [ %spec.select, %39 ], [ %.34, %42 ]
  %.2 = phi i32 [ 0, %22 ], [ 0, %26 ], [ 0, %20 ], [ 1, %18 ], [ 0, %8 ], [ 0, %42 ], [ 0, %39 ]
  switch i32 %.6, label %62 [
    i32 3, label %51
    i32 2, label %45
  ]

45:                                               ; preds = %44
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %47 = load i32, i32* %46, align 8
  %48 = lshr i32 %47, 29
  %49 = and i32 1, %48
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %51, label %62

51:                                               ; preds = %44, %45
  %52 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  %53 = load i32, i32* %52, align 4
  switch i32 %53, label %56 [
    i32 2, label %54
    i32 1, label %62
    i32 0, label %60
  ]

54:                                               ; preds = %51
  %55 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  store i32 1, i32* %55, align 4
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.38.339, i32 0, i32 0))
  br label %62

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  %58 = load i32, i32* %57, align 4
  %59 = add i32 %58, -1
  store i32 %59, i32* %57, align 4
  br label %60

60:                                               ; preds = %51, %56
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  call void @png_set_unknown_chunks(%struct.png_struct_def* %0, %struct.png_info_def* %1, %struct.png_unknown_chunk_t* %61, i32 1)
  br label %62

62:                                               ; preds = %60, %51, %54, %44, %45
  %.4 = phi i32 [ %.2, %45 ], [ %.2, %44 ], [ 1, %60 ], [ %.2, %51 ], [ %.2, %54 ]
  %63 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %64 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %63, i32 0, i32 1
  %65 = load i8*, i8** %64, align 8
  %66 = icmp ne i8* %65, null
  br i1 %66, label %67, label %71

67:                                               ; preds = %62
  %68 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %69 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %68, i32 0, i32 1
  %70 = load i8*, i8** %69, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %70)
  br label %71

71:                                               ; preds = %67, %62
  %72 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %73 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %72, i32 0, i32 1
  store i8* null, i8** %73, align 8
  %74 = icmp eq i32 %.4, 0
  br i1 %74, label %75, label %82

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %77 = load i32, i32* %76, align 8
  %78 = lshr i32 %77, 29
  %79 = and i32 1, %78
  %80 = icmp ne i32 %79, 0
  br i1 %80, label %82, label %81

81:                                               ; preds = %75
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.48.355, i32 0, i32 0)) #24
  unreachable

82:                                               ; preds = %75, %71
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_PLTE(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca [256 x %struct.png_color_struct], align 16
  %5 = alloca [3 x i8], align 1
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, 2
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %11
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8.270, i32 0, i32 0)) #24
  unreachable

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %17
  %23 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0))
  br label %105

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %26 = load i32, i32* %25, align 4
  %27 = or i32 %26, 2
  store i32 %27, i32* %25, align 4
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %24
  %34 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9.271, i32 0, i32 0))
  br label %105

35:                                               ; preds = %24
  %36 = icmp ugt i32 %2, 768
  %37 = urem i32 %2, 3
  %38 = icmp ne i32 %37, 0
  %or.cond = or i1 %36, %38
  br i1 %or.cond, label %39, label %47

39:                                               ; preds = %35
  %40 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  %41 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = icmp ne i32 %43, 3
  br i1 %44, label %45, label %46

45:                                               ; preds = %39
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %105

46:                                               ; preds = %39
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0)) #24
  unreachable

47:                                               ; preds = %35
  %48 = sdiv i32 %2, 3
  %49 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = icmp eq i32 %51, 3
  br i1 %52, label %53, label %58

53:                                               ; preds = %47
  %54 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %55 = load i8, i8* %54, align 8
  %56 = zext i8 %55 to i32
  %57 = shl i32 1, %56
  br label %58

58:                                               ; preds = %47, %53
  call void (...) @magma_bug003()
  %59 = getelementptr inbounds [256 x %struct.png_color_struct], [256 x %struct.png_color_struct]* %4, i32 0, i32 0
  %60 = getelementptr inbounds [3 x i8], [3 x i8]* %5, i32 0, i32 0
  %61 = getelementptr inbounds [3 x i8], [3 x i8]* %5, i64 0, i64 0
  %62 = getelementptr inbounds [3 x i8], [3 x i8]* %5, i64 0, i64 1
  %63 = getelementptr inbounds [3 x i8], [3 x i8]* %5, i64 0, i64 2
  %64 = icmp slt i32 0, %48
  br i1 %64, label %.lr.ph, label %69

.lr.ph:                                           ; preds = %58
  br label %65

65:                                               ; preds = %.lr.ph, %65
  %lsr.iv = phi i32 [ %48, %.lr.ph ], [ %lsr.iv.next, %65 ]
  %.07 = phi %struct.png_color_struct* [ %59, %.lr.ph ], [ %lsr.chain11, %65 ]
  %.078 = bitcast %struct.png_color_struct* %.07 to i8*
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %60, i32 3)
  %66 = load i8, i8* %61, align 1
  store i8 %66, i8* %.078, align 1
  %67 = load i8, i8* %62, align 1
  %scevgep = getelementptr i8, i8* %.078, i64 1
  store i8 %67, i8* %scevgep, align 1
  %68 = load i8, i8* %63, align 1
  %scevgep9 = getelementptr i8, i8* %.078, i64 2
  store i8 %68, i8* %scevgep9, align 1
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  %scevgep10 = getelementptr i8, i8* %.078, i64 3
  %lsr.chain11 = bitcast i8* %scevgep10 to %struct.png_color_struct*
  br i1 %exitcond, label %65, label %._crit_edge

._crit_edge:                                      ; preds = %65
  br label %69

69:                                               ; preds = %._crit_edge, %58
  %70 = mul i32 %48, 3
  %71 = sub i32 %2, %70
  %72 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %71)
  %73 = getelementptr inbounds [256 x %struct.png_color_struct], [256 x %struct.png_color_struct]* %4, i32 0, i32 0
  call void @png_set_PLTE(%struct.png_struct_def* %0, %struct.png_info_def* %1, %struct.png_color_struct* %73, i32 %48)
  %74 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %75 = load i16, i16* %74, align 8
  %76 = zext i16 %75 to i32
  %77 = icmp sgt i32 %76, 0
  br i1 %77, label %84, label %78

78:                                               ; preds = %69
  %magicptr4 = ptrtoint %struct.png_info_def* %1 to i64
  %cond = icmp eq i64 %magicptr4, 0
  br i1 %cond, label %105, label %79

79:                                               ; preds = %78
  %80 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %81 = load i32, i32* %80, align 8
  %82 = and i32 %81, 16
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %84, label %90

84:                                               ; preds = %79, %69
  %85 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  store i16 0, i16* %85, align 8
  %86 = icmp ne %struct.png_info_def* %1, null
  br i1 %86, label %87, label %89

87:                                               ; preds = %84
  %88 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 6
  store i16 0, i16* %88, align 2
  br label %89

89:                                               ; preds = %87, %84
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10.272, i32 0, i32 0))
  br label %90

90:                                               ; preds = %89, %79
  %magicptr3 = ptrtoint %struct.png_info_def* %1 to i64
  %cond5 = icmp eq i64 %magicptr3, 0
  br i1 %cond5, label %105, label %91

91:                                               ; preds = %90
  %92 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %93 = load i32, i32* %92, align 8
  %94 = and i32 %93, 64
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %91
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11.273, i32 0, i32 0))
  br label %97

97:                                               ; preds = %96, %91
  %98 = icmp ne %struct.png_info_def* %1, null
  br i1 %98, label %99, label %105

99:                                               ; preds = %97
  %100 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %101 = load i32, i32* %100, align 8
  %102 = and i32 %101, 32
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %104, label %105

104:                                              ; preds = %99
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.12.274, i32 0, i32 0))
  br label %105

105:                                              ; preds = %90, %78, %22, %33, %45, %104, %99, %97
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_push_have_info(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 93
  %4 = load void (%struct.png_struct_def*, %struct.png_info_def*)*, void (%struct.png_struct_def*, %struct.png_info_def*)** %3, align 8
  %5 = icmp ne void (%struct.png_struct_def*, %struct.png_info_def*)* %4, null
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 93
  %8 = load void (%struct.png_struct_def*, %struct.png_info_def*)*, void (%struct.png_struct_def*, %struct.png_info_def*)** %7, align 8
  call void %8(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %9

9:                                                ; preds = %6, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_gAMA(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca [4 x i8], align 1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 6
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0))
  br label %29

17:                                               ; preds = %10
  %18 = icmp ne i32 %2, 4
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %29

21:                                               ; preds = %17
  %22 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i32 0, i32 0
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %22, i32 4)
  %23 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i32 0, i32 0
  %27 = call i32 @png_get_fixed_point(%struct.png_struct_def* null, i8* %26)
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  call void @png_colorspace_set_gamma(%struct.png_struct_def* %0, %struct.png_colorspace* %28, i32 %27)
  call void @png_colorspace_sync(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %29

29:                                               ; preds = %21, %25, %19, %15
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_sBIT(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca [4 x i8], align 1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 6
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0))
  br label %113

17:                                               ; preds = %10
  %18 = icmp ne %struct.png_info_def* %1, null
  br i1 %18, label %19, label %26

19:                                               ; preds = %17
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = and i32 %21, 2
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %19
  %25 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8.270, i32 0, i32 0))
  br label %113

26:                                               ; preds = %19, %17
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = icmp eq i32 %29, 3
  br i1 %30, label %37, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 65
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %36 = load i8, i8* %35, align 8
  br label %37

37:                                               ; preds = %26, %31
  %.02 = phi i32 [ %34, %31 ], [ 3, %26 ]
  %.0 = phi i8 [ %36, %31 ], [ 8, %26 ]
  %38 = icmp ne i32 %2, %.02
  %39 = icmp ugt i32 %2, 4
  %or.cond = or i1 %38, %39
  br i1 %or.cond, label %40, label %42

40:                                               ; preds = %37
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  %41 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  br label %113

42:                                               ; preds = %37
  %43 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 3
  store i8 %.0, i8* %43, align 1
  %44 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 2
  store i8 %.0, i8* %44, align 1
  %45 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  store i8 %.0, i8* %45, align 1
  %46 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 0
  store i8 %.0, i8* %46, align 1
  %47 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i32 0, i32 0
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %47, i32 %.02)
  %48 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %113, label %.preheader

.preheader:                                       ; preds = %42
  %50 = zext i8 %.0 to i32
  %51 = icmp ult i32 0, %.02
  br i1 %51, label %.lr.ph, label %67

.lr.ph:                                           ; preds = %.preheader
  %52 = trunc i32 %50 to i8
  br label %54

53:                                               ; preds = %60
  %exitcond = icmp ne i32 %.02, %65
  br i1 %exitcond, label %54, label %._crit_edge

54:                                               ; preds = %.lr.ph, %53
  %.013 = phi i32 [ 0, %.lr.ph ], [ %65, %53 ]
  %55 = zext i32 %.013 to i64
  %56 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %66, label %60

60:                                               ; preds = %54
  %61 = zext i32 %.013 to i64
  %62 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = icmp ugt i8 %63, %52
  %65 = add nsw i32 %.013, 1
  br i1 %64, label %66, label %53

66:                                               ; preds = %60, %54
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %113

._crit_edge:                                      ; preds = %53
  br label %67

67:                                               ; preds = %._crit_edge, %.preheader
  %68 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = and i32 %70, 2
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %73, label %90

73:                                               ; preds = %67
  %74 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 0
  %75 = load i8, i8* %74, align 1
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %77 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %76, i32 0, i32 0
  store i8 %75, i8* %77, align 8
  %78 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  %79 = load i8, i8* %78, align 1
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %81 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %80, i32 0, i32 1
  store i8 %79, i8* %81, align 1
  %82 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 2
  %83 = load i8, i8* %82, align 1
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %85 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %84, i32 0, i32 2
  store i8 %83, i8* %85, align 2
  %86 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 3
  %87 = load i8, i8* %86, align 1
  %88 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %89 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %88, i32 0, i32 4
  store i8 %87, i8* %89, align 4
  br label %111

90:                                               ; preds = %67
  %91 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 0
  %92 = load i8, i8* %91, align 1
  %93 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %94 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %93, i32 0, i32 3
  store i8 %92, i8* %94, align 1
  %95 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 0
  %96 = load i8, i8* %95, align 1
  %97 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %98 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %97, i32 0, i32 0
  store i8 %96, i8* %98, align 8
  %99 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 0
  %100 = load i8, i8* %99, align 1
  %101 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %102 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %101, i32 0, i32 1
  store i8 %100, i8* %102, align 1
  %103 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 0
  %104 = load i8, i8* %103, align 1
  %105 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %106 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %105, i32 0, i32 2
  store i8 %104, i8* %106, align 2
  %107 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  %108 = load i8, i8* %107, align 1
  %109 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %110 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %109, i32 0, i32 4
  store i8 %108, i8* %110, align 4
  br label %111

111:                                              ; preds = %90, %73
  %112 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  call void @png_set_sBIT(%struct.png_struct_def* %0, %struct.png_info_def* %1, %struct.png_color_8_struct* %112)
  br label %113

113:                                              ; preds = %42, %111, %66, %40, %24, %15
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_cHRM(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca [32 x i8], align 16
  %5 = alloca %struct.png_xy, align 4
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, 6
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %11
  %17 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0))
  br label %113

18:                                               ; preds = %11
  %19 = icmp ne i32 %2, 32
  br i1 %19, label %20, label %22

20:                                               ; preds = %18
  %21 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %113

22:                                               ; preds = %18
  %23 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %23, i32 32)
  %24 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %113, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %28 = call i32 @png_get_fixed_point(%struct.png_struct_def* null, i8* %27)
  %29 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 6
  store i32 %28, i32* %29, align 4
  %30 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %31 = getelementptr inbounds i8, i8* %30, i64 4
  %32 = call i32 @png_get_fixed_point(%struct.png_struct_def* null, i8* %31)
  %33 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 7
  store i32 %32, i32* %33, align 4
  %34 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %35 = getelementptr inbounds i8, i8* %34, i64 8
  %36 = call i32 @png_get_fixed_point(%struct.png_struct_def* null, i8* %35)
  %37 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 0
  store i32 %36, i32* %37, align 4
  %38 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %39 = getelementptr inbounds i8, i8* %38, i64 12
  %40 = call i32 @png_get_fixed_point(%struct.png_struct_def* null, i8* %39)
  %41 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 1
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %43 = getelementptr inbounds i8, i8* %42, i64 16
  %44 = call i32 @png_get_fixed_point(%struct.png_struct_def* null, i8* %43)
  %45 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 2
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %47 = getelementptr inbounds i8, i8* %46, i64 20
  %48 = call i32 @png_get_fixed_point(%struct.png_struct_def* null, i8* %47)
  %49 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 3
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %51 = getelementptr inbounds i8, i8* %50, i64 24
  %52 = call i32 @png_get_fixed_point(%struct.png_struct_def* null, i8* %51)
  %53 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 4
  store i32 %52, i32* %53, align 4
  %54 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i32 0, i32 0
  %55 = getelementptr inbounds i8, i8* %54, i64 28
  %56 = call i32 @png_get_fixed_point(%struct.png_struct_def* null, i8* %55)
  %57 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 5
  store i32 %56, i32* %57, align 4
  %58 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 6
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, -1
  %61 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 7
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, -1
  %or.cond = select i1 %60, i1 true, i1 %63
  %64 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 0
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, -1
  %or.cond5 = select i1 %or.cond, i1 true, i1 %66
  %67 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, -1
  %or.cond8 = select i1 %or.cond5, i1 true, i1 %69
  %70 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 2
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, -1
  %or.cond11 = select i1 %or.cond8, i1 true, i1 %72
  %73 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 3
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %74, -1
  %or.cond14 = select i1 %or.cond11, i1 true, i1 %75
  %76 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 4
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, -1
  %or.cond17 = select i1 %or.cond14, i1 true, i1 %78
  %79 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i32 0, i32 5
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, -1
  %or.cond20 = select i1 %or.cond17, i1 true, i1 %81
  br i1 %or.cond20, label %82, label %83

82:                                               ; preds = %26
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13.284, i32 0, i32 0))
  br label %113

83:                                               ; preds = %26
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %85 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %84, i32 0, i32 4
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = and i32 %87, 32768
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %113, label %90

90:                                               ; preds = %83
  %91 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %92 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %91, i32 0, i32 4
  %93 = load i16, i16* %92, align 2
  %94 = zext i16 %93 to i32
  %95 = and i32 %94, 16
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %104

97:                                               ; preds = %90
  %98 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %99 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %98, i32 0, i32 4
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = or i32 %101, 32768
  %103 = trunc i32 %102 to i16
  store i16 %103, i16* %99, align 2
  call void @png_colorspace_sync(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8.270, i32 0, i32 0))
  br label %113

104:                                              ; preds = %90
  %105 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %106 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %105, i32 0, i32 4
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = or i32 %108, 16
  %110 = trunc i32 %109 to i16
  store i16 %110, i16* %106, align 2
  %111 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %112 = call i32 @png_colorspace_set_chromaticities(%struct.png_struct_def* %0, %struct.png_colorspace* %111, %struct.png_xy* %5, i32 1)
  call void @png_colorspace_sync(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %113

113:                                              ; preds = %83, %22, %104, %97, %82, %20, %16
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_sRGB(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca i8, align 1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 6
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0))
  br label %50

17:                                               ; preds = %10
  %18 = icmp ne i32 %2, 1
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %50

21:                                               ; preds = %17
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %4, i32 1)
  %22 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %50, label %24

24:                                               ; preds = %21
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %26 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %25, i32 0, i32 4
  %27 = load i16, i16* %26, align 2
  %28 = zext i16 %27 to i32
  %29 = and i32 %28, 32768
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %50, label %31

31:                                               ; preds = %24
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %33 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %32, i32 0, i32 4
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = and i32 %35, 4
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %31
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %40 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %39, i32 0, i32 4
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = or i32 %42, 32768
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %40, align 2
  call void @png_colorspace_sync(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14.287, i32 0, i32 0))
  br label %50

45:                                               ; preds = %31
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %47 = load i8, i8* %4, align 1
  %48 = zext i8 %47 to i32
  %49 = call i32 @png_colorspace_set_sRGB(%struct.png_struct_def* %0, %struct.png_colorspace* %46, i32 %48)
  call void @png_colorspace_sync(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %50

50:                                               ; preds = %24, %21, %45, %38, %19, %15
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_iCCP(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca i32, align 4
  %5 = alloca [81 x i8], align 16
  %6 = alloca [132 x i8], align 16
  %7 = alloca [1024 x i8], align 16
  %8 = alloca i64, align 8
  store i32 %2, i32* %4, align 4
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %16 = load i32, i32* %15, align 4
  %17 = and i32 %16, 6
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %14
  %20 = load i32, i32* %4, align 4
  %21 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %20)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0))
  br label %283

22:                                               ; preds = %14
  %23 = load i32, i32* %4, align 4
  %24 = icmp ult i32 %23, 14
  br i1 %24, label %25, label %28

25:                                               ; preds = %22
  %26 = load i32, i32* %4, align 4
  %27 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %26)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15.290, i32 0, i32 0))
  br label %283

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %30 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %29, i32 0, i32 4
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = and i32 %32, 32768
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %28
  %36 = load i32, i32* %4, align 4
  %37 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %36)
  br label %283

38:                                               ; preds = %28
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %40 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %39, i32 0, i32 4
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = and i32 %42, 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %269

45:                                               ; preds = %38
  %46 = load i32, i32* %4, align 4
  %47 = icmp ugt i32 81, %46
  %48 = load i32, i32* %4, align 4
  %spec.select = select i1 %47, i32 %48, i32 81
  %49 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i32 0, i32 0
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %49, i32 %spec.select)
  %50 = load i32, i32* %4, align 4
  %51 = sub i32 %50, %spec.select
  store i32 %51, i32* %4, align 4
  %52 = load i32, i32* %4, align 4
  %53 = icmp ult i32 %52, 11
  br i1 %53, label %57, label %.preheader

.preheader:                                       ; preds = %45
  %54 = icmp ult i32 0, %spec.select
  br i1 %54, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %.preheader
  %55 = add i32 %spec.select, -1
  %umin = call i32 @llvm.umin.i32(i32 %55, i32 79)
  %56 = add i32 %umin, 1
  br label %60

57:                                               ; preds = %45
  %58 = load i32, i32* %4, align 4
  %59 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %58)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15.290, i32 0, i32 0))
  br label %283

60:                                               ; preds = %.lr.ph, %66
  %.017 = phi i32 [ 0, %.lr.ph ], [ %67, %66 ]
  %61 = zext i32 %.017 to i64
  %62 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i64 0, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = sext i8 %63 to i32
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %66, label %..critedge_crit_edge18

66:                                               ; preds = %60
  %67 = add nsw i32 %.017, 1
  %exitcond = icmp ne i32 %56, %67
  br i1 %exitcond, label %60, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %66
  br label %.critedge

..critedge_crit_edge18:                           ; preds = %60
  %split19 = phi i32 [ %.017, %60 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge18, %..critedge_crit_edge, %.preheader
  %.0.lcssa = phi i32 [ %56, %..critedge_crit_edge ], [ %split19, %..critedge_crit_edge18 ], [ 0, %.preheader ]
  %68 = icmp uge i32 %.0.lcssa, 1
  %69 = icmp ule i32 %.0.lcssa, 79
  %or.cond16 = and i1 %68, %69
  br i1 %or.cond16, label %70, label %269

70:                                               ; preds = %.critedge
  %71 = add i32 %.0.lcssa, 1
  %72 = icmp ult i32 %71, %spec.select
  br i1 %72, label %73, label %269

73:                                               ; preds = %70
  %74 = add i32 %.0.lcssa, 1
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i64 0, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = sext i8 %77 to i32
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %269

80:                                               ; preds = %73
  %81 = add i32 %.0.lcssa, 2
  %82 = sub i32 %spec.select, %81
  %83 = call i32 @png_inflate_claim(%struct.png_struct_def* %0, i32 1766015824)
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %265

85:                                               ; preds = %80
  %86 = bitcast [132 x i8]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %86, i8 0, i64 132, i1 false)
  store i64 132, i64* %8, align 8
  %87 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i32 0, i32 0
  %88 = add i32 %.0.lcssa, 2
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %87, i64 %89
  %91 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %92 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %91, i32 0, i32 0
  store i8* %90, i8** %92, align 8
  %93 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %94 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %93, i32 0, i32 1
  store i32 %82, i32* %94, align 8
  %95 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i32 0, i32 0
  %96 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i32 0, i32 0
  %97 = call i32 @png_inflate_read(%struct.png_struct_def* %0, i8* %95, i32 1024, i32* %4, i8* %96, i64* %8, i32 0)
  %98 = load i64, i64* %8, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %259

100:                                              ; preds = %85
  %101 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i32 0, i32 0
  %102 = load i8, i8* %101, align 16
  %103 = zext i8 %102 to i32
  %104 = shl i32 %103, 24
  %105 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i32 0, i32 0
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = shl i32 %108, 16
  %110 = add i32 %104, %109
  %111 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i32 0, i32 0
  %112 = getelementptr inbounds i8, i8* %111, i64 2
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = shl i32 %114, 8
  %116 = add i32 %110, %115
  %117 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i32 0, i32 0
  %118 = getelementptr inbounds i8, i8* %117, i64 3
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = add i32 %116, %120
  %122 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %123 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i32 0, i32 0
  %124 = call i32 @png_icc_check_length(%struct.png_struct_def* %0, %struct.png_colorspace* %122, i8* %123, i32 %121)
  %125 = icmp ne i32 %124, 0
  br i1 %125, label %126, label %263

126:                                              ; preds = %100
  %127 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %128 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i32 0, i32 0
  %129 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i32 0, i32 0
  %130 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = call i32 @png_icc_check_header(%struct.png_struct_def* %0, %struct.png_colorspace* %127, i8* %128, i32 %121, i8* %129, i32 %132)
  %134 = icmp ne i32 %133, 0
  br i1 %134, label %135, label %263

135:                                              ; preds = %126
  %136 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i32 0, i32 0
  %137 = getelementptr inbounds i8, i8* %136, i64 128
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = shl i32 %139, 24
  %141 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i32 0, i32 0
  %142 = getelementptr inbounds i8, i8* %141, i64 128
  %143 = getelementptr inbounds i8, i8* %142, i64 1
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = shl i32 %145, 16
  %147 = add i32 %140, %146
  %148 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i32 0, i32 0
  %149 = getelementptr inbounds i8, i8* %148, i64 128
  %150 = getelementptr inbounds i8, i8* %149, i64 2
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = shl i32 %152, 8
  %154 = add i32 %147, %153
  %155 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i32 0, i32 0
  %156 = getelementptr inbounds i8, i8* %155, i64 128
  %157 = getelementptr inbounds i8, i8* %156, i64 3
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = add i32 %154, %159
  %161 = zext i32 %121 to i64
  %162 = call i8* @png_read_buffer(%struct.png_struct_def* %0, i64 %161, i32 2)
  %163 = icmp ne i8* %162, null
  br i1 %163, label %164, label %263

164:                                              ; preds = %135
  %165 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %162, i8* align 16 %165, i64 132, i1 false)
  %166 = mul i32 12, %160
  %167 = zext i32 %166 to i64
  store i64 %167, i64* %8, align 8
  %168 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i32 0, i32 0
  %169 = getelementptr inbounds i8, i8* %162, i64 132
  %170 = call i32 @png_inflate_read(%struct.png_struct_def* %0, i8* %168, i32 1024, i32* %4, i8* %169, i64* %8, i32 0)
  %171 = load i64, i64* %8, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %173, label %255

173:                                              ; preds = %164
  %174 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %175 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i32 0, i32 0
  %176 = call i32 @png_icc_check_tag_table(%struct.png_struct_def* %0, %struct.png_colorspace* %174, i8* %175, i32 %121, i8* %162)
  %177 = icmp ne i32 %176, 0
  br i1 %177, label %178, label %263

178:                                              ; preds = %173
  %179 = zext i32 %121 to i64
  %180 = sub i64 %179, 132
  %181 = mul i32 12, %160
  %182 = zext i32 %181 to i64
  %183 = sub i64 %180, %182
  store i64 %183, i64* %8, align 8
  %184 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i32 0, i32 0
  %185 = getelementptr inbounds i8, i8* %162, i64 132
  %186 = mul i32 12, %160
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds i8, i8* %185, i64 %187
  %189 = call i32 @png_inflate_read(%struct.png_struct_def* %0, i8* %184, i32 1024, i32* %4, i8* %188, i64* %8, i32 1)
  %190 = load i32, i32* %4, align 4
  %191 = icmp ugt i32 %190, 0
  br i1 %191, label %192, label %197

192:                                              ; preds = %178
  %193 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %194 = load i32, i32* %193, align 8
  %195 = and i32 %194, 1048576
  %196 = icmp ne i32 %195, 0
  br i1 %196, label %197, label %249

197:                                              ; preds = %192, %178
  %198 = load i64, i64* %8, align 8
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %249

200:                                              ; preds = %197
  %201 = load i32, i32* %4, align 4
  %202 = icmp ugt i32 %201, 0
  br i1 %202, label %203, label %204

203:                                              ; preds = %200
  call void @png_chunk_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16.291, i32 0, i32 0))
  br label %204

204:                                              ; preds = %203, %200
  %205 = load i32, i32* %4, align 4
  %206 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %205)
  %207 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %208 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %209 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %208, i32 0, i32 12
  %210 = load i64, i64* %209, align 8
  call void @png_icc_set_sRGB(%struct.png_struct_def* %0, %struct.png_colorspace* %207, i8* %162, i64 %210)
  %211 = icmp ne %struct.png_info_def* %1, null
  br i1 %211, label %212, label %242

212:                                              ; preds = %204
  call void @png_free_data(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 16, i32 0)
  %213 = add i32 %.0.lcssa, 1
  %214 = zext i32 %213 to i64
  %215 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_base to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %214)
  %216 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 17
  store i8* %215, i8** %216, align 8
  %217 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 17
  %218 = load i8*, i8** %217, align 8
  %219 = icmp ne i8* %218, null
  br i1 %219, label %220, label %235

220:                                              ; preds = %212
  %221 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 17
  %222 = load i8*, i8** %221, align 8
  %223 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i32 0, i32 0
  %224 = add i32 %.0.lcssa, 1
  %225 = zext i32 %224 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %222, i8* align 16 %223, i64 %225, i1 false)
  %226 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 19
  store i32 %121, i32* %226, align 8
  %227 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 18
  store i8* %162, i8** %227, align 8
  %228 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  store i8* null, i8** %228, align 8
  %229 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %230 = load i32, i32* %229, align 4
  %231 = or i32 %230, 16
  store i32 %231, i32* %229, align 4
  %232 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %233 = load i32, i32* %232, align 8
  %234 = or i32 %233, 4096
  store i32 %234, i32* %232, align 8
  br label %242

235:                                              ; preds = %212
  %236 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %237 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %236, i32 0, i32 4
  %238 = load i16, i16* %237, align 2
  %239 = zext i16 %238 to i32
  %240 = or i32 %239, 32768
  %241 = trunc i32 %240 to i16
  store i16 %241, i16* %237, align 2
  br label %242

242:                                              ; preds = %220, %235, %204
  %.1 = phi i8* [ null, %204 ], [ null, %220 ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17.292, i32 0, i32 0), %235 ]
  %243 = icmp ne %struct.png_info_def* %1, null
  br i1 %243, label %244, label %245

244:                                              ; preds = %242
  call void @png_colorspace_sync(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %245

245:                                              ; preds = %244, %242
  %246 = icmp eq i8* %.1, null
  br i1 %246, label %247, label %249

247:                                              ; preds = %245
  %248 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  store i32 0, i32* %248, align 8
  br label %283

249:                                              ; preds = %197, %245, %192
  %.15 = phi i32 [ 0, %192 ], [ 0, %197 ], [ 1, %245 ]
  %.3 = phi i8* [ getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16.291, i32 0, i32 0), %192 ], [ null, %197 ], [ %.1, %245 ]
  %250 = icmp eq i8* %.3, null
  br i1 %250, label %251, label %263

251:                                              ; preds = %249
  %252 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %253 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %252, i32 0, i32 6
  %254 = load i8*, i8** %253, align 8
  br label %263

255:                                              ; preds = %164
  %256 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %257 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %256, i32 0, i32 6
  %258 = load i8*, i8** %257, align 8
  br label %263

259:                                              ; preds = %85
  %260 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %261 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %260, i32 0, i32 6
  %262 = load i8*, i8** %261, align 8
  br label %263

263:                                              ; preds = %100, %173, %251, %249, %255, %135, %126, %259
  %.711 = phi i32 [ 0, %259 ], [ 0, %100 ], [ 0, %126 ], [ 0, %255 ], [ 0, %173 ], [ %.15, %251 ], [ %.15, %249 ], [ 0, %135 ]
  %.10 = phi i8* [ %262, %259 ], [ null, %100 ], [ null, %126 ], [ %258, %255 ], [ null, %173 ], [ %254, %251 ], [ %.3, %249 ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17.292, i32 0, i32 0), %135 ]
  %264 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  store i32 0, i32* %264, align 8
  br label %269

265:                                              ; preds = %80
  %266 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %267 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %266, i32 0, i32 6
  %268 = load i8*, i8** %267, align 8
  br label %269

269:                                              ; preds = %38, %70, %73, %263, %265, %.critedge
  %.1115 = phi i32 [ %.711, %263 ], [ 0, %265 ], [ 0, %73 ], [ 0, %70 ], [ 0, %.critedge ], [ 0, %38 ]
  %.14 = phi i8* [ %.10, %263 ], [ %268, %265 ], [ getelementptr inbounds ([23 x i8], [23 x i8]* @.str.18.293, i32 0, i32 0), %73 ], [ getelementptr inbounds ([23 x i8], [23 x i8]* @.str.18.293, i32 0, i32 0), %70 ], [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.19.294, i32 0, i32 0), %.critedge ], [ getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14.287, i32 0, i32 0), %38 ]
  %270 = icmp eq i32 %.1115, 0
  br i1 %270, label %271, label %274

271:                                              ; preds = %269
  %272 = load i32, i32* %4, align 4
  %273 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %272)
  br label %274

274:                                              ; preds = %271, %269
  %275 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %276 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %275, i32 0, i32 4
  %277 = load i16, i16* %276, align 2
  %278 = zext i16 %277 to i32
  %279 = or i32 %278, 32768
  %280 = trunc i32 %279 to i16
  store i16 %280, i16* %276, align 2
  call void @png_colorspace_sync(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  %281 = icmp ne i8* %.14, null
  br i1 %281, label %282, label %283

282:                                              ; preds = %274
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* %.14)
  br label %283

283:                                              ; preds = %19, %25, %35, %57, %247, %282, %274
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_sPLT(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca %struct.png_sPLT_struct, align 8
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  %6 = load i32, i32* %5, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %21

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %14

12:                                               ; preds = %8
  %13 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  br label %174

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  %16 = load i32, i32* %15, align 4
  %17 = add i32 %16, -1
  store i32 %17, i32* %15, align 4
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %21

19:                                               ; preds = %14
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.20.301, i32 0, i32 0))
  %20 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  br label %174

21:                                               ; preds = %14, %3
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %23 = load i32, i32* %22, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %21
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, 4
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %27
  %33 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0))
  br label %174

34:                                               ; preds = %27
  %35 = add i32 %2, 1
  %36 = zext i32 %35 to i64
  %37 = call i8* @png_read_buffer(%struct.png_struct_def* %0, i64 %36, i32 2)
  %38 = icmp eq i8* %37, null
  br i1 %38, label %39, label %41

39:                                               ; preds = %34
  %40 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17.292, i32 0, i32 0))
  br label %174

41:                                               ; preds = %34
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %37, i32 %2)
  %42 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %174, label %44

44:                                               ; preds = %41
  %45 = zext i32 %2 to i64
  %46 = getelementptr inbounds i8, i8* %37, i64 %45
  store i8 0, i8* %46, align 1
  %scevgep32 = getelementptr i8, i8* %37, i64 -1
  br label %47

47:                                               ; preds = %47, %44
  %lsr.iv33 = phi i8* [ %scevgep34, %47 ], [ %scevgep32, %44 ]
  %scevgep35 = getelementptr i8, i8* %lsr.iv33, i64 1
  %48 = load i8, i8* %scevgep35, align 1
  %49 = icmp ne i8 %48, 0
  %scevgep34 = getelementptr i8, i8* %lsr.iv33, i64 1
  br i1 %49, label %47, label %50

50:                                               ; preds = %47
  %.01.lcssa = phi i8* [ %scevgep34, %47 ]
  %51 = getelementptr inbounds i8, i8* %.01.lcssa, i32 1
  %52 = icmp ult i32 %2, 2
  %53 = sub i32 %2, 2
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %37, i64 %54
  %56 = icmp ugt i8* %51, %55
  %or.cond = select i1 %52, i1 true, i1 %56
  br i1 %or.cond, label %57, label %58

57:                                               ; preds = %50
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21.302, i32 0, i32 0))
  br label %174

58:                                               ; preds = %50
  %59 = getelementptr inbounds i8, i8* %51, i32 1
  %60 = load i8, i8* %51, align 1
  %61 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %4, i32 0, i32 1
  store i8 %60, i8* %61, align 8
  %62 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %4, i32 0, i32 1
  %63 = load i8, i8* %62, align 8
  %64 = zext i8 %63 to i32
  %65 = icmp eq i32 %64, 8
  %66 = zext i1 %65 to i64
  %67 = select i1 %65, i32 6, i32 10
  %68 = ptrtoint i8* %59 to i64
  %69 = ptrtoint i8* %37 to i64
  %70 = sub i64 %68, %69
  %71 = trunc i64 %70 to i32
  %72 = sub i32 %2, %71
  %73 = urem i32 %72, %67
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %58
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.22.303, i32 0, i32 0))
  br label %174

76:                                               ; preds = %58
  %77 = udiv i32 %72, %67
  %78 = zext i32 %77 to i64
  %79 = icmp ugt i64 %78, 1844674407370955161
  br i1 %79, label %80, label %81

80:                                               ; preds = %76
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.23.304, i32 0, i32 0))
  br label %174

81:                                               ; preds = %76
  %82 = udiv i32 %72, %67
  %83 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %4, i32 0, i32 3
  store i32 %82, i32* %83, align 8
  %84 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %4, i32 0, i32 3
  %85 = load i32, i32* %84, align 8
  %86 = sext i32 %85 to i64
  %87 = mul i64 %86, 10
  %88 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %87)
  %89 = bitcast i8* %88 to %struct.png_sPLT_entry_struct*
  %90 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %4, i32 0, i32 2
  store %struct.png_sPLT_entry_struct* %89, %struct.png_sPLT_entry_struct** %90, align 8
  %91 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %4, i32 0, i32 2
  %92 = load %struct.png_sPLT_entry_struct*, %struct.png_sPLT_entry_struct** %91, align 8
  %93 = icmp eq %struct.png_sPLT_entry_struct* %92, null
  br i1 %93, label %99, label %.preheader

.preheader:                                       ; preds = %81
  %94 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %4, i32 0, i32 3
  %95 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %4, i32 0, i32 2
  %96 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %4, i32 0, i32 1
  %97 = load i32, i32* %94, align 8
  %98 = icmp slt i32 0, %97
  br i1 %98, label %.lr.ph, label %169

.lr.ph:                                           ; preds = %.preheader
  br label %100

99:                                               ; preds = %81
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.24.305, i32 0, i32 0))
  br label %174

100:                                              ; preds = %.lr.ph, %156
  %lsr.iv = phi i64 [ 8, %.lr.ph ], [ %lsr.iv.next, %156 ]
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %156 ]
  %.15 = phi i8* [ %59, %.lr.ph ], [ %165, %156 ]
  %101 = load %struct.png_sPLT_entry_struct*, %struct.png_sPLT_entry_struct** %95, align 8
  %102 = bitcast %struct.png_sPLT_entry_struct* %101 to i8*
  %103 = load i8, i8* %96, align 8
  %104 = zext i8 %103 to i32
  %105 = icmp eq i32 %104, 8
  br i1 %105, label %106, label %119

106:                                              ; preds = %100
  %107 = getelementptr inbounds i8, i8* %.15, i32 1
  %108 = load i8, i8* %.15, align 1
  %109 = zext i8 %108 to i16
  %uglygep = getelementptr i8, i8* %102, i64 %lsr.iv
  %uglygep8 = bitcast i8* %uglygep to i16*
  %scevgep = getelementptr i16, i16* %uglygep8, i64 -4
  store i16 %109, i16* %scevgep, align 2
  %110 = getelementptr inbounds i8, i8* %107, i32 1
  %111 = load i8, i8* %107, align 1
  %112 = zext i8 %111 to i16
  %uglygep9 = getelementptr i8, i8* %102, i64 %lsr.iv
  %uglygep910 = bitcast i8* %uglygep9 to i16*
  %scevgep11 = getelementptr i16, i16* %uglygep910, i64 -3
  store i16 %112, i16* %scevgep11, align 2
  %113 = getelementptr inbounds i8, i8* %110, i32 1
  %114 = load i8, i8* %110, align 1
  %115 = zext i8 %114 to i16
  %uglygep12 = getelementptr i8, i8* %102, i64 %lsr.iv
  %uglygep1213 = bitcast i8* %uglygep12 to i16*
  %scevgep14 = getelementptr i16, i16* %uglygep1213, i64 -2
  store i16 %115, i16* %scevgep14, align 2
  %116 = getelementptr inbounds i8, i8* %113, i32 1
  %117 = load i8, i8* %113, align 1
  %118 = zext i8 %117 to i16
  %uglygep15 = getelementptr i8, i8* %102, i64 %lsr.iv
  %uglygep1516 = bitcast i8* %uglygep15 to i16*
  %scevgep17 = getelementptr i16, i16* %uglygep1516, i64 -1
  store i16 %118, i16* %scevgep17, align 2
  br label %156

119:                                              ; preds = %100
  %120 = load i8, i8* %.15, align 1
  %121 = zext i8 %120 to i32
  %122 = shl i32 %121, 8
  %123 = getelementptr inbounds i8, i8* %.15, i64 1
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = add i32 %122, %125
  %127 = trunc i32 %126 to i16
  %uglygep18 = getelementptr i8, i8* %102, i64 %lsr.iv
  %uglygep1819 = bitcast i8* %uglygep18 to i16*
  %scevgep20 = getelementptr i16, i16* %uglygep1819, i64 -4
  store i16 %127, i16* %scevgep20, align 2
  %128 = getelementptr inbounds i8, i8* %.15, i64 2
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = shl i32 %130, 8
  %132 = getelementptr inbounds i8, i8* %128, i64 1
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = add i32 %131, %134
  %136 = trunc i32 %135 to i16
  %uglygep21 = getelementptr i8, i8* %102, i64 %lsr.iv
  %uglygep2122 = bitcast i8* %uglygep21 to i16*
  %scevgep23 = getelementptr i16, i16* %uglygep2122, i64 -3
  store i16 %136, i16* %scevgep23, align 2
  %137 = getelementptr inbounds i8, i8* %128, i64 2
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = shl i32 %139, 8
  %141 = getelementptr inbounds i8, i8* %137, i64 1
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = add i32 %140, %143
  %145 = trunc i32 %144 to i16
  %uglygep24 = getelementptr i8, i8* %102, i64 %lsr.iv
  %uglygep2425 = bitcast i8* %uglygep24 to i16*
  %scevgep26 = getelementptr i16, i16* %uglygep2425, i64 -2
  store i16 %145, i16* %scevgep26, align 2
  %146 = getelementptr inbounds i8, i8* %137, i64 2
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = shl i32 %148, 8
  %150 = getelementptr inbounds i8, i8* %146, i64 1
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = add i32 %149, %152
  %154 = trunc i32 %153 to i16
  %uglygep27 = getelementptr i8, i8* %102, i64 %lsr.iv
  %uglygep2728 = bitcast i8* %uglygep27 to i16*
  %scevgep29 = getelementptr i16, i16* %uglygep2728, i64 -1
  store i16 %154, i16* %scevgep29, align 2
  %155 = getelementptr inbounds i8, i8* %146, i64 2
  br label %156

156:                                              ; preds = %119, %106
  %.2 = phi i8* [ %116, %106 ], [ %155, %119 ]
  %157 = load i8, i8* %.2, align 1
  %158 = zext i8 %157 to i32
  %159 = shl i32 %158, 8
  %160 = getelementptr inbounds i8, i8* %.2, i64 1
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  %163 = add i32 %159, %162
  %164 = trunc i32 %163 to i16
  %uglygep30 = getelementptr i8, i8* %102, i64 %lsr.iv
  %uglygep3031 = bitcast i8* %uglygep30 to i16*
  store i16 %164, i16* %uglygep3031, align 2
  %165 = getelementptr inbounds i8, i8* %.2, i64 2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %166 = load i32, i32* %94, align 8
  %167 = sext i32 %166 to i64
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 10
  %168 = icmp slt i64 %indvars.iv.next, %167
  br i1 %168, label %100, label %._crit_edge

._crit_edge:                                      ; preds = %156
  br label %169

169:                                              ; preds = %._crit_edge, %.preheader
  %170 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %4, i32 0, i32 0
  store i8* %37, i8** %170, align 8
  call void @png_set_sPLT(%struct.png_struct_def* %0, %struct.png_info_def* %1, %struct.png_sPLT_struct* %4, i32 1)
  %171 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %4, i32 0, i32 2
  %172 = load %struct.png_sPLT_entry_struct*, %struct.png_sPLT_entry_struct** %171, align 8
  %173 = bitcast %struct.png_sPLT_entry_struct* %172 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %173)
  br label %174

174:                                              ; preds = %41, %169, %99, %80, %75, %57, %39, %32, %19, %12
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_tRNS(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca [256 x i8], align 16
  %5 = alloca [2 x i8], align 1
  %6 = alloca [6 x i8], align 1
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 4
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %12
  %18 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0))
  br label %142

19:                                               ; preds = %12
  %20 = icmp ne %struct.png_info_def* %1, null
  br i1 %20, label %21, label %28

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 16
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %21
  %27 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8.270, i32 0, i32 0))
  br label %142

28:                                               ; preds = %21, %19
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %52

33:                                               ; preds = %28
  %34 = icmp ne i32 %2, 2
  br i1 %34, label %35, label %37

35:                                               ; preds = %33
  %36 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %142

37:                                               ; preds = %33
  %38 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i32 0, i32 0
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %38, i32 2)
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  store i16 1, i16* %39, align 8
  %40 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i32 0, i32 0
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = shl i32 %42, 8
  %44 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i32 0, i32 0
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = add i32 %43, %47
  %49 = trunc i32 %48 to i16
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 90
  %51 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %50, i32 0, i32 4
  store i16 %49, i16* %51, align 8
  br label %131

52:                                               ; preds = %28
  %53 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = icmp eq i32 %55, 2
  br i1 %56, label %57, label %104

57:                                               ; preds = %52
  %58 = icmp ne i32 %2, 6
  br i1 %58, label %59, label %61

59:                                               ; preds = %57
  %60 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %142

61:                                               ; preds = %57
  %62 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %62, i32 %2)
  %63 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  store i16 1, i16* %63, align 8
  %64 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = shl i32 %66, 8
  %68 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %69 = getelementptr inbounds i8, i8* %68, i64 1
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = add i32 %67, %71
  %73 = trunc i32 %72 to i16
  %74 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 90
  %75 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %74, i32 0, i32 1
  store i16 %73, i16* %75, align 2
  %76 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %77 = getelementptr inbounds i8, i8* %76, i64 2
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = shl i32 %79, 8
  %81 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %82 = getelementptr inbounds i8, i8* %81, i64 2
  %83 = getelementptr inbounds i8, i8* %82, i64 1
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = add i32 %80, %85
  %87 = trunc i32 %86 to i16
  %88 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 90
  %89 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %88, i32 0, i32 2
  store i16 %87, i16* %89, align 4
  %90 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %91 = getelementptr inbounds i8, i8* %90, i64 4
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = shl i32 %93, 8
  %95 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %96 = getelementptr inbounds i8, i8* %95, i64 4
  %97 = getelementptr inbounds i8, i8* %96, i64 1
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = add i32 %94, %99
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 90
  %103 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %102, i32 0, i32 3
  store i16 %101, i16* %103, align 2
  br label %131

104:                                              ; preds = %52
  %105 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = icmp eq i32 %107, 3
  br i1 %108, label %109, label %129

109:                                              ; preds = %104
  %110 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %111 = load i32, i32* %110, align 4
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %116

114:                                              ; preds = %109
  %115 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0))
  br label %142

116:                                              ; preds = %109
  %117 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 53
  %118 = load i16, i16* %117, align 8
  %119 = zext i16 %118 to i32
  %120 = icmp ugt i32 %2, %119
  %121 = icmp ugt i32 %2, 256
  %or.cond = or i1 %120, %121
  %122 = icmp eq i32 %2, 0
  %or.cond1 = or i1 %or.cond, %122
  br i1 %or.cond1, label %123, label %125

123:                                              ; preds = %116
  %124 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %142

125:                                              ; preds = %116
  %126 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i32 0, i32 0
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %126, i32 %2)
  %127 = trunc i32 %2 to i16
  %128 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  store i16 %127, i16* %128, align 8
  br label %131

129:                                              ; preds = %104
  %130 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.25.308, i32 0, i32 0))
  br label %142

131:                                              ; preds = %61, %125, %37
  %132 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %133 = icmp ne i32 %132, 0
  br i1 %133, label %134, label %136

134:                                              ; preds = %131
  %135 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  store i16 0, i16* %135, align 8
  br label %142

136:                                              ; preds = %131
  %137 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i32 0, i32 0
  %138 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %139 = load i16, i16* %138, align 8
  %140 = zext i16 %139 to i32
  %141 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 90
  call void @png_set_tRNS(%struct.png_struct_def* %0, %struct.png_info_def* %1, i8* %137, i32 %140, %struct.png_color_16_struct* %141)
  br label %142

142:                                              ; preds = %136, %134, %129, %123, %114, %59, %35, %26, %17
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_bKGD(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca [6 x i8], align 1
  %5 = alloca %struct.png_color_16_struct, align 2
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %26, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = icmp eq i32 %19, 3
  br i1 %20, label %21, label %28

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %23 = load i32, i32* %22, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %21, %11
  %27 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0))
  br label %219

28:                                               ; preds = %21, %16
  %29 = icmp ne %struct.png_info_def* %1, null
  br i1 %29, label %30, label %37

30:                                               ; preds = %28
  %31 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %32 = load i32, i32* %31, align 8
  %33 = and i32 %32, 32
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  %36 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8.270, i32 0, i32 0))
  br label %219

37:                                               ; preds = %30, %28
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = icmp eq i32 %40, 3
  br i1 %41, label %48, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = and i32 %45, 2
  %47 = icmp ne i32 %46, 0
  %. = select i1 %47, i32 6, i32 2
  br label %48

48:                                               ; preds = %37, %42
  %.1 = phi i32 [ %., %42 ], [ 1, %37 ]
  %49 = icmp ne i32 %2, %.1
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %219

52:                                               ; preds = %48
  %53 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %53, i32 %.1)
  %54 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %219, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = icmp eq i32 %59, 3
  br i1 %60, label %61, label %117

61:                                               ; preds = %56
  %62 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 0
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 0
  store i8 %63, i8* %64, align 2
  %65 = icmp ne %struct.png_info_def* %1, null
  br i1 %65, label %66, label %111

66:                                               ; preds = %61
  %67 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 5
  %68 = load i16, i16* %67, align 8
  %69 = zext i16 %68 to i32
  %70 = icmp ne i32 %69, 0
  br i1 %70, label %71, label %111

71:                                               ; preds = %66
  %72 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 0
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 5
  %76 = load i16, i16* %75, align 8
  %77 = zext i16 %76 to i32
  %78 = icmp sge i32 %74, %77
  br i1 %78, label %79, label %80

79:                                               ; preds = %71
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26.311, i32 0, i32 0))
  br label %219

80:                                               ; preds = %71
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %82 = load %struct.png_color_struct*, %struct.png_color_struct** %81, align 8
  %83 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 0
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i64
  %86 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %82, i64 %85
  %87 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %86, i32 0, i32 0
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i16
  %90 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 1
  store i16 %89, i16* %90, align 2
  %91 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %92 = load %struct.png_color_struct*, %struct.png_color_struct** %91, align 8
  %93 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 0
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i64
  %96 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %92, i64 %95
  %97 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %96, i32 0, i32 1
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i16
  %100 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 2
  store i16 %99, i16* %100, align 2
  %101 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %102 = load %struct.png_color_struct*, %struct.png_color_struct** %101, align 8
  %103 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 0
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i64
  %106 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %102, i64 %105
  %107 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %106, i32 0, i32 2
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i16
  %110 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 3
  store i16 %109, i16* %110, align 2
  br label %115

111:                                              ; preds = %66, %61
  %112 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 3
  store i16 0, i16* %112, align 2
  %113 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 2
  store i16 0, i16* %113, align 2
  %114 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 1
  store i16 0, i16* %114, align 2
  br label %115

115:                                              ; preds = %111, %80
  %116 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 4
  store i16 0, i16* %116, align 2
  br label %218

117:                                              ; preds = %56
  %118 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = and i32 %120, 2
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %159

123:                                              ; preds = %117
  %124 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %125 = load i8, i8* %124, align 8
  %126 = zext i8 %125 to i32
  %127 = icmp sle i32 %126, 8
  br i1 %127, label %128, label %143

128:                                              ; preds = %123
  %129 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 0
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %142, label %133

133:                                              ; preds = %128
  %134 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 1
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %138 = load i8, i8* %137, align 8
  %139 = zext i8 %138 to i32
  %140 = shl i32 1, %139
  %141 = icmp uge i32 %136, %140
  br i1 %141, label %142, label %143

142:                                              ; preds = %133, %128
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.27.312, i32 0, i32 0))
  br label %219

143:                                              ; preds = %133, %123
  %144 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 0
  store i8 0, i8* %144, align 2
  %145 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = shl i32 %147, 8
  %149 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %150 = getelementptr inbounds i8, i8* %149, i64 1
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = add i32 %148, %152
  %154 = trunc i32 %153 to i16
  %155 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 4
  store i16 %154, i16* %155, align 2
  %156 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 3
  store i16 %154, i16* %156, align 2
  %157 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 2
  store i16 %154, i16* %157, align 2
  %158 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 1
  store i16 %154, i16* %158, align 2
  br label %218

159:                                              ; preds = %117
  %160 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %161 = load i8, i8* %160, align 8
  %162 = zext i8 %161 to i32
  %163 = icmp sle i32 %162, 8
  br i1 %163, label %164, label %178

164:                                              ; preds = %159
  %165 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 0
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = icmp ne i32 %167, 0
  %169 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 2
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = icmp ne i32 %171, 0
  %or.cond = select i1 %168, i1 true, i1 %172
  %173 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 4
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = icmp ne i32 %175, 0
  %or.cond7 = select i1 %or.cond, i1 true, i1 %176
  br i1 %or.cond7, label %177, label %178

177:                                              ; preds = %164
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28.313, i32 0, i32 0))
  br label %219

178:                                              ; preds = %164, %159
  %179 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 0
  store i8 0, i8* %179, align 2
  %180 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = shl i32 %182, 8
  %184 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %185 = getelementptr inbounds i8, i8* %184, i64 1
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i32
  %188 = add i32 %183, %187
  %189 = trunc i32 %188 to i16
  %190 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 1
  store i16 %189, i16* %190, align 2
  %191 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %192 = getelementptr inbounds i8, i8* %191, i64 2
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i32
  %195 = shl i32 %194, 8
  %196 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %197 = getelementptr inbounds i8, i8* %196, i64 2
  %198 = getelementptr inbounds i8, i8* %197, i64 1
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = add i32 %195, %200
  %202 = trunc i32 %201 to i16
  %203 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 2
  store i16 %202, i16* %203, align 2
  %204 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %205 = getelementptr inbounds i8, i8* %204, i64 4
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = shl i32 %207, 8
  %209 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %210 = getelementptr inbounds i8, i8* %209, i64 4
  %211 = getelementptr inbounds i8, i8* %210, i64 1
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = add i32 %208, %213
  %215 = trunc i32 %214 to i16
  %216 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 3
  store i16 %215, i16* %216, align 2
  %217 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 4
  store i16 0, i16* %217, align 2
  br label %218

218:                                              ; preds = %143, %178, %115
  call void @png_set_bKGD(%struct.png_struct_def* %0, %struct.png_info_def* %1, %struct.png_color_16_struct* %5)
  br label %219

219:                                              ; preds = %52, %218, %177, %142, %79, %50, %35, %26
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_hIST(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca [256 x i16], align 16
  %5 = alloca [2 x i8], align 1
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %18 = load i32, i32* %17, align 4
  %19 = and i32 %18, 2
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %16, %11
  %22 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0))
  br label %59

23:                                               ; preds = %16
  %24 = icmp ne %struct.png_info_def* %1, null
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %27, 64
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %25
  %31 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8.270, i32 0, i32 0))
  br label %59

32:                                               ; preds = %25, %23
  %33 = udiv i32 %2, 2
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 53
  %35 = load i16, i16* %34, align 8
  %36 = zext i16 %35 to i32
  %37 = icmp ne i32 %33, %36
  %38 = icmp ugt i32 %33, 256
  %or.cond = or i1 %37, %38
  br i1 %or.cond, label %44, label %.preheader

.preheader:                                       ; preds = %32
  %39 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i32 0, i32 0
  %40 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i32 0, i32 0
  %41 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i32 0, i32 0
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  %43 = icmp ult i32 0, %33
  br i1 %43, label %.lr.ph, label %54

.lr.ph:                                           ; preds = %.preheader
  %wide.trip.count = zext i32 %33 to i64
  br label %46

44:                                               ; preds = %32
  %45 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %59

46:                                               ; preds = %.lr.ph, %46
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %46 ]
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %39, i32 2)
  %47 = load i8, i8* %40, align 1
  %48 = zext i8 %47 to i32
  %49 = shl i32 %48, 8
  %50 = load i8, i8* %42, align 1
  %51 = zext i8 %50 to i32
  %52 = add i32 %49, %51
  %53 = trunc i32 %52 to i16
  %scevgep = getelementptr [256 x i16], [256 x i16]* %4, i64 0, i64 %indvars.iv
  store i16 %53, i16* %scevgep, align 2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %wide.trip.count, %indvars.iv.next
  br i1 %exitcond, label %46, label %._crit_edge

._crit_edge:                                      ; preds = %46
  br label %54

54:                                               ; preds = %._crit_edge, %.preheader
  %55 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %59, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds [256 x i16], [256 x i16]* %4, i32 0, i32 0
  call void @png_set_hIST(%struct.png_struct_def* %0, %struct.png_info_def* %1, i16* %58)
  br label %59

59:                                               ; preds = %54, %57, %44, %30, %21
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_pHYs(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca [9 x i8], align 1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0))
  br label %84

17:                                               ; preds = %10
  %18 = icmp ne %struct.png_info_def* %1, null
  br i1 %18, label %19, label %26

19:                                               ; preds = %17
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = and i32 %21, 128
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %19
  %25 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8.270, i32 0, i32 0))
  br label %84

26:                                               ; preds = %19, %17
  %27 = icmp ne i32 %2, 9
  br i1 %27, label %28, label %30

28:                                               ; preds = %26
  %29 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %84

30:                                               ; preds = %26
  %31 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %31, i32 9)
  %32 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %84, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = shl i32 %37, 24
  %39 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = shl i32 %42, 16
  %44 = add i32 %38, %43
  %45 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %46 = getelementptr inbounds i8, i8* %45, i64 2
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = shl i32 %48, 8
  %50 = add i32 %44, %49
  %51 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %52 = getelementptr inbounds i8, i8* %51, i64 3
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = add i32 %50, %54
  %56 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %57 = getelementptr inbounds i8, i8* %56, i64 4
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = shl i32 %59, 24
  %61 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %62 = getelementptr inbounds i8, i8* %61, i64 4
  %63 = getelementptr inbounds i8, i8* %62, i64 1
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = shl i32 %65, 16
  %67 = add i32 %60, %66
  %68 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %69 = getelementptr inbounds i8, i8* %68, i64 4
  %70 = getelementptr inbounds i8, i8* %69, i64 2
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = shl i32 %72, 8
  %74 = add i32 %67, %73
  %75 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %76 = getelementptr inbounds i8, i8* %75, i64 4
  %77 = getelementptr inbounds i8, i8* %76, i64 3
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = add i32 %74, %79
  %81 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 8
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  call void @png_set_pHYs(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %55, i32 %80, i32 %83)
  br label %84

84:                                               ; preds = %30, %34, %28, %24, %15
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_oFFs(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca [9 x i8], align 1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0))
  br label %157

17:                                               ; preds = %10
  %18 = icmp ne %struct.png_info_def* %1, null
  br i1 %18, label %19, label %26

19:                                               ; preds = %17
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = and i32 %21, 256
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %19
  %25 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8.270, i32 0, i32 0))
  br label %157

26:                                               ; preds = %19, %17
  %27 = icmp ne i32 %2, 9
  br i1 %27, label %28, label %30

28:                                               ; preds = %26
  %29 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %157

30:                                               ; preds = %26
  %31 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %31, i32 9)
  %32 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %157, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = and i32 %37, 128
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %66

40:                                               ; preds = %34
  %41 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl i32 %43, 24
  %45 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = shl i32 %48, 16
  %50 = add i32 %44, %49
  %51 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %52 = getelementptr inbounds i8, i8* %51, i64 2
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = shl i32 %54, 8
  %56 = add i32 %50, %55
  %57 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %58 = getelementptr inbounds i8, i8* %57, i64 3
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = add i32 %56, %60
  %62 = xor i32 %61, -1
  %63 = add i32 %62, 1
  %64 = and i32 %63, 2147483647
  %65 = sub nsw i32 0, %64
  br label %88

66:                                               ; preds = %34
  %67 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = shl i32 %69, 24
  %71 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %72 = getelementptr inbounds i8, i8* %71, i64 1
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = shl i32 %74, 16
  %76 = add i32 %70, %75
  %77 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %78 = getelementptr inbounds i8, i8* %77, i64 2
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = shl i32 %80, 8
  %82 = add i32 %76, %81
  %83 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %84 = getelementptr inbounds i8, i8* %83, i64 3
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = add i32 %82, %86
  br label %88

88:                                               ; preds = %66, %40
  %89 = phi i32 [ %65, %40 ], [ %87, %66 ]
  %90 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %91 = getelementptr inbounds i8, i8* %90, i64 4
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = and i32 %93, 128
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %96, label %126

96:                                               ; preds = %88
  %97 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %98 = getelementptr inbounds i8, i8* %97, i64 4
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = shl i32 %100, 24
  %102 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %103 = getelementptr inbounds i8, i8* %102, i64 4
  %104 = getelementptr inbounds i8, i8* %103, i64 1
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = shl i32 %106, 16
  %108 = add i32 %101, %107
  %109 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %110 = getelementptr inbounds i8, i8* %109, i64 4
  %111 = getelementptr inbounds i8, i8* %110, i64 2
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = shl i32 %113, 8
  %115 = add i32 %108, %114
  %116 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %117 = getelementptr inbounds i8, i8* %116, i64 4
  %118 = getelementptr inbounds i8, i8* %117, i64 3
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = add i32 %115, %120
  %122 = xor i32 %121, -1
  %123 = add i32 %122, 1
  %124 = and i32 %123, 2147483647
  %125 = sub nsw i32 0, %124
  br label %152

126:                                              ; preds = %88
  %127 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %128 = getelementptr inbounds i8, i8* %127, i64 4
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = shl i32 %130, 24
  %132 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %133 = getelementptr inbounds i8, i8* %132, i64 4
  %134 = getelementptr inbounds i8, i8* %133, i64 1
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = shl i32 %136, 16
  %138 = add i32 %131, %137
  %139 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %140 = getelementptr inbounds i8, i8* %139, i64 4
  %141 = getelementptr inbounds i8, i8* %140, i64 2
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = shl i32 %143, 8
  %145 = add i32 %138, %144
  %146 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i32 0, i32 0
  %147 = getelementptr inbounds i8, i8* %146, i64 4
  %148 = getelementptr inbounds i8, i8* %147, i64 3
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = add i32 %145, %150
  br label %152

152:                                              ; preds = %126, %96
  %153 = phi i32 [ %125, %96 ], [ %151, %126 ]
  %154 = getelementptr inbounds [9 x i8], [9 x i8]* %4, i64 0, i64 8
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  call void @png_set_oFFs(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %89, i32 %153, i32 %156)
  br label %157

157:                                              ; preds = %30, %152, %28, %24, %15
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_pCAL(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %9
  %15 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0))
  br label %221

16:                                               ; preds = %9
  %17 = icmp ne %struct.png_info_def* %1, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %16
  %19 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %20 = load i32, i32* %19, align 8
  %21 = and i32 %20, 1024
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %18
  %24 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8.270, i32 0, i32 0))
  br label %221

25:                                               ; preds = %18, %16
  %26 = add i32 %2, 1
  %27 = zext i32 %26 to i64
  %28 = call i8* @png_read_buffer(%struct.png_struct_def* %0, i64 %27, i32 2)
  %29 = icmp eq i8* %28, null
  br i1 %29, label %30, label %32

30:                                               ; preds = %25
  %31 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17.292, i32 0, i32 0))
  br label %221

32:                                               ; preds = %25
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %28, i32 %2)
  %33 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %221, label %35

35:                                               ; preds = %32
  %36 = zext i32 %2 to i64
  %37 = getelementptr inbounds i8, i8* %28, i64 %36
  store i8 0, i8* %37, align 1
  %scevgep17 = getelementptr i8, i8* %28, i64 -1
  br label %38

38:                                               ; preds = %38, %35
  %lsr.iv18 = phi i8* [ %scevgep19, %38 ], [ %scevgep17, %35 ]
  %scevgep20 = getelementptr i8, i8* %lsr.iv18, i64 1
  %39 = load i8, i8* %scevgep20, align 1
  %40 = icmp ne i8 %39, 0
  %scevgep19 = getelementptr i8, i8* %lsr.iv18, i64 1
  br i1 %40, label %38, label %41

41:                                               ; preds = %38
  %.01.lcssa = phi i8* [ %scevgep19, %38 ]
  %42 = zext i32 %2 to i64
  %43 = getelementptr inbounds i8, i8* %28, i64 %42
  %44 = ptrtoint i8* %43 to i64
  %45 = ptrtoint i8* %.01.lcssa to i64
  %46 = sub i64 %44, %45
  %47 = icmp sle i64 %46, 12
  br i1 %47, label %48, label %49

48:                                               ; preds = %41
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %221

49:                                               ; preds = %41
  %50 = getelementptr inbounds i8, i8* %.01.lcssa, i64 1
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = and i32 %52, 128
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %81

55:                                               ; preds = %49
  %56 = getelementptr inbounds i8, i8* %.01.lcssa, i64 1
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = shl i32 %58, 24
  %60 = getelementptr inbounds i8, i8* %.01.lcssa, i64 1
  %61 = getelementptr inbounds i8, i8* %60, i64 1
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = shl i32 %63, 16
  %65 = add i32 %59, %64
  %66 = getelementptr inbounds i8, i8* %.01.lcssa, i64 1
  %67 = getelementptr inbounds i8, i8* %66, i64 2
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = shl i32 %69, 8
  %71 = add i32 %65, %70
  %72 = getelementptr inbounds i8, i8* %.01.lcssa, i64 1
  %73 = getelementptr inbounds i8, i8* %72, i64 3
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = add i32 %71, %75
  %77 = xor i32 %76, -1
  %78 = add i32 %77, 1
  %79 = and i32 %78, 2147483647
  %80 = sub nsw i32 0, %79
  br label %103

81:                                               ; preds = %49
  %82 = getelementptr inbounds i8, i8* %.01.lcssa, i64 1
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = shl i32 %84, 24
  %86 = getelementptr inbounds i8, i8* %.01.lcssa, i64 1
  %87 = getelementptr inbounds i8, i8* %86, i64 1
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = shl i32 %89, 16
  %91 = add i32 %85, %90
  %92 = getelementptr inbounds i8, i8* %.01.lcssa, i64 1
  %93 = getelementptr inbounds i8, i8* %92, i64 2
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = shl i32 %95, 8
  %97 = add i32 %91, %96
  %98 = getelementptr inbounds i8, i8* %.01.lcssa, i64 1
  %99 = getelementptr inbounds i8, i8* %98, i64 3
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = add i32 %97, %101
  br label %103

103:                                              ; preds = %81, %55
  %104 = phi i32 [ %80, %55 ], [ %102, %81 ]
  %105 = getelementptr inbounds i8, i8* %.01.lcssa, i64 5
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = and i32 %107, 128
  %109 = icmp ne i32 %108, 0
  br i1 %109, label %110, label %136

110:                                              ; preds = %103
  %111 = getelementptr inbounds i8, i8* %.01.lcssa, i64 5
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = shl i32 %113, 24
  %115 = getelementptr inbounds i8, i8* %.01.lcssa, i64 5
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = shl i32 %118, 16
  %120 = add i32 %114, %119
  %121 = getelementptr inbounds i8, i8* %.01.lcssa, i64 5
  %122 = getelementptr inbounds i8, i8* %121, i64 2
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = shl i32 %124, 8
  %126 = add i32 %120, %125
  %127 = getelementptr inbounds i8, i8* %.01.lcssa, i64 5
  %128 = getelementptr inbounds i8, i8* %127, i64 3
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = add i32 %126, %130
  %132 = xor i32 %131, -1
  %133 = add i32 %132, 1
  %134 = and i32 %133, 2147483647
  %135 = sub nsw i32 0, %134
  br label %158

136:                                              ; preds = %103
  %137 = getelementptr inbounds i8, i8* %.01.lcssa, i64 5
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = shl i32 %139, 24
  %141 = getelementptr inbounds i8, i8* %.01.lcssa, i64 5
  %142 = getelementptr inbounds i8, i8* %141, i64 1
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = shl i32 %144, 16
  %146 = add i32 %140, %145
  %147 = getelementptr inbounds i8, i8* %.01.lcssa, i64 5
  %148 = getelementptr inbounds i8, i8* %147, i64 2
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = shl i32 %150, 8
  %152 = add i32 %146, %151
  %153 = getelementptr inbounds i8, i8* %.01.lcssa, i64 5
  %154 = getelementptr inbounds i8, i8* %153, i64 3
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = add i32 %152, %156
  br label %158

158:                                              ; preds = %136, %110
  %159 = phi i32 [ %135, %110 ], [ %157, %136 ]
  %160 = getelementptr inbounds i8, i8* %.01.lcssa, i64 9
  %161 = load i8, i8* %160, align 1
  %162 = getelementptr inbounds i8, i8* %.01.lcssa, i64 10
  %163 = load i8, i8* %162, align 1
  %164 = getelementptr inbounds i8, i8* %.01.lcssa, i64 11
  %165 = zext i8 %161 to i32
  %166 = icmp eq i32 %165, 0
  %167 = zext i8 %163 to i32
  %168 = icmp ne i32 %167, 2
  %or.cond = select i1 %166, i1 %168, i1 false
  br i1 %or.cond, label %184, label %169

169:                                              ; preds = %158
  %170 = zext i8 %161 to i32
  %171 = icmp eq i32 %170, 1
  %172 = zext i8 %163 to i32
  %173 = icmp ne i32 %172, 3
  %or.cond4 = select i1 %171, i1 %173, i1 false
  br i1 %or.cond4, label %184, label %174

174:                                              ; preds = %169
  %175 = zext i8 %161 to i32
  %176 = icmp eq i32 %175, 2
  %177 = zext i8 %163 to i32
  %178 = icmp ne i32 %177, 3
  %or.cond6 = select i1 %176, i1 %178, i1 false
  br i1 %or.cond6, label %184, label %179

179:                                              ; preds = %174
  %180 = zext i8 %161 to i32
  %181 = icmp eq i32 %180, 3
  %182 = zext i8 %163 to i32
  %183 = icmp ne i32 %182, 4
  %or.cond8 = select i1 %181, i1 %183, i1 false
  br i1 %or.cond8, label %184, label %185

184:                                              ; preds = %179, %174, %169, %158
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.30.325, i32 0, i32 0))
  br label %221

185:                                              ; preds = %179
  %186 = zext i8 %161 to i32
  %187 = icmp sge i32 %186, 4
  br i1 %187, label %188, label %189

188:                                              ; preds = %185
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.31.326, i32 0, i32 0))
  br label %189

189:                                              ; preds = %185, %188
  br label %190

190:                                              ; preds = %190, %189
  %lsr.iv = phi i8* [ %scevgep, %190 ], [ %162, %189 ]
  %scevgep16 = getelementptr i8, i8* %lsr.iv, i64 1
  %191 = load i8, i8* %scevgep16, align 1
  %192 = icmp ne i8 %191, 0
  %scevgep = getelementptr i8, i8* %lsr.iv, i64 1
  br i1 %192, label %190, label %193

193:                                              ; preds = %190
  %.1.lcssa = phi i8* [ %scevgep, %190 ]
  %194 = zext i8 %163 to i64
  %195 = mul i64 %194, 8
  %196 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %195)
  %197 = bitcast i8* %196 to i8**
  %198 = icmp eq i8** %197, null
  br i1 %198, label %201, label %.preheader

.preheader:                                       ; preds = %193
  %199 = zext i8 %163 to i32
  %200 = icmp slt i32 0, %199
  br i1 %200, label %.lr.ph14, label %217

.lr.ph14:                                         ; preds = %.preheader
  %wide.trip.count = zext i32 %199 to i64
  br label %203

201:                                              ; preds = %193
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17.292, i32 0, i32 0))
  br label %221

202:                                              ; preds = %.critedge
  %.2 = phi i8* [ %.3.lcssa, %.critedge ]
  %exitcond = icmp ne i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %203, label %._crit_edge

203:                                              ; preds = %.lr.ph14, %202
  %indvars.iv = phi i64 [ 0, %.lr.ph14 ], [ %indvars.iv.next, %202 ]
  %.212 = phi i8* [ %.1.lcssa, %.lr.ph14 ], [ %.2, %202 ]
  %204 = getelementptr inbounds i8, i8* %.212, i32 1
  %205 = getelementptr inbounds i8*, i8** %197, i64 %indvars.iv
  store i8* %204, i8** %205, align 8
  %206 = icmp ule i8* %204, %43
  br i1 %206, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %203
  br label %207

207:                                              ; preds = %.lr.ph, %211
  %.39 = phi i8* [ %204, %.lr.ph ], [ %212, %211 ]
  %208 = load i8, i8* %.39, align 1
  %209 = zext i8 %208 to i32
  %210 = icmp ne i32 %209, 0
  br i1 %210, label %211, label %..critedge_crit_edge10

211:                                              ; preds = %207
  %212 = getelementptr inbounds i8, i8* %.39, i32 1
  %213 = icmp ule i8* %212, %43
  br i1 %213, label %207, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %211
  %split = phi i8* [ %212, %211 ]
  br label %.critedge

..critedge_crit_edge10:                           ; preds = %207
  %split11 = phi i8* [ %.39, %207 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge10, %..critedge_crit_edge, %203
  %.3.lcssa = phi i8* [ %split, %..critedge_crit_edge ], [ %split11, %..critedge_crit_edge10 ], [ %204, %203 ]
  %214 = icmp ugt i8* %.3.lcssa, %43
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %214, label %215, label %202

215:                                              ; preds = %.critedge
  %216 = bitcast i8** %197 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %216)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.32.327, i32 0, i32 0))
  br label %221

._crit_edge:                                      ; preds = %202
  br label %217

217:                                              ; preds = %._crit_edge, %.preheader
  %218 = zext i8 %161 to i32
  %219 = zext i8 %163 to i32
  call void @png_set_pCAL(%struct.png_struct_def* %0, %struct.png_info_def* %1, i8* %28, i32 %104, i32 %159, i32 %218, i32 %219, i8* %164, i8** %197)
  %220 = bitcast i8** %197 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %220)
  br label %221

221:                                              ; preds = %32, %217, %215, %201, %184, %48, %30, %23, %14
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_sCAL(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %11
  %17 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.265, i32 0, i32 0))
  br label %98

18:                                               ; preds = %11
  %19 = icmp ne %struct.png_info_def* %1, null
  br i1 %19, label %20, label %27

20:                                               ; preds = %18
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = and i32 %22, 16384
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %20
  %26 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8.270, i32 0, i32 0))
  br label %98

27:                                               ; preds = %20, %18
  %28 = icmp ult i32 %2, 4
  br i1 %28, label %29, label %31

29:                                               ; preds = %27
  %30 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %98

31:                                               ; preds = %27
  %32 = add i32 %2, 1
  %33 = zext i32 %32 to i64
  %34 = call i8* @png_read_buffer(%struct.png_struct_def* %0, i64 %33, i32 2)
  %35 = icmp eq i8* %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17.292, i32 0, i32 0))
  %37 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  br label %98

38:                                               ; preds = %31
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %34, i32 %2)
  %39 = zext i32 %2 to i64
  %40 = getelementptr inbounds i8, i8* %34, i64 %39
  store i8 0, i8* %40, align 1
  %41 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %98, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds i8, i8* %34, i64 0
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = icmp ne i32 %46, 1
  br i1 %47, label %48, label %54

48:                                               ; preds = %43
  %49 = getelementptr inbounds i8, i8* %34, i64 0
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = icmp ne i32 %51, 2
  br i1 %52, label %53, label %54

53:                                               ; preds = %48
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.33.330, i32 0, i32 0))
  br label %98

54:                                               ; preds = %48, %43
  store i64 1, i64* %4, align 8
  store i32 0, i32* %5, align 4
  %55 = zext i32 %2 to i64
  %56 = call i32 @png_check_fp_number(i8* %34, i64 %55, i32* %5, i64* %4)
  %57 = icmp eq i32 %56, 0
  %58 = load i64, i64* %4, align 8
  %59 = zext i32 %2 to i64
  %60 = icmp uge i64 %58, %59
  %or.cond = select i1 %57, i1 true, i1 %60
  br i1 %or.cond, label %68, label %61

61:                                               ; preds = %54
  %62 = load i64, i64* %4, align 8
  %63 = add i64 %62, 1
  store i64 %63, i64* %4, align 8
  %64 = getelementptr inbounds i8, i8* %34, i64 %62
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %61, %54
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.34.331, i32 0, i32 0))
  br label %98

69:                                               ; preds = %61
  %70 = load i32, i32* %5, align 4
  %71 = and i32 %70, 392
  %72 = icmp eq i32 %71, 264
  %73 = zext i1 %72 to i32
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %69
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.35.332, i32 0, i32 0))
  br label %98

76:                                               ; preds = %69
  %77 = load i64, i64* %4, align 8
  store i32 0, i32* %5, align 4
  %78 = zext i32 %2 to i64
  %79 = call i32 @png_check_fp_number(i8* %34, i64 %78, i32* %5, i64* %4)
  %80 = icmp eq i32 %79, 0
  %81 = load i64, i64* %4, align 8
  %82 = zext i32 %2 to i64
  %83 = icmp ne i64 %81, %82
  %or.cond5 = select i1 %80, i1 true, i1 %83
  br i1 %or.cond5, label %84, label %85

84:                                               ; preds = %76
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.36.333, i32 0, i32 0))
  br label %98

85:                                               ; preds = %76
  %86 = load i32, i32* %5, align 4
  %87 = and i32 %86, 392
  %88 = icmp eq i32 %87, 264
  %89 = zext i1 %88 to i32
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %85
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.37.334, i32 0, i32 0))
  br label %98

92:                                               ; preds = %85
  %93 = getelementptr inbounds i8, i8* %34, i64 0
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = getelementptr inbounds i8, i8* %34, i64 1
  %97 = getelementptr inbounds i8, i8* %34, i64 %77
  call void @png_set_sCAL_s(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %95, i8* %96, i8* %97)
  br label %98

98:                                               ; preds = %75, %91, %92, %84, %38, %16, %25, %29, %36, %53, %68
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_tIME(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca [7 x i8], align 1
  %5 = alloca %struct.png_time_struct, align 2
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

11:                                               ; preds = %3
  %12 = icmp ne %struct.png_info_def* %1, null
  br i1 %12, label %13, label %20

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %15 = load i32, i32* %14, align 8
  %16 = and i32 %15, 512
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %13
  %19 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8.270, i32 0, i32 0))
  br label %64

20:                                               ; preds = %11, %13
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %27 = load i32, i32* %26, align 4
  %28 = or i32 %27, 8
  store i32 %28, i32* %26, align 4
  br label %29

29:                                               ; preds = %25, %20
  %30 = icmp ne i32 %2, 7
  br i1 %30, label %31, label %33

31:                                               ; preds = %29
  %32 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.266, i32 0, i32 0))
  br label %64

33:                                               ; preds = %29
  %34 = getelementptr inbounds [7 x i8], [7 x i8]* %4, i32 0, i32 0
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %34, i32 7)
  %35 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %64, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds [7 x i8], [7 x i8]* %4, i64 0, i64 6
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %5, i32 0, i32 5
  store i8 %39, i8* %40, align 2
  %41 = getelementptr inbounds [7 x i8], [7 x i8]* %4, i64 0, i64 5
  %42 = load i8, i8* %41, align 1
  %43 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %5, i32 0, i32 4
  store i8 %42, i8* %43, align 1
  %44 = getelementptr inbounds [7 x i8], [7 x i8]* %4, i64 0, i64 4
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %5, i32 0, i32 3
  store i8 %45, i8* %46, align 2
  %47 = getelementptr inbounds [7 x i8], [7 x i8]* %4, i64 0, i64 3
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %5, i32 0, i32 2
  store i8 %48, i8* %49, align 1
  %50 = getelementptr inbounds [7 x i8], [7 x i8]* %4, i64 0, i64 2
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %5, i32 0, i32 1
  store i8 %51, i8* %52, align 2
  %53 = getelementptr inbounds [7 x i8], [7 x i8]* %4, i32 0, i32 0
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = shl i32 %55, 8
  %57 = getelementptr inbounds [7 x i8], [7 x i8]* %4, i32 0, i32 0
  %58 = getelementptr inbounds i8, i8* %57, i64 1
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = add i32 %56, %60
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %5, i32 0, i32 0
  store i16 %62, i16* %63, align 2
  call void @png_set_tIME(%struct.png_struct_def* %0, %struct.png_info_def* %1, %struct.png_time_struct* %5)
  br label %64

64:                                               ; preds = %33, %37, %31, %18
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_tEXt(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca %struct.png_text_struct, align 8
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  %6 = load i32, i32* %5, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %21

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %14

12:                                               ; preds = %8
  %13 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  br label %67

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  %16 = load i32, i32* %15, align 4
  %17 = add i32 %16, -1
  store i32 %17, i32* %15, align 4
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %21

19:                                               ; preds = %14
  %20 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.38.339, i32 0, i32 0))
  br label %67

21:                                               ; preds = %14, %3
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %23 = load i32, i32* %22, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %21
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, 4
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %34 = load i32, i32* %33, align 4
  %35 = or i32 %34, 8
  store i32 %35, i32* %33, align 4
  br label %36

36:                                               ; preds = %32, %27
  %37 = add i32 %2, 1
  %38 = zext i32 %37 to i64
  %39 = call i8* @png_read_buffer(%struct.png_struct_def* %0, i64 %38, i32 1)
  %40 = icmp eq i8* %39, null
  br i1 %40, label %41, label %42

41:                                               ; preds = %36
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17.292, i32 0, i32 0))
  br label %67

42:                                               ; preds = %36
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %39, i32 %2)
  %43 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %67, label %45

45:                                               ; preds = %42
  %46 = zext i32 %2 to i64
  %47 = getelementptr inbounds i8, i8* %39, i64 %46
  store i8 0, i8* %47, align 1
  %scevgep = getelementptr i8, i8* %39, i64 -1
  br label %48

48:                                               ; preds = %48, %45
  %lsr.iv = phi i8* [ %scevgep1, %48 ], [ %scevgep, %45 ]
  %scevgep2 = getelementptr i8, i8* %lsr.iv, i64 1
  %49 = load i8, i8* %scevgep2, align 1
  %50 = icmp ne i8 %49, 0
  %scevgep1 = getelementptr i8, i8* %lsr.iv, i64 1
  br i1 %50, label %48, label %51

51:                                               ; preds = %48
  %.0.lcssa = phi i8* [ %scevgep1, %48 ]
  %52 = zext i32 %2 to i64
  %53 = getelementptr inbounds i8, i8* %39, i64 %52
  %54 = icmp ne i8* %.0.lcssa, %53
  %55 = getelementptr inbounds i8, i8* %.0.lcssa, i32 1
  %spec.select = select i1 %54, i8* %55, i8* %.0.lcssa
  %56 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %4, i32 0, i32 0
  store i32 -1, i32* %56, align 8
  %57 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %4, i32 0, i32 1
  store i8* %39, i8** %57, align 8
  %58 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %4, i32 0, i32 5
  store i8* null, i8** %58, align 8
  %59 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %4, i32 0, i32 6
  store i8* null, i8** %59, align 8
  %60 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %4, i32 0, i32 4
  store i64 0, i64* %60, align 8
  %61 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %4, i32 0, i32 2
  store i8* %spec.select, i8** %61, align 8
  %62 = call i64 @strlen(i8* %spec.select) #26
  %63 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %4, i32 0, i32 3
  store i64 %62, i64* %63, align 8
  %64 = call i32 @png_set_text_2(%struct.png_struct_def* %0, %struct.png_info_def* %1, %struct.png_text_struct* %4, i32 1)
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %51
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.39.340, i32 0, i32 0))
  br label %67

67:                                               ; preds = %42, %12, %19, %41, %66, %51
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_zTXt(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca i64, align 8
  %5 = alloca %struct.png_text_struct, align 8
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  %7 = load i32, i32* %6, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %15

13:                                               ; preds = %9
  %14 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  br label %103

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  %17 = load i32, i32* %16, align 4
  %18 = add i32 %17, -1
  store i32 %18, i32* %16, align 4
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %22

20:                                               ; preds = %15
  %21 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.38.339, i32 0, i32 0))
  br label %103

22:                                               ; preds = %15, %3
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %24 = load i32, i32* %23, align 4
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %30 = load i32, i32* %29, align 4
  %31 = and i32 %30, 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %35 = load i32, i32* %34, align 4
  %36 = or i32 %35, 8
  store i32 %36, i32* %34, align 4
  br label %37

37:                                               ; preds = %33, %28
  %38 = zext i32 %2 to i64
  %39 = call i8* @png_read_buffer(%struct.png_struct_def* %0, i64 %38, i32 2)
  %40 = icmp eq i8* %39, null
  br i1 %40, label %41, label %43

41:                                               ; preds = %37
  %42 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17.292, i32 0, i32 0))
  br label %103

43:                                               ; preds = %37
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %39, i32 %2)
  %44 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %103, label %.preheader

.preheader:                                       ; preds = %43
  %46 = icmp ult i32 0, %2
  br i1 %46, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %.preheader
  br label %47

47:                                               ; preds = %.lr.ph, %53
  %.02 = phi i32 [ 0, %.lr.ph ], [ %54, %53 ]
  %48 = zext i32 %.02 to i64
  %49 = getelementptr inbounds i8, i8* %39, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %..critedge_crit_edge3

53:                                               ; preds = %47
  %54 = add i32 %.02, 1
  %exitcond = icmp ne i32 %2, %54
  br i1 %exitcond, label %47, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %53
  br label %.critedge

..critedge_crit_edge3:                            ; preds = %47
  %split4 = phi i32 [ %.02, %47 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge3, %..critedge_crit_edge, %.preheader
  %.0.lcssa = phi i32 [ %2, %..critedge_crit_edge ], [ %split4, %..critedge_crit_edge3 ], [ 0, %.preheader ]
  %55 = icmp ugt i32 %.0.lcssa, 79
  %56 = icmp ult i32 %.0.lcssa, 1
  %or.cond = or i1 %55, %56
  br i1 %or.cond, label %100, label %57

57:                                               ; preds = %.critedge
  %58 = add i32 %.0.lcssa, 3
  %59 = icmp ugt i32 %58, %2
  br i1 %59, label %100, label %60

60:                                               ; preds = %57
  %61 = add i32 %.0.lcssa, 1
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %39, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %100, label %67

67:                                               ; preds = %60
  store i64 -1, i64* %4, align 8
  %68 = add i32 %.0.lcssa, 2
  %69 = call i32 @png_decompress_chunk(%struct.png_struct_def* %0, i32 %2, i32 %68, i64* %4, i32 1)
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %71, label %96

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  %73 = load i8*, i8** %72, align 8
  %74 = icmp eq i8* %73, null
  br i1 %74, label %100, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  %77 = load i8*, i8** %76, align 8
  %78 = load i64, i64* %4, align 8
  %79 = add i32 %.0.lcssa, 2
  %80 = zext i32 %79 to i64
  %81 = add i64 %78, %80
  %82 = getelementptr inbounds i8, i8* %77, i64 %81
  store i8 0, i8* %82, align 1
  %83 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %5, i32 0, i32 0
  store i32 0, i32* %83, align 8
  %84 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %5, i32 0, i32 1
  store i8* %77, i8** %84, align 8
  %85 = zext i32 %.0.lcssa to i64
  %86 = getelementptr inbounds i8, i8* %77, i64 %85
  %87 = getelementptr inbounds i8, i8* %86, i64 2
  %88 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %5, i32 0, i32 2
  store i8* %87, i8** %88, align 8
  %89 = load i64, i64* %4, align 8
  %90 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %5, i32 0, i32 3
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %5, i32 0, i32 4
  store i64 0, i64* %91, align 8
  %92 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %5, i32 0, i32 5
  store i8* null, i8** %92, align 8
  %93 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %5, i32 0, i32 6
  store i8* null, i8** %93, align 8
  %94 = call i32 @png_set_text_2(%struct.png_struct_def* %0, %struct.png_info_def* %1, %struct.png_text_struct* %5, i32 1)
  %95 = icmp ne i32 %94, 0
  %spec.select = select i1 %95, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.43.346, i32 0, i32 0), i8* null
  br label %100

96:                                               ; preds = %67
  %97 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %98 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %97, i32 0, i32 6
  %99 = load i8*, i8** %98, align 8
  br label %100

100:                                              ; preds = %57, %96, %71, %75, %60, %.critedge
  %.5 = phi i8* [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.19.294, i32 0, i32 0), %.critedge ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40.343, i32 0, i32 0), %57 ], [ getelementptr inbounds ([25 x i8], [25 x i8]* @.str.41.344, i32 0, i32 0), %60 ], [ %99, %96 ], [ %spec.select, %75 ], [ getelementptr inbounds ([32 x i8], [32 x i8]* @.str.42.345, i32 0, i32 0), %71 ]
  %101 = icmp ne i8* %.5, null
  br i1 %101, label %102, label %103

102:                                              ; preds = %100
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* %.5)
  br label %103

103:                                              ; preds = %43, %13, %20, %41, %102, %100
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_iTXt(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca i64, align 8
  %5 = alloca %struct.png_text_struct, align 8
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  %7 = load i32, i32* %6, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %15

13:                                               ; preds = %9
  %14 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  br label %160

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  %17 = load i32, i32* %16, align 4
  %18 = add i32 %17, -1
  store i32 %18, i32* %16, align 4
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %22

20:                                               ; preds = %15
  %21 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.38.339, i32 0, i32 0))
  br label %160

22:                                               ; preds = %15, %3
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %24 = load i32, i32* %23, align 4
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %30 = load i32, i32* %29, align 4
  %31 = and i32 %30, 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %35 = load i32, i32* %34, align 4
  %36 = or i32 %35, 8
  store i32 %36, i32* %34, align 4
  br label %37

37:                                               ; preds = %33, %28
  %38 = add i32 %2, 1
  %39 = zext i32 %38 to i64
  %40 = call i8* @png_read_buffer(%struct.png_struct_def* %0, i64 %39, i32 1)
  %41 = icmp eq i8* %40, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %37
  %43 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17.292, i32 0, i32 0))
  br label %160

44:                                               ; preds = %37
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %40, i32 %2)
  %45 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %160, label %.preheader

.preheader:                                       ; preds = %44
  %47 = icmp ult i32 0, %2
  br i1 %47, label %.lr.ph20, label %.critedge

.lr.ph20:                                         ; preds = %.preheader
  br label %48

48:                                               ; preds = %.lr.ph20, %54
  %.019 = phi i32 [ 0, %.lr.ph20 ], [ %55, %54 ]
  %49 = zext i32 %.019 to i64
  %50 = getelementptr inbounds i8, i8* %40, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %..critedge_crit_edge21

54:                                               ; preds = %48
  %55 = add i32 %.019, 1
  %exitcond23 = icmp ne i32 %2, %55
  br i1 %exitcond23, label %48, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %54
  br label %.critedge

..critedge_crit_edge21:                           ; preds = %48
  %split22 = phi i32 [ %.019, %48 ]
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge21, %..critedge_crit_edge, %.preheader
  %.0.lcssa = phi i32 [ %2, %..critedge_crit_edge ], [ %split22, %..critedge_crit_edge21 ], [ 0, %.preheader ]
  %56 = icmp ugt i32 %.0.lcssa, 79
  %57 = icmp ult i32 %.0.lcssa, 1
  %or.cond = or i1 %56, %57
  br i1 %or.cond, label %157, label %58

58:                                               ; preds = %.critedge
  %59 = add i32 %.0.lcssa, 5
  %60 = icmp ugt i32 %59, %2
  br i1 %60, label %157, label %61

61:                                               ; preds = %58
  %62 = add i32 %.0.lcssa, 1
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %40, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %82, label %68

68:                                               ; preds = %61
  %69 = add i32 %.0.lcssa, 1
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %40, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = icmp eq i32 %73, 1
  br i1 %74, label %75, label %157

75:                                               ; preds = %68
  %76 = add i32 %.0.lcssa, 2
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %40, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %157

82:                                               ; preds = %75, %61
  %83 = add i32 %.0.lcssa, 1
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %40, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = icmp ne i32 %87, 0
  %89 = zext i1 %88 to i32
  store i64 0, i64* %4, align 8
  %90 = add i32 %.0.lcssa, 3
  %91 = icmp ult i32 %90, %2
  br i1 %91, label %.lr.ph15, label %.critedge7

.lr.ph15:                                         ; preds = %82
  br label %92

92:                                               ; preds = %.lr.ph15, %98
  %.114 = phi i32 [ %90, %.lr.ph15 ], [ %99, %98 ]
  %93 = zext i32 %.114 to i64
  %94 = getelementptr inbounds i8, i8* %40, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %..critedge7_crit_edge16

98:                                               ; preds = %92
  %99 = add i32 %.114, 1
  %exitcond18 = icmp ne i32 %2, %99
  br i1 %exitcond18, label %92, label %..critedge7_crit_edge

..critedge7_crit_edge:                            ; preds = %98
  br label %.critedge7

..critedge7_crit_edge16:                          ; preds = %92
  %split17 = phi i32 [ %.114, %92 ]
  br label %.critedge7

.critedge7:                                       ; preds = %..critedge7_crit_edge16, %..critedge7_crit_edge, %82
  %.1.lcssa = phi i32 [ %2, %..critedge7_crit_edge ], [ %split17, %..critedge7_crit_edge16 ], [ %90, %82 ]
  %100 = add i32 %.1.lcssa, 1
  %101 = icmp ult i32 %100, %2
  br i1 %101, label %.lr.ph, label %.critedge8

.lr.ph:                                           ; preds = %.critedge7
  br label %102

102:                                              ; preds = %.lr.ph, %108
  %.211 = phi i32 [ %100, %.lr.ph ], [ %109, %108 ]
  %103 = zext i32 %.211 to i64
  %104 = getelementptr inbounds i8, i8* %40, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %108, label %..critedge8_crit_edge12

108:                                              ; preds = %102
  %109 = add i32 %.211, 1
  %exitcond = icmp ne i32 %2, %109
  br i1 %exitcond, label %102, label %..critedge8_crit_edge

..critedge8_crit_edge:                            ; preds = %108
  br label %.critedge8

..critedge8_crit_edge12:                          ; preds = %102
  %split13 = phi i32 [ %.211, %102 ]
  br label %.critedge8

.critedge8:                                       ; preds = %..critedge8_crit_edge12, %..critedge8_crit_edge, %.critedge7
  %.2.lcssa = phi i32 [ %2, %..critedge8_crit_edge ], [ %split13, %..critedge8_crit_edge12 ], [ %100, %.critedge7 ]
  %110 = add i32 %.2.lcssa, 1
  %111 = icmp eq i32 %89, 0
  %112 = icmp ule i32 %110, %2
  %or.cond9 = select i1 %111, i1 %112, i1 false
  br i1 %or.cond9, label %113, label %116

113:                                              ; preds = %.critedge8
  %114 = sub i32 %2, %110
  %115 = zext i32 %114 to i64
  store i64 %115, i64* %4, align 8
  br label %129

116:                                              ; preds = %.critedge8
  %117 = icmp ne i32 %89, 0
  %118 = icmp ult i32 %110, %2
  %or.cond10 = select i1 %117, i1 %118, i1 false
  br i1 %or.cond10, label %119, label %129

119:                                              ; preds = %116
  store i64 -1, i64* %4, align 8
  %120 = call i32 @png_decompress_chunk(%struct.png_struct_def* %0, i32 %2, i32 %110, i64* %4, i32 1)
  %121 = icmp eq i32 %120, 1
  br i1 %121, label %122, label %125

122:                                              ; preds = %119
  %123 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  %124 = load i8*, i8** %123, align 8
  br label %129

125:                                              ; preds = %119
  %126 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %127 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %126, i32 0, i32 6
  %128 = load i8*, i8** %127, align 8
  br label %129

129:                                              ; preds = %125, %122, %116, %113
  %.26 = phi i8* [ null, %113 ], [ null, %122 ], [ %128, %125 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40.343, i32 0, i32 0), %116 ]
  %.23 = phi i8* [ %40, %113 ], [ %124, %122 ], [ %40, %125 ], [ %40, %116 ]
  %130 = icmp eq i8* %.26, null
  br i1 %130, label %131, label %157

131:                                              ; preds = %129
  %132 = load i64, i64* %4, align 8
  %133 = zext i32 %110 to i64
  %134 = add i64 %132, %133
  %135 = getelementptr inbounds i8, i8* %.23, i64 %134
  store i8 0, i8* %135, align 1
  %136 = icmp eq i32 %89, 0
  br i1 %136, label %137, label %139

137:                                              ; preds = %131
  %138 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %5, i32 0, i32 0
  store i32 1, i32* %138, align 8
  br label %141

139:                                              ; preds = %131
  %140 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %5, i32 0, i32 0
  store i32 2, i32* %140, align 8
  br label %141

141:                                              ; preds = %139, %137
  %142 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %5, i32 0, i32 1
  store i8* %.23, i8** %142, align 8
  %143 = zext i32 %90 to i64
  %144 = getelementptr inbounds i8, i8* %.23, i64 %143
  %145 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %5, i32 0, i32 5
  store i8* %144, i8** %145, align 8
  %146 = zext i32 %100 to i64
  %147 = getelementptr inbounds i8, i8* %.23, i64 %146
  %148 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %5, i32 0, i32 6
  store i8* %147, i8** %148, align 8
  %149 = zext i32 %110 to i64
  %150 = getelementptr inbounds i8, i8* %.23, i64 %149
  %151 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %5, i32 0, i32 2
  store i8* %150, i8** %151, align 8
  %152 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %5, i32 0, i32 3
  store i64 0, i64* %152, align 8
  %153 = load i64, i64* %4, align 8
  %154 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %5, i32 0, i32 4
  store i64 %153, i64* %154, align 8
  %155 = call i32 @png_set_text_2(%struct.png_struct_def* %0, %struct.png_info_def* %1, %struct.png_text_struct* %5, i32 1)
  %156 = icmp ne i32 %155, 0
  %spec.select = select i1 %156, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.43.346, i32 0, i32 0), i8* %.26
  br label %157

157:                                              ; preds = %58, %68, %75, %129, %141, %.critedge
  %.7 = phi i8* [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.19.294, i32 0, i32 0), %.critedge ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40.343, i32 0, i32 0), %58 ], [ %spec.select, %141 ], [ %.26, %129 ], [ getelementptr inbounds ([21 x i8], [21 x i8]* @.str.44.349, i32 0, i32 0), %75 ], [ getelementptr inbounds ([21 x i8], [21 x i8]* @.str.44.349, i32 0, i32 0), %68 ]
  %158 = icmp ne i8* %.7, null
  br i1 %158, label %159, label %160

159:                                              ; preds = %157
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* %.7)
  br label %160

160:                                              ; preds = %44, %13, %20, %42, %159, %157
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @png_read_buffer(%struct.png_struct_def* noalias %0, i64 %1, i32 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ne i8* %5, null
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 139
  %9 = load i64, i64* %8, align 8
  %10 = icmp ugt i64 %1, %9
  br i1 %10, label %11, label %14

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  store i8* null, i8** %12, align 8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 139
  store i64 0, i64* %13, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %5)
  br label %14

14:                                               ; preds = %11, %7, %3
  %.0 = phi i8* [ null, %11 ], [ %5, %7 ], [ %5, %3 ]
  %15 = icmp eq i8* %.0, null
  br i1 %15, label %16, label %28

16:                                               ; preds = %14
  %17 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_base to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %1)
  %18 = icmp ne i8* %17, null
  br i1 %18, label %19, label %22

19:                                               ; preds = %16
  call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 0, i64 %1, i1 false)
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  store i8* %17, i8** %20, align 8
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 139
  store i64 %1, i64* %21, align 8
  br label %28

22:                                               ; preds = %16
  %23 = icmp slt i32 %2, 2
  br i1 %23, label %24, label %28

24:                                               ; preds = %22
  %25 = icmp ne i32 %2, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %24
  call void @png_chunk_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.63.295, i32 0, i32 0))
  br label %28

27:                                               ; preds = %24
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.63.295, i32 0, i32 0)) #24
  unreachable

28:                                               ; preds = %19, %26, %22, %14
  %.1 = phi i8* [ %.0, %14 ], [ %17, %22 ], [ %17, %26 ], [ %17, %19 ]
  ret i8* %.1
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_decompress_chunk(%struct.png_struct_def* noalias %0, i32 %1, i32 %2, i64* %3, i32 %4) #11 {
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 135
  %8 = load i64, i64* %7, align 8
  %9 = icmp ugt i64 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 135
  %12 = load i64, i64* %11, align 8
  %13 = icmp ult i64 %12, -1
  br i1 %13, label %14, label %17

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 135
  %16 = load i64, i64* %15, align 8
  br label %17

17:                                               ; preds = %14, %10, %5
  %.04 = phi i64 [ %16, %14 ], [ -1, %10 ], [ -1, %5 ]
  %18 = icmp ne i32 %4, 0
  %19 = zext i1 %18 to i32
  %20 = add i32 %2, %19
  %21 = zext i32 %20 to i64
  %22 = icmp uge i64 %.04, %21
  br i1 %22, label %23, label %104

23:                                               ; preds = %17
  %24 = icmp ne i32 %4, 0
  %25 = zext i1 %24 to i32
  %26 = add i32 %2, %25
  %27 = zext i32 %26 to i64
  %28 = sub i64 %.04, %27
  %29 = load i64, i64* %3, align 8
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %31, label %32

31:                                               ; preds = %23
  store i64 %28, i64* %3, align 8
  br label %32

32:                                               ; preds = %31, %23
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %34 = load i32, i32* %33, align 8
  %35 = call i32 @png_inflate_claim(%struct.png_struct_def* %0, i32 %34)
  switch i32 %35, label %105 [
    i32 0, label %36
    i32 1, label %103
  ]

36:                                               ; preds = %32
  %37 = sub i32 %1, %2
  store i32 %37, i32* %6, align 4
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %39 = load i32, i32* %38, align 8
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  %41 = load i8*, i8** %40, align 8
  %42 = zext i32 %2 to i64
  %43 = getelementptr inbounds i8, i8* %41, i64 %42
  %44 = call i32 @png_inflate(%struct.png_struct_def* %0, i32 %39, i32 1, i8* %43, i32* %6, i8* null, i64* %3)
  switch i32 %44, label %101 [
    i32 1, label %45
    i32 0, label %100
  ]

45:                                               ; preds = %36
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %47 = call i32 @inflateReset(%struct.z_stream_s* %46)
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %99

49:                                               ; preds = %45
  %50 = load i64, i64* %3, align 8
  %51 = zext i32 %2 to i64
  %52 = add i64 %51, %50
  %53 = icmp ne i32 %4, 0
  %54 = zext i1 %53 to i32
  %55 = sext i32 %54 to i64
  %56 = add i64 %52, %55
  %57 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_base to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %56)
  %58 = icmp ne i8* %57, null
  br i1 %58, label %59, label %98

59:                                               ; preds = %49
  call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 0, i64 %56, i1 false)
  %60 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %61 = load i32, i32* %60, align 8
  %62 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  %63 = load i8*, i8** %62, align 8
  %64 = zext i32 %2 to i64
  %65 = getelementptr inbounds i8, i8* %63, i64 %64
  %66 = zext i32 %2 to i64
  %67 = getelementptr inbounds i8, i8* %57, i64 %66
  %68 = call i32 @png_inflate(%struct.png_struct_def* %0, i32 %61, i32 1, i8* %65, i32* %6, i8* %67, i64* %3)
  switch i32 %68, label %91 [
    i32 1, label %69
    i32 0, label %90
  ]

69:                                               ; preds = %59
  %70 = load i64, i64* %3, align 8
  %71 = icmp eq i64 %50, %70
  br i1 %71, label %72, label %91

72:                                               ; preds = %69
  %73 = icmp ne i32 %4, 0
  br i1 %73, label %74, label %79

74:                                               ; preds = %72
  %75 = zext i32 %2 to i64
  %76 = load i64, i64* %3, align 8
  %77 = add i64 %75, %76
  %78 = getelementptr inbounds i8, i8* %57, i64 %77
  store i8 0, i8* %78, align 1
  br label %79

79:                                               ; preds = %74, %72
  %80 = icmp ugt i32 %2, 0
  br i1 %80, label %81, label %85

81:                                               ; preds = %79
  %82 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  %83 = load i8*, i8** %82, align 8
  %84 = zext i32 %2 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %83, i64 %84, i1 false)
  br label %85

85:                                               ; preds = %81, %79
  %86 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  %87 = load i8*, i8** %86, align 8
  %88 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  store i8* %57, i8** %88, align 8
  %89 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 139
  store i64 %56, i64* %89, align 8
  br label %91

90:                                               ; preds = %59
  br label %91

91:                                               ; preds = %90, %59, %85, %69
  %.2 = phi i32 [ %68, %85 ], [ -7, %69 ], [ -7, %90 ], [ %68, %59 ]
  %.1 = phi i8* [ %87, %85 ], [ %57, %69 ], [ %57, %59 ], [ %57, %90 ]
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %.1)
  %92 = icmp eq i32 %.2, 1
  br i1 %92, label %93, label %101

93:                                               ; preds = %91
  %94 = sub i32 %1, %2
  %95 = load i32, i32* %6, align 4
  %96 = icmp ne i32 %94, %95
  br i1 %96, label %97, label %101

97:                                               ; preds = %93
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16.291, i32 0, i32 0))
  br label %101

98:                                               ; preds = %49
  call void @png_zstream_error(%struct.png_struct_def* %0, i32 -4)
  br label %101

99:                                               ; preds = %45
  call void @png_zstream_error(%struct.png_struct_def* %0, i32 %44)
  br label %101

100:                                              ; preds = %36
  br label %101

101:                                              ; preds = %100, %36, %99, %91, %93, %97, %98
  %.6 = phi i32 [ -7, %99 ], [ -4, %98 ], [ %.2, %97 ], [ %.2, %93 ], [ %.2, %91 ], [ -7, %100 ], [ %44, %36 ]
  %102 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  store i32 0, i32* %102, align 8
  br label %105

103:                                              ; preds = %32
  br label %105

104:                                              ; preds = %17
  call void @png_zstream_error(%struct.png_struct_def* %0, i32 -4)
  br label %105

105:                                              ; preds = %101, %32, %103, %104
  %.0 = phi i32 [ -4, %104 ], [ %.6, %101 ], [ -7, %103 ], [ %35, %32 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_set_text_2(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, %struct.png_text_struct* %2, i32 %3) #11 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %5, i1 true, i1 %6
  %7 = icmp sle i32 %3, 0
  %or.cond9 = select i1 %or.cond, i1 true, i1 %7
  %8 = icmp eq %struct.png_text_struct* %2, null
  %or.cond10 = select i1 %or.cond9, i1 true, i1 %8
  br i1 %or.cond10, label %239, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 21
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 20
  %13 = load i32, i32* %12, align 4
  %14 = sub nsw i32 %11, %13
  %15 = icmp sgt i32 %3, %14
  br i1 %15, label %16, label %44

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 20
  %18 = load i32, i32* %17, align 4
  %19 = sub nsw i32 2147483647, %18
  %20 = icmp sle i32 %3, %19
  br i1 %20, label %21, label %32

21:                                               ; preds = %16
  %22 = add nsw i32 %18, %3
  %23 = icmp slt i32 %22, 2147483639
  %24 = add nsw i32 %22, 8
  %25 = and i32 %24, -8
  %.07 = select i1 %23, i32 %25, i32 2147483647
  %26 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %27 = load %struct.png_text_struct*, %struct.png_text_struct** %26, align 8
  %28 = bitcast %struct.png_text_struct* %27 to i8*
  %29 = sub nsw i32 %.07, %18
  %30 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i8*, i32, i32, i64)* @png_realloc_array to i8* (%struct.png_struct_def*, i8*, i32, i32, i64)*)(%struct.png_struct_def* %0, i8* %28, i32 %18, i32 %29, i64 56)
  %31 = bitcast i8* %30 to %struct.png_text_struct*
  br label %32

32:                                               ; preds = %21, %16
  %.18 = phi i32 [ %.07, %21 ], [ %18, %16 ]
  %.05 = phi %struct.png_text_struct* [ %31, %21 ], [ null, %16 ]
  %33 = icmp eq %struct.png_text_struct* %.05, null
  br i1 %33, label %34, label %35

34:                                               ; preds = %32
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.35.436, i32 0, i32 0), i32 1)
  br label %239

35:                                               ; preds = %32
  %36 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %37 = load %struct.png_text_struct*, %struct.png_text_struct** %36, align 8
  %38 = bitcast %struct.png_text_struct* %37 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %38)
  %39 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  store %struct.png_text_struct* %.05, %struct.png_text_struct** %39, align 8
  %40 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %41 = load i32, i32* %40, align 4
  %42 = or i32 %41, 16384
  store i32 %42, i32* %40, align 4
  %43 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 21
  store i32 %.18, i32* %43, align 8
  br label %44

44:                                               ; preds = %35, %9
  %45 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %46 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 20
  %47 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 20
  %48 = icmp slt i32 0, %3
  br i1 %48, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %44
  br label %49

49:                                               ; preds = %.lr.ph, %236
  %.0611 = phi i32 [ 0, %.lr.ph ], [ %237, %236 ]
  %50 = load %struct.png_text_struct*, %struct.png_text_struct** %45, align 8
  %51 = load i32, i32* %46, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %50, i64 %52
  %54 = sext i32 %.0611 to i64
  %55 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %54
  %56 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %55, i32 0, i32 1
  %57 = load i8*, i8** %56, align 8
  %58 = icmp eq i8* %57, null
  br i1 %58, label %236, label %59

59:                                               ; preds = %49
  %60 = sext i32 %.0611 to i64
  %61 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %60
  %62 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %61, i32 0, i32 0
  %63 = load i32, i32* %62, align 8
  %64 = icmp slt i32 %63, -1
  br i1 %64, label %71, label %65

65:                                               ; preds = %59
  %66 = sext i32 %.0611 to i64
  %67 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %66
  %68 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %67, i32 0, i32 0
  %69 = load i32, i32* %68, align 8
  %70 = icmp sge i32 %69, 3
  br i1 %70, label %71, label %72

71:                                               ; preds = %65, %59
  %.0616 = phi i32 [ %.0611, %65 ], [ %.0611, %59 ]
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.36.437, i32 0, i32 0), i32 1)
  br label %236

72:                                               ; preds = %65
  %73 = sext i32 %.0611 to i64
  %74 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %73
  %75 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %74, i32 0, i32 1
  %76 = load i8*, i8** %75, align 8
  %77 = call i64 @strlen(i8* %76) #26
  %78 = sext i32 %.0611 to i64
  %79 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %78
  %80 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %79, i32 0, i32 0
  %81 = load i32, i32* %80, align 8
  %82 = icmp sle i32 %81, 0
  br i1 %82, label %107, label %83

83:                                               ; preds = %72
  %84 = sext i32 %.0611 to i64
  %85 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %84
  %86 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %85, i32 0, i32 5
  %87 = load i8*, i8** %86, align 8
  %88 = icmp ne i8* %87, null
  br i1 %88, label %89, label %95

89:                                               ; preds = %83
  %90 = sext i32 %.0611 to i64
  %91 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %90
  %92 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %91, i32 0, i32 5
  %93 = load i8*, i8** %92, align 8
  %94 = call i64 @strlen(i8* %93) #26
  br label %95

95:                                               ; preds = %83, %89
  %.02 = phi i64 [ %94, %89 ], [ 0, %83 ]
  %96 = sext i32 %.0611 to i64
  %97 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %96
  %98 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %97, i32 0, i32 6
  %99 = load i8*, i8** %98, align 8
  %100 = icmp ne i8* %99, null
  br i1 %100, label %101, label %107

101:                                              ; preds = %95
  %102 = sext i32 %.0611 to i64
  %103 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %102
  %104 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %103, i32 0, i32 6
  %105 = load i8*, i8** %104, align 8
  %106 = call i64 @strlen(i8* %105) #26
  br label %107

107:                                              ; preds = %101, %95, %72
  %.13 = phi i64 [ 0, %72 ], [ %.02, %95 ], [ %.02, %101 ]
  %.1 = phi i64 [ 0, %72 ], [ %106, %101 ], [ 0, %95 ]
  %108 = sext i32 %.0611 to i64
  %109 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %108
  %110 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %109, i32 0, i32 2
  %111 = load i8*, i8** %110, align 8
  %112 = icmp eq i8* %111, null
  br i1 %112, label %122, label %113

113:                                              ; preds = %107
  %114 = sext i32 %.0611 to i64
  %115 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %114
  %116 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %115, i32 0, i32 2
  %117 = load i8*, i8** %116, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 0
  %119 = load i8, i8* %118, align 1
  %120 = sext i8 %119 to i32
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %132

122:                                              ; preds = %113, %107
  %.0614 = phi i32 [ %.0611, %113 ], [ %.0611, %107 ]
  %123 = sext i32 %.0611 to i64
  %124 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %123
  %125 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %124, i32 0, i32 0
  %126 = load i32, i32* %125, align 8
  %127 = icmp sgt i32 %126, 0
  br i1 %127, label %128, label %130

128:                                              ; preds = %122
  %129 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 0
  store i32 1, i32* %129, align 8
  br label %143

130:                                              ; preds = %122
  %131 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 0
  store i32 -1, i32* %131, align 8
  br label %143

132:                                              ; preds = %113
  %133 = sext i32 %.0611 to i64
  %134 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %133
  %135 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %134, i32 0, i32 2
  %136 = load i8*, i8** %135, align 8
  %137 = call i64 @strlen(i8* %136) #26
  %138 = sext i32 %.0611 to i64
  %139 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %138
  %140 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %139, i32 0, i32 0
  %141 = load i32, i32* %140, align 8
  %142 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 0
  store i32 %141, i32* %142, align 8
  br label %143

143:                                              ; preds = %128, %130, %132
  %.0613 = phi i32 [ %.0611, %132 ], [ %.0614, %130 ], [ %.0614, %128 ]
  %.04 = phi i64 [ %137, %132 ], [ 0, %130 ], [ 0, %128 ]
  %144 = add i64 %77, %.04
  %145 = add i64 %144, %.13
  %146 = add i64 %145, %.1
  %147 = add i64 %146, 4
  %148 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_base to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %147)
  %149 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 1
  store i8* %148, i8** %149, align 8
  %150 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 1
  %151 = load i8*, i8** %150, align 8
  %152 = icmp eq i8* %151, null
  br i1 %152, label %153, label %154

153:                                              ; preds = %143
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.37.438, i32 0, i32 0), i32 1)
  br label %239

154:                                              ; preds = %143
  %155 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 1
  %156 = load i8*, i8** %155, align 8
  %157 = sext i32 %.0613 to i64
  %158 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %157
  %159 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %158, i32 0, i32 1
  %160 = load i8*, i8** %159, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %156, i8* align 1 %160, i64 %77, i1 false)
  %161 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 1
  %162 = load i8*, i8** %161, align 8
  %163 = getelementptr inbounds i8, i8* %162, i64 %77
  store i8 0, i8* %163, align 1
  %164 = sext i32 %.0613 to i64
  %165 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %164
  %166 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %165, i32 0, i32 0
  %167 = load i32, i32* %166, align 8
  %168 = icmp sgt i32 %167, 0
  br i1 %168, label %169, label %203

169:                                              ; preds = %154
  %170 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 1
  %171 = load i8*, i8** %170, align 8
  %172 = getelementptr inbounds i8, i8* %171, i64 %77
  %173 = getelementptr inbounds i8, i8* %172, i64 1
  %174 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 5
  store i8* %173, i8** %174, align 8
  %175 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 5
  %176 = load i8*, i8** %175, align 8
  %177 = sext i32 %.0613 to i64
  %178 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %177
  %179 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %178, i32 0, i32 5
  %180 = load i8*, i8** %179, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %176, i8* align 1 %180, i64 %.13, i1 false)
  %181 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 5
  %182 = load i8*, i8** %181, align 8
  %183 = getelementptr inbounds i8, i8* %182, i64 %.13
  store i8 0, i8* %183, align 1
  %184 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 5
  %185 = load i8*, i8** %184, align 8
  %186 = getelementptr inbounds i8, i8* %185, i64 %.13
  %187 = getelementptr inbounds i8, i8* %186, i64 1
  %188 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 6
  store i8* %187, i8** %188, align 8
  %189 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 6
  %190 = load i8*, i8** %189, align 8
  %191 = sext i32 %.0613 to i64
  %192 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %191
  %193 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %192, i32 0, i32 6
  %194 = load i8*, i8** %193, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %190, i8* align 1 %194, i64 %.1, i1 false)
  %195 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 6
  %196 = load i8*, i8** %195, align 8
  %197 = getelementptr inbounds i8, i8* %196, i64 %.1
  store i8 0, i8* %197, align 1
  %198 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 6
  %199 = load i8*, i8** %198, align 8
  %200 = getelementptr inbounds i8, i8* %199, i64 %.1
  %201 = getelementptr inbounds i8, i8* %200, i64 1
  %202 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 2
  store i8* %201, i8** %202, align 8
  br label %211

203:                                              ; preds = %154
  %204 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 5
  store i8* null, i8** %204, align 8
  %205 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 6
  store i8* null, i8** %205, align 8
  %206 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 1
  %207 = load i8*, i8** %206, align 8
  %208 = getelementptr inbounds i8, i8* %207, i64 %77
  %209 = getelementptr inbounds i8, i8* %208, i64 1
  %210 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 2
  store i8* %209, i8** %210, align 8
  br label %211

211:                                              ; preds = %203, %169
  %212 = icmp ne i64 %.04, 0
  br i1 %212, label %213, label %220

213:                                              ; preds = %211
  %214 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 2
  %215 = load i8*, i8** %214, align 8
  %216 = sext i32 %.0613 to i64
  %217 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %2, i64 %216
  %218 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %217, i32 0, i32 2
  %219 = load i8*, i8** %218, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %215, i8* align 1 %219, i64 %.04, i1 false)
  br label %220

220:                                              ; preds = %213, %211
  %.0617 = phi i32 [ %.0613, %213 ], [ %.0613, %211 ]
  %221 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 2
  %222 = load i8*, i8** %221, align 8
  %223 = getelementptr inbounds i8, i8* %222, i64 %.04
  store i8 0, i8* %223, align 1
  %224 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 0
  %225 = load i32, i32* %224, align 8
  %226 = icmp sgt i32 %225, 0
  br i1 %226, label %227, label %230

227:                                              ; preds = %220
  %228 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 3
  store i64 0, i64* %228, align 8
  %229 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 4
  store i64 %.04, i64* %229, align 8
  br label %233

230:                                              ; preds = %220
  %231 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 3
  store i64 %.04, i64* %231, align 8
  %232 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %53, i32 0, i32 4
  store i64 0, i64* %232, align 8
  br label %233

233:                                              ; preds = %230, %227
  %234 = load i32, i32* %47, align 4
  %235 = add nsw i32 %234, 1
  store i32 %235, i32* %47, align 4
  br label %236

236:                                              ; preds = %49, %233, %71
  %.0615 = phi i32 [ %.0611, %49 ], [ %.0617, %233 ], [ %.0616, %71 ]
  %237 = add nsw i32 %.0615, 1
  %238 = icmp slt i32 %237, %3
  br i1 %238, label %49, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %236
  %split = phi i32 [ 0, %236 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %44
  %.0.ph = phi i32 [ %split, %..loopexit_crit_edge ], [ 0, %44 ]
  br label %239

239:                                              ; preds = %.loopexit, %4, %153, %34
  %.0 = phi i32 [ 1, %34 ], [ 1, %153 ], [ 0, %4 ], [ %.0.ph, %.loopexit ]
  ret i32 %.0
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #16

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_inflate_claim(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  %5 = load i32, i32* %4, align 8
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %38

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  %9 = load i32, i32* %8, align 8
  %10 = lshr i32 %9, 24
  %11 = and i32 %10, 255
  %12 = trunc i32 %11 to i8
  %13 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  %14 = getelementptr inbounds i8, i8* %13, i64 0
  store i8 %12, i8* %14, align 16
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  %16 = load i32, i32* %15, align 8
  %17 = lshr i32 %16, 16
  %18 = and i32 %17, 255
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8 %19, i8* %21, align 1
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  %23 = load i32, i32* %22, align 8
  %24 = lshr i32 %23, 8
  %25 = and i32 %24, 255
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  %28 = getelementptr inbounds i8, i8* %27, i64 2
  store i8 %26, i8* %28, align 2
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  %30 = load i32, i32* %29, align 8
  %31 = and i32 %30, 255
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  %34 = getelementptr inbounds i8, i8* %33, i64 3
  store i8 %32, i8* %34, align 1
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  %36 = call i64 @png_safecat(i8* %35, i64 64, i64 4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.60.297, i32 0, i32 0))
  %37 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i32 0, i32 0
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* %37) #24
  unreachable

38:                                               ; preds = %2
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 110
  %40 = load i32, i32* %39, align 8
  %41 = lshr i32 %40, 2
  %42 = and i32 %41, 3
  %43 = icmp eq i32 %42, 3
  br i1 %43, label %44, label %46

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 70
  store i8 0, i8* %45, align 8
  br label %48

46:                                               ; preds = %38
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 70
  store i8 1, i8* %47, align 8
  br label %48

48:                                               ; preds = %46, %44
  %.0 = phi i32 [ 15, %44 ], [ 0, %46 ]
  %49 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %50 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %49, i32 0, i32 0
  store i8* null, i8** %50, align 8
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %52 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %51, i32 0, i32 1
  store i32 0, i32* %52, align 8
  %53 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %54 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %53, i32 0, i32 3
  store i8* null, i8** %54, align 8
  %55 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %56 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %55, i32 0, i32 4
  store i32 0, i32* %56, align 8
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %58 = load i32, i32* %57, align 8
  %59 = and i32 %58, 2
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %48
  %62 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %63 = call i32 @inflateReset2(%struct.z_stream_s* %62, i32 %.0)
  br label %72

64:                                               ; preds = %48
  %65 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %66 = call i32 @inflateInit2_(%struct.z_stream_s* %65, i32 %.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.61.298, i32 0, i32 0), i32 112)
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %72

68:                                               ; preds = %64
  %69 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %70 = load i32, i32* %69, align 8
  %71 = or i32 %70, 2
  store i32 %71, i32* %69, align 8
  br label %72

72:                                               ; preds = %64, %68, %61
  %.01 = phi i32 [ %63, %61 ], [ %66, %68 ], [ %66, %64 ]
  %73 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 110
  %74 = load i32, i32* %73, align 8
  %75 = lshr i32 %74, 8
  %76 = and i32 %75, 3
  %77 = icmp eq i32 %76, 3
  br i1 %77, label %78, label %81

78:                                               ; preds = %72
  %79 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %80 = call i32 @inflateValidate(%struct.z_stream_s* %79, i32 0)
  br label %81

81:                                               ; preds = %78, %72
  %.1 = phi i32 [ %80, %78 ], [ %.01, %72 ]
  %82 = icmp eq i32 %.1, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %81
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  store i32 %1, i32* %84, align 8
  br label %86

85:                                               ; preds = %81
  call void @png_zstream_error(%struct.png_struct_def* %0, i32 %.1)
  br label %86

86:                                               ; preds = %85, %83
  ret i32 %.1
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_inflate(%struct.png_struct_def* noalias %0, i32 %1, i32 %2, i8* %3, i32* %4, i8* %5, i64* %6) #11 {
  %8 = alloca [1024 x i8], align 16
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, %1
  br i1 %11, label %12, label %86

12:                                               ; preds = %7
  %13 = load i64, i64* %6, align 8
  %14 = load i32, i32* %4, align 4
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %16 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %15, i32 0, i32 0
  store i8* %3, i8** %16, align 8
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %18 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %17, i32 0, i32 1
  store i32 0, i32* %18, align 8
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %20 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %19, i32 0, i32 4
  store i32 0, i32* %20, align 8
  %21 = icmp ne i8* %5, null
  br i1 %21, label %22, label %25

22:                                               ; preds = %12
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %24 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %23, i32 0, i32 3
  store i8* %5, i8** %24, align 8
  br label %25

25:                                               ; preds = %22, %12
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %27 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %26, i32 0, i32 1
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %29 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %28, i32 0, i32 1
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %31 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %30, i32 0, i32 4
  %32 = icmp eq i8* %5, null
  %33 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i32 0, i32 0
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %35 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %34, i32 0, i32 3
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %37 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %36, i32 0, i32 4
  %38 = icmp ne i32 %2, 0
  %39 = select i1 %38, i32 4, i32 2
  br label %40

40:                                               ; preds = %57, %25
  %.03 = phi i64 [ %13, %25 ], [ %54, %57 ]
  %.02 = phi i32 [ %14, %25 ], [ %44, %57 ]
  %41 = load i32, i32* %27, align 8
  %42 = add i32 %.02, %41
  %43 = icmp ult i32 %42, -1
  %spec.select = select i1 %43, i32 %42, i32 -1
  %44 = sub i32 %42, %spec.select
  store i32 %spec.select, i32* %29, align 8
  %45 = load i32, i32* %31, align 8
  %46 = zext i32 %45 to i64
  %47 = add i64 %.03, %46
  br i1 %32, label %48, label %49

48:                                               ; preds = %40
  store i8* %33, i8** %35, align 8
  br label %49

49:                                               ; preds = %48, %40
  %.2 = phi i32 [ 1024, %48 ], [ -1, %40 ]
  %50 = zext i32 %.2 to i64
  %51 = icmp ult i64 %47, %50
  %52 = trunc i64 %47 to i32
  %spec.select5 = select i1 %51, i32 %52, i32 %.2
  store i32 %spec.select5, i32* %37, align 8
  %53 = zext i32 %spec.select5 to i64
  %54 = sub i64 %47, %53
  %55 = icmp ugt i64 %54, 0
  br i1 %55, label %57, label %56

56:                                               ; preds = %49
  br label %57

57:                                               ; preds = %49, %56
  %58 = phi i32 [ %39, %56 ], [ 0, %49 ]
  %59 = call i32 @png_zlib_inflate(%struct.png_struct_def* %0, i32 %58)
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %40, label %61

61:                                               ; preds = %57
  %.lcssa7 = phi i32 [ %59, %57 ]
  %.lcssa6 = phi i64 [ %54, %57 ]
  %62 = icmp eq i8* %5, null
  br i1 %62, label %63, label %66

63:                                               ; preds = %61
  %64 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %65 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %64, i32 0, i32 3
  store i8* null, i8** %65, align 8
  br label %66

66:                                               ; preds = %63, %61
  %67 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %68 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %67, i32 0, i32 1
  %69 = load i32, i32* %68, align 8
  %70 = add i32 0, %69
  %71 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %72 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %71, i32 0, i32 4
  %73 = load i32, i32* %72, align 8
  %74 = zext i32 %73 to i64
  %75 = add i64 %.lcssa6, %74
  %76 = icmp ugt i64 %75, 0
  br i1 %76, label %77, label %80

77:                                               ; preds = %66
  %78 = load i64, i64* %6, align 8
  %79 = sub i64 %78, %75
  store i64 %79, i64* %6, align 8
  br label %80

80:                                               ; preds = %77, %66
  %81 = icmp ugt i32 %70, 0
  br i1 %81, label %82, label %85

82:                                               ; preds = %80
  %83 = load i32, i32* %4, align 4
  %84 = sub i32 %83, %70
  store i32 %84, i32* %4, align 4
  br label %85

85:                                               ; preds = %82, %80
  call void @png_zstream_error(%struct.png_struct_def* %0, i32 %.lcssa7)
  br label %89

86:                                               ; preds = %7
  %87 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %88 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %87, i32 0, i32 6
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.62.296, i32 0, i32 0), i8** %88, align 8
  br label %89

89:                                               ; preds = %86, %85
  %.0 = phi i32 [ %.lcssa7, %85 ], [ -2, %86 ]
  ret i32 %.0
}

declare i32 @inflateReset2(%struct.z_stream_s*, i32) #13

declare i32 @inflateInit2_(%struct.z_stream_s*, i32, i8*, i32) #13

declare i32 @inflateValidate(%struct.z_stream_s*, i32) #13

; Function Attrs: noinline nounwind uwtable
define void @png_set_tIME(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, %struct.png_time_struct* %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  %5 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 true, i1 %5
  %6 = icmp eq %struct.png_time_struct* %2, null
  %or.cond1 = select i1 %or.cond, i1 true, i1 %6
  br i1 %or.cond1, label %55, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 512
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %55, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %2, i32 0, i32 1
  %14 = load i8, i8* %13, align 2
  %15 = zext i8 %14 to i32
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %47, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %2, i32 0, i32 1
  %19 = load i8, i8* %18, align 2
  %20 = zext i8 %19 to i32
  %21 = icmp sgt i32 %20, 12
  br i1 %21, label %47, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %2, i32 0, i32 2
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %47, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %2, i32 0, i32 2
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = icmp sgt i32 %30, 31
  br i1 %31, label %47, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %2, i32 0, i32 3
  %34 = load i8, i8* %33, align 2
  %35 = zext i8 %34 to i32
  %36 = icmp sgt i32 %35, 23
  br i1 %36, label %47, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %2, i32 0, i32 4
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = icmp sgt i32 %40, 59
  br i1 %41, label %47, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %2, i32 0, i32 5
  %44 = load i8, i8* %43, align 2
  %45 = zext i8 %44 to i32
  %46 = icmp sgt i32 %45, 60
  br i1 %46, label %47, label %48

47:                                               ; preds = %42, %37, %32, %27, %22, %17, %12
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.38.441, i32 0, i32 0))
  br label %55

48:                                               ; preds = %42
  %49 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 23
  %50 = bitcast %struct.png_time_struct* %49 to i8*
  %51 = bitcast %struct.png_time_struct* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 2 %51, i64 8, i1 false)
  %52 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %53 = load i32, i32* %52, align 8
  %54 = or i32 %53, 512
  store i32 %54, i32* %52, align 8
  br label %55

55:                                               ; preds = %3, %7, %48, %47
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_sCAL_s(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2, i8* %3, i8* %4) #11 {
  %6 = icmp eq %struct.png_struct_def* %0, null
  %7 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %6, i1 true, i1 %7
  br i1 %or.cond, label %70, label %8

8:                                                ; preds = %5
  switch i32 %2, label %9 [
    i32 1, label %10
    i32 2, label %10
  ]

9:                                                ; preds = %8
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.23.416, i32 0, i32 0)) #24
  unreachable

10:                                               ; preds = %8, %8
  %11 = icmp eq i8* %3, null
  br i1 %11, label %23, label %12

12:                                               ; preds = %10
  %13 = call i64 @strlen(i8* %3) #26
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i8, i8* %3, i64 0
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i32
  %19 = icmp eq i32 %18, 45
  br i1 %19, label %23, label %20

20:                                               ; preds = %15
  %21 = call i32 @png_check_fp_string(i8* %3, i64 %13)
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %24, label %23

23:                                               ; preds = %20, %15, %12, %10
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.24.417, i32 0, i32 0)) #24
  unreachable

24:                                               ; preds = %20
  %25 = icmp eq i8* %4, null
  br i1 %25, label %37, label %26

26:                                               ; preds = %24
  %27 = call i64 @strlen(i8* %4) #26
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %37, label %29

29:                                               ; preds = %26
  %30 = getelementptr inbounds i8, i8* %4, i64 0
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp eq i32 %32, 45
  br i1 %33, label %37, label %34

34:                                               ; preds = %29
  %35 = call i32 @png_check_fp_string(i8* %4, i64 %27)
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %38, label %37

37:                                               ; preds = %34, %29, %26, %24
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.25.418, i32 0, i32 0)) #24
  unreachable

38:                                               ; preds = %34
  %39 = trunc i32 %2 to i8
  %40 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 50
  store i8 %39, i8* %40, align 4
  %41 = add i64 %13, 1
  %42 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %41)
  %43 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 51
  store i8* %42, i8** %43, align 8
  %44 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 51
  %45 = load i8*, i8** %44, align 8
  %46 = icmp eq i8* %45, null
  br i1 %46, label %47, label %48

47:                                               ; preds = %38
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.26.419, i32 0, i32 0))
  br label %70

48:                                               ; preds = %38
  %49 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 51
  %50 = load i8*, i8** %49, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %3, i64 %41, i1 false)
  %51 = add i64 %27, 1
  %52 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %51)
  %53 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 52
  store i8* %52, i8** %53, align 8
  %54 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 52
  %55 = load i8*, i8** %54, align 8
  %56 = icmp eq i8* %55, null
  br i1 %56, label %57, label %61

57:                                               ; preds = %48
  %58 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 51
  %59 = load i8*, i8** %58, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %59)
  %60 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 51
  store i8* null, i8** %60, align 8
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.26.419, i32 0, i32 0))
  br label %70

61:                                               ; preds = %48
  %62 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 52
  %63 = load i8*, i8** %62, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %4, i64 %51, i1 false)
  %64 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %65 = load i32, i32* %64, align 8
  %66 = or i32 %65, 16384
  store i32 %66, i32* %64, align 8
  %67 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %68 = load i32, i32* %67, align 4
  %69 = or i32 %68, 256
  store i32 %69, i32* %67, align 4
  br label %70

70:                                               ; preds = %5, %61, %57, %47
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_pCAL(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i8* %2, i32 %3, i32 %4, i32 %5, i32 %6, i8* %7, i8** %8) #11 {
  %10 = icmp eq %struct.png_struct_def* %0, null
  %11 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %10, i1 true, i1 %11
  %12 = icmp eq i8* %2, null
  %or.cond1 = select i1 %or.cond, i1 true, i1 %12
  %13 = icmp eq i8* %7, null
  %or.cond2 = select i1 %or.cond1, i1 true, i1 %13
  br i1 %or.cond2, label %108, label %14

14:                                               ; preds = %9
  %15 = icmp sgt i32 %6, 0
  %16 = icmp eq i8** %8, null
  %or.cond3 = select i1 %15, i1 %16, i1 false
  br i1 %or.cond3, label %108, label %17

17:                                               ; preds = %14
  %18 = call i64 @strlen(i8* %2) #26
  %19 = add i64 %18, 1
  %20 = icmp slt i32 %5, 0
  %21 = icmp sgt i32 %5, 3
  %or.cond4 = or i1 %20, %21
  br i1 %or.cond4, label %22, label %23

22:                                               ; preds = %17
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.16.407, i32 0, i32 0), i32 1)
  br label %108

23:                                               ; preds = %17
  %24 = icmp slt i32 %6, 0
  %25 = icmp sgt i32 %6, 255
  %or.cond5 = or i1 %24, %25
  br i1 %or.cond5, label %27, label %.preheader

.preheader:                                       ; preds = %23
  %26 = icmp slt i32 0, %6
  br i1 %26, label %.lr.ph9, label %39

.lr.ph9:                                          ; preds = %.preheader
  %wide.trip.count14 = zext i32 %6 to i64
  br label %29

27:                                               ; preds = %23
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.17.408, i32 0, i32 0), i32 1)
  br label %108

28:                                               ; preds = %32
  %exitcond15 = icmp ne i64 %wide.trip.count14, %indvars.iv.next12
  br i1 %exitcond15, label %29, label %._crit_edge10

29:                                               ; preds = %.lr.ph9, %28
  %indvars.iv11 = phi i64 [ 0, %.lr.ph9 ], [ %indvars.iv.next12, %28 ]
  %scevgep20 = getelementptr i8*, i8** %8, i64 %indvars.iv11
  %30 = load i8*, i8** %scevgep20, align 8
  %31 = icmp eq i8* %30, null
  br i1 %31, label %38, label %32

32:                                               ; preds = %29
  %scevgep21 = getelementptr i8*, i8** %8, i64 %indvars.iv11
  %33 = load i8*, i8** %scevgep21, align 8
  %scevgep22 = getelementptr i8*, i8** %8, i64 %indvars.iv11
  %34 = load i8*, i8** %scevgep22, align 8
  %35 = call i64 @strlen(i8* %34) #26
  %36 = call i32 @png_check_fp_string(i8* %33, i64 %35)
  %37 = icmp ne i32 %36, 0
  %indvars.iv.next12 = add nuw nsw i64 %indvars.iv11, 1
  br i1 %37, label %28, label %38

38:                                               ; preds = %32, %29
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.18.409, i32 0, i32 0), i32 1)
  br label %108

._crit_edge10:                                    ; preds = %28
  br label %39

39:                                               ; preds = %._crit_edge10, %.preheader
  %40 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %19)
  %41 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 38
  store i8* %40, i8** %41, align 8
  %42 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 38
  %43 = load i8*, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %45, label %46

45:                                               ; preds = %39
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.19.410, i32 0, i32 0), i32 1)
  br label %108

46:                                               ; preds = %39
  %47 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 38
  %48 = load i8*, i8** %47, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %48, i8* align 1 %2, i64 %19, i1 false)
  %49 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 39
  store i32 %3, i32* %49, align 8
  %50 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 40
  store i32 %4, i32* %50, align 4
  %51 = trunc i32 %5 to i8
  %52 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 43
  store i8 %51, i8* %52, align 8
  %53 = trunc i32 %6 to i8
  %54 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 44
  store i8 %53, i8* %54, align 1
  %55 = call i64 @strlen(i8* %7) #26
  %56 = add i64 %55, 1
  %57 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %56)
  %58 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 41
  store i8* %57, i8** %58, align 8
  %59 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 41
  %60 = load i8*, i8** %59, align 8
  %61 = icmp eq i8* %60, null
  br i1 %61, label %62, label %63

62:                                               ; preds = %46
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.20.411, i32 0, i32 0))
  br label %108

63:                                               ; preds = %46
  %64 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 41
  %65 = load i8*, i8** %64, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* align 1 %7, i64 %56, i1 false)
  %66 = add i32 %6, 1
  %67 = zext i32 %66 to i64
  %68 = mul i64 %67, 8
  %69 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %68)
  %70 = bitcast i8* %69 to i8**
  %71 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 42
  store i8** %70, i8*** %71, align 8
  %72 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 42
  %73 = load i8**, i8*** %72, align 8
  %74 = icmp eq i8** %73, null
  br i1 %74, label %75, label %76

75:                                               ; preds = %63
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.21.412, i32 0, i32 0))
  br label %108

76:                                               ; preds = %63
  %77 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 42
  %78 = load i8**, i8*** %77, align 8
  %79 = bitcast i8** %78 to i8*
  %80 = add i32 %6, 1
  %81 = zext i32 %80 to i64
  %82 = mul i64 %81, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %79, i8 0, i64 %82, i1 false)
  %83 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 42
  %84 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 42
  %85 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 42
  %86 = icmp slt i32 0, %6
  br i1 %86, label %.lr.ph, label %101

.lr.ph:                                           ; preds = %76
  %wide.trip.count = zext i32 %6 to i64
  br label %87

87:                                               ; preds = %.lr.ph, %97
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %97 ]
  %scevgep = getelementptr i8*, i8** %8, i64 %indvars.iv
  %88 = load i8*, i8** %scevgep, align 8
  %89 = call i64 @strlen(i8* %88) #26
  %90 = add i64 %89, 1
  %91 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %90)
  %92 = load i8**, i8*** %83, align 8
  %scevgep17 = getelementptr i8*, i8** %92, i64 %indvars.iv
  store i8* %91, i8** %scevgep17, align 8
  %93 = load i8**, i8*** %84, align 8
  %scevgep18 = getelementptr i8*, i8** %93, i64 %indvars.iv
  %94 = load i8*, i8** %scevgep18, align 8
  %95 = icmp eq i8* %94, null
  br i1 %95, label %96, label %97

96:                                               ; preds = %87
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.22.413, i32 0, i32 0))
  br label %108

97:                                               ; preds = %87
  %98 = load i8**, i8*** %85, align 8
  %scevgep19 = getelementptr i8*, i8** %98, i64 %indvars.iv
  %99 = load i8*, i8** %scevgep19, align 8
  %scevgep16 = getelementptr i8*, i8** %8, i64 %indvars.iv
  %100 = load i8*, i8** %scevgep16, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %99, i8* align 1 %100, i64 %90, i1 false)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %wide.trip.count, %indvars.iv.next
  br i1 %exitcond, label %87, label %._crit_edge

._crit_edge:                                      ; preds = %97
  br label %101

101:                                              ; preds = %._crit_edge, %76
  %102 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %103 = load i32, i32* %102, align 8
  %104 = or i32 %103, 1024
  store i32 %104, i32* %102, align 8
  %105 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %106 = load i32, i32* %105, align 4
  %107 = or i32 %106, 128
  store i32 %107, i32* %105, align 4
  br label %108

108:                                              ; preds = %9, %14, %101, %96, %75, %62, %45, %38, %27, %22
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_oFFs(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2, i32 %3, i32 %4) #11 {
  %6 = icmp eq %struct.png_struct_def* %0, null
  %7 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %6, i1 true, i1 %7
  br i1 %or.cond, label %16, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 28
  store i32 %2, i32* %9, align 4
  %10 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 29
  store i32 %3, i32* %10, align 8
  %11 = trunc i32 %4 to i8
  %12 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 30
  store i8 %11, i8* %12, align 4
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = or i32 %14, 256
  store i32 %15, i32* %13, align 8
  br label %16

16:                                               ; preds = %5, %8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_pHYs(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2, i32 %3, i32 %4) #11 {
  %6 = icmp eq %struct.png_struct_def* %0, null
  %7 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %6, i1 true, i1 %7
  br i1 %or.cond, label %16, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 31
  store i32 %2, i32* %9, align 8
  %10 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 32
  store i32 %3, i32* %10, align 4
  %11 = trunc i32 %4 to i8
  %12 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 33
  store i8 %11, i8* %12, align 8
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = or i32 %14, 128
  store i32 %15, i32* %13, align 8
  br label %16

16:                                               ; preds = %5, %8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_hIST(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i16* %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  %5 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 true, i1 %5
  br i1 %or.cond, label %45, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 5
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 5
  %13 = load i16, i16* %12, align 8
  %14 = zext i16 %13 to i32
  %15 = icmp sgt i32 %14, 256
  br i1 %15, label %16, label %17

16:                                               ; preds = %11, %6
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.14.399, i32 0, i32 0))
  br label %45

17:                                               ; preds = %11
  call void @png_free_data(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 8, i32 0)
  %18 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 512)
  %19 = bitcast i8* %18 to i16*
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 37
  store i16* %19, i16** %20, align 8
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 37
  %22 = load i16*, i16** %21, align 8
  %23 = icmp eq i16* %22, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %17
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.15.400, i32 0, i32 0))
  br label %45

25:                                               ; preds = %17
  %26 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %27 = load i32, i32* %26, align 4
  %28 = or i32 %27, 8
  store i32 %28, i32* %26, align 4
  %29 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 5
  %30 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 37
  %31 = load i16, i16* %29, align 8
  %32 = zext i16 %31 to i32
  %33 = icmp slt i32 0, %32
  br i1 %33, label %.lr.ph, label %41

.lr.ph:                                           ; preds = %25
  br label %34

34:                                               ; preds = %.lr.ph, %34
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %34 ]
  %scevgep = getelementptr i16, i16* %2, i64 %indvars.iv
  %35 = load i16, i16* %scevgep, align 2
  %36 = load i16*, i16** %30, align 8
  %scevgep3 = getelementptr i16, i16* %36, i64 %indvars.iv
  store i16 %35, i16* %scevgep3, align 2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %37 = load i16, i16* %29, align 8
  %38 = zext i16 %37 to i32
  %39 = zext i32 %38 to i64
  %40 = icmp ult i64 %indvars.iv.next, %39
  br i1 %40, label %34, label %._crit_edge

._crit_edge:                                      ; preds = %34
  br label %41

41:                                               ; preds = %._crit_edge, %25
  %42 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %43 = load i32, i32* %42, align 8
  %44 = or i32 %43, 64
  store i32 %44, i32* %42, align 8
  br label %45

45:                                               ; preds = %3, %41, %24, %16
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_bKGD(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, %struct.png_color_16_struct* %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  %5 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 true, i1 %5
  %6 = icmp eq %struct.png_color_16_struct* %2, null
  %or.cond1 = select i1 %or.cond, i1 true, i1 %6
  br i1 %or.cond1, label %14, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 27
  %9 = bitcast %struct.png_color_16_struct* %8 to i8*
  %10 = bitcast %struct.png_color_16_struct* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %9, i8* align 2 %10, i64 10, i1 false)
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = or i32 %12, 32
  store i32 %13, i32* %11, align 8
  br label %14

14:                                               ; preds = %3, %7
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_tRNS(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i8* %2, i32 %3, %struct.png_color_16_struct* %4) #11 {
  %6 = icmp eq %struct.png_struct_def* %0, null
  %7 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %6, i1 true, i1 %7
  br i1 %or.cond, label %82, label %8

8:                                                ; preds = %5
  %9 = icmp ne i8* %2, null
  br i1 %9, label %10, label %23

10:                                               ; preds = %8
  call void @png_free_data(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 8192, i32 0)
  %11 = icmp sgt i32 %3, 0
  %12 = icmp sle i32 %3, 256
  %or.cond1 = and i1 %11, %12
  br i1 %or.cond1, label %13, label %19

13:                                               ; preds = %10
  %14 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 256)
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 25
  store i8* %14, i8** %15, align 8
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 25
  %17 = load i8*, i8** %16, align 8
  %18 = sext i32 %3 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %2, i64 %18, i1 false)
  br label %19

19:                                               ; preds = %13, %10
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 25
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  store i8* %21, i8** %22, align 8
  br label %23

23:                                               ; preds = %19, %8
  %24 = icmp ne %struct.png_color_16_struct* %4, null
  br i1 %24, label %25, label %71

25:                                               ; preds = %23
  %26 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  %27 = load i8, i8* %26, align 4
  %28 = zext i8 %27 to i32
  %29 = icmp slt i32 %28, 16
  br i1 %29, label %30, label %66

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  %32 = load i8, i8* %31, align 4
  %33 = zext i8 %32 to i32
  %34 = shl i32 1, %33
  %35 = sub nsw i32 %34, 1
  %36 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %45

40:                                               ; preds = %30
  %41 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %4, i32 0, i32 4
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = icmp sgt i32 %43, %35
  br i1 %44, label %65, label %45

45:                                               ; preds = %40, %30
  %46 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = icmp eq i32 %48, 2
  br i1 %49, label %50, label %66

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %4, i32 0, i32 1
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i32
  %54 = icmp sgt i32 %53, %35
  br i1 %54, label %65, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %4, i32 0, i32 2
  %57 = load i16, i16* %56, align 2
  %58 = zext i16 %57 to i32
  %59 = icmp sgt i32 %58, %35
  br i1 %59, label %65, label %60

60:                                               ; preds = %55
  %61 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %4, i32 0, i32 3
  %62 = load i16, i16* %61, align 2
  %63 = zext i16 %62 to i32
  %64 = icmp sgt i32 %63, %35
  br i1 %64, label %65, label %66

65:                                               ; preds = %60, %55, %50, %40
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.39.444, i32 0, i32 0))
  br label %66

66:                                               ; preds = %45, %60, %65, %25
  %67 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 26
  %68 = bitcast %struct.png_color_16_struct* %67 to i8*
  %69 = bitcast %struct.png_color_16_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 2 %69, i64 10, i1 false)
  %70 = icmp eq i32 %3, 0
  %spec.select = select i1 %70, i32 1, i32 %3
  br label %71

71:                                               ; preds = %66, %23
  %.1 = phi i32 [ %spec.select, %66 ], [ %3, %23 ]
  %72 = trunc i32 %.1 to i16
  %73 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 6
  store i16 %72, i16* %73, align 2
  %74 = icmp ne i32 %.1, 0
  br i1 %74, label %75, label %82

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %77 = load i32, i32* %76, align 8
  %78 = or i32 %77, 16
  store i32 %78, i32* %76, align 8
  %79 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %80 = load i32, i32* %79, align 4
  %81 = or i32 %80, 8192
  store i32 %81, i32* %79, align 4
  br label %82

82:                                               ; preds = %5, %75, %71
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_sPLT(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, %struct.png_sPLT_struct* %2, i32 %3) #11 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %5, i1 true, i1 %6
  %7 = icmp sle i32 %3, 0
  %or.cond5 = select i1 %or.cond, i1 true, i1 %7
  %8 = icmp eq %struct.png_sPLT_struct* %2, null
  %or.cond6 = select i1 %or.cond5, i1 true, i1 %8
  br i1 %or.cond6, label %98, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 48
  %11 = load %struct.png_sPLT_struct*, %struct.png_sPLT_struct** %10, align 8
  %12 = bitcast %struct.png_sPLT_struct* %11 to i8*
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 49
  %14 = load i32, i32* %13, align 8
  %15 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i8*, i32, i32, i64)* @png_realloc_array to i8* (%struct.png_struct_def*, i8*, i32, i32, i64)*)(%struct.png_struct_def* %0, i8* %12, i32 %14, i32 %3, i64 32)
  %16 = bitcast i8* %15 to %struct.png_sPLT_struct*
  %17 = icmp eq %struct.png_sPLT_struct* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %9
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40.447, i32 0, i32 0), i32 1)
  br label %98

19:                                               ; preds = %9
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 48
  %21 = load %struct.png_sPLT_struct*, %struct.png_sPLT_struct** %20, align 8
  %22 = bitcast %struct.png_sPLT_struct* %21 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %22)
  %23 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 48
  store %struct.png_sPLT_struct* %16, %struct.png_sPLT_struct** %23, align 8
  %24 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %25 = load i32, i32* %24, align 4
  %26 = or i32 %25, 32
  store i32 %26, i32* %24, align 4
  %27 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 49
  %28 = load i32, i32* %27, align 8
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %16, i64 %29
  %31 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %32 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 49
  br label %33

33:                                               ; preds = %92, %19
  %.03 = phi %struct.png_sPLT_struct* [ %2, %19 ], [ %.14, %92 ]
  %.01 = phi i32 [ %3, %19 ], [ %93, %92 ]
  %.0 = phi %struct.png_sPLT_struct* [ %30, %19 ], [ %.1, %92 ]
  %34 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.03, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = icmp eq i8* %35, null
  br i1 %36, label %41, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.03, i32 0, i32 2
  %39 = load %struct.png_sPLT_entry_struct*, %struct.png_sPLT_entry_struct** %38, align 8
  %40 = icmp eq %struct.png_sPLT_entry_struct* %39, null
  br i1 %40, label %41, label %42

41:                                               ; preds = %37, %33
  call void @png_app_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.41.448, i32 0, i32 0))
  br label %92

42:                                               ; preds = %37
  %43 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.03, i32 0, i32 1
  %44 = load i8, i8* %43, align 8
  %45 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.0, i32 0, i32 1
  store i8 %44, i8* %45, align 8
  %46 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.03, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = call i64 @strlen(i8* %47) #26
  %49 = add i64 %48, 1
  %50 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_base to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %49)
  %51 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.0, i32 0, i32 0
  store i8* %50, i8** %51, align 8
  %52 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.0, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq i8* %53, null
  br i1 %54, label %..loopexit_crit_edge, label %55

55:                                               ; preds = %42
  %56 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.0, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.03, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %59, i64 %49, i1 false)
  %60 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.03, i32 0, i32 3
  %61 = load i32, i32* %60, align 8
  %62 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i32, i64)* @png_malloc_array to i8* (%struct.png_struct_def*, i32, i64)*)(%struct.png_struct_def* %0, i32 %61, i64 10)
  %63 = bitcast i8* %62 to %struct.png_sPLT_entry_struct*
  %64 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.0, i32 0, i32 2
  store %struct.png_sPLT_entry_struct* %63, %struct.png_sPLT_entry_struct** %64, align 8
  %65 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.0, i32 0, i32 2
  %66 = load %struct.png_sPLT_entry_struct*, %struct.png_sPLT_entry_struct** %65, align 8
  %67 = icmp eq %struct.png_sPLT_entry_struct* %66, null
  br i1 %67, label %68, label %72

68:                                               ; preds = %55
  %.01.lcssa8 = phi i32 [ %.01, %55 ]
  %.0.lcssa7 = phi %struct.png_sPLT_struct* [ %.0, %55 ]
  %69 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.0.lcssa7, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %70)
  %71 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.0.lcssa7, i32 0, i32 0
  store i8* null, i8** %71, align 8
  br label %95

72:                                               ; preds = %55
  %73 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.03, i32 0, i32 3
  %74 = load i32, i32* %73, align 8
  %75 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.0, i32 0, i32 3
  store i32 %74, i32* %75, align 8
  %76 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.0, i32 0, i32 2
  %77 = load %struct.png_sPLT_entry_struct*, %struct.png_sPLT_entry_struct** %76, align 8
  %78 = bitcast %struct.png_sPLT_entry_struct* %77 to i8*
  %79 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.03, i32 0, i32 2
  %80 = load %struct.png_sPLT_entry_struct*, %struct.png_sPLT_entry_struct** %79, align 8
  %81 = bitcast %struct.png_sPLT_entry_struct* %80 to i8*
  %82 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.03, i32 0, i32 3
  %83 = load i32, i32* %82, align 8
  %84 = zext i32 %83 to i64
  %85 = mul i64 %84, 10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %78, i8* align 2 %81, i64 %85, i1 false)
  %86 = load i32, i32* %31, align 8
  %87 = or i32 %86, 8192
  store i32 %87, i32* %31, align 8
  %88 = load i32, i32* %32, align 8
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %32, align 8
  %90 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.0, i32 1
  %91 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %.03, i32 1
  br label %92

92:                                               ; preds = %72, %41
  %.14 = phi %struct.png_sPLT_struct* [ %.03, %41 ], [ %91, %72 ]
  %.1 = phi %struct.png_sPLT_struct* [ %.0, %41 ], [ %90, %72 ]
  %93 = add i32 %.01, -1
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %33, label %.loopexitsplit

.loopexitsplit:                                   ; preds = %92
  br label %.loopexit

..loopexit_crit_edge:                             ; preds = %42
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexitsplit, %..loopexit_crit_edge
  %.12.ph = phi i32 [ %.01, %..loopexit_crit_edge ], [ 0, %.loopexitsplit ]
  br label %95

95:                                               ; preds = %.loopexit, %68
  %.12 = phi i32 [ %.01.lcssa8, %68 ], [ %.12.ph, %.loopexit ]
  %96 = icmp sgt i32 %.12, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %95
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.42.449, i32 0, i32 0), i32 1)
  br label %98

98:                                               ; preds = %4, %18, %97, %95
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_inflate_read(%struct.png_struct_def* noalias %0, i8* %1, i32 %2, i32* %3, i8* %4, i64* %5, i32 %6) #11 {
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %13, label %80

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %15 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %14, i32 0, i32 3
  store i8* %4, i8** %15, align 8
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %17 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %16, i32 0, i32 4
  store i32 0, i32* %17, align 8
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %19 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %18, i32 0, i32 4
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %21 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %20, i32 0, i32 1
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %23 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %22, i32 0, i32 0
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %25 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %24, i32 0, i32 1
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %27 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %26, i32 0, i32 4
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %29 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %28, i32 0, i32 4
  %30 = icmp ne i32 %6, 0
  %31 = select i1 %30, i32 4, i32 2
  br label %.critedge3

.critedge3:                                       ; preds = %.critedge3.backedge, %13
  %.02 = phi i32 [ %2, %13 ], [ %.2, %.critedge3.backedge ]
  %32 = load i32, i32* %21, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %45

34:                                               ; preds = %.critedge3
  %35 = load i32, i32* %3, align 4
  %36 = icmp ugt i32 %.02, %35
  br i1 %36, label %37, label %39

37:                                               ; preds = %34
  %38 = load i32, i32* %3, align 4
  br label %39

39:                                               ; preds = %37, %34
  %.1 = phi i32 [ %38, %37 ], [ %.02, %34 ]
  %40 = load i32, i32* %3, align 4
  %41 = sub i32 %40, %.1
  store i32 %41, i32* %3, align 4
  %42 = icmp ugt i32 %.1, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %39
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %1, i32 %.1)
  br label %44

44:                                               ; preds = %43, %39
  store i8* %1, i8** %23, align 8
  store i32 %.1, i32* %25, align 8
  br label %45

45:                                               ; preds = %44, %.critedge3
  %.2 = phi i32 [ %.1, %44 ], [ %.02, %.critedge3 ]
  %46 = load i32, i32* %27, align 8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %58

48:                                               ; preds = %45
  %49 = load i64, i64* %5, align 8
  %50 = icmp ugt i64 4294967295, %49
  br i1 %50, label %51, label %54

51:                                               ; preds = %48
  %52 = load i64, i64* %5, align 8
  %53 = trunc i64 %52 to i32
  br label %54

54:                                               ; preds = %51, %48
  %.01 = phi i32 [ %53, %51 ], [ -1, %48 ]
  %55 = zext i32 %.01 to i64
  %56 = load i64, i64* %5, align 8
  %57 = sub i64 %56, %55
  store i64 %57, i64* %5, align 8
  store i32 %.01, i32* %29, align 8
  br label %58

58:                                               ; preds = %54, %45
  %59 = load i32, i32* %3, align 4
  %60 = icmp ugt i32 %59, 0
  br i1 %60, label %62, label %61

61:                                               ; preds = %58
  br label %62

62:                                               ; preds = %58, %61
  %63 = phi i32 [ %31, %61 ], [ 0, %58 ]
  %64 = call i32 @png_zlib_inflate(%struct.png_struct_def* %0, i32 %63)
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %.critedge

66:                                               ; preds = %62
  %67 = load i64, i64* %5, align 8
  %68 = icmp ugt i64 %67, 0
  br i1 %68, label %.critedge3.backedge, label %69

69:                                               ; preds = %66
  %70 = load i32, i32* %19, align 8
  %71 = icmp ugt i32 %70, 0
  br i1 %71, label %.critedge3.backedge, label %.critedge

.critedge3.backedge:                              ; preds = %69, %66
  br label %.critedge3

.critedge:                                        ; preds = %62, %69
  %.lcssa = phi i32 [ %64, %62 ], [ %64, %69 ]
  %72 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %73 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %72, i32 0, i32 4
  %74 = load i32, i32* %73, align 8
  %75 = zext i32 %74 to i64
  %76 = load i64, i64* %5, align 8
  %77 = add i64 %76, %75
  store i64 %77, i64* %5, align 8
  %78 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %79 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %78, i32 0, i32 4
  store i32 0, i32* %79, align 8
  call void @png_zstream_error(%struct.png_struct_def* %0, i32 %.lcssa)
  br label %83

80:                                               ; preds = %7
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %82 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %81, i32 0, i32 6
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.62.296, i32 0, i32 0), i8** %82, align 8
  br label %83

83:                                               ; preds = %80, %.critedge
  %.0 = phi i32 [ %.lcssa, %.critedge ], [ -2, %80 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_get_fixed_point(%struct.png_struct_def* noalias %0, i8* %1) #11 {
  %3 = load i8, i8* %1, align 1
  %4 = zext i8 %3 to i32
  %5 = shl i32 %4, 24
  %6 = getelementptr inbounds i8, i8* %1, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = shl i32 %8, 16
  %10 = add i32 %5, %9
  %11 = getelementptr inbounds i8, i8* %1, i64 2
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = shl i32 %13, 8
  %15 = add i32 %10, %14
  %16 = getelementptr inbounds i8, i8* %1, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = add i32 %15, %18
  %20 = icmp ule i32 %19, 2147483647
  br i1 %20, label %24, label %21

21:                                               ; preds = %2
  %22 = icmp ne %struct.png_struct_def* %0, null
  br i1 %22, label %23, label %24

23:                                               ; preds = %21
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.59.279, i32 0, i32 0))
  br label %24

24:                                               ; preds = %21, %23, %2
  %.0 = phi i32 [ %19, %2 ], [ -1, %23 ], [ -1, %21 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_sBIT(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, %struct.png_color_8_struct* %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  %5 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 true, i1 %5
  %6 = icmp eq %struct.png_color_8_struct* %2, null
  %or.cond1 = select i1 %or.cond, i1 true, i1 %6
  br i1 %or.cond1, label %14, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 24
  %9 = bitcast %struct.png_color_8_struct* %8 to i8*
  %10 = bitcast %struct.png_color_8_struct* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 1 %10, i64 5, i1 false)
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = or i32 %12, 2
  store i32 %13, i32* %11, align 8
  br label %14

14:                                               ; preds = %3, %7
  ret void
}

declare void @magma_bug003(...) #13

; Function Attrs: noinline nounwind uwtable
define void @png_set_PLTE(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, %struct.png_color_struct* %2, i32 %3) #11 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %5, i1 true, i1 %6
  br i1 %or.cond, label %64, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = icmp eq i32 %10, 3
  br i1 %11, label %12, label %17

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  %14 = load i8, i8* %13, align 4
  %15 = zext i8 %14 to i32
  %16 = shl i32 1, %15
  br label %17

17:                                               ; preds = %7, %12
  %18 = phi i32 [ %16, %12 ], [ 256, %7 ]
  %19 = icmp slt i32 %3, 0
  %20 = icmp sgt i32 %3, 256
  %or.cond1 = or i1 %19, %20
  br i1 %or.cond1, label %21, label %28

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = icmp eq i32 %24, 3
  br i1 %25, label %26, label %27

26:                                               ; preds = %21
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.29.426, i32 0, i32 0)) #24
  unreachable

27:                                               ; preds = %21
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.29.426, i32 0, i32 0))
  br label %64

28:                                               ; preds = %17
  %29 = icmp sgt i32 %3, 0
  %30 = icmp eq %struct.png_color_struct* %2, null
  %or.cond2 = select i1 %29, i1 %30, i1 false
  br i1 %or.cond2, label %38, label %31

31:                                               ; preds = %28
  %32 = icmp eq i32 %3, 0
  br i1 %32, label %33, label %39

33:                                               ; preds = %31
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 122
  %35 = load i32, i32* %34, align 8
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %28, %33
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30.427, i32 0, i32 0), i32 2)
  br label %64

39:                                               ; preds = %33, %31
  call void @png_free_data(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 4096, i32 0)
  %40 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_calloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 768)
  %41 = bitcast i8* %40 to %struct.png_color_struct*
  %42 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  store %struct.png_color_struct* %41, %struct.png_color_struct** %42, align 8
  %43 = icmp sgt i32 %3, 0
  br i1 %43, label %44, label %51

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %46 = load %struct.png_color_struct*, %struct.png_color_struct** %45, align 8
  %47 = bitcast %struct.png_color_struct* %46 to i8*
  %48 = bitcast %struct.png_color_struct* %2 to i8*
  %49 = zext i32 %3 to i64
  %50 = mul i64 %49, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 1 %48, i64 %50, i1 false)
  br label %51

51:                                               ; preds = %44, %39
  %52 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %53 = load %struct.png_color_struct*, %struct.png_color_struct** %52, align 8
  %54 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 4
  store %struct.png_color_struct* %53, %struct.png_color_struct** %54, align 8
  %55 = trunc i32 %3 to i16
  %56 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 53
  store i16 %55, i16* %56, align 8
  %57 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 5
  store i16 %55, i16* %57, align 8
  %58 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %59 = load i32, i32* %58, align 4
  %60 = or i32 %59, 4096
  store i32 %60, i32* %58, align 4
  %61 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %62 = load i32, i32* %61, align 8
  %63 = or i32 %62, 8
  store i32 %63, i32* %61, align 8
  br label %64

64:                                               ; preds = %4, %51, %38, %27
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_cache_unknown_chunk(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %4 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %3, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ne i8* %5, null
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %9 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %8, i32 0, i32 1
  %10 = load i8*, i8** %9, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %10)
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %12 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %11, i32 0, i32 1
  store i8* null, i8** %12, align 8
  br label %13

13:                                               ; preds = %7, %2
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 135
  %15 = load i64, i64* %14, align 8
  %16 = icmp ugt i64 %15, 0
  br i1 %16, label %17, label %24

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 135
  %19 = load i64, i64* %18, align 8
  %20 = icmp ult i64 %19, -1
  br i1 %20, label %21, label %24

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 135
  %23 = load i64, i64* %22, align 8
  br label %24

24:                                               ; preds = %21, %17, %13
  %.01 = phi i64 [ %23, %21 ], [ -1, %17 ], [ -1, %13 ]
  %25 = zext i32 %1 to i64
  %26 = icmp ule i64 %25, %.01
  br i1 %26, label %27, label %84

27:                                               ; preds = %24
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %29 = load i32, i32* %28, align 8
  %30 = lshr i32 %29, 24
  %31 = and i32 %30, 255
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %34 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %33, i32 0, i32 0
  %35 = getelementptr inbounds [5 x i8], [5 x i8]* %34, i32 0, i32 0
  %36 = getelementptr inbounds i8, i8* %35, i64 0
  store i8 %32, i8* %36, align 8
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %38 = load i32, i32* %37, align 8
  %39 = lshr i32 %38, 16
  %40 = and i32 %39, 255
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %43 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %42, i32 0, i32 0
  %44 = getelementptr inbounds [5 x i8], [5 x i8]* %43, i32 0, i32 0
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8 %41, i8* %45, align 1
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %47 = load i32, i32* %46, align 8
  %48 = lshr i32 %47, 8
  %49 = and i32 %48, 255
  %50 = trunc i32 %49 to i8
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %52 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %51, i32 0, i32 0
  %53 = getelementptr inbounds [5 x i8], [5 x i8]* %52, i32 0, i32 0
  %54 = getelementptr inbounds i8, i8* %53, i64 2
  store i8 %50, i8* %54, align 2
  %55 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %56 = load i32, i32* %55, align 8
  %57 = and i32 %56, 255
  %58 = trunc i32 %57 to i8
  %59 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %60 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %59, i32 0, i32 0
  %61 = getelementptr inbounds [5 x i8], [5 x i8]* %60, i32 0, i32 0
  %62 = getelementptr inbounds i8, i8* %61, i64 3
  store i8 %58, i8* %62, align 1
  %63 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %64 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %63, i32 0, i32 0
  %65 = getelementptr inbounds [5 x i8], [5 x i8]* %64, i32 0, i32 0
  %66 = getelementptr inbounds i8, i8* %65, i64 4
  store i8 0, i8* %66, align 4
  %67 = zext i32 %1 to i64
  %68 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %69 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %68, i32 0, i32 2
  store i64 %67, i64* %69, align 8
  %70 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %71 = load i32, i32* %70, align 4
  %72 = trunc i32 %71 to i8
  %73 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %74 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %73, i32 0, i32 3
  store i8 %72, i8* %74, align 8
  %75 = icmp eq i32 %1, 0
  br i1 %75, label %76, label %79

76:                                               ; preds = %27
  %77 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %78 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %77, i32 0, i32 1
  store i8* null, i8** %78, align 8
  br label %84

79:                                               ; preds = %27
  %80 = zext i32 %1 to i64
  %81 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %80)
  %82 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %83 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %82, i32 0, i32 1
  store i8* %81, i8** %83, align 8
  br label %84

84:                                               ; preds = %76, %79, %24
  %85 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %86 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %85, i32 0, i32 1
  %87 = load i8*, i8** %86, align 8
  %88 = icmp eq i8* %87, null
  %89 = icmp ugt i32 %1, 0
  %or.cond = select i1 %88, i1 %89, i1 false
  br i1 %or.cond, label %90, label %92

90:                                               ; preds = %84
  %91 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %1)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.64.356, i32 0, i32 0))
  br label %100

92:                                               ; preds = %84
  %93 = icmp ugt i32 %1, 0
  br i1 %93, label %94, label %98

94:                                               ; preds = %92
  %95 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 136
  %96 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %95, i32 0, i32 1
  %97 = load i8*, i8** %96, align 8
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %97, i32 %1)
  br label %98

98:                                               ; preds = %94, %92
  %99 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  br label %100

100:                                              ; preds = %98, %90
  %.0 = phi i32 [ 0, %90 ], [ 1, %98 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_unknown_chunks(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, %struct.png_unknown_chunk_t* %2, i32 %3) #11 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %5, i1 true, i1 %6
  %7 = icmp sle i32 %3, 0
  %or.cond3 = select i1 %or.cond, i1 true, i1 %7
  %8 = icmp eq %struct.png_unknown_chunk_t* %2, null
  %or.cond4 = select i1 %or.cond3, i1 true, i1 %8
  br i1 %or.cond4, label %78, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 46
  %11 = load %struct.png_unknown_chunk_t*, %struct.png_unknown_chunk_t** %10, align 8
  %12 = bitcast %struct.png_unknown_chunk_t* %11 to i8*
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 47
  %14 = load i32, i32* %13, align 8
  %15 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i8*, i32, i32, i64)* @png_realloc_array to i8* (%struct.png_struct_def*, i8*, i32, i32, i64)*)(%struct.png_struct_def* %0, i8* %12, i32 %14, i32 %3, i64 32)
  %16 = bitcast i8* %15 to %struct.png_unknown_chunk_t*
  %17 = icmp eq %struct.png_unknown_chunk_t* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %9
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.43.452, i32 0, i32 0), i32 1)
  br label %78

19:                                               ; preds = %9
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 46
  %21 = load %struct.png_unknown_chunk_t*, %struct.png_unknown_chunk_t** %20, align 8
  %22 = bitcast %struct.png_unknown_chunk_t* %21 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %22)
  %23 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 46
  store %struct.png_unknown_chunk_t* %16, %struct.png_unknown_chunk_t** %23, align 8
  %24 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %25 = load i32, i32* %24, align 4
  %26 = or i32 %25, 512
  store i32 %26, i32* %24, align 4
  %27 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 47
  %28 = load i32, i32* %27, align 8
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %16, i64 %29
  %31 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 47
  %32 = icmp sgt i32 %3, 0
  br i1 %32, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %19
  br label %33

33:                                               ; preds = %.lr.ph, %74
  %.09 = phi %struct.png_unknown_chunk_t* [ %30, %.lr.ph ], [ %.1, %74 ]
  %.018 = phi i32 [ %3, %.lr.ph ], [ %75, %74 ]
  %.025 = phi %struct.png_unknown_chunk_t* [ %2, %.lr.ph ], [ %76, %74 ]
  %34 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.09, i32 0, i32 0
  %35 = getelementptr inbounds [5 x i8], [5 x i8]* %34, i32 0, i32 0
  %36 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.025, i32 0, i32 0
  %37 = getelementptr inbounds [5 x i8], [5 x i8]* %36, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %37, i64 5, i1 false)
  %38 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.09, i32 0, i32 0
  %39 = getelementptr inbounds [5 x i8], [5 x i8]* %38, i64 0, i64 4
  store i8 0, i8* %39, align 4
  %40 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.025, i32 0, i32 3
  %41 = load i8, i8* %40, align 8
  %42 = zext i8 %41 to i32
  %43 = call zeroext i8 @check_location(%struct.png_struct_def* %0, i32 %42)
  %44 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.09, i32 0, i32 3
  store i8 %43, i8* %44, align 8
  %45 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.025, i32 0, i32 2
  %46 = load i64, i64* %45, align 8
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %51

48:                                               ; preds = %33
  %49 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.09, i32 0, i32 1
  store i8* null, i8** %49, align 8
  %50 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.09, i32 0, i32 2
  store i64 0, i64* %50, align 8
  br label %70

51:                                               ; preds = %33
  %52 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.025, i32 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_base to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %53)
  %55 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.09, i32 0, i32 1
  store i8* %54, i8** %55, align 8
  %56 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.09, i32 0, i32 1
  %57 = load i8*, i8** %56, align 8
  %58 = icmp eq i8* %57, null
  br i1 %58, label %59, label %60

59:                                               ; preds = %51
  call void @png_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.44.453, i32 0, i32 0), i32 1)
  br label %74

60:                                               ; preds = %51
  %61 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.09, i32 0, i32 1
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.025, i32 0, i32 1
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.025, i32 0, i32 2
  %66 = load i64, i64* %65, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 1 %64, i64 %66, i1 false)
  %67 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.025, i32 0, i32 2
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.09, i32 0, i32 2
  store i64 %68, i64* %69, align 8
  br label %70

70:                                               ; preds = %60, %48
  %.010 = phi %struct.png_unknown_chunk_t* [ %.09, %60 ], [ %.09, %48 ]
  %.027 = phi %struct.png_unknown_chunk_t* [ %.025, %60 ], [ %.025, %48 ]
  %71 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.010, i32 1
  %72 = load i32, i32* %31, align 8
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %31, align 8
  br label %74

74:                                               ; preds = %70, %59
  %.026 = phi %struct.png_unknown_chunk_t* [ %.027, %70 ], [ %.025, %59 ]
  %.1 = phi %struct.png_unknown_chunk_t* [ %71, %70 ], [ %.09, %59 ]
  %75 = add i32 %.018, -1
  %76 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.026, i32 1
  %77 = icmp sgt i32 %75, 0
  br i1 %77, label %33, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %74
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %19
  br label %78

78:                                               ; preds = %.loopexit, %4, %18
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @check_location(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = and i32 %1, 11
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %16

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 32768
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %5
  call void @png_app_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.55.454, i32 0, i32 0))
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 11
  %14 = trunc i32 %13 to i8
  %15 = zext i8 %14 to i32
  br label %16

16:                                               ; preds = %10, %5, %2
  %.0 = phi i32 [ %15, %10 ], [ %3, %5 ], [ %3, %2 ]
  %17 = icmp eq i32 %.0, 0
  br i1 %17, label %21, label %.preheader

.preheader:                                       ; preds = %16
  %18 = sub nsw i32 0, %.0
  %19 = and i32 %.0, %18
  %20 = icmp ne i32 %.0, %19
  br i1 %20, label %.lr.ph, label %30

.lr.ph:                                           ; preds = %.preheader
  br label %22

21:                                               ; preds = %16
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.56.455, i32 0, i32 0)) #24
  unreachable

22:                                               ; preds = %.lr.ph, %22
  %.11 = phi i32 [ %.0, %.lr.ph ], [ %26, %22 ]
  %23 = sub nsw i32 0, %.11
  %24 = and i32 %.11, %23
  %25 = xor i32 %24, -1
  %26 = and i32 %.11, %25
  %27 = sub nsw i32 0, %26
  %28 = and i32 %26, %27
  %29 = icmp ne i32 %26, %28
  br i1 %29, label %22, label %._crit_edge

._crit_edge:                                      ; preds = %22
  %split = phi i32 [ %26, %22 ]
  br label %30

30:                                               ; preds = %._crit_edge, %.preheader
  %.1.lcssa = phi i32 [ %split, %._crit_edge ], [ %.0, %.preheader ]
  %31 = trunc i32 %.1.lcssa to i8
  ret i8 %31
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_IHDR(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8) #11 {
  %10 = icmp eq %struct.png_struct_def* %0, null
  %11 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %10, i1 true, i1 %11
  br i1 %or.cond, label %102, label %12

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 0
  store i32 %2, i32* %13, align 8
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 1
  store i32 %3, i32* %14, align 4
  %15 = trunc i32 %4 to i8
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  store i8 %15, i8* %16, align 4
  %17 = trunc i32 %5 to i8
  %18 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  store i8 %17, i8* %18, align 1
  %19 = trunc i32 %7 to i8
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 9
  store i8 %19, i8* %20, align 2
  %21 = trunc i32 %8 to i8
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 10
  store i8 %21, i8* %22, align 1
  %23 = trunc i32 %6 to i8
  %24 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 11
  store i8 %23, i8* %24, align 8
  %25 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  %30 = load i8, i8* %29, align 4
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 11
  %36 = load i8, i8* %35, align 8
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 9
  %39 = load i8, i8* %38, align 2
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 10
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  call void @png_check_IHDR(%struct.png_struct_def* %0, i32 %26, i32 %28, i32 %31, i32 %34, i32 %37, i32 %40, i32 %43)
  %44 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = icmp eq i32 %46, 3
  br i1 %47, label %48, label %50

48:                                               ; preds = %12
  %49 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 12
  store i8 1, i8* %49, align 1
  br label %60

50:                                               ; preds = %12
  %51 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = and i32 %53, 2
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %50
  %57 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 12
  store i8 3, i8* %57, align 1
  br label %60

58:                                               ; preds = %50
  %59 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 12
  store i8 1, i8* %59, align 1
  br label %60

60:                                               ; preds = %56, %58, %48
  %61 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = and i32 %63, 4
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %66, label %70

66:                                               ; preds = %60
  %67 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 12
  %68 = load i8, i8* %67, align 1
  %69 = add i8 %68, 1
  store i8 %69, i8* %67, align 1
  br label %70

70:                                               ; preds = %66, %60
  %71 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 12
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  %75 = load i8, i8* %74, align 4
  %76 = zext i8 %75 to i32
  %77 = mul nsw i32 %73, %76
  %78 = trunc i32 %77 to i8
  %79 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 13
  store i8 %78, i8* %79, align 2
  %80 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 13
  %81 = load i8, i8* %80, align 2
  %82 = zext i8 %81 to i32
  %83 = icmp sge i32 %82, 8
  br i1 %83, label %84, label %91

84:                                               ; preds = %70
  %85 = zext i32 %2 to i64
  %86 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 13
  %87 = load i8, i8* %86, align 2
  %88 = zext i8 %87 to i64
  %89 = lshr i64 %88, 3
  %90 = mul i64 %85, %89
  br label %99

91:                                               ; preds = %70
  %92 = zext i32 %2 to i64
  %93 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 13
  %94 = load i8, i8* %93, align 2
  %95 = zext i8 %94 to i64
  %96 = mul i64 %92, %95
  %97 = add i64 %96, 7
  %98 = lshr i64 %97, 3
  br label %99

99:                                               ; preds = %91, %84
  %100 = phi i64 [ %90, %84 ], [ %98, %91 ]
  %101 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 3
  store i64 %100, i64* %101, align 8
  br label %102

102:                                              ; preds = %9, %99
  ret void
}

declare void @magma_bug001(...) #13

; Function Attrs: noinline nounwind uwtable
define i64 @png_process_data_pause(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  br i1 %3, label %4, label %18

4:                                                ; preds = %2
  %5 = icmp ne i32 %1, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %4
  call void @png_push_save_buffer(%struct.png_struct_def* %0)
  br label %18

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 104
  store i64 0, i64* %10, align 8
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %12 = load i64, i64* %11, align 8
  %13 = icmp ult i64 %12, %9
  br i1 %13, label %14, label %18

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 102
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %9, %16
  br label %18

18:                                               ; preds = %2, %7, %6, %14
  %.0 = phi i64 [ %17, %14 ], [ 0, %6 ], [ 0, %7 ], [ 0, %2 ]
  ret i64 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_process_data_skip(%struct.png_struct_def* noalias %0) #11 {
  call void @png_app_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.124, i32 0, i32 0))
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define void @png_progressive_combine_row(%struct.png_struct_def* noalias %0, i8* %1, i8* %2) #11 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne i8* %2, null
  %or.cond = select i1 %4, i1 %5, i1 false
  br i1 %or.cond, label %6, label %7

6:                                                ; preds = %3
  call void @png_combine_row(%struct.png_struct_def* %0, i8* %1, i32 1)
  br label %7

7:                                                ; preds = %3, %6
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_combine_row(%struct.png_struct_def* noalias %0, i8* %1, i32 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 69
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr i8, i8* %8, i64 1
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = icmp eq i32 %6, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %3
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.51.359, i32 0, i32 0)) #24
  unreachable

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 49
  %19 = load i64, i64* %18, align 8
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %40

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 49
  %23 = load i64, i64* %22, align 8
  %24 = icmp uge i32 %6, 8
  br i1 %24, label %25, label %30

25:                                               ; preds = %21
  %26 = zext i32 %11 to i64
  %27 = zext i32 %6 to i64
  %28 = lshr i64 %27, 3
  %29 = mul i64 %26, %28
  br label %36

30:                                               ; preds = %21
  %31 = zext i32 %11 to i64
  %32 = zext i32 %6 to i64
  %33 = mul i64 %31, %32
  %34 = add i64 %33, 7
  %35 = lshr i64 %34, 3
  br label %36

36:                                               ; preds = %30, %25
  %37 = phi i64 [ %29, %25 ], [ %35, %30 ]
  %38 = icmp ne i64 %23, %37
  br i1 %38, label %39, label %40

39:                                               ; preds = %36
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52.360, i32 0, i32 0)) #24
  unreachable

40:                                               ; preds = %36, %17
  %41 = icmp eq i32 %11, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %40
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.53.361, i32 0, i32 0)) #24
  unreachable

43:                                               ; preds = %40
  %44 = mul i32 %6, %11
  %45 = and i32 %44, 7
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %71

47:                                               ; preds = %43
  %48 = icmp uge i32 %6, 8
  br i1 %48, label %49, label %54

49:                                               ; preds = %47
  %50 = zext i32 %11 to i64
  %51 = zext i32 %6 to i64
  %52 = lshr i64 %51, 3
  %53 = mul i64 %50, %52
  br label %60

54:                                               ; preds = %47
  %55 = zext i32 %11 to i64
  %56 = zext i32 %6 to i64
  %57 = mul i64 %55, %56
  %58 = add i64 %57, 7
  %59 = lshr i64 %58, 3
  br label %60

60:                                               ; preds = %54, %49
  %61 = phi i64 [ %53, %49 ], [ %59, %54 ]
  %62 = getelementptr inbounds i8, i8* %1, i64 %61
  %63 = getelementptr inbounds i8, i8* %62, i64 -1
  %64 = load i8, i8* %63, align 1
  %65 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %66 = load i32, i32* %65, align 4
  %67 = and i32 %66, 65536
  %68 = icmp ne i32 %67, 0
  %69 = shl i32 255, %45
  %70 = ashr i32 255, %45
  %.022 = select i1 %68, i32 %69, i32 %70
  br label %71

71:                                               ; preds = %60, %43
  %.123 = phi i32 [ %.022, %60 ], [ %45, %43 ]
  %.021 = phi i8 [ %64, %60 ], [ 0, %43 ]
  %.020 = phi i8* [ %63, %60 ], [ null, %43 ]
  %72 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 58
  %73 = load i8, i8* %72, align 4
  %74 = zext i8 %73 to i32
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %76, label %357

76:                                               ; preds = %71
  %77 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %78 = load i32, i32* %77, align 4
  %79 = and i32 %78, 2
  %80 = icmp ne i32 %79, 0
  %81 = icmp ult i32 %14, 6
  %or.cond = select i1 %80, i1 %81, i1 false
  br i1 %or.cond, label %82, label %357

82:                                               ; preds = %76
  switch i32 %2, label %357 [
    i32 0, label %86
    i32 1, label %83
  ]

83:                                               ; preds = %82
  %84 = and i32 %14, 1
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %86, label %357

86:                                               ; preds = %82, %83
  %87 = and i32 1, %14
  %88 = add i32 %14, 1
  %89 = lshr i32 %88, 1
  %90 = sub i32 3, %89
  %91 = shl i32 %87, %90
  %92 = and i32 %91, 7
  %93 = icmp ule i32 %11, %92
  br i1 %93, label %383, label %94

94:                                               ; preds = %86
  %95 = icmp ult i32 %6, 8
  br i1 %95, label %96, label %182

96:                                               ; preds = %94
  %97 = udiv i32 8, %6
  %98 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %99 = load i32, i32* %98, align 4
  %100 = and i32 %99, 65536
  %101 = icmp ne i32 %100, 0
  br i1 %101, label %102, label %131

102:                                              ; preds = %96
  %103 = icmp ne i32 %2, 0
  br i1 %103, label %104, label %118

104:                                              ; preds = %102
  %105 = icmp eq i32 %6, 1
  br i1 %105, label %110, label %106

106:                                              ; preds = %104
  %107 = icmp eq i32 %6, 2
  %108 = zext i1 %107 to i64
  %109 = select i1 %107, i32 1, i32 2
  br label %110

110:                                              ; preds = %104, %106
  %111 = phi i32 [ %109, %106 ], [ 0, %104 ]
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [3 x [3 x i32]], [3 x [3 x i32]]* getelementptr inbounds ([2 x [3 x [3 x i32]]], [2 x [3 x [3 x i32]]]* @png_combine_row.display_mask, i64 0, i64 0), i64 0, i64 %112
  %114 = lshr i32 %14, 1
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds [3 x i32], [3 x i32]* %113, i64 0, i64 %115
  %117 = load i32, i32* %116, align 4
  br label %160

118:                                              ; preds = %102
  %119 = icmp eq i32 %6, 1
  br i1 %119, label %124, label %120

120:                                              ; preds = %118
  %121 = icmp eq i32 %6, 2
  %122 = zext i1 %121 to i64
  %123 = select i1 %121, i32 1, i32 2
  br label %124

124:                                              ; preds = %118, %120
  %125 = phi i32 [ %123, %120 ], [ 0, %118 ]
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [3 x [6 x i32]], [3 x [6 x i32]]* getelementptr inbounds ([2 x [3 x [6 x i32]]], [2 x [3 x [6 x i32]]]* @png_combine_row.row_mask, i64 0, i64 0), i64 0, i64 %126
  %128 = zext i32 %14 to i64
  %129 = getelementptr inbounds [6 x i32], [6 x i32]* %127, i64 0, i64 %128
  %130 = load i32, i32* %129, align 4
  br label %160

131:                                              ; preds = %96
  %132 = icmp ne i32 %2, 0
  br i1 %132, label %133, label %147

133:                                              ; preds = %131
  %134 = icmp eq i32 %6, 1
  br i1 %134, label %139, label %135

135:                                              ; preds = %133
  %136 = icmp eq i32 %6, 2
  %137 = zext i1 %136 to i64
  %138 = select i1 %136, i32 1, i32 2
  br label %139

139:                                              ; preds = %133, %135
  %140 = phi i32 [ %138, %135 ], [ 0, %133 ]
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds [3 x [3 x i32]], [3 x [3 x i32]]* getelementptr inbounds ([2 x [3 x [3 x i32]]], [2 x [3 x [3 x i32]]]* @png_combine_row.display_mask, i64 0, i64 1), i64 0, i64 %141
  %143 = lshr i32 %14, 1
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds [3 x i32], [3 x i32]* %142, i64 0, i64 %144
  %146 = load i32, i32* %145, align 4
  br label %160

147:                                              ; preds = %131
  %148 = icmp eq i32 %6, 1
  br i1 %148, label %153, label %149

149:                                              ; preds = %147
  %150 = icmp eq i32 %6, 2
  %151 = zext i1 %150 to i64
  %152 = select i1 %150, i32 1, i32 2
  br label %153

153:                                              ; preds = %147, %149
  %154 = phi i32 [ %152, %149 ], [ 0, %147 ]
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds [3 x [6 x i32]], [3 x [6 x i32]]* getelementptr inbounds ([2 x [3 x [6 x i32]]], [2 x [3 x [6 x i32]]]* @png_combine_row.row_mask, i64 0, i64 1), i64 0, i64 %155
  %157 = zext i32 %14 to i64
  %158 = getelementptr inbounds [6 x i32], [6 x i32]* %156, i64 0, i64 %157
  %159 = load i32, i32* %158, align 4
  br label %160

160:                                              ; preds = %139, %153, %110, %124
  %.025 = phi i32 [ %117, %110 ], [ %130, %124 ], [ %146, %139 ], [ %159, %153 ]
  br label %161

161:                                              ; preds = %180, %160
  %lsr.iv = phi i64 [ %lsr.iv.next, %180 ], [ 0, %160 ]
  %.126 = phi i32 [ %.025, %160 ], [ %164, %180 ]
  %.011 = phi i32 [ %11, %160 ], [ %181, %180 ]
  %scevgep = getelementptr i8, i8* %9, i64 %lsr.iv
  %scevgep81 = getelementptr i8, i8* %1, i64 %lsr.iv
  %162 = lshr i32 %.126, 8
  %163 = shl i32 %.126, 24
  %164 = or i32 %162, %163
  %165 = and i32 %.126, 255
  switch i32 %165, label %166 [
    i32 0, label %178
    i32 255, label %176
  ]

166:                                              ; preds = %161
  %167 = load i8, i8* %scevgep81, align 1
  %168 = zext i8 %167 to i32
  %169 = xor i32 %165, -1
  %170 = and i32 %168, %169
  %171 = load i8, i8* %scevgep, align 1
  %172 = zext i8 %171 to i32
  %173 = and i32 %172, %165
  %174 = or i32 %170, %173
  %175 = trunc i32 %174 to i8
  store i8 %175, i8* %scevgep81, align 1
  br label %178

176:                                              ; preds = %161
  %177 = load i8, i8* %scevgep, align 1
  store i8 %177, i8* %scevgep81, align 1
  br label %178

178:                                              ; preds = %166, %176, %161
  %179 = icmp ule i32 %.011, %97
  br i1 %179, label %.loopexit, label %180

180:                                              ; preds = %178
  %181 = sub i32 %.011, %97
  %lsr.iv.next = add i64 %lsr.iv, 1
  br label %161

182:                                              ; preds = %94
  %183 = and i32 %6, 7
  %184 = icmp ne i32 %183, 0
  br i1 %184, label %185, label %186

185:                                              ; preds = %182
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.54.362, i32 0, i32 0)) #24
  unreachable

186:                                              ; preds = %182
  %187 = lshr i32 %6, 3
  call void (...) @magma_bug004()
  %188 = mul i32 %11, %187
  %189 = and i32 1, %14
  %190 = add i32 %14, 1
  %191 = lshr i32 %190, 1
  %192 = sub i32 3, %191
  %193 = shl i32 %189, %192
  %194 = and i32 %193, 7
  %195 = mul i32 %194, %187
  %196 = sub i32 %188, %195
  %197 = zext i32 %195 to i64
  %198 = getelementptr inbounds i8, i8* %1, i64 %197
  %199 = zext i32 %195 to i64
  %200 = getelementptr inbounds i8, i8* %9, i64 %199
  %201 = icmp ne i32 %2, 0
  br i1 %201, label %202, label %208

202:                                              ; preds = %186
  %203 = sub i32 6, %14
  %204 = lshr i32 %203, 1
  %205 = shl i32 1, %204
  %206 = mul i32 %205, %187
  %207 = icmp ugt i32 %206, %196
  %spec.select = select i1 %207, i32 %196, i32 %206
  br label %208

208:                                              ; preds = %186, %202
  %.128 = phi i32 [ %spec.select, %202 ], [ %187, %186 ]
  %209 = sub i32 7, %14
  %210 = lshr i32 %209, 1
  %211 = shl i32 1, %210
  %212 = mul i32 %211, %187
  switch i32 %.128, label %250 [
    i32 1, label %.preheader
    i32 2, label %.preheader65
    i32 3, label %.preheader67
  ]

.preheader67:                                     ; preds = %208
  %213 = zext i32 %212 to i64
  %214 = load i8, i8* %200, align 1
  store i8 %214, i8* %198, align 1
  %215 = getelementptr inbounds i8, i8* %200, i64 1
  %216 = load i8, i8* %215, align 1
  %217 = getelementptr inbounds i8, i8* %198, i64 1
  store i8 %216, i8* %217, align 1
  %218 = getelementptr inbounds i8, i8* %200, i64 2
  %219 = load i8, i8* %218, align 1
  %220 = getelementptr inbounds i8, i8* %198, i64 2
  store i8 %219, i8* %220, align 1
  %221 = icmp ule i32 %196, %212
  br i1 %221, label %.loopexit68, label %.lr.ph80

.lr.ph80:                                         ; preds = %.preheader67
  %scevgep103 = getelementptr i8, i8* %1, i64 2
  %222 = add i64 %213, %197
  %scevgep111 = getelementptr i8, i8* %8, i64 3
  br label %244

.preheader65:                                     ; preds = %208
  %223 = zext i32 %212 to i64
  %224 = zext i32 %212 to i64
  br label %233

.preheader:                                       ; preds = %208
  %225 = zext i32 %212 to i64
  %226 = load i8, i8* %200, align 1
  store i8 %226, i8* %198, align 1
  %227 = icmp ule i32 %196, %212
  br i1 %227, label %.loopexit64, label %.lr.ph76

.lr.ph76:                                         ; preds = %.preheader
  %228 = add i64 %225, %197
  br label %229

229:                                              ; preds = %.lr.ph76, %229
  %lsr.iv97 = phi i64 [ %228, %.lr.ph76 ], [ %lsr.iv.next98, %229 ]
  %.11273 = phi i32 [ %196, %.lr.ph76 ], [ %230, %229 ]
  %scevgep99 = getelementptr i8, i8* %1, i64 %lsr.iv97
  %scevgep100 = getelementptr i8, i8* %9, i64 %lsr.iv97
  %230 = sub i32 %.11273, %212
  %231 = load i8, i8* %scevgep100, align 1
  store i8 %231, i8* %scevgep99, align 1
  %lsr.iv.next98 = add i64 %lsr.iv97, %225
  %232 = icmp ule i32 %230, %212
  br i1 %232, label %..loopexit64_crit_edge, label %229

233:                                              ; preds = %.preheader65, %237
  %.213 = phi i32 [ %240, %237 ], [ %196, %.preheader65 ]
  %.26 = phi i8* [ %238, %237 ], [ %200, %.preheader65 ]
  %.2 = phi i8* [ %239, %237 ], [ %198, %.preheader65 ]
  %234 = load i8, i8* %.26, align 1
  store i8 %234, i8* %.2, align 1
  %scevgep101 = getelementptr i8, i8* %.26, i64 1
  %235 = load i8, i8* %scevgep101, align 1
  %scevgep102 = getelementptr i8, i8* %.2, i64 1
  store i8 %235, i8* %scevgep102, align 1
  %236 = icmp ule i32 %.213, %212
  br i1 %236, label %.loopexit66, label %237

237:                                              ; preds = %233
  %238 = getelementptr inbounds i8, i8* %.26, i64 %223
  %239 = getelementptr inbounds i8, i8* %.2, i64 %224
  %240 = sub i32 %.213, %212
  %241 = icmp ugt i32 %240, 1
  br i1 %241, label %233, label %242

242:                                              ; preds = %237
  %.lcssa58 = phi i8* [ %238, %237 ]
  %.lcssa57 = phi i8* [ %239, %237 ]
  %243 = load i8, i8* %.lcssa58, align 1
  store i8 %243, i8* %.lcssa57, align 1
  br label %383

244:                                              ; preds = %.lr.ph80, %244
  %lsr.iv104 = phi i64 [ %222, %.lr.ph80 ], [ %lsr.iv.next105, %244 ]
  %.31477 = phi i32 [ %196, %.lr.ph80 ], [ %245, %244 ]
  %scevgep112 = getelementptr i8, i8* %scevgep111, i64 %lsr.iv104
  %scevgep113 = getelementptr i8, i8* %scevgep112, i64 -2
  %scevgep106 = getelementptr i8, i8* %scevgep103, i64 %lsr.iv104
  %scevgep107 = getelementptr i8, i8* %scevgep106, i64 -2
  %245 = sub i32 %.31477, %212
  %246 = load i8, i8* %scevgep113, align 1
  store i8 %246, i8* %scevgep107, align 1
  %scevgep114 = getelementptr i8, i8* %scevgep111, i64 %lsr.iv104
  %scevgep115 = getelementptr i8, i8* %scevgep114, i64 -1
  %247 = load i8, i8* %scevgep115, align 1
  %scevgep108 = getelementptr i8, i8* %scevgep103, i64 %lsr.iv104
  %scevgep109 = getelementptr i8, i8* %scevgep108, i64 -1
  store i8 %247, i8* %scevgep109, align 1
  %scevgep116 = getelementptr i8, i8* %scevgep111, i64 %lsr.iv104
  %248 = load i8, i8* %scevgep116, align 1
  %scevgep110 = getelementptr i8, i8* %scevgep103, i64 %lsr.iv104
  store i8 %248, i8* %scevgep110, align 1
  %lsr.iv.next105 = add i64 %lsr.iv104, %213
  %249 = icmp ule i32 %245, %212
  br i1 %249, label %..loopexit68_crit_edge, label %244

250:                                              ; preds = %208
  %251 = icmp ult i32 %.128, 16
  br i1 %251, label %252, label %344

252:                                              ; preds = %250
  %253 = ptrtoint i8* %198 to i64
  %254 = sub i64 %253, 0
  %255 = trunc i64 %254 to i16
  %256 = zext i16 %255 to i32
  %257 = and i32 %256, 1
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %259, label %344

259:                                              ; preds = %252
  %260 = ptrtoint i8* %200 to i64
  %261 = sub i64 %260, 0
  %262 = trunc i64 %261 to i16
  %263 = zext i16 %262 to i32
  %264 = and i32 %263, 1
  %265 = icmp eq i32 %264, 0
  %266 = zext i32 %.128 to i64
  %267 = urem i64 %266, 2
  %268 = icmp eq i64 %267, 0
  %or.cond37 = select i1 %265, i1 %268, i1 false
  %269 = zext i32 %212 to i64
  %270 = urem i64 %269, 2
  %271 = icmp eq i64 %270, 0
  %or.cond40 = select i1 %or.cond37, i1 %271, i1 false
  br i1 %or.cond40, label %272, label %344

272:                                              ; preds = %259
  %273 = ptrtoint i8* %198 to i64
  %274 = sub i64 %273, 0
  %275 = trunc i64 %274 to i32
  %276 = and i32 %275, 3
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %278, label %317

278:                                              ; preds = %272
  %279 = ptrtoint i8* %200 to i64
  %280 = sub i64 %279, 0
  %281 = trunc i64 %280 to i32
  %282 = and i32 %281, 3
  %283 = icmp eq i32 %282, 0
  %284 = zext i32 %.128 to i64
  %285 = urem i64 %284, 4
  %286 = icmp eq i64 %285, 0
  %or.cond43 = select i1 %283, i1 %286, i1 false
  %287 = zext i32 %212 to i64
  %288 = urem i64 %287, 4
  %289 = icmp eq i64 %288, 0
  %or.cond46 = select i1 %or.cond43, i1 %289, i1 false
  br i1 %or.cond46, label %290, label %317

290:                                              ; preds = %278
  %291 = bitcast i8* %198 to i32*
  %292 = bitcast i8* %200 to i32*
  %293 = sub i32 %212, %.128
  %294 = zext i32 %293 to i64
  %295 = udiv i64 %294, 4
  %296 = zext i32 %.128 to i64
  br label %297

297:                                              ; preds = %306, %290
  %.033 = phi i32* [ %291, %290 ], [ %307, %306 ]
  %.031 = phi i32* [ %292, %290 ], [ %308, %306 ]
  %.415 = phi i32 [ %196, %290 ], [ %309, %306 ]
  br label %298

298:                                              ; preds = %298, %297
  %.134 = phi i32* [ %.033, %297 ], [ %301, %298 ]
  %.132 = phi i32* [ %.031, %297 ], [ %299, %298 ]
  %.024 = phi i64 [ %296, %297 ], [ %302, %298 ]
  %299 = getelementptr inbounds i32, i32* %.132, i32 1
  %300 = load i32, i32* %.132, align 4
  %301 = getelementptr inbounds i32, i32* %.134, i32 1
  store i32 %300, i32* %.134, align 4
  %302 = sub i64 %.024, 4
  %303 = icmp ugt i64 %302, 0
  br i1 %303, label %298, label %304

304:                                              ; preds = %298
  %.lcssa48 = phi i32* [ %299, %298 ]
  %.lcssa = phi i32* [ %301, %298 ]
  %305 = icmp ule i32 %.415, %212
  br i1 %305, label %.loopexit60, label %306

306:                                              ; preds = %304
  %307 = getelementptr inbounds i32, i32* %.lcssa, i64 %295
  %308 = getelementptr inbounds i32, i32* %.lcssa48, i64 %295
  %309 = sub i32 %.415, %212
  %310 = icmp ule i32 %.128, %309
  br i1 %310, label %297, label %311

311:                                              ; preds = %306
  %.lcssa51 = phi i32* [ %307, %306 ]
  %.lcssa50 = phi i32* [ %308, %306 ]
  %.lcssa49 = phi i32 [ %309, %306 ]
  %.lcssa5084 = bitcast i32* %.lcssa50 to i8*
  %312 = bitcast i32* %.lcssa51 to i8*
  br label %313

313:                                              ; preds = %313, %311
  %lsr.iv82 = phi i64 [ %lsr.iv.next83, %313 ], [ 0, %311 ]
  %.516 = phi i32 [ %.lcssa49, %311 ], [ %315, %313 ]
  %uglygep = getelementptr i8, i8* %.lcssa5084, i64 %lsr.iv82
  %uglygep85 = getelementptr i8, i8* %312, i64 %lsr.iv82
  %314 = load i8, i8* %uglygep, align 1
  store i8 %314, i8* %uglygep85, align 1
  %315 = add i32 %.516, -1
  %lsr.iv.next83 = add nuw nsw i64 %lsr.iv82, 1
  %316 = icmp ugt i32 %315, 0
  br i1 %316, label %313, label %.loopexit59

317:                                              ; preds = %278, %272
  %318 = bitcast i8* %198 to i16*
  %319 = bitcast i8* %200 to i16*
  %320 = sub i32 %212, %.128
  %321 = zext i32 %320 to i64
  %322 = udiv i64 %321, 2
  %323 = zext i32 %.128 to i64
  br label %324

324:                                              ; preds = %333, %317
  %.018 = phi i16* [ %318, %317 ], [ %334, %333 ]
  %.617 = phi i32 [ %196, %317 ], [ %336, %333 ]
  %.02 = phi i16* [ %319, %317 ], [ %335, %333 ]
  br label %325

325:                                              ; preds = %325, %324
  %.119 = phi i16* [ %.018, %324 ], [ %328, %325 ]
  %.13 = phi i16* [ %.02, %324 ], [ %326, %325 ]
  %.0 = phi i64 [ %323, %324 ], [ %329, %325 ]
  %326 = getelementptr inbounds i16, i16* %.13, i32 1
  %327 = load i16, i16* %.13, align 2
  %328 = getelementptr inbounds i16, i16* %.119, i32 1
  store i16 %327, i16* %.119, align 2
  %329 = sub i64 %.0, 2
  %330 = icmp ugt i64 %329, 0
  br i1 %330, label %325, label %331

331:                                              ; preds = %325
  %.lcssa53 = phi i16* [ %326, %325 ]
  %.lcssa52 = phi i16* [ %328, %325 ]
  %332 = icmp ule i32 %.617, %212
  br i1 %332, label %.loopexit62, label %333

333:                                              ; preds = %331
  %334 = getelementptr inbounds i16, i16* %.lcssa52, i64 %322
  %335 = getelementptr inbounds i16, i16* %.lcssa53, i64 %322
  %336 = sub i32 %.617, %212
  %337 = icmp ule i32 %.128, %336
  br i1 %337, label %324, label %338

338:                                              ; preds = %333
  %.lcssa56 = phi i16* [ %334, %333 ]
  %.lcssa55 = phi i16* [ %335, %333 ]
  %.lcssa54 = phi i32 [ %336, %333 ]
  %.lcssa5588 = bitcast i16* %.lcssa55 to i8*
  %339 = bitcast i16* %.lcssa56 to i8*
  br label %340

340:                                              ; preds = %340, %338
  %lsr.iv86 = phi i64 [ %lsr.iv.next87, %340 ], [ 0, %338 ]
  %.7 = phi i32 [ %.lcssa54, %338 ], [ %342, %340 ]
  %uglygep89 = getelementptr i8, i8* %.lcssa5588, i64 %lsr.iv86
  %uglygep90 = getelementptr i8, i8* %339, i64 %lsr.iv86
  %341 = load i8, i8* %uglygep89, align 1
  store i8 %341, i8* %uglygep90, align 1
  %342 = add i32 %.7, -1
  %lsr.iv.next87 = add nuw nsw i64 %lsr.iv86, 1
  %343 = icmp ugt i32 %342, 0
  br i1 %343, label %340, label %.loopexit61

344:                                              ; preds = %259, %252, %250
  %345 = zext i32 %212 to i64
  %346 = zext i32 %.128 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %198, i8* align 1 %200, i64 %346, i1 false)
  %347 = icmp ule i32 %196, %212
  br i1 %347, label %.loopexit63, label %.lr.ph

.lr.ph:                                           ; preds = %344
  %348 = add i64 %345, %197
  %349 = sub i32 %11, %211
  %350 = sub i32 %349, %194
  %351 = mul i32 %187, %350
  br label %352

352:                                              ; preds = %.lr.ph, %352
  %lsr.iv95 = phi i32 [ %351, %.lr.ph ], [ %lsr.iv.next96, %352 ]
  %lsr.iv91 = phi i64 [ %348, %.lr.ph ], [ %lsr.iv.next92, %352 ]
  %.870 = phi i32 [ %196, %.lr.ph ], [ %353, %352 ]
  %.22969 = phi i32 [ %.128, %.lr.ph ], [ %spec.select47, %352 ]
  %scevgep94 = getelementptr i8, i8* %9, i64 %lsr.iv91
  %scevgep93 = getelementptr i8, i8* %1, i64 %lsr.iv91
  %353 = sub i32 %.870, %212
  %354 = icmp ugt i32 %.22969, %lsr.iv95
  %spec.select47 = select i1 %354, i32 %lsr.iv95, i32 %.22969
  %355 = zext i32 %spec.select47 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %scevgep93, i8* align 1 %scevgep94, i64 %355, i1 false)
  %lsr.iv.next92 = add i64 %lsr.iv91, %345
  %lsr.iv.next96 = sub i32 %lsr.iv95, %212
  %356 = icmp ule i32 %353, %212
  br i1 %356, label %..loopexit63_crit_edge, label %352

357:                                              ; preds = %82, %83, %76, %71
  %358 = icmp uge i32 %6, 8
  br i1 %358, label %359, label %364

359:                                              ; preds = %357
  %360 = zext i32 %11 to i64
  %361 = zext i32 %6 to i64
  %362 = lshr i64 %361, 3
  %363 = mul i64 %360, %362
  br label %370

364:                                              ; preds = %357
  %365 = zext i32 %11 to i64
  %366 = zext i32 %6 to i64
  %367 = mul i64 %365, %366
  %368 = add i64 %367, 7
  %369 = lshr i64 %368, 3
  br label %370

370:                                              ; preds = %364, %359
  %371 = phi i64 [ %363, %359 ], [ %369, %364 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %9, i64 %371, i1 false)
  br label %372

.loopexit:                                        ; preds = %178
  br label %372

372:                                              ; preds = %.loopexit, %370
  %373 = icmp ne i8* %.020, null
  br i1 %373, label %374, label %383

374:                                              ; preds = %372
  %375 = zext i8 %.021 to i32
  %376 = and i32 %375, %.123
  %377 = load i8, i8* %.020, align 1
  %378 = zext i8 %377 to i32
  %379 = xor i32 %.123, -1
  %380 = and i32 %378, %379
  %381 = or i32 %376, %380
  %382 = trunc i32 %381 to i8
  store i8 %382, i8* %.020, align 1
  br label %383

.loopexit59:                                      ; preds = %313
  br label %383

.loopexit60:                                      ; preds = %304
  br label %383

.loopexit61:                                      ; preds = %340
  br label %383

.loopexit62:                                      ; preds = %331
  br label %383

..loopexit63_crit_edge:                           ; preds = %352
  br label %.loopexit63

.loopexit63:                                      ; preds = %..loopexit63_crit_edge, %344
  br label %383

..loopexit64_crit_edge:                           ; preds = %229
  br label %.loopexit64

.loopexit64:                                      ; preds = %..loopexit64_crit_edge, %.preheader
  br label %383

.loopexit66:                                      ; preds = %233
  br label %383

..loopexit68_crit_edge:                           ; preds = %244
  br label %.loopexit68

.loopexit68:                                      ; preds = %..loopexit68_crit_edge, %.preheader67
  br label %383

383:                                              ; preds = %.loopexit68, %.loopexit66, %.loopexit64, %.loopexit63, %.loopexit62, %.loopexit61, %.loopexit60, %.loopexit59, %86, %242, %374, %372
  ret void
}

declare void @magma_bug004(...) #13

; Function Attrs: noinline nounwind uwtable
define void @png_set_progressive_read_fn(%struct.png_struct_def* noalias %0, i8* %1, void (%struct.png_struct_def*, %struct.png_info_def*)* %2, void (%struct.png_struct_def*, i8*, i32, i32)* %3, void (%struct.png_struct_def*, %struct.png_info_def*)* %4) #11 {
  %6 = icmp eq %struct.png_struct_def* %0, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 93
  store void (%struct.png_struct_def*, %struct.png_info_def*)* %2, void (%struct.png_struct_def*, %struct.png_info_def*)** %8, align 8
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 94
  store void (%struct.png_struct_def*, i8*, i32, i32)* %3, void (%struct.png_struct_def*, i8*, i32, i32)** %9, align 8
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 95
  store void (%struct.png_struct_def*, %struct.png_info_def*)* %4, void (%struct.png_struct_def*, %struct.png_info_def*)** %10, align 8
  call void bitcast (void (%struct.png_struct_def.121*, i8*, void (%struct.png_struct_def.121*, i8*, i64)*)* @png_set_read_fn to void (%struct.png_struct_def*, i8*, void (%struct.png_struct_def*, i8*, i64)*)*)(%struct.png_struct_def* %0, i8* %1, void (%struct.png_struct_def*, i8*, i64)* @png_push_fill_buffer)
  br label %11

11:                                               ; preds = %5, %7
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_read_fn(%struct.png_struct_def.121* noalias %0, i8* %1, void (%struct.png_struct_def.121*, i8*, i64)* %2) #11 {
  %4 = icmp eq %struct.png_struct_def.121* %0, null
  br i1 %4, label %24, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def.121, %struct.png_struct_def.121* %0, i32 0, i32 9
  store i8* %1, i8** %6, align 8
  %7 = icmp ne void (%struct.png_struct_def.121*, i8*, i64)* %2, null
  br i1 %7, label %8, label %11

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.png_struct_def.121, %struct.png_struct_def.121* %0, i32 0, i32 8
  %10 = bitcast {}** %9 to void (%struct.png_struct_def.121*, i8*, i64)**
  store void (%struct.png_struct_def.121*, i8*, i64)* %2, void (%struct.png_struct_def.121*, i8*, i64)** %10, align 8
  br label %14

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.png_struct_def.121, %struct.png_struct_def.121* %0, i32 0, i32 8
  %13 = bitcast {}** %12 to void (%struct.png_struct_def.121*, i8*, i64)**
  store void (%struct.png_struct_def.121*, i8*, i64)* @png_default_read_data, void (%struct.png_struct_def.121*, i8*, i64)** %13, align 8
  br label %14

14:                                               ; preds = %11, %8
  %15 = getelementptr inbounds %struct.png_struct_def.121, %struct.png_struct_def.121* %0, i32 0, i32 7
  %16 = bitcast {}** %15 to void (%struct.png_struct_def.121*, i8*, i64)**
  %17 = load void (%struct.png_struct_def.121*, i8*, i64)*, void (%struct.png_struct_def.121*, i8*, i64)** %16, align 8
  %18 = icmp ne void (%struct.png_struct_def.121*, i8*, i64)* %17, null
  br i1 %18, label %19, label %22

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.png_struct_def.121, %struct.png_struct_def.121* %0, i32 0, i32 7
  %21 = bitcast {}** %20 to void (%struct.png_struct_def.121*, i8*, i64)**
  store void (%struct.png_struct_def.121*, i8*, i64)* null, void (%struct.png_struct_def.121*, i8*, i64)** %21, align 8
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.121*, i8*)*)(%struct.png_struct_def.121* %0, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.2.193, i32 0, i32 0))
  br label %22

22:                                               ; preds = %19, %14
  %23 = getelementptr inbounds %struct.png_struct_def.121, %struct.png_struct_def.121* %0, i32 0, i32 76
  store void (%struct.png_struct_def.121*)* null, void (%struct.png_struct_def.121*)** %23, align 8
  br label %24

24:                                               ; preds = %3, %22
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_default_read_data(%struct.png_struct_def.121* %0, i8* %1, i64 %2) #11 {
  %4 = icmp eq %struct.png_struct_def.121* %0, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def.121, %struct.png_struct_def.121* %0, i32 0, i32 9
  %7 = load i8*, i8** %6, align 8
  %8 = bitcast i8* %7 to %struct._IO_FILE.1*
  %9 = call i64 @fread(i8* %1, i64 1, i64 %2, %struct._IO_FILE.1* %8)
  %10 = icmp ne i64 %9, %2
  br i1 %10, label %11, label %12

11:                                               ; preds = %5
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.121*, i8*)*)(%struct.png_struct_def.121* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.190, i32 0, i32 0)) #24
  unreachable

12:                                               ; preds = %3, %5
  ret void
}

declare i64 @fread(i8*, i64, i64, %struct._IO_FILE.1*) #13

; Function Attrs: noinline nounwind uwtable
define i8* @png_get_progressive_ptr(%struct.png_struct_def* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 9
  %5 = load i8*, i8** %4, align 8
  br label %6

6:                                                ; preds = %1, %3
  %.0 = phi i8* [ %5, %3 ], [ null, %1 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define noalias %struct.png_struct_def* @png_create_read_struct(i8* %0, i8* %1, void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)* %3) #11 {
  %5 = call noalias %struct.png_struct_def* @png_create_read_struct_2(i8* %0, i8* %1, void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)* %3, i8* null, i8* (%struct.png_struct_def*, i64)* null, void (%struct.png_struct_def*, i8*)* null)
  ret %struct.png_struct_def* %5
}

; Function Attrs: noinline nounwind uwtable
define noalias %struct.png_struct_def* @png_create_read_struct_2(i8* %0, i8* %1, void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)* %3, i8* %4, i8* (%struct.png_struct_def*, i64)* %5, void (%struct.png_struct_def*, i8*)* %6) #11 {
  %8 = call noalias %struct.png_struct_def* @png_create_png_struct(i8* %0, i8* %1, void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)* %3, i8* %4, i8* (%struct.png_struct_def*, i64)* %5, void (%struct.png_struct_def*, i8*)* %6)
  %9 = icmp ne %struct.png_struct_def* %8, null
  br i1 %9, label %10, label %16

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 15
  store i32 32768, i32* %11, align 4
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 140
  store i32 8192, i32* %12, align 8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 16
  %14 = load i32, i32* %13, align 8
  %15 = or i32 %14, 1048576
  store i32 %15, i32* %13, align 8
  call void bitcast (void (%struct.png_struct_def.121*, i8*, void (%struct.png_struct_def.121*, i8*, i64)*)* @png_set_read_fn to void (%struct.png_struct_def*, i8*, void (%struct.png_struct_def*, i8*, i64)*)*)(%struct.png_struct_def* %8, i8* null, void (%struct.png_struct_def*, i8*, i64)* null)
  br label %16

16:                                               ; preds = %10, %7
  ret %struct.png_struct_def* %8
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_info(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  %4 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 true, i1 %4
  br i1 %or.cond, label %87, label %5

5:                                                ; preds = %2
  call void @png_read_sig(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  br label %16

16:                                               ; preds = %86, %5
  %17 = call i32 @png_read_chunk_header(%struct.png_struct_def* %0)
  %18 = load i32, i32* %6, align 8
  %19 = icmp eq i32 %18, 1229209940
  br i1 %19, label %20, label %42

20:                                               ; preds = %16
  %21 = load i32, i32* %10, align 4
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %20
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.125, i32 0, i32 0)) #24
  unreachable

25:                                               ; preds = %20
  %26 = load i8, i8* %11, align 1
  %27 = zext i8 %26 to i32
  %28 = icmp eq i32 %27, 3
  br i1 %28, label %29, label %34

29:                                               ; preds = %25
  %30 = load i32, i32* %12, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %29
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1.126, i32 0, i32 0)) #24
  unreachable

34:                                               ; preds = %29, %25
  %35 = load i32, i32* %13, align 4
  %36 = and i32 %35, 8
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %34
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2.127, i32 0, i32 0))
  br label %39

39:                                               ; preds = %38, %34
  %40 = load i32, i32* %14, align 4
  %41 = or i32 %40, 4
  store i32 %41, i32* %14, align 4
  br label %51

42:                                               ; preds = %16
  %43 = load i32, i32* %7, align 4
  %44 = and i32 %43, 4
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %51

46:                                               ; preds = %42
  %47 = load i32, i32* %8, align 4
  %48 = or i32 %47, 8192
  store i32 %48, i32* %8, align 4
  %49 = load i32, i32* %9, align 4
  %50 = or i32 %49, 8
  store i32 %50, i32* %9, align 4
  br label %51

51:                                               ; preds = %42, %46, %39
  switch i32 %18, label %54 [
    i32 1229472850, label %52
    i32 1229278788, label %53
  ]

52:                                               ; preds = %51
  call void @png_handle_IHDR(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

53:                                               ; preds = %51
  call void @png_handle_IEND(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

54:                                               ; preds = %51
  %55 = call i32 @png_chunk_unknown_handling(%struct.png_struct_def* %0, i32 %18)
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %57, label %63

57:                                               ; preds = %54
  call void @png_handle_unknown(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17, i32 %55)
  switch i32 %18, label %86 [
    i32 1347179589, label %58
    i32 1229209940, label %61
  ]

58:                                               ; preds = %57
  %59 = load i32, i32* %15, align 4
  %60 = or i32 %59, 2
  store i32 %60, i32* %15, align 4
  br label %86

61:                                               ; preds = %57
  %62 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  store i32 0, i32* %62, align 8
  br label %87

63:                                               ; preds = %54
  switch i32 %18, label %85 [
    i32 1347179589, label %64
    i32 1229209940, label %65
    i32 1649100612, label %67
    i32 1665684045, label %68
    i32 1700284774, label %69
    i32 1732332865, label %70
    i32 1749635924, label %71
    i32 1866876531, label %72
    i32 1883455820, label %73
    i32 1933787468, label %74
    i32 1883789683, label %75
    i32 1933723988, label %76
    i32 1934772034, label %77
    i32 1766015824, label %78
    i32 1934642260, label %79
    i32 1950701684, label %80
    i32 1950960965, label %81
    i32 1951551059, label %82
    i32 2052348020, label %83
    i32 1767135348, label %84
  ]

64:                                               ; preds = %63
  call void @png_handle_PLTE(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

65:                                               ; preds = %63
  %.lcssa2 = phi i32 [ %17, %63 ]
  %66 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  store i32 %.lcssa2, i32* %66, align 8
  br label %87

67:                                               ; preds = %63
  call void @png_handle_bKGD(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

68:                                               ; preds = %63
  call void @png_handle_cHRM(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

69:                                               ; preds = %63
  call void @png_handle_eXIf(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

70:                                               ; preds = %63
  call void @png_handle_gAMA(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

71:                                               ; preds = %63
  call void @png_handle_hIST(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

72:                                               ; preds = %63
  call void @png_handle_oFFs(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

73:                                               ; preds = %63
  call void @png_handle_pCAL(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

74:                                               ; preds = %63
  call void @png_handle_sCAL(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

75:                                               ; preds = %63
  call void @png_handle_pHYs(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

76:                                               ; preds = %63
  call void @png_handle_sBIT(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

77:                                               ; preds = %63
  call void @png_handle_sRGB(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

78:                                               ; preds = %63
  call void @png_handle_iCCP(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

79:                                               ; preds = %63
  call void @png_handle_sPLT(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

80:                                               ; preds = %63
  call void @png_handle_tEXt(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

81:                                               ; preds = %63
  call void @png_handle_tIME(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

82:                                               ; preds = %63
  call void @png_handle_tRNS(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

83:                                               ; preds = %63
  call void @png_handle_zTXt(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

84:                                               ; preds = %63
  call void @png_handle_iTXt(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17)
  br label %86

85:                                               ; preds = %63
  call void @png_handle_unknown(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %17, i32 0)
  br label %86

86:                                               ; preds = %53, %64, %67, %69, %71, %73, %75, %77, %79, %81, %83, %85, %84, %82, %80, %78, %76, %74, %72, %70, %68, %58, %57, %52
  br label %16

87:                                               ; preds = %2, %65, %61
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_sig(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 67
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = icmp sge i32 %5, 8
  br i1 %6, label %36, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 67
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  %11 = sub i64 8, %10
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 141
  store i32 17, i32* %12, align 4
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 15
  %14 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 %10
  call void bitcast (void (%struct.png_struct_def.121*, i8*, i64)* @png_read_data to void (%struct.png_struct_def*, i8*, i64)*)(%struct.png_struct_def* %0, i8* %14, i64 %11)
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 67
  store i8 8, i8* %15, align 1
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 15
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %16, i32 0, i32 0
  %18 = call i32 @png_sig_cmp(i8* %17, i64 %10, i64 %11)
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %30

20:                                               ; preds = %7
  %21 = icmp ult i64 %10, 4
  br i1 %21, label %22, label %29

22:                                               ; preds = %20
  %23 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 15
  %24 = getelementptr inbounds [8 x i8], [8 x i8]* %23, i32 0, i32 0
  %25 = sub i64 %11, 4
  %26 = call i32 @png_sig_cmp(i8* %24, i64 %10, i64 %25)
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %22
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1.245, i32 0, i32 0)) #24
  unreachable

29:                                               ; preds = %22, %20
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2.246, i32 0, i32 0)) #24
  unreachable

30:                                               ; preds = %7
  %31 = icmp ult i64 %10, 3
  br i1 %31, label %32, label %36

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %34 = load i32, i32* %33, align 4
  %35 = or i32 %34, 4096
  store i32 %35, i32* %33, align 4
  br label %36

36:                                               ; preds = %2, %32, %30
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_read_chunk_header(%struct.png_struct_def* noalias %0) #11 {
  %2 = alloca [8 x i8], align 1
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 141
  store i32 33, i32* %3, align 4
  %4 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i32 0, i32 0
  call void bitcast (void (%struct.png_struct_def.121*, i8*, i64)* @png_read_data to void (%struct.png_struct_def*, i8*, i64)*)(%struct.png_struct_def* %0, i8* %4, i64 8)
  %5 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i32 0, i32 0
  %6 = call i32 @png_get_uint_31(%struct.png_struct_def* %0, i8* %5)
  %7 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i32 0, i32 0
  %8 = getelementptr inbounds i8, i8* %7, i64 4
  %9 = getelementptr inbounds i8, i8* %8, i64 0
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = and i32 255, %11
  %13 = shl i32 %12, 24
  %14 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i32 0, i32 0
  %15 = getelementptr inbounds i8, i8* %14, i64 4
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = and i32 255, %18
  %20 = shl i32 %19, 16
  %21 = or i32 %13, %20
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i32 0, i32 0
  %23 = getelementptr inbounds i8, i8* %22, i64 4
  %24 = getelementptr inbounds i8, i8* %23, i64 2
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = and i32 255, %26
  %28 = shl i32 %27, 8
  %29 = or i32 %21, %28
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i32 0, i32 0
  %31 = getelementptr inbounds i8, i8* %30, i64 4
  %32 = getelementptr inbounds i8, i8* %31, i64 3
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = and i32 255, %34
  %36 = shl i32 %35, 0
  %37 = or i32 %29, %36
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  store i32 %37, i32* %38, align 8
  call void @png_reset_crc(%struct.png_struct_def* %0)
  %39 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i32 0, i32 0
  %40 = getelementptr inbounds i8, i8* %39, i64 4
  call void @png_calculate_crc(%struct.png_struct_def* %0, i8* %40, i64 4)
  %41 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %42 = load i32, i32* %41, align 8
  call void @png_check_chunk_name(%struct.png_struct_def* %0, i32 %42)
  call void @png_check_chunk_length(%struct.png_struct_def* %0, i32 %6)
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 141
  store i32 65, i32* %43, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind uwtable
define void @png_handle_eXIf(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = alloca [1 x i8], align 1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.269, i32 0, i32 0)) #24
  unreachable

10:                                               ; preds = %3
  %11 = icmp ult i32 %2, 2
  br i1 %11, label %12, label %14

12:                                               ; preds = %10
  %13 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15.290, i32 0, i32 0))
  br label %80

14:                                               ; preds = %10
  %15 = icmp eq %struct.png_info_def* %1, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %14
  %17 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = and i32 %18, 65536
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %16, %14
  %22 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8.270, i32 0, i32 0))
  br label %80

23:                                               ; preds = %16
  %24 = zext i32 %2 to i64
  %25 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %24)
  %26 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 36
  store i8* %25, i8** %26, align 8
  %27 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 36
  %28 = load i8*, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %38, label %.preheader

.preheader:                                       ; preds = %23
  %30 = getelementptr inbounds [1 x i8], [1 x i8]* %4, i32 0, i32 0
  %31 = getelementptr inbounds [1 x i8], [1 x i8]* %4, i64 0, i64 0
  %32 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 36
  %33 = getelementptr inbounds [1 x i8], [1 x i8]* %4, i64 0, i64 0
  %34 = getelementptr inbounds [1 x i8], [1 x i8]* %4, i64 0, i64 0
  %35 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 36
  %36 = getelementptr inbounds [1 x i8], [1 x i8]* %4, i64 0, i64 0
  %37 = icmp ult i32 0, %2
  br i1 %37, label %.lr.ph, label %70

.lr.ph:                                           ; preds = %.preheader
  br label %40

38:                                               ; preds = %23
  %39 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17.292, i32 0, i32 0))
  br label %80

40:                                               ; preds = %.lr.ph, %67
  %.09 = phi i32 [ 0, %.lr.ph ], [ %68, %67 ]
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %30, i32 1)
  %41 = load i8, i8* %31, align 1
  %42 = load i8*, i8** %32, align 8
  %43 = zext i32 %.09 to i64
  %44 = getelementptr inbounds i8, i8* %42, i64 %43
  store i8 %41, i8* %44, align 1
  %45 = icmp eq i32 %.09, 1
  %46 = load i8, i8* %33, align 1
  %47 = zext i8 %46 to i32
  %48 = icmp ne i32 %47, 77
  %or.cond = select i1 %45, i1 %48, i1 false
  %49 = load i8, i8* %34, align 1
  %50 = zext i8 %49 to i32
  %51 = icmp ne i32 %50, 73
  %or.cond7 = select i1 %or.cond, i1 %51, i1 false
  br i1 %or.cond7, label %52, label %67

52:                                               ; preds = %40
  %53 = load i8*, i8** %35, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 0
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = load i8, i8* %36, align 1
  %58 = zext i8 %57 to i32
  %59 = icmp ne i32 %56, %58
  br i1 %59, label %60, label %67

60:                                               ; preds = %52
  %.0.lcssa8 = phi i32 [ %.09, %52 ]
  %61 = sub i32 %2, %.0.lcssa8
  %62 = sub i32 %61, 1
  %63 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %62)
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.29.316, i32 0, i32 0))
  %64 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 36
  %65 = load i8*, i8** %64, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %65)
  %66 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 36
  store i8* null, i8** %66, align 8
  br label %80

67:                                               ; preds = %40, %52
  %.010 = phi i32 [ %.09, %40 ], [ %.09, %52 ]
  %68 = add i32 %.010, 1
  %69 = icmp ult i32 %68, %2
  br i1 %69, label %40, label %._crit_edge

._crit_edge:                                      ; preds = %67
  br label %70

70:                                               ; preds = %._crit_edge, %.preheader
  %71 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %70
  %74 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 36
  %75 = load i8*, i8** %74, align 8
  call void @png_set_eXIf_1(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %2, i8* %75)
  br label %76

76:                                               ; preds = %73, %70
  %77 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 36
  %78 = load i8*, i8** %77, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %78)
  %79 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 36
  store i8* null, i8** %79, align 8
  br label %80

80:                                               ; preds = %76, %60, %38, %21, %12
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_eXIf_1(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2, i8* %3) #11 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %5, i1 true, i1 %6
  br i1 %or.cond, label %44, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 35
  %9 = load i8*, i8** %8, align 8
  %10 = icmp ne i8* %9, null
  br i1 %10, label %11, label %15

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 35
  %13 = load i8*, i8** %12, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %13)
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 35
  store i8* null, i8** %14, align 8
  br label %15

15:                                               ; preds = %11, %7
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 34
  store i32 %2, i32* %16, align 4
  %17 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 34
  %18 = load i32, i32* %17, align 4
  %19 = sext i32 %18 to i64
  %20 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %19)
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 35
  store i8* %20, i8** %21, align 8
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 35
  %23 = load i8*, i8** %22, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %25, label %26

25:                                               ; preds = %15
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.12.395, i32 0, i32 0))
  br label %44

26:                                               ; preds = %15
  %27 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %28 = load i32, i32* %27, align 4
  %29 = or i32 %28, 32768
  store i32 %29, i32* %27, align 4
  %30 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 34
  %31 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 35
  %32 = load i32, i32* %30, align 4
  %33 = icmp slt i32 0, %32
  br i1 %33, label %.lr.ph, label %40

.lr.ph:                                           ; preds = %26
  br label %34

34:                                               ; preds = %.lr.ph, %34
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %34 ]
  %scevgep = getelementptr i8, i8* %3, i64 %indvars.iv
  %35 = load i8, i8* %scevgep, align 1
  %36 = load i8*, i8** %31, align 8
  %scevgep3 = getelementptr i8, i8* %36, i64 %indvars.iv
  store i8 %35, i8* %scevgep3, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %37 = load i32, i32* %30, align 4
  %38 = sext i32 %37 to i64
  %39 = icmp slt i64 %indvars.iv.next, %38
  br i1 %39, label %34, label %._crit_edge

._crit_edge:                                      ; preds = %34
  br label %40

40:                                               ; preds = %._crit_edge, %26
  %41 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %42 = load i32, i32* %41, align 8
  %43 = or i32 %42, 65536
  store i32 %43, i32* %41, align 8
  br label %44

44:                                               ; preds = %4, %40, %25
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_update_info(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  br i1 %3, label %4, label %11

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, 64
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  call void @png_read_start_row(%struct.png_struct_def* %0)
  call void @png_read_transform_info(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %11

10:                                               ; preds = %4
  call void @png_app_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.3.128, i32 0, i32 0))
  br label %11

11:                                               ; preds = %9, %10, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_start_row(%struct.png_struct_def* noalias %0) #11 {
  call void @png_init_read_transformations(%struct.png_struct_def* %0)
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 58
  %3 = load i8, i8* %2, align 4
  %4 = zext i8 %3 to i32
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %55

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %25

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 38
  %13 = load i32, i32* %12, align 4
  %14 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @png_read_start_row.png_pass_yinc, i64 0, i64 0), align 1
  %15 = zext i8 %14 to i32
  %16 = add i32 %13, %15
  %17 = sub i32 %16, 1
  %18 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @png_read_start_row.png_pass_ystart, i64 0, i64 0), align 1
  %19 = zext i8 %18 to i32
  %20 = sub i32 %17, %19
  %21 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @png_read_start_row.png_pass_yinc, i64 0, i64 0), align 1
  %22 = zext i8 %21 to i32
  %23 = udiv i32 %20, %22
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 39
  store i32 %23, i32* %24, align 8
  br label %29

25:                                               ; preds = %6
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 38
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 39
  store i32 %27, i32* %28, align 8
  br label %29

29:                                               ; preds = %25, %11
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds [7 x i8], [7 x i8]* @png_read_start_row.png_pass_inc, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = add i32 %31, %37
  %39 = sub i32 %38, 1
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds [7 x i8], [7 x i8]* @png_read_start_row.png_pass_start, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = sub i32 %39, %45
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds [7 x i8], [7 x i8]* @png_read_start_row.png_pass_inc, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = udiv i32 %46, %52
  %54 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 42
  store i32 %53, i32* %54, align 8
  br label %62

55:                                               ; preds = %1
  %56 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 38
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 39
  store i32 %57, i32* %58, align 8
  %59 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 42
  store i32 %60, i32* %61, align 8
  br label %62

62:                                               ; preds = %55, %29
  %63 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 64
  %64 = load i8, i8* %63, align 2
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %67 = load i32, i32* %66, align 4
  %68 = and i32 %67, 4
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %70, label %75

70:                                               ; preds = %62
  %71 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %72 = load i8, i8* %71, align 8
  %73 = zext i8 %72 to i32
  %74 = icmp slt i32 %73, 8
  %spec.select = select i1 %74, i32 8, i32 %65
  br label %75

75:                                               ; preds = %70, %62
  %.0 = phi i32 [ %65, %62 ], [ %spec.select, %70 ]
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %77 = load i32, i32* %76, align 4
  %78 = and i32 %77, 4096
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %115

80:                                               ; preds = %75
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = icmp eq i32 %83, 3
  br i1 %84, label %85, label %90

85:                                               ; preds = %80
  %86 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %87 = load i16, i16* %86, align 8
  %88 = zext i16 %87 to i32
  %89 = icmp ne i32 %88, 0
  %. = select i1 %89, i32 32, i32 24
  br label %115

90:                                               ; preds = %80
  %91 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %102

95:                                               ; preds = %90
  %96 = icmp ult i32 %.0, 8
  %spec.select1 = select i1 %96, i32 8, i32 %.0
  %97 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %98 = load i16, i16* %97, align 8
  %99 = zext i16 %98 to i32
  %100 = icmp ne i32 %99, 0
  %101 = mul i32 %spec.select1, 2
  %.3 = select i1 %100, i32 %101, i32 %spec.select1
  br label %115

102:                                              ; preds = %90
  %103 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = icmp eq i32 %105, 2
  br i1 %106, label %107, label %115

107:                                              ; preds = %102
  %108 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %109 = load i16, i16* %108, align 8
  %110 = zext i16 %109 to i32
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %112, label %115

112:                                              ; preds = %107
  %113 = mul i32 %.0, 4
  %114 = udiv i32 %113, 3
  br label %115

115:                                              ; preds = %85, %102, %112, %107, %95, %75
  %.8 = phi i32 [ %.0, %75 ], [ %., %85 ], [ %.3, %95 ], [ %.0, %102 ], [ %114, %112 ], [ %.0, %107 ]
  %116 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %117 = load i32, i32* %116, align 4
  %118 = and i32 %117, 512
  %119 = icmp ne i32 %118, 0
  br i1 %119, label %120, label %135

120:                                              ; preds = %115
  %121 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %122 = load i32, i32* %121, align 4
  %123 = and i32 %122, 4096
  %124 = icmp ne i32 %123, 0
  br i1 %124, label %125, label %131

125:                                              ; preds = %120
  %126 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %127 = load i8, i8* %126, align 8
  %128 = zext i8 %127 to i32
  %129 = icmp slt i32 %128, 16
  %130 = mul i32 %.8, 2
  %spec.select2 = select i1 %129, i32 %130, i32 %.8
  br label %135

131:                                              ; preds = %120
  %132 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %133 = load i32, i32* %132, align 4
  %134 = and i32 %133, -513
  store i32 %134, i32* %132, align 4
  br label %135

135:                                              ; preds = %125, %131, %115
  %.11 = phi i32 [ %.8, %115 ], [ %spec.select2, %125 ], [ %.8, %131 ]
  %136 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %137 = load i32, i32* %136, align 4
  %138 = and i32 %137, 32768
  %139 = icmp ne i32 %138, 0
  br i1 %139, label %140, label %159

140:                                              ; preds = %135
  %141 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %147

145:                                              ; preds = %140
  %146 = icmp ule i32 %.11, 8
  %.4 = select i1 %146, i32 16, i32 32
  br label %159

147:                                              ; preds = %140
  %148 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = icmp eq i32 %150, 2
  br i1 %151, label %157, label %152

152:                                              ; preds = %147
  %153 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = icmp eq i32 %155, 3
  br i1 %156, label %157, label %159

157:                                              ; preds = %152, %147
  %158 = icmp ule i32 %.11, 32
  %.5 = select i1 %158, i32 32, i32 64
  br label %159

159:                                              ; preds = %145, %157, %152, %135
  %.16 = phi i32 [ %.11, %135 ], [ %.4, %145 ], [ %.5, %157 ], [ %.11, %152 ]
  %160 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %161 = load i32, i32* %160, align 4
  %162 = and i32 %161, 16384
  %163 = icmp ne i32 %162, 0
  br i1 %163, label %164, label %198

164:                                              ; preds = %159
  %165 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %166 = load i16, i16* %165, align 8
  %167 = zext i16 %166 to i32
  %168 = icmp ne i32 %167, 0
  br i1 %168, label %169, label %174

169:                                              ; preds = %164
  %170 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %171 = load i32, i32* %170, align 4
  %172 = and i32 %171, 4096
  %173 = icmp ne i32 %172, 0
  br i1 %173, label %184, label %174

174:                                              ; preds = %169, %164
  %175 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %176 = load i32, i32* %175, align 4
  %177 = and i32 %176, 32768
  %178 = icmp ne i32 %177, 0
  br i1 %178, label %184, label %179

179:                                              ; preds = %174
  %180 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = icmp eq i32 %182, 4
  br i1 %183, label %184, label %186

184:                                              ; preds = %179, %174, %169
  %185 = icmp ule i32 %.16, 16
  %.6 = select i1 %185, i32 32, i32 64
  br label %198

186:                                              ; preds = %179
  %187 = icmp ule i32 %.16, 8
  br i1 %187, label %188, label %193

188:                                              ; preds = %186
  %189 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i32
  %192 = icmp eq i32 %191, 6
  %.7 = select i1 %192, i32 32, i32 24
  br label %198

193:                                              ; preds = %186
  %194 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i32
  %197 = icmp eq i32 %196, 6
  %.9 = select i1 %197, i32 64, i32 48
  br label %198

198:                                              ; preds = %184, %193, %188, %159
  %.22 = phi i32 [ %.16, %159 ], [ %.6, %184 ], [ %.7, %188 ], [ %.9, %193 ]
  %199 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %200 = load i32, i32* %199, align 4
  %201 = and i32 %200, 1048576
  %202 = icmp ne i32 %201, 0
  br i1 %202, label %203, label %212

203:                                              ; preds = %198
  %204 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 13
  %205 = load i8, i8* %204, align 8
  %206 = zext i8 %205 to i32
  %207 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 14
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i32
  %210 = mul nsw i32 %206, %209
  %211 = icmp ugt i32 %210, %.22
  %spec.select10 = select i1 %211, i32 %210, i32 %.22
  br label %212

212:                                              ; preds = %203, %198
  %.24 = phi i32 [ %spec.select10, %203 ], [ %.22, %198 ]
  %213 = trunc i32 %.24 to i8
  %214 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 68
  store i8 %213, i8* %214, align 2
  %215 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 69
  store i8 0, i8* %215, align 1
  %216 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %217 = load i32, i32* %216, align 8
  %218 = add i32 %217, 7
  %219 = and i32 %218, -8
  %220 = zext i32 %219 to i64
  %221 = icmp uge i32 %.24, 8
  br i1 %221, label %222, label %226

222:                                              ; preds = %212
  %223 = zext i32 %.24 to i64
  %224 = lshr i64 %223, 3
  %225 = mul i64 %220, %224
  br label %231

226:                                              ; preds = %212
  %227 = zext i32 %.24 to i64
  %228 = mul i64 %220, %227
  %229 = add i64 %228, 7
  %230 = lshr i64 %229, 3
  br label %231

231:                                              ; preds = %226, %222
  %232 = phi i64 [ %225, %222 ], [ %230, %226 ]
  %233 = add i64 %232, 1
  %234 = add i32 %.24, 7
  %235 = lshr i32 %234, 3
  %236 = zext i32 %235 to i64
  %237 = add i64 %233, %236
  %238 = and i64 %237, -8
  call void (...) @magma_bug005()
  %239 = add i64 %237, 48
  %240 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 137
  %241 = load i64, i64* %240, align 8
  %242 = icmp ugt i64 %239, %241
  br i1 %242, label %243, label %290

243:                                              ; preds = %231
  %244 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 127
  %245 = load i8*, i8** %244, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %245)
  %246 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 142
  %247 = load i8*, i8** %246, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %247)
  %248 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 58
  %249 = load i8, i8* %248, align 4
  %250 = zext i8 %249 to i32
  %251 = icmp ne i32 %250, 0
  br i1 %251, label %252, label %256

252:                                              ; preds = %243
  %253 = add i64 %237, 48
  %254 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_calloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %253)
  %255 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 127
  store i8* %254, i8** %255, align 8
  br label %260

256:                                              ; preds = %243
  %257 = add i64 %237, 48
  %258 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %257)
  %259 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 127
  store i8* %258, i8** %259, align 8
  br label %260

260:                                              ; preds = %256, %252
  %261 = add i64 %237, 48
  %262 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %261)
  %263 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 142
  store i8* %262, i8** %263, align 8
  %264 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 127
  %265 = load i8*, i8** %264, align 8
  %266 = getelementptr inbounds i8, i8* %265, i64 32
  %267 = ptrtoint i8* %266 to i64
  %268 = sub i64 %267, 0
  %269 = and i64 %268, 15
  %270 = trunc i64 %269 to i32
  %271 = sext i32 %270 to i64
  %272 = sub i64 0, %271
  %273 = getelementptr inbounds i8, i8* %266, i64 %272
  %274 = getelementptr inbounds i8, i8* %273, i64 -1
  %275 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  store i8* %274, i8** %275, align 8
  %276 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 142
  %277 = load i8*, i8** %276, align 8
  %278 = getelementptr inbounds i8, i8* %277, i64 32
  %279 = ptrtoint i8* %278 to i64
  %280 = sub i64 %279, 0
  %281 = and i64 %280, 15
  %282 = trunc i64 %281 to i32
  %283 = sext i32 %282 to i64
  %284 = sub i64 0, %283
  %285 = getelementptr inbounds i8, i8* %278, i64 %284
  %286 = getelementptr inbounds i8, i8* %285, i64 -1
  %287 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 45
  store i8* %286, i8** %287, align 8
  %288 = add i64 %237, 48
  %289 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 137
  store i64 %288, i64* %289, align 8
  br label %290

290:                                              ; preds = %260, %231
  %291 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 41
  %292 = load i64, i64* %291, align 8
  %293 = icmp ugt i64 %292, -2
  br i1 %293, label %294, label %295

294:                                              ; preds = %290
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.58.378, i32 0, i32 0)) #24
  unreachable

295:                                              ; preds = %290
  %296 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 45
  %297 = load i8*, i8** %296, align 8
  %298 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 41
  %299 = load i64, i64* %298, align 8
  %300 = add i64 %299, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %297, i8 0, i64 %300, i1 false)
  %301 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  %302 = load i8*, i8** %301, align 8
  %303 = icmp ne i8* %302, null
  br i1 %303, label %304, label %309

304:                                              ; preds = %295
  %305 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  %306 = load i8*, i8** %305, align 8
  %307 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 139
  store i64 0, i64* %307, align 8
  %308 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 138
  store i8* null, i8** %308, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %306)
  br label %309

309:                                              ; preds = %304, %295
  %310 = call i32 @png_inflate_claim(%struct.png_struct_def* %0, i32 1229209940)
  %311 = icmp ne i32 %310, 0
  br i1 %311, label %312, label %316

312:                                              ; preds = %309
  %313 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %314 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %313, i32 0, i32 6
  %315 = load i8*, i8** %314, align 8
  call void @png_error(%struct.png_struct_def* %0, i8* %315) #24
  unreachable

316:                                              ; preds = %309
  %317 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %318 = load i32, i32* %317, align 8
  %319 = or i32 %318, 64
  store i32 %319, i32* %317, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_transform_info(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 4096
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %49

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = icmp eq i32 %10, 3
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %14 = load i16, i16* %13, align 8
  %15 = zext i16 %14 to i32
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  store i8 6, i8* %18, align 1
  br label %21

19:                                               ; preds = %12
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  store i8 2, i8* %20, align 1
  br label %21

21:                                               ; preds = %19, %17
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  store i8 8, i8* %22, align 4
  %23 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 6
  store i16 0, i16* %23, align 2
  call void (...) @magma_bug007()
  br label %49

24:                                               ; preds = %7
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %26 = load i16, i16* %25, align 8
  %27 = zext i16 %26 to i32
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %40

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %31 = load i32, i32* %30, align 4
  %32 = and i32 %31, 33554432
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %40

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = or i32 %37, 4
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %35, align 1
  br label %40

40:                                               ; preds = %29, %34, %24
  %41 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  %42 = load i8, i8* %41, align 4
  %43 = zext i8 %42 to i32
  %44 = icmp slt i32 %43, 8
  br i1 %44, label %45, label %47

45:                                               ; preds = %40
  %46 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  store i8 8, i8* %46, align 4
  br label %47

47:                                               ; preds = %45, %40
  %48 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 6
  store i16 0, i16* %48, align 2
  br label %49

49:                                               ; preds = %21, %47, %2
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %51 = load i32, i32* %50, align 4
  %52 = and i32 %51, 128
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %59

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 27
  %56 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %57 = bitcast %struct.png_color_16_struct* %55 to i8*
  %58 = bitcast %struct.png_color_16_struct* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %57, i8* align 4 %58, i64 10, i1 false)
  br label %59

59:                                               ; preds = %54, %49
  %60 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %61 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %60, i32 0, i32 0
  %62 = load i32, i32* %61, align 8
  %63 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %64 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %63, i32 0, i32 0
  store i32 %62, i32* %64, align 4
  %65 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  %66 = load i8, i8* %65, align 4
  %67 = zext i8 %66 to i32
  %68 = icmp eq i32 %67, 16
  br i1 %68, label %69, label %83

69:                                               ; preds = %59
  %70 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %71 = load i32, i32* %70, align 4
  %72 = and i32 %71, 67108864
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %69
  %75 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  store i8 8, i8* %75, align 4
  br label %76

76:                                               ; preds = %74, %69
  %77 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %78 = load i32, i32* %77, align 4
  %79 = and i32 %78, 1024
  %80 = icmp ne i32 %79, 0
  br i1 %80, label %81, label %83

81:                                               ; preds = %76
  %82 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  store i8 8, i8* %82, align 4
  br label %83

83:                                               ; preds = %76, %81, %59
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %85 = load i32, i32* %84, align 4
  %86 = and i32 %85, 16384
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %88, label %95

88:                                               ; preds = %83
  %89 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = or i32 %91, 2
  %93 = trunc i32 %92 to i8
  %94 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  store i8 %93, i8* %94, align 1
  br label %95

95:                                               ; preds = %88, %83
  %96 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %97 = load i32, i32* %96, align 4
  %98 = and i32 %97, 6291456
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %100, label %107

100:                                              ; preds = %95
  %101 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = and i32 %103, -3
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  store i8 %105, i8* %106, align 1
  br label %107

107:                                              ; preds = %100, %95
  %108 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %109 = load i32, i32* %108, align 4
  %110 = and i32 %109, 64
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %112, label %133

112:                                              ; preds = %107
  %113 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = icmp eq i32 %115, 2
  br i1 %116, label %122, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = icmp eq i32 %120, 6
  br i1 %121, label %122, label %133

122:                                              ; preds = %117, %112
  %123 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 108
  %124 = load i8*, i8** %123, align 8
  %125 = icmp ne i8* %124, null
  br i1 %125, label %126, label %133

126:                                              ; preds = %122
  %127 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  %128 = load i8, i8* %127, align 4
  %129 = zext i8 %128 to i32
  %130 = icmp eq i32 %129, 8
  br i1 %130, label %131, label %133

131:                                              ; preds = %126
  %132 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  store i8 3, i8* %132, align 1
  br label %133

133:                                              ; preds = %117, %122, %126, %131, %107
  %134 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %135 = load i32, i32* %134, align 4
  %136 = and i32 %135, 512
  %137 = icmp ne i32 %136, 0
  br i1 %137, label %138, label %150

138:                                              ; preds = %133
  %139 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  %140 = load i8, i8* %139, align 4
  %141 = zext i8 %140 to i32
  %142 = icmp eq i32 %141, 8
  br i1 %142, label %143, label %150

143:                                              ; preds = %138
  %144 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = icmp ne i32 %146, 3
  br i1 %147, label %148, label %150

148:                                              ; preds = %143
  %149 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  store i8 16, i8* %149, align 4
  br label %150

150:                                              ; preds = %148, %143, %138, %133
  %151 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %152 = load i32, i32* %151, align 4
  %153 = and i32 %152, 4
  %154 = icmp ne i32 %153, 0
  br i1 %154, label %155, label %162

155:                                              ; preds = %150
  %156 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  %157 = load i8, i8* %156, align 4
  %158 = zext i8 %157 to i32
  %159 = icmp slt i32 %158, 8
  br i1 %159, label %160, label %162

160:                                              ; preds = %155
  %161 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  store i8 8, i8* %161, align 4
  br label %162

162:                                              ; preds = %160, %155, %150
  %163 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = icmp eq i32 %165, 3
  br i1 %166, label %167, label %169

167:                                              ; preds = %162
  %168 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 12
  store i8 1, i8* %168, align 1
  br label %179

169:                                              ; preds = %162
  %170 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = and i32 %172, 2
  %174 = icmp ne i32 %173, 0
  br i1 %174, label %175, label %177

175:                                              ; preds = %169
  %176 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 12
  store i8 3, i8* %176, align 1
  br label %179

177:                                              ; preds = %169
  %178 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 12
  store i8 1, i8* %178, align 1
  br label %179

179:                                              ; preds = %175, %177, %167
  %180 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %181 = load i32, i32* %180, align 4
  %182 = and i32 %181, 262144
  %183 = icmp ne i32 %182, 0
  br i1 %183, label %184, label %192

184:                                              ; preds = %179
  %185 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i32
  %188 = and i32 %187, -5
  %189 = trunc i32 %188 to i8
  %190 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  store i8 %189, i8* %190, align 1
  %191 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 6
  store i16 0, i16* %191, align 2
  br label %192

192:                                              ; preds = %184, %179
  %193 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  %196 = and i32 %195, 4
  %197 = icmp ne i32 %196, 0
  br i1 %197, label %198, label %202

198:                                              ; preds = %192
  %199 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 12
  %200 = load i8, i8* %199, align 1
  %201 = add i8 %200, 1
  store i8 %201, i8* %199, align 1
  br label %202

202:                                              ; preds = %198, %192
  %203 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %204 = load i32, i32* %203, align 4
  %205 = and i32 %204, 32768
  %206 = icmp ne i32 %205, 0
  br i1 %206, label %207, label %231

207:                                              ; preds = %202
  %208 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %209 = load i8, i8* %208, align 1
  %210 = zext i8 %209 to i32
  %211 = icmp eq i32 %210, 2
  br i1 %211, label %217, label %212

212:                                              ; preds = %207
  %213 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %214 = load i8, i8* %213, align 1
  %215 = zext i8 %214 to i32
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %231

217:                                              ; preds = %212, %207
  %218 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 12
  %219 = load i8, i8* %218, align 1
  %220 = add i8 %219, 1
  store i8 %220, i8* %218, align 1
  %221 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %222 = load i32, i32* %221, align 4
  %223 = and i32 %222, 16777216
  %224 = icmp ne i32 %223, 0
  br i1 %224, label %225, label %231

225:                                              ; preds = %217
  %226 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i32
  %229 = or i32 %228, 4
  %230 = trunc i32 %229 to i8
  store i8 %230, i8* %226, align 1
  br label %231

231:                                              ; preds = %217, %225, %212, %202
  %232 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %233 = load i32, i32* %232, align 4
  %234 = and i32 %233, 1048576
  %235 = icmp ne i32 %234, 0
  br i1 %235, label %236, label %254

236:                                              ; preds = %231
  %237 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 13
  %238 = load i8, i8* %237, align 8
  %239 = zext i8 %238 to i32
  %240 = icmp ne i32 %239, 0
  br i1 %240, label %241, label %245

241:                                              ; preds = %236
  %242 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 13
  %243 = load i8, i8* %242, align 8
  %244 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  store i8 %243, i8* %244, align 4
  br label %245

245:                                              ; preds = %241, %236
  %246 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 14
  %247 = load i8, i8* %246, align 1
  %248 = zext i8 %247 to i32
  %249 = icmp ne i32 %248, 0
  br i1 %249, label %250, label %254

250:                                              ; preds = %245
  %251 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 14
  %252 = load i8, i8* %251, align 1
  %253 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 12
  store i8 %252, i8* %253, align 1
  br label %254

254:                                              ; preds = %245, %250, %231
  %255 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 12
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i32
  %258 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  %259 = load i8, i8* %258, align 4
  %260 = zext i8 %259 to i32
  %261 = mul nsw i32 %257, %260
  %262 = trunc i32 %261 to i8
  %263 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 13
  store i8 %262, i8* %263, align 2
  %264 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 13
  %265 = load i8, i8* %264, align 2
  %266 = zext i8 %265 to i32
  %267 = icmp sge i32 %266, 8
  br i1 %267, label %268, label %277

268:                                              ; preds = %254
  %269 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 0
  %270 = load i32, i32* %269, align 8
  %271 = zext i32 %270 to i64
  %272 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 13
  %273 = load i8, i8* %272, align 2
  %274 = zext i8 %273 to i64
  %275 = lshr i64 %274, 3
  %276 = mul i64 %271, %275
  br label %287

277:                                              ; preds = %254
  %278 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 0
  %279 = load i32, i32* %278, align 8
  %280 = zext i32 %279 to i64
  %281 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 13
  %282 = load i8, i8* %281, align 2
  %283 = zext i8 %282 to i64
  %284 = mul i64 %280, %283
  %285 = add i64 %284, 7
  %286 = lshr i64 %285, 3
  br label %287

287:                                              ; preds = %277, %268
  %288 = phi i64 [ %276, %268 ], [ %286, %277 ]
  %289 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 3
  store i64 %288, i64* %289, align 8
  %290 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 3
  %291 = load i64, i64* %290, align 8
  %292 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 49
  store i64 %291, i64* %292, align 8
  ret void
}

declare void @magma_bug007(...) #13

; Function Attrs: noinline nounwind uwtable
define void @png_init_read_transformations(%struct.png_struct_def* noalias %0) #11 {
  %2 = alloca %struct.png_color_struct, align 1
  %3 = alloca %struct.png_color_struct, align 1
  %4 = alloca %struct.png_color_struct, align 1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %6 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %5, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %26

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %11 = load i32, i32* %10, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %15 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %14, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %18 = load i32, i32* %17, align 4
  %19 = call i32 @png_gamma_threshold(i32 %16, i32 %18)
  br label %40

20:                                               ; preds = %9
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %22 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %21, i32 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = call i32 @png_reciprocal(i32 %23)
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  store i32 %24, i32* %25, align 4
  br label %40

26:                                               ; preds = %1
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %28 = load i32, i32* %27, align 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %36

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %32 = load i32, i32* %31, align 4
  %33 = call i32 @png_reciprocal(i32 %32)
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %35 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %34, i32 0, i32 0
  store i32 %33, i32* %35, align 8
  br label %40

36:                                               ; preds = %26
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %38 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %37, i32 0, i32 0
  store i32 100000, i32* %38, align 8
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  store i32 100000, i32* %39, align 4
  br label %40

40:                                               ; preds = %30, %36, %13, %20
  %.1 = phi i32 [ %19, %13 ], [ 0, %20 ], [ 0, %36 ], [ 0, %30 ]
  %41 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %42 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %41, i32 0, i32 4
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = or i32 %44, 1
  %46 = trunc i32 %45 to i16
  store i16 %46, i16* %42, align 2
  %47 = icmp ne i32 %.1, 0
  br i1 %47, label %48, label %52

48:                                               ; preds = %40
  %49 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %50 = load i32, i32* %49, align 4
  %51 = or i32 %50, 8192
  store i32 %51, i32* %49, align 4
  br label %56

52:                                               ; preds = %40
  %53 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %54 = load i32, i32* %53, align 4
  %55 = and i32 %54, -8193
  store i32 %55, i32* %53, align 4
  br label %56

56:                                               ; preds = %52, %48
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %58 = load i32, i32* %57, align 4
  %59 = and i32 %58, 262144
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %74

61:                                               ; preds = %56
  %62 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %63 = load i32, i32* %62, align 4
  %64 = and i32 %63, 128
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %74

66:                                               ; preds = %61
  %67 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %68 = load i32, i32* %67, align 4
  %69 = and i32 %68, -41943297
  store i32 %69, i32* %67, align 4
  %70 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %71 = load i32, i32* %70, align 8
  %72 = and i32 %71, -8193
  store i32 %72, i32* %70, align 8
  %73 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  store i16 0, i16* %73, align 8
  br label %74

74:                                               ; preds = %66, %61, %56
  %75 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %76 = load i32, i32* %75, align 4
  %77 = call i32 @png_gamma_significant(i32 %76)
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %86

79:                                               ; preds = %74
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %81 = load i32, i32* %80, align 4
  %82 = and i32 %81, -8388609
  store i32 %82, i32* %80, align 4
  %83 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %84 = load i32, i32* %83, align 8
  %85 = and i32 %84, -8193
  store i32 %85, i32* %83, align 8
  br label %86

86:                                               ; preds = %79, %74
  %87 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %88 = load i32, i32* %87, align 4
  %89 = and i32 %88, 6291456
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %86
  call void @png_colorspace_set_rgb_coefficients(%struct.png_struct_def* %0)
  br label %92

92:                                               ; preds = %91, %86
  %93 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %94 = load i32, i32* %93, align 4
  %95 = and i32 %94, 256
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %107

97:                                               ; preds = %92
  %98 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = and i32 %100, 2
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %146

103:                                              ; preds = %97
  %104 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %105 = load i32, i32* %104, align 4
  %106 = or i32 %105, 2048
  store i32 %106, i32* %104, align 4
  br label %146

107:                                              ; preds = %92
  %108 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %109 = load i32, i32* %108, align 4
  %110 = and i32 %109, 128
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %112, label %146

112:                                              ; preds = %107
  %113 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %114 = load i32, i32* %113, align 4
  %115 = and i32 %114, 16384
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %146

117:                                              ; preds = %112
  %118 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %119 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %118, i32 0, i32 1
  %120 = load i16, i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %123 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %122, i32 0, i32 2
  %124 = load i16, i16* %123, align 4
  %125 = zext i16 %124 to i32
  %126 = icmp eq i32 %121, %125
  br i1 %126, label %127, label %146

127:                                              ; preds = %117
  %128 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %129 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %128, i32 0, i32 1
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %133 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %132, i32 0, i32 3
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  %136 = icmp eq i32 %131, %135
  br i1 %136, label %137, label %146

137:                                              ; preds = %127
  %138 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %139 = load i32, i32* %138, align 4
  %140 = or i32 %139, 2048
  store i32 %140, i32* %138, align 4
  %141 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %142 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %141, i32 0, i32 1
  %143 = load i16, i16* %142, align 2
  %144 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %145 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %144, i32 0, i32 4
  store i16 %143, i16* %145, align 4
  br label %146

146:                                              ; preds = %107, %117, %127, %137, %112, %97, %103
  %147 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = icmp eq i32 %149, 3
  br i1 %150, label %151, label %152

151:                                              ; preds = %146
  call void @png_init_palette_transformations(%struct.png_struct_def* %0)
  br label %153

152:                                              ; preds = %146
  call void @png_init_rgb_transformations(%struct.png_struct_def* %0)
  br label %153

153:                                              ; preds = %152, %151
  %154 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %155 = load i32, i32* %154, align 4
  %156 = and i32 %155, 512
  %157 = icmp ne i32 %156, 0
  br i1 %157, label %158, label %214

158:                                              ; preds = %153
  %159 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %160 = load i32, i32* %159, align 4
  %161 = and i32 %160, 128
  %162 = icmp ne i32 %161, 0
  br i1 %162, label %163, label %214

163:                                              ; preds = %158
  %164 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %165 = load i32, i32* %164, align 4
  %166 = and i32 %165, 256
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %214

168:                                              ; preds = %163
  %169 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %170 = load i8, i8* %169, align 8
  %171 = zext i8 %170 to i32
  %172 = icmp ne i32 %171, 16
  br i1 %172, label %173, label %214

173:                                              ; preds = %168
  %174 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %175 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %174, i32 0, i32 1
  %176 = load i16, i16* %175, align 2
  %177 = zext i16 %176 to i32
  %178 = mul i32 %177, 255
  %179 = add i32 %178, 32895
  %180 = lshr i32 %179, 16
  %181 = trunc i32 %180 to i16
  %182 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %183 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %182, i32 0, i32 1
  store i16 %181, i16* %183, align 2
  %184 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %185 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %184, i32 0, i32 2
  %186 = load i16, i16* %185, align 4
  %187 = zext i16 %186 to i32
  %188 = mul i32 %187, 255
  %189 = add i32 %188, 32895
  %190 = lshr i32 %189, 16
  %191 = trunc i32 %190 to i16
  %192 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %193 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %192, i32 0, i32 2
  store i16 %191, i16* %193, align 4
  %194 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %195 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %194, i32 0, i32 3
  %196 = load i16, i16* %195, align 2
  %197 = zext i16 %196 to i32
  %198 = mul i32 %197, 255
  %199 = add i32 %198, 32895
  %200 = lshr i32 %199, 16
  %201 = trunc i32 %200 to i16
  %202 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %203 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %202, i32 0, i32 3
  store i16 %201, i16* %203, align 2
  %204 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %205 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %204, i32 0, i32 4
  %206 = load i16, i16* %205, align 4
  %207 = zext i16 %206 to i32
  %208 = mul i32 %207, 255
  %209 = add i32 %208, 32895
  %210 = lshr i32 %209, 16
  %211 = trunc i32 %210 to i16
  %212 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %213 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %212, i32 0, i32 4
  store i16 %211, i16* %213, align 4
  br label %214

214:                                              ; preds = %173, %168, %163, %158, %153
  %215 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %216 = load i32, i32* %215, align 4
  %217 = and i32 %216, 67109888
  %218 = icmp ne i32 %217, 0
  br i1 %218, label %219, label %267

219:                                              ; preds = %214
  %220 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %221 = load i32, i32* %220, align 4
  %222 = and i32 %221, 128
  %223 = icmp ne i32 %222, 0
  br i1 %223, label %224, label %267

224:                                              ; preds = %219
  %225 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %226 = load i32, i32* %225, align 4
  %227 = and i32 %226, 256
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %229, label %267

229:                                              ; preds = %224
  %230 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %231 = load i8, i8* %230, align 8
  %232 = zext i8 %231 to i32
  %233 = icmp eq i32 %232, 16
  br i1 %233, label %234, label %267

234:                                              ; preds = %229
  %235 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %236 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %235, i32 0, i32 1
  %237 = load i16, i16* %236, align 2
  %238 = zext i16 %237 to i32
  %239 = mul nsw i32 %238, 257
  %240 = trunc i32 %239 to i16
  %241 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %242 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %241, i32 0, i32 1
  store i16 %240, i16* %242, align 2
  %243 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %244 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %243, i32 0, i32 2
  %245 = load i16, i16* %244, align 4
  %246 = zext i16 %245 to i32
  %247 = mul nsw i32 %246, 257
  %248 = trunc i32 %247 to i16
  %249 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %250 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %249, i32 0, i32 2
  store i16 %248, i16* %250, align 4
  %251 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %252 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %251, i32 0, i32 3
  %253 = load i16, i16* %252, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nsw i32 %254, 257
  %256 = trunc i32 %255 to i16
  %257 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %258 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %257, i32 0, i32 3
  store i16 %256, i16* %258, align 2
  %259 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %260 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %259, i32 0, i32 4
  %261 = load i16, i16* %260, align 4
  %262 = zext i16 %261 to i32
  %263 = mul nsw i32 %262, 257
  %264 = trunc i32 %263 to i16
  %265 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %266 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %265, i32 0, i32 4
  store i16 %264, i16* %266, align 4
  br label %267

267:                                              ; preds = %234, %229, %224, %219, %214
  %268 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 75
  %269 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %270 = bitcast %struct.png_color_16_struct* %268 to i8*
  %271 = bitcast %struct.png_color_16_struct* %269 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %270, i8* align 4 %271, i64 10, i1 false)
  %272 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %273 = load i32, i32* %272, align 4
  %274 = and i32 %273, 8192
  %275 = icmp ne i32 %274, 0
  br i1 %275, label %328, label %276

276:                                              ; preds = %267
  %277 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %278 = load i32, i32* %277, align 4
  %279 = and i32 %278, 6291456
  %280 = icmp ne i32 %279, 0
  br i1 %280, label %281, label %292

281:                                              ; preds = %276
  %282 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %283 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %282, i32 0, i32 0
  %284 = load i32, i32* %283, align 8
  %285 = call i32 @png_gamma_significant(i32 %284)
  %286 = icmp ne i32 %285, 0
  br i1 %286, label %328, label %287

287:                                              ; preds = %281
  %288 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %289 = load i32, i32* %288, align 4
  %290 = call i32 @png_gamma_significant(i32 %289)
  %291 = icmp ne i32 %290, 0
  br i1 %291, label %328, label %292

292:                                              ; preds = %287, %276
  %293 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %294 = load i32, i32* %293, align 4
  %295 = and i32 %294, 128
  %296 = icmp ne i32 %295, 0
  br i1 %296, label %297, label %318

297:                                              ; preds = %292
  %298 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %299 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %298, i32 0, i32 0
  %300 = load i32, i32* %299, align 8
  %301 = call i32 @png_gamma_significant(i32 %300)
  %302 = icmp ne i32 %301, 0
  br i1 %302, label %328, label %303

303:                                              ; preds = %297
  %304 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %305 = load i32, i32* %304, align 4
  %306 = call i32 @png_gamma_significant(i32 %305)
  %307 = icmp ne i32 %306, 0
  br i1 %307, label %328, label %308

308:                                              ; preds = %303
  %309 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 72
  %310 = load i8, i8* %309, align 4
  %311 = zext i8 %310 to i32
  %312 = icmp eq i32 %311, 3
  br i1 %312, label %313, label %318

313:                                              ; preds = %308
  %314 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 73
  %315 = load i32, i32* %314, align 8
  %316 = call i32 @png_gamma_significant(i32 %315)
  %317 = icmp ne i32 %316, 0
  br i1 %317, label %328, label %318

318:                                              ; preds = %313, %308, %292
  %319 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %320 = load i32, i32* %319, align 4
  %321 = and i32 %320, 8388608
  %322 = icmp ne i32 %321, 0
  br i1 %322, label %323, label %885

323:                                              ; preds = %318
  %324 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %325 = load i32, i32* %324, align 4
  %326 = call i32 @png_gamma_significant(i32 %325)
  %327 = icmp ne i32 %326, 0
  br i1 %327, label %328, label %885

328:                                              ; preds = %323, %313, %303, %297, %287, %281, %267
  %329 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %330 = load i8, i8* %329, align 8
  %331 = zext i8 %330 to i32
  call void @png_build_gamma_table(%struct.png_struct_def* %0, i32 %331)
  %332 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %333 = load i32, i32* %332, align 4
  %334 = and i32 %333, 128
  %335 = icmp ne i32 %334, 0
  br i1 %335, label %336, label %839

336:                                              ; preds = %328
  %337 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %338 = load i32, i32* %337, align 4
  %339 = and i32 %338, 6291456
  %340 = icmp ne i32 %339, 0
  br i1 %340, label %341, label %342

341:                                              ; preds = %336
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.12.229, i32 0, i32 0))
  br label %342

342:                                              ; preds = %341, %336
  %343 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %344 = load i8, i8* %343, align 1
  %345 = zext i8 %344 to i32
  %346 = icmp eq i32 %345, 3
  %347 = zext i1 %346 to i32
  %348 = icmp ne i32 %347, 0
  br i1 %348, label %349, label %690

349:                                              ; preds = %342
  %350 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %351 = load %struct.png_color_struct*, %struct.png_color_struct** %350, align 8
  %352 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 53
  %353 = load i16, i16* %352, align 8
  %354 = zext i16 %353 to i32
  %355 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 72
  %356 = load i8, i8* %355, align 4
  %357 = zext i8 %356 to i32
  %358 = icmp eq i32 %357, 2
  br i1 %358, label %359, label %414

359:                                              ; preds = %349
  %360 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 81
  %361 = load i8*, i8** %360, align 8
  %362 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %363 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %362, i32 0, i32 1
  %364 = load i16, i16* %363, align 2
  %365 = zext i16 %364 to i64
  %366 = getelementptr inbounds i8, i8* %361, i64 %365
  %367 = load i8, i8* %366, align 1
  %368 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %2, i32 0, i32 0
  store i8 %367, i8* %368, align 1
  %369 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 81
  %370 = load i8*, i8** %369, align 8
  %371 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %372 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %371, i32 0, i32 2
  %373 = load i16, i16* %372, align 4
  %374 = zext i16 %373 to i64
  %375 = getelementptr inbounds i8, i8* %370, i64 %374
  %376 = load i8, i8* %375, align 1
  %377 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %2, i32 0, i32 1
  store i8 %376, i8* %377, align 1
  %378 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 81
  %379 = load i8*, i8** %378, align 8
  %380 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %381 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %380, i32 0, i32 3
  %382 = load i16, i16* %381, align 2
  %383 = zext i16 %382 to i64
  %384 = getelementptr inbounds i8, i8* %379, i64 %383
  %385 = load i8, i8* %384, align 1
  %386 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %2, i32 0, i32 2
  store i8 %385, i8* %386, align 1
  %387 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 84
  %388 = load i8*, i8** %387, align 8
  %389 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %390 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %389, i32 0, i32 1
  %391 = load i16, i16* %390, align 2
  %392 = zext i16 %391 to i64
  %393 = getelementptr inbounds i8, i8* %388, i64 %392
  %394 = load i8, i8* %393, align 1
  %395 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i32 0, i32 0
  store i8 %394, i8* %395, align 1
  %396 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 84
  %397 = load i8*, i8** %396, align 8
  %398 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %399 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %398, i32 0, i32 2
  %400 = load i16, i16* %399, align 4
  %401 = zext i16 %400 to i64
  %402 = getelementptr inbounds i8, i8* %397, i64 %401
  %403 = load i8, i8* %402, align 1
  %404 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i32 0, i32 1
  store i8 %403, i8* %404, align 1
  %405 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 84
  %406 = load i8*, i8** %405, align 8
  %407 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %408 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %407, i32 0, i32 3
  %409 = load i16, i16* %408, align 2
  %410 = zext i16 %409 to i64
  %411 = getelementptr inbounds i8, i8* %406, i64 %410
  %412 = load i8, i8* %411, align 1
  %413 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i32 0, i32 2
  store i8 %412, i8* %413, align 1
  br label %517

414:                                              ; preds = %349
  %415 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 72
  %416 = load i8, i8* %415, align 4
  %417 = zext i8 %416 to i32
  switch i32 %417, label %441 [
    i32 1, label %418
    i32 2, label %421
    i32 3, label %432
  ]

418:                                              ; preds = %414
  %419 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %420 = load i32, i32* %419, align 4
  br label %441

421:                                              ; preds = %414
  %422 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %423 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %422, i32 0, i32 0
  %424 = load i32, i32* %423, align 8
  %425 = call i32 @png_reciprocal(i32 %424)
  %426 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %427 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %426, i32 0, i32 0
  %428 = load i32, i32* %427, align 8
  %429 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %430 = load i32, i32* %429, align 4
  %431 = call i32 @png_reciprocal2(i32 %428, i32 %430)
  br label %441

432:                                              ; preds = %414
  %433 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 73
  %434 = load i32, i32* %433, align 8
  %435 = call i32 @png_reciprocal(i32 %434)
  %436 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 73
  %437 = load i32, i32* %436, align 8
  %438 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %439 = load i32, i32* %438, align 4
  %440 = call i32 @png_reciprocal2(i32 %437, i32 %439)
  br label %441

441:                                              ; preds = %414, %432, %421, %418
  %.06 = phi i32 [ %440, %432 ], [ %431, %421 ], [ 100000, %418 ], [ 100000, %414 ]
  %.05 = phi i32 [ %435, %432 ], [ %425, %421 ], [ %420, %418 ], [ 100000, %414 ]
  %442 = call i32 @png_gamma_significant(i32 %.06)
  %443 = icmp ne i32 %442, 0
  br i1 %443, label %444, label %463

444:                                              ; preds = %441
  %445 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %446 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %445, i32 0, i32 1
  %447 = load i16, i16* %446, align 2
  %448 = zext i16 %447 to i32
  %449 = call zeroext i8 @png_gamma_8bit_correct(i32 %448, i32 %.06)
  %450 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %2, i32 0, i32 0
  store i8 %449, i8* %450, align 1
  %451 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %452 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %451, i32 0, i32 2
  %453 = load i16, i16* %452, align 4
  %454 = zext i16 %453 to i32
  %455 = call zeroext i8 @png_gamma_8bit_correct(i32 %454, i32 %.06)
  %456 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %2, i32 0, i32 1
  store i8 %455, i8* %456, align 1
  %457 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %458 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %457, i32 0, i32 3
  %459 = load i16, i16* %458, align 2
  %460 = zext i16 %459 to i32
  %461 = call zeroext i8 @png_gamma_8bit_correct(i32 %460, i32 %.06)
  %462 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %2, i32 0, i32 2
  store i8 %461, i8* %462, align 1
  br label %479

463:                                              ; preds = %441
  %464 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %465 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %464, i32 0, i32 1
  %466 = load i16, i16* %465, align 2
  %467 = trunc i16 %466 to i8
  %468 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %2, i32 0, i32 0
  store i8 %467, i8* %468, align 1
  %469 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %470 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %469, i32 0, i32 2
  %471 = load i16, i16* %470, align 4
  %472 = trunc i16 %471 to i8
  %473 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %2, i32 0, i32 1
  store i8 %472, i8* %473, align 1
  %474 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %475 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %474, i32 0, i32 3
  %476 = load i16, i16* %475, align 2
  %477 = trunc i16 %476 to i8
  %478 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %2, i32 0, i32 2
  store i8 %477, i8* %478, align 1
  br label %479

479:                                              ; preds = %463, %444
  %480 = call i32 @png_gamma_significant(i32 %.05)
  %481 = icmp ne i32 %480, 0
  br i1 %481, label %482, label %501

482:                                              ; preds = %479
  %483 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %484 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %483, i32 0, i32 1
  %485 = load i16, i16* %484, align 2
  %486 = zext i16 %485 to i32
  %487 = call zeroext i8 @png_gamma_8bit_correct(i32 %486, i32 %.05)
  %488 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i32 0, i32 0
  store i8 %487, i8* %488, align 1
  %489 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %490 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %489, i32 0, i32 2
  %491 = load i16, i16* %490, align 4
  %492 = zext i16 %491 to i32
  %493 = call zeroext i8 @png_gamma_8bit_correct(i32 %492, i32 %.05)
  %494 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i32 0, i32 1
  store i8 %493, i8* %494, align 1
  %495 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %496 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %495, i32 0, i32 3
  %497 = load i16, i16* %496, align 2
  %498 = zext i16 %497 to i32
  %499 = call zeroext i8 @png_gamma_8bit_correct(i32 %498, i32 %.05)
  %500 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i32 0, i32 2
  store i8 %499, i8* %500, align 1
  br label %517

501:                                              ; preds = %479
  %502 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %503 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %502, i32 0, i32 1
  %504 = load i16, i16* %503, align 2
  %505 = trunc i16 %504 to i8
  %506 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i32 0, i32 0
  store i8 %505, i8* %506, align 1
  %507 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %508 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %507, i32 0, i32 2
  %509 = load i16, i16* %508, align 4
  %510 = trunc i16 %509 to i8
  %511 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i32 0, i32 1
  store i8 %510, i8* %511, align 1
  %512 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %513 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %512, i32 0, i32 3
  %514 = load i16, i16* %513, align 2
  %515 = trunc i16 %514 to i8
  %516 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i32 0, i32 2
  store i8 %515, i8* %516, align 1
  br label %517

517:                                              ; preds = %482, %501, %359
  %518 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %519 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %520 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 81
  %521 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 81
  %522 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 81
  %523 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %524 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 84
  %525 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %526 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i32 0, i32 0
  %527 = load i8, i8* %526, align 1
  %528 = zext i8 %527 to i16
  %529 = zext i16 %528 to i32
  %530 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %531 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 83
  %532 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 84
  %533 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %534 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i32 0, i32 1
  %535 = load i8, i8* %534, align 1
  %536 = zext i8 %535 to i16
  %537 = zext i16 %536 to i32
  %538 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %539 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 83
  %540 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 84
  %541 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %542 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %3, i32 0, i32 2
  %543 = load i8, i8* %542, align 1
  %544 = zext i8 %543 to i16
  %545 = zext i16 %544 to i32
  %546 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %547 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 83
  %548 = bitcast %struct.png_color_struct* %2 to i8*
  %549 = icmp slt i32 0, %354
  br i1 %549, label %.lr.ph34, label %686

.lr.ph34:                                         ; preds = %517
  %wide.trip.count38 = zext i32 %354 to i64
  %scevgep73 = getelementptr %struct.png_color_struct, %struct.png_color_struct* %351, i64 0, i32 2
  %scevgep7374 = bitcast i8* %scevgep73 to %struct.png_color_struct*
  br label %550

550:                                              ; preds = %.lr.ph34, %685
  %lsr.iv75 = phi %struct.png_color_struct* [ %scevgep7374, %.lr.ph34 ], [ %scevgep76, %685 ]
  %indvars.iv35 = phi i64 [ 0, %.lr.ph34 ], [ %indvars.iv.next36, %685 ]
  %lsr.iv7577 = bitcast %struct.png_color_struct* %lsr.iv75 to i8*
  %551 = load i16, i16* %518, align 8
  %552 = zext i16 %551 to i32
  %553 = zext i32 %552 to i64
  %554 = icmp ult i64 %indvars.iv35, %553
  br i1 %554, label %555, label %669

555:                                              ; preds = %550
  %556 = load i8*, i8** %519, align 8
  %scevgep71 = getelementptr i8, i8* %556, i64 %indvars.iv35
  %557 = load i8, i8* %scevgep71, align 1
  %558 = zext i8 %557 to i32
  %559 = icmp ne i32 %558, 255
  br i1 %559, label %560, label %669

560:                                              ; preds = %555
  %561 = load i8*, i8** %523, align 8
  %scevgep72 = getelementptr i8, i8* %561, i64 %indvars.iv35
  %562 = load i8, i8* %scevgep72, align 1
  %563 = zext i8 %562 to i32
  %564 = icmp eq i32 %563, 0
  br i1 %564, label %565, label %566

565:                                              ; preds = %560
  %scevgep78 = getelementptr i8, i8* %lsr.iv7577, i64 -2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %scevgep78, i8* align 1 %548, i64 3, i1 false)
  br label %685

566:                                              ; preds = %560
  %567 = load i8*, i8** %524, align 8
  %scevgep79 = getelementptr i8, i8* %lsr.iv7577, i64 -2
  %568 = load i8, i8* %scevgep79, align 1
  %569 = zext i8 %568 to i64
  %570 = getelementptr inbounds i8, i8* %567, i64 %569
  %571 = load i8, i8* %570, align 1
  %572 = zext i8 %571 to i16
  %573 = zext i16 %572 to i32
  %574 = load i8*, i8** %525, align 8
  %scevgep87 = getelementptr i8, i8* %574, i64 %indvars.iv35
  %575 = load i8, i8* %scevgep87, align 1
  %576 = zext i8 %575 to i16
  %577 = zext i16 %576 to i32
  %578 = mul nsw i32 %573, %577
  %579 = load i8*, i8** %530, align 8
  %scevgep88 = getelementptr i8, i8* %579, i64 %indvars.iv35
  %580 = load i8, i8* %scevgep88, align 1
  %581 = zext i8 %580 to i16
  %582 = zext i16 %581 to i32
  %583 = sub nsw i32 255, %582
  %584 = trunc i32 %583 to i16
  %585 = zext i16 %584 to i32
  %586 = mul nsw i32 %529, %585
  %587 = add nsw i32 %578, %586
  %588 = add nsw i32 %587, 128
  %589 = trunc i32 %588 to i16
  %590 = zext i16 %589 to i32
  %591 = zext i16 %589 to i32
  %592 = ashr i32 %591, 8
  %593 = add nsw i32 %590, %592
  %594 = ashr i32 %593, 8
  %595 = and i32 %594, 255
  %596 = trunc i32 %595 to i8
  %597 = load i8*, i8** %531, align 8
  %598 = zext i8 %596 to i64
  %599 = getelementptr inbounds i8, i8* %597, i64 %598
  %600 = load i8, i8* %599, align 1
  %scevgep80 = getelementptr i8, i8* %lsr.iv7577, i64 -2
  store i8 %600, i8* %scevgep80, align 1
  %601 = load i8*, i8** %532, align 8
  %scevgep81 = getelementptr i8, i8* %lsr.iv7577, i64 -1
  %602 = load i8, i8* %scevgep81, align 1
  %603 = zext i8 %602 to i64
  %604 = getelementptr inbounds i8, i8* %601, i64 %603
  %605 = load i8, i8* %604, align 1
  %606 = zext i8 %605 to i16
  %607 = zext i16 %606 to i32
  %608 = load i8*, i8** %533, align 8
  %scevgep89 = getelementptr i8, i8* %608, i64 %indvars.iv35
  %609 = load i8, i8* %scevgep89, align 1
  %610 = zext i8 %609 to i16
  %611 = zext i16 %610 to i32
  %612 = mul nsw i32 %607, %611
  %613 = load i8*, i8** %538, align 8
  %scevgep90 = getelementptr i8, i8* %613, i64 %indvars.iv35
  %614 = load i8, i8* %scevgep90, align 1
  %615 = zext i8 %614 to i16
  %616 = zext i16 %615 to i32
  %617 = sub nsw i32 255, %616
  %618 = trunc i32 %617 to i16
  %619 = zext i16 %618 to i32
  %620 = mul nsw i32 %537, %619
  %621 = add nsw i32 %612, %620
  %622 = add nsw i32 %621, 128
  %623 = trunc i32 %622 to i16
  %624 = zext i16 %623 to i32
  %625 = zext i16 %623 to i32
  %626 = ashr i32 %625, 8
  %627 = add nsw i32 %624, %626
  %628 = ashr i32 %627, 8
  %629 = and i32 %628, 255
  %630 = trunc i32 %629 to i8
  %631 = load i8*, i8** %539, align 8
  %632 = zext i8 %630 to i64
  %633 = getelementptr inbounds i8, i8* %631, i64 %632
  %634 = load i8, i8* %633, align 1
  %scevgep82 = getelementptr i8, i8* %lsr.iv7577, i64 -1
  store i8 %634, i8* %scevgep82, align 1
  %635 = load i8*, i8** %540, align 8
  %636 = load i8, i8* %lsr.iv7577, align 1
  %637 = zext i8 %636 to i64
  %638 = getelementptr inbounds i8, i8* %635, i64 %637
  %639 = load i8, i8* %638, align 1
  %640 = zext i8 %639 to i16
  %641 = zext i16 %640 to i32
  %642 = load i8*, i8** %541, align 8
  %scevgep91 = getelementptr i8, i8* %642, i64 %indvars.iv35
  %643 = load i8, i8* %scevgep91, align 1
  %644 = zext i8 %643 to i16
  %645 = zext i16 %644 to i32
  %646 = mul nsw i32 %641, %645
  %647 = load i8*, i8** %546, align 8
  %scevgep92 = getelementptr i8, i8* %647, i64 %indvars.iv35
  %648 = load i8, i8* %scevgep92, align 1
  %649 = zext i8 %648 to i16
  %650 = zext i16 %649 to i32
  %651 = sub nsw i32 255, %650
  %652 = trunc i32 %651 to i16
  %653 = zext i16 %652 to i32
  %654 = mul nsw i32 %545, %653
  %655 = add nsw i32 %646, %654
  %656 = add nsw i32 %655, 128
  %657 = trunc i32 %656 to i16
  %658 = zext i16 %657 to i32
  %659 = zext i16 %657 to i32
  %660 = ashr i32 %659, 8
  %661 = add nsw i32 %658, %660
  %662 = ashr i32 %661, 8
  %663 = and i32 %662, 255
  %664 = trunc i32 %663 to i8
  %665 = load i8*, i8** %547, align 8
  %666 = zext i8 %664 to i64
  %667 = getelementptr inbounds i8, i8* %665, i64 %666
  %668 = load i8, i8* %667, align 1
  store i8 %668, i8* %lsr.iv7577, align 1
  br label %685

669:                                              ; preds = %555, %550
  %670 = load i8*, i8** %520, align 8
  %scevgep83 = getelementptr i8, i8* %lsr.iv7577, i64 -2
  %671 = load i8, i8* %scevgep83, align 1
  %672 = zext i8 %671 to i64
  %673 = getelementptr inbounds i8, i8* %670, i64 %672
  %674 = load i8, i8* %673, align 1
  %scevgep84 = getelementptr i8, i8* %lsr.iv7577, i64 -2
  store i8 %674, i8* %scevgep84, align 1
  %675 = load i8*, i8** %521, align 8
  %scevgep85 = getelementptr i8, i8* %lsr.iv7577, i64 -1
  %676 = load i8, i8* %scevgep85, align 1
  %677 = zext i8 %676 to i64
  %678 = getelementptr inbounds i8, i8* %675, i64 %677
  %679 = load i8, i8* %678, align 1
  %scevgep86 = getelementptr i8, i8* %lsr.iv7577, i64 -1
  store i8 %679, i8* %scevgep86, align 1
  %680 = load i8*, i8** %522, align 8
  %681 = load i8, i8* %lsr.iv7577, align 1
  %682 = zext i8 %681 to i64
  %683 = getelementptr inbounds i8, i8* %680, i64 %682
  %684 = load i8, i8* %683, align 1
  store i8 %684, i8* %lsr.iv7577, align 1
  br label %685

685:                                              ; preds = %669, %566, %565
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %scevgep76 = getelementptr %struct.png_color_struct, %struct.png_color_struct* %lsr.iv75, i64 1
  %exitcond39 = icmp ne i64 %wide.trip.count38, %indvars.iv.next36
  br i1 %exitcond39, label %550, label %._crit_edge

._crit_edge:                                      ; preds = %685
  br label %686

686:                                              ; preds = %._crit_edge, %517
  %687 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %688 = load i32, i32* %687, align 4
  %689 = and i32 %688, -8321
  store i32 %689, i32* %687, align 4
  br label %1033

690:                                              ; preds = %342
  %691 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 72
  %692 = load i8, i8* %691, align 4
  %693 = zext i8 %692 to i32
  switch i32 %693, label %717 [
    i32 1, label %694
    i32 2, label %697
    i32 3, label %708
  ]

694:                                              ; preds = %690
  %695 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %696 = load i32, i32* %695, align 4
  br label %718

697:                                              ; preds = %690
  %698 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %699 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %698, i32 0, i32 0
  %700 = load i32, i32* %699, align 8
  %701 = call i32 @png_reciprocal(i32 %700)
  %702 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %703 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %702, i32 0, i32 0
  %704 = load i32, i32* %703, align 8
  %705 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %706 = load i32, i32* %705, align 4
  %707 = call i32 @png_reciprocal2(i32 %704, i32 %706)
  br label %718

708:                                              ; preds = %690
  %709 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 73
  %710 = load i32, i32* %709, align 8
  %711 = call i32 @png_reciprocal(i32 %710)
  %712 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 73
  %713 = load i32, i32* %712, align 8
  %714 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  %715 = load i32, i32* %714, align 4
  %716 = call i32 @png_reciprocal2(i32 %713, i32 %715)
  br label %718

717:                                              ; preds = %690
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13.230, i32 0, i32 0)) #24
  unreachable

718:                                              ; preds = %708, %697, %694
  %.09 = phi i32 [ %711, %708 ], [ %701, %697 ], [ %696, %694 ]
  %.08 = phi i32 [ %716, %708 ], [ %707, %697 ], [ 100000, %694 ]
  %719 = call i32 @png_gamma_significant(i32 %.09)
  %720 = call i32 @png_gamma_significant(i32 %.08)
  %721 = icmp ne i32 %719, 0
  br i1 %721, label %722, label %730

722:                                              ; preds = %718
  %723 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %724 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %723, i32 0, i32 4
  %725 = load i16, i16* %724, align 4
  %726 = zext i16 %725 to i32
  %727 = call zeroext i16 @png_gamma_correct(%struct.png_struct_def* %0, i32 %726, i32 %.09)
  %728 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 75
  %729 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %728, i32 0, i32 4
  store i16 %727, i16* %729, align 2
  br label %730

730:                                              ; preds = %722, %718
  %731 = icmp ne i32 %720, 0
  br i1 %731, label %732, label %740

732:                                              ; preds = %730
  %733 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %734 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %733, i32 0, i32 4
  %735 = load i16, i16* %734, align 4
  %736 = zext i16 %735 to i32
  %737 = call zeroext i16 @png_gamma_correct(%struct.png_struct_def* %0, i32 %736, i32 %.08)
  %738 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %739 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %738, i32 0, i32 4
  store i16 %737, i16* %739, align 4
  br label %740

740:                                              ; preds = %732, %730
  %741 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %742 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %741, i32 0, i32 1
  %743 = load i16, i16* %742, align 2
  %744 = zext i16 %743 to i32
  %745 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %746 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %745, i32 0, i32 2
  %747 = load i16, i16* %746, align 4
  %748 = zext i16 %747 to i32
  %749 = icmp ne i32 %744, %748
  br i1 %749, label %770, label %750

750:                                              ; preds = %740
  %751 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %752 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %751, i32 0, i32 1
  %753 = load i16, i16* %752, align 2
  %754 = zext i16 %753 to i32
  %755 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %756 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %755, i32 0, i32 3
  %757 = load i16, i16* %756, align 2
  %758 = zext i16 %757 to i32
  %759 = icmp ne i32 %754, %758
  br i1 %759, label %770, label %760

760:                                              ; preds = %750
  %761 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %762 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %761, i32 0, i32 1
  %763 = load i16, i16* %762, align 2
  %764 = zext i16 %763 to i32
  %765 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %766 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %765, i32 0, i32 4
  %767 = load i16, i16* %766, align 4
  %768 = zext i16 %767 to i32
  %769 = icmp ne i32 %764, %768
  br i1 %769, label %770, label %818

770:                                              ; preds = %760, %750, %740
  %771 = icmp ne i32 %719, 0
  br i1 %771, label %772, label %794

772:                                              ; preds = %770
  %773 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %774 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %773, i32 0, i32 1
  %775 = load i16, i16* %774, align 2
  %776 = zext i16 %775 to i32
  %777 = call zeroext i16 @png_gamma_correct(%struct.png_struct_def* %0, i32 %776, i32 %.09)
  %778 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 75
  %779 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %778, i32 0, i32 1
  store i16 %777, i16* %779, align 2
  %780 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %781 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %780, i32 0, i32 2
  %782 = load i16, i16* %781, align 4
  %783 = zext i16 %782 to i32
  %784 = call zeroext i16 @png_gamma_correct(%struct.png_struct_def* %0, i32 %783, i32 %.09)
  %785 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 75
  %786 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %785, i32 0, i32 2
  store i16 %784, i16* %786, align 2
  %787 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %788 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %787, i32 0, i32 3
  %789 = load i16, i16* %788, align 2
  %790 = zext i16 %789 to i32
  %791 = call zeroext i16 @png_gamma_correct(%struct.png_struct_def* %0, i32 %790, i32 %.09)
  %792 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 75
  %793 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %792, i32 0, i32 3
  store i16 %791, i16* %793, align 2
  br label %794

794:                                              ; preds = %772, %770
  %795 = icmp ne i32 %720, 0
  br i1 %795, label %796, label %837

796:                                              ; preds = %794
  %797 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %798 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %797, i32 0, i32 1
  %799 = load i16, i16* %798, align 2
  %800 = zext i16 %799 to i32
  %801 = call zeroext i16 @png_gamma_correct(%struct.png_struct_def* %0, i32 %800, i32 %.08)
  %802 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %803 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %802, i32 0, i32 1
  store i16 %801, i16* %803, align 2
  %804 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %805 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %804, i32 0, i32 2
  %806 = load i16, i16* %805, align 4
  %807 = zext i16 %806 to i32
  %808 = call zeroext i16 @png_gamma_correct(%struct.png_struct_def* %0, i32 %807, i32 %.08)
  %809 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %810 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %809, i32 0, i32 2
  store i16 %808, i16* %810, align 4
  %811 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %812 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %811, i32 0, i32 3
  %813 = load i16, i16* %812, align 2
  %814 = zext i16 %813 to i32
  %815 = call zeroext i16 @png_gamma_correct(%struct.png_struct_def* %0, i32 %814, i32 %.08)
  %816 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %817 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %816, i32 0, i32 3
  store i16 %815, i16* %817, align 2
  br label %837

818:                                              ; preds = %760
  %819 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 75
  %820 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %819, i32 0, i32 4
  %821 = load i16, i16* %820, align 2
  %822 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 75
  %823 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %822, i32 0, i32 3
  store i16 %821, i16* %823, align 2
  %824 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 75
  %825 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %824, i32 0, i32 2
  store i16 %821, i16* %825, align 2
  %826 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 75
  %827 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %826, i32 0, i32 1
  store i16 %821, i16* %827, align 2
  %828 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %829 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %828, i32 0, i32 4
  %830 = load i16, i16* %829, align 4
  %831 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %832 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %831, i32 0, i32 3
  store i16 %830, i16* %832, align 2
  %833 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %834 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %833, i32 0, i32 2
  store i16 %830, i16* %834, align 4
  %835 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %836 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %835, i32 0, i32 1
  store i16 %830, i16* %836, align 2
  br label %837

837:                                              ; preds = %794, %796, %818
  %838 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 72
  store i8 1, i8* %838, align 4
  br label %1033

839:                                              ; preds = %328
  %840 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %841 = load i8, i8* %840, align 1
  %842 = zext i8 %841 to i32
  %843 = icmp eq i32 %842, 3
  br i1 %843, label %844, label %1033

844:                                              ; preds = %839
  %845 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %846 = load i32, i32* %845, align 4
  %847 = and i32 %846, 4096
  %848 = icmp eq i32 %847, 0
  br i1 %848, label %854, label %849

849:                                              ; preds = %844
  %850 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %851 = load i32, i32* %850, align 4
  %852 = and i32 %851, 6291456
  %853 = icmp eq i32 %852, 0
  br i1 %853, label %854, label %1033

854:                                              ; preds = %849, %844
  %855 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %856 = load %struct.png_color_struct*, %struct.png_color_struct** %855, align 8
  %857 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 53
  %858 = load i16, i16* %857, align 8
  %859 = zext i16 %858 to i32
  %860 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 81
  %861 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 81
  %862 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 81
  %863 = icmp slt i32 0, %859
  br i1 %863, label %.lr.ph42, label %881

.lr.ph42:                                         ; preds = %854
  %wide.trip.count47 = zext i32 %859 to i64
  %scevgep93 = getelementptr %struct.png_color_struct, %struct.png_color_struct* %856, i64 0, i32 2
  %864 = mul nuw nsw i64 %wide.trip.count47, 3
  br label %865

865:                                              ; preds = %.lr.ph42, %865
  %lsr.iv94 = phi i64 [ 0, %.lr.ph42 ], [ %lsr.iv.next95, %865 ]
  %866 = load i8*, i8** %860, align 8
  %scevgep96 = getelementptr i8, i8* %scevgep93, i64 %lsr.iv94
  %scevgep97 = getelementptr i8, i8* %scevgep96, i64 -2
  %867 = load i8, i8* %scevgep97, align 1
  %868 = zext i8 %867 to i64
  %869 = getelementptr inbounds i8, i8* %866, i64 %868
  %870 = load i8, i8* %869, align 1
  %scevgep98 = getelementptr i8, i8* %scevgep93, i64 %lsr.iv94
  %scevgep99 = getelementptr i8, i8* %scevgep98, i64 -2
  store i8 %870, i8* %scevgep99, align 1
  %871 = load i8*, i8** %861, align 8
  %scevgep100 = getelementptr i8, i8* %scevgep93, i64 %lsr.iv94
  %scevgep101 = getelementptr i8, i8* %scevgep100, i64 -1
  %872 = load i8, i8* %scevgep101, align 1
  %873 = zext i8 %872 to i64
  %874 = getelementptr inbounds i8, i8* %871, i64 %873
  %875 = load i8, i8* %874, align 1
  %scevgep102 = getelementptr i8, i8* %scevgep93, i64 %lsr.iv94
  %scevgep103 = getelementptr i8, i8* %scevgep102, i64 -1
  store i8 %875, i8* %scevgep103, align 1
  %876 = load i8*, i8** %862, align 8
  %scevgep104 = getelementptr i8, i8* %scevgep93, i64 %lsr.iv94
  %877 = load i8, i8* %scevgep104, align 1
  %878 = zext i8 %877 to i64
  %879 = getelementptr inbounds i8, i8* %876, i64 %878
  %880 = load i8, i8* %879, align 1
  %scevgep105 = getelementptr i8, i8* %scevgep93, i64 %lsr.iv94
  store i8 %880, i8* %scevgep105, align 1
  %lsr.iv.next95 = add nuw nsw i64 %lsr.iv94, 3
  %exitcond48 = icmp ne i64 %864, %lsr.iv.next95
  br i1 %exitcond48, label %865, label %._crit_edge43

._crit_edge43:                                    ; preds = %865
  br label %881

881:                                              ; preds = %._crit_edge43, %854
  %882 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %883 = load i32, i32* %882, align 4
  %884 = and i32 %883, -8193
  store i32 %884, i32* %882, align 4
  br label %1033

885:                                              ; preds = %323, %318
  %886 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %887 = load i32, i32* %886, align 4
  %888 = and i32 %887, 128
  %889 = icmp ne i32 %888, 0
  br i1 %889, label %890, label %1033

890:                                              ; preds = %885
  %891 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %892 = load i8, i8* %891, align 1
  %893 = zext i8 %892 to i32
  %894 = icmp eq i32 %893, 3
  br i1 %894, label %895, label %1033

895:                                              ; preds = %890
  %896 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %897 = load i16, i16* %896, align 8
  %898 = zext i16 %897 to i32
  %899 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %900 = load %struct.png_color_struct*, %struct.png_color_struct** %899, align 8
  %901 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %902 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %901, i32 0, i32 1
  %903 = load i16, i16* %902, align 2
  %904 = trunc i16 %903 to i8
  %905 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %4, i32 0, i32 0
  store i8 %904, i8* %905, align 1
  %906 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %907 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %906, i32 0, i32 2
  %908 = load i16, i16* %907, align 4
  %909 = trunc i16 %908 to i8
  %910 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %4, i32 0, i32 1
  store i8 %909, i8* %910, align 1
  %911 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %912 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %911, i32 0, i32 3
  %913 = load i16, i16* %912, align 2
  %914 = trunc i16 %913 to i8
  %915 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %4, i32 0, i32 2
  store i8 %914, i8* %915, align 1
  %916 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %917 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %918 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %919 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %4, i32 0, i32 0
  %920 = load i8, i8* %919, align 1
  %921 = zext i8 %920 to i16
  %922 = zext i16 %921 to i32
  %923 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %924 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %925 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %4, i32 0, i32 1
  %926 = load i8, i8* %925, align 1
  %927 = zext i8 %926 to i16
  %928 = zext i16 %927 to i32
  %929 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %930 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %931 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %4, i32 0, i32 2
  %932 = load i8, i8* %931, align 1
  %933 = zext i8 %932 to i16
  %934 = zext i16 %933 to i32
  %935 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %936 = bitcast %struct.png_color_struct* %4 to i8*
  %937 = icmp slt i32 0, %898
  br i1 %937, label %.lr.ph52, label %1029

.lr.ph52:                                         ; preds = %895
  %wide.trip.count57 = zext i32 %898 to i64
  %scevgep107 = getelementptr %struct.png_color_struct, %struct.png_color_struct* %900, i64 0, i32 2
  %scevgep107108 = bitcast i8* %scevgep107 to %struct.png_color_struct*
  br label %938

938:                                              ; preds = %.lr.ph52, %1028
  %lsr.iv109 = phi %struct.png_color_struct* [ %scevgep107108, %.lr.ph52 ], [ %scevgep110, %1028 ]
  %indvars.iv54 = phi i64 [ 0, %.lr.ph52 ], [ %indvars.iv.next55, %1028 ]
  %lsr.iv109111 = bitcast %struct.png_color_struct* %lsr.iv109 to i8*
  %939 = load i8*, i8** %916, align 8
  %scevgep106 = getelementptr i8, i8* %939, i64 %indvars.iv54
  %940 = load i8, i8* %scevgep106, align 1
  %941 = zext i8 %940 to i32
  %942 = icmp eq i32 %941, 0
  br i1 %942, label %943, label %944

943:                                              ; preds = %938
  %scevgep112 = getelementptr i8, i8* %lsr.iv109111, i64 -2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %scevgep112, i8* align 1 %936, i64 3, i1 false)
  br label %1028

944:                                              ; preds = %938
  %945 = load i8*, i8** %917, align 8
  %scevgep117 = getelementptr i8, i8* %945, i64 %indvars.iv54
  %946 = load i8, i8* %scevgep117, align 1
  %947 = zext i8 %946 to i32
  %948 = icmp ne i32 %947, 255
  br i1 %948, label %949, label %1028

949:                                              ; preds = %944
  %scevgep113 = getelementptr i8, i8* %lsr.iv109111, i64 -2
  %950 = load i8, i8* %scevgep113, align 1
  %951 = zext i8 %950 to i16
  %952 = zext i16 %951 to i32
  %953 = load i8*, i8** %918, align 8
  %scevgep118 = getelementptr i8, i8* %953, i64 %indvars.iv54
  %954 = load i8, i8* %scevgep118, align 1
  %955 = zext i8 %954 to i16
  %956 = zext i16 %955 to i32
  %957 = mul nsw i32 %952, %956
  %958 = load i8*, i8** %923, align 8
  %scevgep119 = getelementptr i8, i8* %958, i64 %indvars.iv54
  %959 = load i8, i8* %scevgep119, align 1
  %960 = zext i8 %959 to i16
  %961 = zext i16 %960 to i32
  %962 = sub nsw i32 255, %961
  %963 = trunc i32 %962 to i16
  %964 = zext i16 %963 to i32
  %965 = mul nsw i32 %922, %964
  %966 = add nsw i32 %957, %965
  %967 = add nsw i32 %966, 128
  %968 = trunc i32 %967 to i16
  %969 = zext i16 %968 to i32
  %970 = zext i16 %968 to i32
  %971 = ashr i32 %970, 8
  %972 = add nsw i32 %969, %971
  %973 = ashr i32 %972, 8
  %974 = and i32 %973, 255
  %975 = trunc i32 %974 to i8
  %scevgep114 = getelementptr i8, i8* %lsr.iv109111, i64 -2
  store i8 %975, i8* %scevgep114, align 1
  %scevgep115 = getelementptr i8, i8* %lsr.iv109111, i64 -1
  %976 = load i8, i8* %scevgep115, align 1
  %977 = zext i8 %976 to i16
  %978 = zext i16 %977 to i32
  %979 = load i8*, i8** %924, align 8
  %scevgep120 = getelementptr i8, i8* %979, i64 %indvars.iv54
  %980 = load i8, i8* %scevgep120, align 1
  %981 = zext i8 %980 to i16
  %982 = zext i16 %981 to i32
  %983 = mul nsw i32 %978, %982
  %984 = load i8*, i8** %929, align 8
  %scevgep121 = getelementptr i8, i8* %984, i64 %indvars.iv54
  %985 = load i8, i8* %scevgep121, align 1
  %986 = zext i8 %985 to i16
  %987 = zext i16 %986 to i32
  %988 = sub nsw i32 255, %987
  %989 = trunc i32 %988 to i16
  %990 = zext i16 %989 to i32
  %991 = mul nsw i32 %928, %990
  %992 = add nsw i32 %983, %991
  %993 = add nsw i32 %992, 128
  %994 = trunc i32 %993 to i16
  %995 = zext i16 %994 to i32
  %996 = zext i16 %994 to i32
  %997 = ashr i32 %996, 8
  %998 = add nsw i32 %995, %997
  %999 = ashr i32 %998, 8
  %1000 = and i32 %999, 255
  %1001 = trunc i32 %1000 to i8
  %scevgep116 = getelementptr i8, i8* %lsr.iv109111, i64 -1
  store i8 %1001, i8* %scevgep116, align 1
  %1002 = load i8, i8* %lsr.iv109111, align 1
  %1003 = zext i8 %1002 to i16
  %1004 = zext i16 %1003 to i32
  %1005 = load i8*, i8** %930, align 8
  %scevgep122 = getelementptr i8, i8* %1005, i64 %indvars.iv54
  %1006 = load i8, i8* %scevgep122, align 1
  %1007 = zext i8 %1006 to i16
  %1008 = zext i16 %1007 to i32
  %1009 = mul nsw i32 %1004, %1008
  %1010 = load i8*, i8** %935, align 8
  %scevgep123 = getelementptr i8, i8* %1010, i64 %indvars.iv54
  %1011 = load i8, i8* %scevgep123, align 1
  %1012 = zext i8 %1011 to i16
  %1013 = zext i16 %1012 to i32
  %1014 = sub nsw i32 255, %1013
  %1015 = trunc i32 %1014 to i16
  %1016 = zext i16 %1015 to i32
  %1017 = mul nsw i32 %934, %1016
  %1018 = add nsw i32 %1009, %1017
  %1019 = add nsw i32 %1018, 128
  %1020 = trunc i32 %1019 to i16
  %1021 = zext i16 %1020 to i32
  %1022 = zext i16 %1020 to i32
  %1023 = ashr i32 %1022, 8
  %1024 = add nsw i32 %1021, %1023
  %1025 = ashr i32 %1024, 8
  %1026 = and i32 %1025, 255
  %1027 = trunc i32 %1026 to i8
  store i8 %1027, i8* %lsr.iv109111, align 1
  br label %1028

1028:                                             ; preds = %943, %949, %944
  %indvars.iv.next55 = add nuw nsw i64 %indvars.iv54, 1
  %scevgep110 = getelementptr %struct.png_color_struct, %struct.png_color_struct* %lsr.iv109, i64 1
  %exitcond58 = icmp ne i64 %wide.trip.count57, %indvars.iv.next55
  br i1 %exitcond58, label %938, label %._crit_edge53

._crit_edge53:                                    ; preds = %1028
  br label %1029

1029:                                             ; preds = %._crit_edge53, %895
  %1030 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %1031 = load i32, i32* %1030, align 4
  %1032 = and i32 %1031, -129
  store i32 %1032, i32* %1030, align 4
  br label %1033

1033:                                             ; preds = %885, %890, %1029, %837, %686, %881, %849, %839
  %1034 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %1035 = load i32, i32* %1034, align 4
  %1036 = and i32 %1035, 8
  %1037 = icmp ne i32 %1036, 0
  br i1 %1037, label %1038, label %1113

1038:                                             ; preds = %1033
  %1039 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %1040 = load i32, i32* %1039, align 4
  %1041 = and i32 %1040, 4096
  %1042 = icmp eq i32 %1041, 0
  br i1 %1042, label %1043, label %1113

1043:                                             ; preds = %1038
  %1044 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %1045 = load i8, i8* %1044, align 1
  %1046 = zext i8 %1045 to i32
  %1047 = icmp eq i32 %1046, 3
  br i1 %1047, label %1048, label %1113

1048:                                             ; preds = %1043
  %1049 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 53
  %1050 = load i16, i16* %1049, align 8
  %1051 = zext i16 %1050 to i32
  %1052 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %1053 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1052, i32 0, i32 0
  %1054 = load i8, i8* %1053, align 8
  %1055 = zext i8 %1054 to i32
  %1056 = sub nsw i32 8, %1055
  %1057 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %1058 = load i32, i32* %1057, align 4
  %1059 = and i32 %1058, -9
  store i32 %1059, i32* %1057, align 4
  %1060 = icmp sgt i32 %1056, 0
  %1061 = icmp slt i32 %1056, 8
  %or.cond = and i1 %1060, %1061
  br i1 %or.cond, label %.preheader14, label %1075

.preheader14:                                     ; preds = %1048
  %1062 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %1063 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %1064 = icmp slt i32 0, %1051
  br i1 %1064, label %.lr.ph26, label %.loopexit15

.lr.ph26:                                         ; preds = %.preheader14
  %wide.trip.count30 = zext i32 %1051 to i64
  %1065 = mul nuw nsw i64 %wide.trip.count30, 3
  br label %1066

1066:                                             ; preds = %.lr.ph26, %1066
  %lsr.iv68 = phi i64 [ 0, %.lr.ph26 ], [ %lsr.iv.next69, %1066 ]
  %1067 = load %struct.png_color_struct*, %struct.png_color_struct** %1062, align 8
  %1068 = bitcast %struct.png_color_struct* %1067 to i8*
  %uglygep = getelementptr i8, i8* %1068, i64 %lsr.iv68
  %1069 = load i8, i8* %uglygep, align 1
  %1070 = zext i8 %1069 to i32
  %1071 = ashr i32 %1070, %1056
  %1072 = trunc i32 %1071 to i8
  %1073 = load %struct.png_color_struct*, %struct.png_color_struct** %1063, align 8
  %1074 = bitcast %struct.png_color_struct* %1073 to i8*
  %uglygep70 = getelementptr i8, i8* %1074, i64 %lsr.iv68
  store i8 %1072, i8* %uglygep70, align 1
  %lsr.iv.next69 = add nuw nsw i64 %lsr.iv68, 3
  %exitcond31 = icmp ne i64 %1065, %lsr.iv.next69
  br i1 %exitcond31, label %1066, label %..loopexit15_crit_edge

..loopexit15_crit_edge:                           ; preds = %1066
  br label %.loopexit15

.loopexit15:                                      ; preds = %..loopexit15_crit_edge, %.preheader14
  br label %1075

1075:                                             ; preds = %.loopexit15, %1048
  %1076 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %1077 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1076, i32 0, i32 1
  %1078 = load i8, i8* %1077, align 1
  %1079 = zext i8 %1078 to i32
  %1080 = sub nsw i32 8, %1079
  %1081 = icmp sgt i32 %1080, 0
  %1082 = icmp slt i32 %1080, 8
  %or.cond10 = and i1 %1081, %1082
  br i1 %or.cond10, label %.preheader12, label %1094

.preheader12:                                     ; preds = %1075
  %1083 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %1084 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %1085 = icmp slt i32 0, %1051
  br i1 %1085, label %.lr.ph19, label %.loopexit13

.lr.ph19:                                         ; preds = %.preheader12
  %wide.trip.count23 = zext i32 %1051 to i64
  %1086 = mul nuw nsw i64 %wide.trip.count23, 3
  br label %1087

1087:                                             ; preds = %.lr.ph19, %1087
  %lsr.iv63 = phi i64 [ 0, %.lr.ph19 ], [ %lsr.iv.next64, %1087 ]
  %1088 = load %struct.png_color_struct*, %struct.png_color_struct** %1083, align 8
  %scevgep62 = getelementptr %struct.png_color_struct, %struct.png_color_struct* %1088, i64 0, i32 1
  %scevgep65 = getelementptr i8, i8* %scevgep62, i64 %lsr.iv63
  %1089 = load i8, i8* %scevgep65, align 1
  %1090 = zext i8 %1089 to i32
  %1091 = ashr i32 %1090, %1080
  %1092 = trunc i32 %1091 to i8
  %1093 = load %struct.png_color_struct*, %struct.png_color_struct** %1084, align 8
  %scevgep66 = getelementptr %struct.png_color_struct, %struct.png_color_struct* %1093, i64 0, i32 1
  %scevgep67 = getelementptr i8, i8* %scevgep66, i64 %lsr.iv63
  store i8 %1092, i8* %scevgep67, align 1
  %lsr.iv.next64 = add nuw nsw i64 %lsr.iv63, 3
  %exitcond24 = icmp ne i64 %1086, %lsr.iv.next64
  br i1 %exitcond24, label %1087, label %..loopexit13_crit_edge

..loopexit13_crit_edge:                           ; preds = %1087
  br label %.loopexit13

.loopexit13:                                      ; preds = %..loopexit13_crit_edge, %.preheader12
  br label %1094

1094:                                             ; preds = %.loopexit13, %1075
  %1095 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 87
  %1096 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1095, i32 0, i32 2
  %1097 = load i8, i8* %1096, align 2
  %1098 = zext i8 %1097 to i32
  %1099 = sub nsw i32 8, %1098
  %1100 = icmp sgt i32 %1099, 0
  %1101 = icmp slt i32 %1099, 8
  %or.cond11 = and i1 %1100, %1101
  br i1 %or.cond11, label %.preheader, label %1113

.preheader:                                       ; preds = %1094
  %1102 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %1103 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %1104 = icmp slt i32 0, %1051
  br i1 %1104, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  %wide.trip.count = zext i32 %1051 to i64
  %1105 = mul nuw nsw i64 %wide.trip.count, 3
  br label %1106

1106:                                             ; preds = %.lr.ph, %1106
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %1106 ]
  %1107 = load %struct.png_color_struct*, %struct.png_color_struct** %1102, align 8
  %scevgep = getelementptr %struct.png_color_struct, %struct.png_color_struct* %1107, i64 0, i32 2
  %scevgep59 = getelementptr i8, i8* %scevgep, i64 %lsr.iv
  %1108 = load i8, i8* %scevgep59, align 1
  %1109 = zext i8 %1108 to i32
  %1110 = ashr i32 %1109, %1099
  %1111 = trunc i32 %1110 to i8
  %1112 = load %struct.png_color_struct*, %struct.png_color_struct** %1103, align 8
  %scevgep60 = getelementptr %struct.png_color_struct, %struct.png_color_struct* %1112, i64 0, i32 2
  %scevgep61 = getelementptr i8, i8* %scevgep60, i64 %lsr.iv
  store i8 %1111, i8* %scevgep61, align 1
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 3
  %exitcond = icmp ne i64 %1105, %lsr.iv.next
  br i1 %exitcond, label %1106, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %1106
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader
  br label %1113

1113:                                             ; preds = %.loopexit, %1094, %1043, %1038, %1033
  ret void
}

declare void @magma_bug005(...) #13

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_gamma_threshold(i32 %0, i32 %1) #11 {
  %3 = alloca i32, align 4
  %4 = call i32 @png_muldiv(i32* %3, i32 %0, i32 %1, i32 100000)
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @png_gamma_significant(i32 %7)
  %9 = icmp ne i32 %8, 0
  br label %10

10:                                               ; preds = %6, %2
  %11 = phi i1 [ true, %2 ], [ %9, %6 ]
  %12 = zext i1 %11 to i32
  ret i32 %12
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_init_palette_transformations(%struct.png_struct_def* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %3 = load i16, i16* %2, align 8
  %4 = zext i16 %3 to i32
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %.preheader, label %29

.preheader:                                       ; preds = %1
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %11 = icmp slt i32 0, %9
  br i1 %11, label %.lr.ph11, label %.loopexit5

.lr.ph11:                                         ; preds = %.preheader
  br label %12

12:                                               ; preds = %.lr.ph11, %26
  %.0210 = phi i32 [ 0, %.lr.ph11 ], [ %.13, %26 ]
  %.048 = phi i32 [ 0, %.lr.ph11 ], [ %27, %26 ]
  %13 = load i8*, i8** %10, align 8
  %14 = sext i32 %.048 to i64
  %15 = getelementptr inbounds i8, i8* %13, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = icmp eq i32 %17, 255
  br i1 %18, label %26, label %19

19:                                               ; preds = %12
  %20 = load i8*, i8** %6, align 8
  %21 = sext i32 %.048 to i64
  %22 = getelementptr inbounds i8, i8* %20, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %..loopexit5_crit_edge

26:                                               ; preds = %19, %12
  %.049 = phi i32 [ %.048, %12 ], [ %.048, %19 ]
  %.13 = phi i32 [ %.0210, %12 ], [ 1, %19 ]
  %27 = add nsw i32 %.049, 1
  %28 = icmp slt i32 %27, %9
  br i1 %28, label %12, label %..loopexit5_crit_edge13

..loopexit5_crit_edge:                            ; preds = %19
  %split = phi i32 [ 1, %19 ]
  %split12 = phi i32 [ 1, %19 ]
  br label %.loopexit5

..loopexit5_crit_edge13:                          ; preds = %26
  %split14 = phi i32 [ %.13, %26 ]
  %split15 = phi i32 [ 0, %26 ]
  br label %.loopexit5

.loopexit5:                                       ; preds = %..loopexit5_crit_edge13, %..loopexit5_crit_edge, %.preheader
  %.3.ph = phi i32 [ %split, %..loopexit5_crit_edge ], [ %split14, %..loopexit5_crit_edge13 ], [ 0, %.preheader ]
  %.1.ph = phi i32 [ %split12, %..loopexit5_crit_edge ], [ %split15, %..loopexit5_crit_edge13 ], [ 0, %.preheader ]
  br label %29

29:                                               ; preds = %.loopexit5, %1
  %.3 = phi i32 [ 0, %1 ], [ %.3.ph, %.loopexit5 ]
  %.1 = phi i32 [ 0, %1 ], [ %.1.ph, %.loopexit5 ]
  %30 = icmp eq i32 %.1, 0
  br i1 %30, label %31, label %43

31:                                               ; preds = %29
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %33 = load i32, i32* %32, align 4
  %34 = and i32 %33, -8388609
  store i32 %34, i32* %32, align 4
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %36 = load i32, i32* %35, align 8
  %37 = and i32 %36, -8193
  store i32 %37, i32* %35, align 8
  %38 = icmp eq i32 %.3, 0
  br i1 %38, label %39, label %43

39:                                               ; preds = %31
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %41 = load i32, i32* %40, align 4
  %42 = and i32 %41, -385
  store i32 %42, i32* %40, align 4
  br label %43

43:                                               ; preds = %31, %39, %29
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %45 = load i32, i32* %44, align 4
  %46 = and i32 %45, 256
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %113

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %50 = load i32, i32* %49, align 4
  %51 = and i32 %50, 4096
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %113

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %55 = load %struct.png_color_struct*, %struct.png_color_struct** %54, align 8
  %56 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %57 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %56, i32 0, i32 0
  %58 = load i8, i8* %57, align 4
  %59 = zext i8 %58 to i64
  %60 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %55, i64 %59
  %61 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %60, i32 0, i32 0
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i16
  %64 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %65 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %64, i32 0, i32 1
  store i16 %63, i16* %65, align 2
  %66 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %67 = load %struct.png_color_struct*, %struct.png_color_struct** %66, align 8
  %68 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %69 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %68, i32 0, i32 0
  %70 = load i8, i8* %69, align 4
  %71 = zext i8 %70 to i64
  %72 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %67, i64 %71
  %73 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %72, i32 0, i32 1
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i16
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %77 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %76, i32 0, i32 2
  store i16 %75, i16* %77, align 4
  %78 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %79 = load %struct.png_color_struct*, %struct.png_color_struct** %78, align 8
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %81 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %80, i32 0, i32 0
  %82 = load i8, i8* %81, align 4
  %83 = zext i8 %82 to i64
  %84 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %79, i64 %83
  %85 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %84, i32 0, i32 2
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i16
  %88 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %89 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %88, i32 0, i32 3
  store i16 %87, i16* %89, align 2
  %90 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %91 = load i32, i32* %90, align 4
  %92 = and i32 %91, 524288
  %93 = icmp ne i32 %92, 0
  br i1 %93, label %94, label %113

94:                                               ; preds = %53
  %95 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %96 = load i32, i32* %95, align 4
  %97 = and i32 %96, 33554432
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %113

99:                                               ; preds = %94
  %100 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %101 = load i16, i16* %100, align 8
  %102 = zext i16 %101 to i32
  %103 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %104 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 89
  %105 = icmp slt i32 0, %102
  br i1 %105, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %99
  %wide.trip.count = zext i32 %102 to i64
  br label %106

106:                                              ; preds = %.lr.ph, %106
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %106 ]
  %107 = load i8*, i8** %103, align 8
  %scevgep = getelementptr i8, i8* %107, i64 %indvars.iv
  %108 = load i8, i8* %scevgep, align 1
  %109 = zext i8 %108 to i32
  %110 = sub nsw i32 255, %109
  %111 = trunc i32 %110 to i8
  %112 = load i8*, i8** %104, align 8
  %scevgep16 = getelementptr i8, i8* %112, i64 %indvars.iv
  store i8 %111, i8* %scevgep16, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %wide.trip.count, %indvars.iv.next
  br i1 %exitcond, label %106, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %106
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %99
  br label %113

113:                                              ; preds = %.loopexit, %53, %94, %48, %43
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_init_rgb_transformations(%struct.png_struct_def* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = and i32 %4, 4
  %6 = icmp ne i32 %5, 0
  %7 = zext i1 %6 to i32
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = icmp sgt i32 %10, 0
  %12 = zext i1 %11 to i32
  %13 = icmp eq i32 %7, 0
  br i1 %13, label %14, label %26

14:                                               ; preds = %1
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %16 = load i32, i32* %15, align 4
  %17 = and i32 %16, -8388609
  store i32 %17, i32* %15, align 4
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %19 = load i32, i32* %18, align 8
  %20 = and i32 %19, -8193
  store i32 %20, i32* %18, align 8
  %21 = icmp eq i32 %12, 0
  br i1 %21, label %22, label %26

22:                                               ; preds = %14
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %24 = load i32, i32* %23, align 4
  %25 = and i32 %24, -385
  store i32 %25, i32* %23, align 4
  br label %26

26:                                               ; preds = %14, %22, %1
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %28, 256
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %83

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %33 = load i32, i32* %32, align 4
  %34 = and i32 %33, 4096
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %83

36:                                               ; preds = %31
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %83

42:                                               ; preds = %36
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %44 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %43, i32 0, i32 4
  %45 = load i16, i16* %44, align 4
  %46 = zext i16 %45 to i32
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 90
  %48 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %47, i32 0, i32 4
  %49 = load i16, i16* %48, align 8
  %50 = zext i16 %49 to i32
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %52 = load i8, i8* %51, align 8
  %53 = zext i8 %52 to i32
  switch i32 %53, label %63 [
    i32 1, label %54
    i32 2, label %57
    i32 4, label %60
  ]

54:                                               ; preds = %42
  %55 = mul nsw i32 %46, 255
  %56 = mul nsw i32 %50, 255
  br label %63

57:                                               ; preds = %42
  %58 = mul nsw i32 %46, 85
  %59 = mul nsw i32 %50, 85
  br label %63

60:                                               ; preds = %42
  %61 = mul nsw i32 %46, 17
  %62 = mul nsw i32 %50, 17
  br label %63

63:                                               ; preds = %42, %60, %57, %54
  %.01 = phi i32 [ %61, %60 ], [ %58, %57 ], [ %55, %54 ], [ %46, %42 ]
  %.0 = phi i32 [ %62, %60 ], [ %59, %57 ], [ %56, %54 ], [ %50, %42 ]
  %64 = trunc i32 %.01 to i16
  %65 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %66 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %65, i32 0, i32 3
  store i16 %64, i16* %66, align 2
  %67 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %68 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %67, i32 0, i32 2
  store i16 %64, i16* %68, align 4
  %69 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %70 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %69, i32 0, i32 1
  store i16 %64, i16* %70, align 2
  %71 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %72 = load i32, i32* %71, align 4
  %73 = and i32 %72, 33554432
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %83

75:                                               ; preds = %63
  %76 = trunc i32 %.0 to i16
  %77 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 90
  %78 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %77, i32 0, i32 3
  store i16 %76, i16* %78, align 2
  %79 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 90
  %80 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %79, i32 0, i32 2
  store i16 %76, i16* %80, align 4
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 90
  %82 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %81, i32 0, i32 1
  store i16 %76, i16* %82, align 2
  br label %83

83:                                               ; preds = %63, %75, %36, %31, %26
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_start_read_image(%struct.png_struct_def* noalias %0) #11 {
  %2 = icmp ne %struct.png_struct_def* %0, null
  br i1 %2, label %3, label %10

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 64
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %3
  call void @png_read_start_row(%struct.png_struct_def* %0)
  br label %10

9:                                                ; preds = %3
  call void @png_app_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.4.129, i32 0, i32 0))
  br label %10

10:                                               ; preds = %8, %9, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_row(%struct.png_struct_def* noalias %0, i8* %1, i8* %2) #11 {
  %4 = alloca %struct.png_row_info_struct, align 8
  %5 = icmp eq %struct.png_struct_def* %0, null
  br i1 %5, label %293, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 64
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %6
  call void @png_read_start_row(%struct.png_struct_def* %0)
  br label %12

12:                                               ; preds = %11, %6
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 42
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 0
  store i32 %14, i32* %15, align 8
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 2
  store i8 %17, i8* %18, align 8
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %20 = load i8, i8* %19, align 8
  %21 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 3
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 65
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 4
  store i8 %23, i8* %24, align 2
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 64
  %26 = load i8, i8* %25, align 2
  %27 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 5
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 5
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = icmp sge i32 %30, 8
  br i1 %31, label %32, label %41

32:                                               ; preds = %12
  %33 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 5
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i64
  %39 = lshr i64 %38, 3
  %40 = mul i64 %35, %39
  br label %51

41:                                               ; preds = %12
  %42 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 5
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i64
  %48 = mul i64 %44, %47
  %49 = add i64 %48, 7
  %50 = lshr i64 %49, 3
  br label %51

51:                                               ; preds = %41, %32
  %52 = phi i64 [ %40, %32 ], [ %50, %41 ]
  %53 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 1
  store i64 %52, i64* %53, align 8
  %54 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, 0
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 58
  %58 = load i8, i8* %57, align 4
  %59 = zext i8 %58 to i32
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %152

61:                                               ; preds = %51
  %62 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %63 = load i32, i32* %62, align 4
  %64 = and i32 %63, 2
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %66, label %152

66:                                               ; preds = %61
  %67 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  switch i32 %69, label %146 [
    i32 0, label %70
    i32 1, label %79
    i32 2, label %92
    i32 3, label %106
    i32 4, label %119
    i32 5, label %133
  ]

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %72 = load i32, i32* %71, align 4
  %73 = and i32 %72, 7
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %75, label %152

75:                                               ; preds = %70
  %76 = icmp ne i8* %2, null
  br i1 %76, label %77, label %78

77:                                               ; preds = %75
  call void @png_combine_row(%struct.png_struct_def* %0, i8* %2, i32 1)
  br label %78

78:                                               ; preds = %77, %75
  call void @png_read_finish_row(%struct.png_struct_def* %0)
  br label %293

79:                                               ; preds = %66
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %81 = load i32, i32* %80, align 4
  %82 = and i32 %81, 7
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %88, label %84

84:                                               ; preds = %79
  %85 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %86 = load i32, i32* %85, align 8
  %87 = icmp ult i32 %86, 5
  br i1 %87, label %88, label %152

88:                                               ; preds = %84, %79
  %89 = icmp ne i8* %2, null
  br i1 %89, label %90, label %91

90:                                               ; preds = %88
  call void @png_combine_row(%struct.png_struct_def* %0, i8* %2, i32 1)
  br label %91

91:                                               ; preds = %90, %88
  call void @png_read_finish_row(%struct.png_struct_def* %0)
  br label %293

92:                                               ; preds = %66
  %93 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %94 = load i32, i32* %93, align 4
  %95 = and i32 %94, 7
  %96 = icmp ne i32 %95, 4
  br i1 %96, label %97, label %152

97:                                               ; preds = %92
  %98 = icmp ne i8* %2, null
  br i1 %98, label %99, label %105

99:                                               ; preds = %97
  %100 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %101 = load i32, i32* %100, align 4
  %102 = and i32 %101, 4
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %104, label %105

104:                                              ; preds = %99
  call void @png_combine_row(%struct.png_struct_def* %0, i8* %2, i32 1)
  br label %105

105:                                              ; preds = %104, %99, %97
  call void @png_read_finish_row(%struct.png_struct_def* %0)
  br label %293

106:                                              ; preds = %66
  %107 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %108 = load i32, i32* %107, align 4
  %109 = and i32 %108, 3
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %115, label %111

111:                                              ; preds = %106
  %112 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %113 = load i32, i32* %112, align 8
  %114 = icmp ult i32 %113, 3
  br i1 %114, label %115, label %152

115:                                              ; preds = %111, %106
  %116 = icmp ne i8* %2, null
  br i1 %116, label %117, label %118

117:                                              ; preds = %115
  call void @png_combine_row(%struct.png_struct_def* %0, i8* %2, i32 1)
  br label %118

118:                                              ; preds = %117, %115
  call void @png_read_finish_row(%struct.png_struct_def* %0)
  br label %293

119:                                              ; preds = %66
  %120 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %121 = load i32, i32* %120, align 4
  %122 = and i32 %121, 3
  %123 = icmp ne i32 %122, 2
  br i1 %123, label %124, label %152

124:                                              ; preds = %119
  %125 = icmp ne i8* %2, null
  br i1 %125, label %126, label %132

126:                                              ; preds = %124
  %127 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %128 = load i32, i32* %127, align 4
  %129 = and i32 %128, 2
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %131, label %132

131:                                              ; preds = %126
  call void @png_combine_row(%struct.png_struct_def* %0, i8* %2, i32 1)
  br label %132

132:                                              ; preds = %131, %126, %124
  call void @png_read_finish_row(%struct.png_struct_def* %0)
  br label %293

133:                                              ; preds = %66
  %134 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %135 = load i32, i32* %134, align 4
  %136 = and i32 %135, 1
  %137 = icmp ne i32 %136, 0
  br i1 %137, label %142, label %138

138:                                              ; preds = %133
  %139 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %140 = load i32, i32* %139, align 8
  %141 = icmp ult i32 %140, 2
  br i1 %141, label %142, label %152

142:                                              ; preds = %138, %133
  %143 = icmp ne i8* %2, null
  br i1 %143, label %144, label %145

144:                                              ; preds = %142
  call void @png_combine_row(%struct.png_struct_def* %0, i8* %2, i32 1)
  br label %145

145:                                              ; preds = %144, %142
  call void @png_read_finish_row(%struct.png_struct_def* %0)
  br label %293

146:                                              ; preds = %66
  %147 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %148 = load i32, i32* %147, align 4
  %149 = and i32 %148, 1
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %152

151:                                              ; preds = %146
  call void @png_read_finish_row(%struct.png_struct_def* %0)
  br label %293

152:                                              ; preds = %70, %84, %92, %111, %119, %138, %146, %61, %51
  %153 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %154 = load i32, i32* %153, align 4
  %155 = and i32 %154, 4
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %158

157:                                              ; preds = %152
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5.130, i32 0, i32 0)) #24
  unreachable

158:                                              ; preds = %152
  %159 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %160 = load i8*, i8** %159, align 8
  %161 = getelementptr inbounds i8, i8* %160, i64 0
  store i8 -1, i8* %161, align 1
  %162 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %163 = load i8*, i8** %162, align 8
  %164 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 1
  %165 = load i64, i64* %164, align 8
  %166 = add i64 %165, 1
  call void @png_read_IDAT_data(%struct.png_struct_def* %0, i8* %163, i64 %166)
  %167 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %168 = load i8*, i8** %167, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 0
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = icmp sgt i32 %171, 0
  br i1 %172, label %173, label %193

173:                                              ; preds = %158
  %174 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %175 = load i8*, i8** %174, align 8
  %176 = getelementptr inbounds i8, i8* %175, i64 0
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = icmp slt i32 %178, 5
  br i1 %179, label %180, label %192

180:                                              ; preds = %173
  %181 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %182 = load i8*, i8** %181, align 8
  %183 = getelementptr inbounds i8, i8* %182, i64 1
  %184 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 45
  %185 = load i8*, i8** %184, align 8
  %186 = getelementptr inbounds i8, i8* %185, i64 1
  %187 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %188 = load i8*, i8** %187, align 8
  %189 = getelementptr inbounds i8, i8* %188, i64 0
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i32
  call void @png_read_filter_row(%struct.png_struct_def* %0, %struct.png_row_info_struct* %4, i8* %183, i8* %186, i32 %191)
  br label %193

192:                                              ; preds = %173
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6.131, i32 0, i32 0)) #24
  unreachable

193:                                              ; preds = %180, %158
  %194 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 45
  %195 = load i8*, i8** %194, align 8
  %196 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %197 = load i8*, i8** %196, align 8
  %198 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 1
  %199 = load i64, i64* %198, align 8
  %200 = add i64 %199, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %195, i8* align 1 %197, i64 %200, i1 false)
  %201 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 122
  %202 = load i32, i32* %201, align 8
  %203 = and i32 %202, 4
  %204 = icmp ne i32 %203, 0
  br i1 %204, label %205, label %214

205:                                              ; preds = %193
  %206 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 123
  %207 = load i8, i8* %206, align 4
  %208 = zext i8 %207 to i32
  %209 = icmp eq i32 %208, 64
  br i1 %209, label %210, label %214

210:                                              ; preds = %205
  %211 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %212 = load i8*, i8** %211, align 8
  %213 = getelementptr inbounds i8, i8* %212, i64 1
  call void @png_do_read_intrapixel(%struct.png_row_info_struct* %4, i8* %213)
  br label %214

214:                                              ; preds = %210, %205, %193
  %215 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %216 = load i32, i32* %215, align 4
  %217 = icmp ne i32 %216, 0
  br i1 %217, label %218, label %219

218:                                              ; preds = %214
  call void @png_do_read_transformations(%struct.png_struct_def* %0, %struct.png_row_info_struct* %4)
  br label %219

219:                                              ; preds = %218, %214
  %220 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 69
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i32
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %224, label %236

224:                                              ; preds = %219
  %225 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 5
  %226 = load i8, i8* %225, align 1
  %227 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 69
  store i8 %226, i8* %227, align 1
  %228 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 5
  %229 = load i8, i8* %228, align 1
  %230 = zext i8 %229 to i32
  %231 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 68
  %232 = load i8, i8* %231, align 2
  %233 = zext i8 %232 to i32
  %234 = icmp sgt i32 %230, %233
  br i1 %234, label %235, label %245

235:                                              ; preds = %224
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7.132, i32 0, i32 0)) #24
  unreachable

236:                                              ; preds = %219
  %237 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 69
  %238 = load i8, i8* %237, align 1
  %239 = zext i8 %238 to i32
  %240 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %4, i32 0, i32 5
  %241 = load i8, i8* %240, align 1
  %242 = zext i8 %241 to i32
  %243 = icmp ne i32 %239, %242
  br i1 %243, label %244, label %245

244:                                              ; preds = %236
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.8.133, i32 0, i32 0)) #24
  unreachable

245:                                              ; preds = %236, %224
  %246 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 58
  %247 = load i8, i8* %246, align 4
  %248 = zext i8 %247 to i32
  %249 = icmp ne i32 %248, 0
  br i1 %249, label %250, label %275

250:                                              ; preds = %245
  %251 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %252 = load i32, i32* %251, align 4
  %253 = and i32 %252, 2
  %254 = icmp ne i32 %253, 0
  br i1 %254, label %255, label %275

255:                                              ; preds = %250
  %256 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %257 = load i8, i8* %256, align 1
  %258 = zext i8 %257 to i32
  %259 = icmp slt i32 %258, 6
  br i1 %259, label %260, label %269

260:                                              ; preds = %255
  %261 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %262 = load i8*, i8** %261, align 8
  %263 = getelementptr inbounds i8, i8* %262, i64 1
  %264 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i32
  %267 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %268 = load i32, i32* %267, align 4
  call void @png_do_read_interlace(%struct.png_row_info_struct* %4, i8* %263, i32 %266, i32 %268)
  br label %269

269:                                              ; preds = %260, %255
  %270 = icmp ne i8* %2, null
  br i1 %270, label %271, label %272

271:                                              ; preds = %269
  call void @png_combine_row(%struct.png_struct_def* %0, i8* %2, i32 1)
  br label %272

272:                                              ; preds = %271, %269
  %273 = icmp ne i8* %1, null
  br i1 %273, label %274, label %281

274:                                              ; preds = %272
  call void @png_combine_row(%struct.png_struct_def* %0, i8* %1, i32 0)
  br label %281

275:                                              ; preds = %250, %245
  %276 = icmp ne i8* %1, null
  br i1 %276, label %277, label %278

277:                                              ; preds = %275
  call void @png_combine_row(%struct.png_struct_def* %0, i8* %1, i32 -1)
  br label %278

278:                                              ; preds = %277, %275
  %279 = icmp ne i8* %2, null
  br i1 %279, label %280, label %281

280:                                              ; preds = %278
  call void @png_combine_row(%struct.png_struct_def* %0, i8* %2, i32 -1)
  br label %281

281:                                              ; preds = %278, %280, %272, %274
  call void @png_read_finish_row(%struct.png_struct_def* %0)
  %282 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 91
  %283 = load void (%struct.png_struct_def*, i32, i32)*, void (%struct.png_struct_def*, i32, i32)** %282, align 8
  %284 = icmp ne void (%struct.png_struct_def*, i32, i32)* %283, null
  br i1 %284, label %285, label %293

285:                                              ; preds = %281
  %286 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 91
  %287 = load void (%struct.png_struct_def*, i32, i32)*, void (%struct.png_struct_def*, i32, i32)** %286, align 8
  %288 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %289 = load i32, i32* %288, align 4
  %290 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %291 = load i8, i8* %290, align 1
  %292 = zext i8 %291 to i32
  call void %287(%struct.png_struct_def* %0, i32 %289, i32 %292)
  br label %293

293:                                              ; preds = %3, %78, %91, %105, %118, %132, %145, %151, %285, %281
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_finish_row(%struct.png_struct_def* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* %2, align 4
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 39
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %6, %8
  br i1 %9, label %96, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 58
  %12 = load i8, i8* %11, align 4
  %13 = zext i8 %12 to i32
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %95

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  store i32 0, i32* %16, align 4
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 45
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 41
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %18, i8 0, i64 %21, i1 false)
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 42
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 42
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 38
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 39
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 39
  %.promoted = load i8, i8* %24, align 1
  %37 = add i8 %.promoted, 1
  %38 = zext i8 %37 to i32
  %39 = icmp sge i32 %38, 7
  br i1 %39, label %89, label %.lr.ph

.lr.ph:                                           ; preds = %15
  %40 = trunc i32 7 to i8
  br label %41

41:                                               ; preds = %.lr.ph, %.critedge.backedge
  %42 = phi i8 [ %37, %.lr.ph ], [ %87, %.critedge.backedge ]
  %43 = load i32, i32* %22, align 8
  %44 = zext i8 %42 to i64
  %45 = getelementptr inbounds [7 x i8], [7 x i8]* @png_read_finish_row.png_pass_inc, i64 0, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = add i32 %43, %47
  %49 = sub i32 %48, 1
  %50 = zext i8 %42 to i64
  %51 = getelementptr inbounds [7 x i8], [7 x i8]* @png_read_finish_row.png_pass_start, i64 0, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = sub i32 %49, %53
  %55 = zext i8 %42 to i64
  %56 = getelementptr inbounds [7 x i8], [7 x i8]* @png_read_finish_row.png_pass_inc, i64 0, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = udiv i32 %54, %58
  store i32 %59, i32* %29, align 8
  %60 = load i32, i32* %30, align 4
  %61 = and i32 %60, 2
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %._crit_edge

63:                                               ; preds = %41
  %64 = load i32, i32* %31, align 4
  %65 = zext i8 %42 to i64
  %66 = getelementptr inbounds [7 x i8], [7 x i8]* @png_read_finish_row.png_pass_yinc, i64 0, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = add i32 %64, %68
  %70 = sub i32 %69, 1
  %71 = zext i8 %42 to i64
  %72 = getelementptr inbounds [7 x i8], [7 x i8]* @png_read_finish_row.png_pass_ystart, i64 0, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = sub i32 %70, %74
  %76 = zext i8 %42 to i64
  %77 = getelementptr inbounds [7 x i8], [7 x i8]* @png_read_finish_row.png_pass_yinc, i64 0, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = udiv i32 %75, %79
  store i32 %80, i32* %35, align 8
  %81 = load i32, i32* %36, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %.critedge.backedge, label %83

83:                                               ; preds = %63
  %84 = load i32, i32* %23, align 8
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %.critedge.backedge, label %._crit_edge2

.critedge.backedge:                               ; preds = %83, %63
  %86 = phi i8 [ %42, %83 ], [ %42, %63 ]
  %87 = add i8 %86, 1
  %88 = icmp uge i8 %87, %40
  br i1 %88, label %.critedge._crit_edge, label %41

._crit_edge:                                      ; preds = %41
  %split = phi i8 [ %42, %41 ]
  br label %89

.critedge._crit_edge:                             ; preds = %.critedge.backedge
  %split1 = phi i8 [ %87, %.critedge.backedge ]
  br label %89

._crit_edge2:                                     ; preds = %83
  %split3 = phi i8 [ %42, %83 ]
  br label %89

89:                                               ; preds = %._crit_edge2, %.critedge._crit_edge, %._crit_edge, %15
  %90 = phi i8 [ %split, %._crit_edge ], [ %split1, %.critedge._crit_edge ], [ %split3, %._crit_edge2 ], [ %37, %15 ]
  store i8 %90, i8* %24, align 1
  %91 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = icmp slt i32 %93, 7
  br i1 %94, label %96, label %95

95:                                               ; preds = %89, %10
  call void @png_read_finish_IDAT(%struct.png_struct_def* %0)
  br label %96

96:                                               ; preds = %89, %1, %95
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_IDAT_data(%struct.png_struct_def* noalias %0, i8* %1, i64 %2) #11 {
  %4 = alloca [1024 x i8], align 16
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %6 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %5, i32 0, i32 3
  store i8* %1, i8** %6, align 8
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %8 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %7, i32 0, i32 4
  store i32 0, i32* %8, align 8
  %9 = icmp eq i8* %1, null
  %spec.select = select i1 %9, i64 0, i64 %2
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %11 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 140
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %20 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %19, i32 0, i32 0
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %22 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %21, i32 0, i32 1
  %23 = icmp ne i8* %1, null
  %24 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i32 0, i32 0
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %26 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %25, i32 0, i32 3
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %28 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %27, i32 0, i32 4
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %30 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %29, i32 0, i32 4
  %31 = icmp ne i8* %1, null
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %33 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %32, i32 0, i32 4
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %35 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %34, i32 0, i32 4
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %37 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %36, i32 0, i32 4
  br label %38

38:                                               ; preds = %109, %3
  %.1 = phi i64 [ %spec.select, %3 ], [ %.3, %109 ]
  %39 = load i32, i32* %11, align 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %.preheader, label %61

.preheader:                                       ; preds = %38
  br label %41

41:                                               ; preds = %.preheader, %44
  %42 = load i32, i32* %12, align 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %50

44:                                               ; preds = %41
  %45 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %46 = call i32 @png_read_chunk_header(%struct.png_struct_def* %0)
  store i32 %46, i32* %13, align 8
  %47 = load i32, i32* %14, align 8
  %48 = icmp ne i32 %47, 1229209940
  br i1 %48, label %49, label %41

49:                                               ; preds = %44
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.55.369, i32 0, i32 0)) #24
  unreachable

50:                                               ; preds = %41
  %51 = load i32, i32* %15, align 8
  %52 = load i32, i32* %16, align 8
  %53 = icmp ugt i32 %51, %52
  br i1 %53, label %54, label %56

54:                                               ; preds = %50
  %55 = load i32, i32* %17, align 8
  br label %56

56:                                               ; preds = %54, %50
  %.01 = phi i32 [ %55, %54 ], [ %51, %50 ]
  %57 = zext i32 %.01 to i64
  %58 = call i8* @png_read_buffer(%struct.png_struct_def* %0, i64 %57, i32 0)
  call void @png_crc_read(%struct.png_struct_def* %0, i8* %58, i32 %.01)
  %59 = load i32, i32* %18, align 8
  %60 = sub i32 %59, %.01
  store i32 %60, i32* %18, align 8
  store i8* %58, i8** %20, align 8
  store i32 %.01, i32* %22, align 8
  br label %61

61:                                               ; preds = %56, %38
  br i1 %23, label %62, label %67

62:                                               ; preds = %61
  %63 = icmp ugt i64 4294967295, %.1
  %64 = trunc i64 %.1 to i32
  %spec.select3 = select i1 %63, i32 %64, i32 -1
  %65 = zext i32 %spec.select3 to i64
  %66 = sub i64 %.1, %65
  store i32 %spec.select3, i32* %30, align 8
  br label %68

67:                                               ; preds = %61
  store i8* %24, i8** %26, align 8
  store i32 1024, i32* %28, align 8
  br label %68

68:                                               ; preds = %67, %62
  %.2 = phi i64 [ %66, %62 ], [ %.1, %67 ]
  %69 = call i32 @png_zlib_inflate(%struct.png_struct_def* %0, i32 0)
  br i1 %31, label %70, label %74

70:                                               ; preds = %68
  %71 = load i32, i32* %35, align 8
  %72 = zext i32 %71 to i64
  %73 = add i64 %.2, %72
  br label %79

74:                                               ; preds = %68
  %75 = load i32, i32* %33, align 8
  %76 = zext i32 %75 to i64
  %77 = sub i64 1024, %76
  %78 = add i64 %.2, %77
  br label %79

79:                                               ; preds = %74, %70
  %.3 = phi i64 [ %73, %70 ], [ %78, %74 ]
  store i32 0, i32* %37, align 8
  switch i32 %69, label %99 [
    i32 1, label %80
    i32 0, label %109
  ]

80:                                               ; preds = %79
  %.3.lcssa6 = phi i64 [ %.3, %79 ]
  %.lcssa4 = phi i32 [ %69, %79 ]
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %82 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %81, i32 0, i32 3
  store i8* null, i8** %82, align 8
  %83 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %84 = load i32, i32* %83, align 4
  %85 = or i32 %84, 8
  store i32 %85, i32* %83, align 4
  %86 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %87 = load i32, i32* %86, align 8
  %88 = or i32 %87, 8
  store i32 %88, i32* %86, align 8
  %89 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %90 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %89, i32 0, i32 1
  %91 = load i32, i32* %90, align 8
  %92 = icmp ugt i32 %91, 0
  br i1 %92, label %97, label %93

93:                                               ; preds = %80
  %94 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  %95 = load i32, i32* %94, align 8
  %96 = icmp ugt i32 %95, 0
  br i1 %96, label %97, label %111

97:                                               ; preds = %93, %80
  %.38 = phi i64 [ %.3.lcssa6, %93 ], [ %.3.lcssa6, %80 ]
  %98 = phi i32 [ %.lcssa4, %93 ], [ %.lcssa4, %80 ]
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.56.370, i32 0, i32 0))
  br label %111

99:                                               ; preds = %79
  %.lcssa = phi i32 [ %69, %79 ]
  call void @png_zstream_error(%struct.png_struct_def* %0, i32 %.lcssa)
  %100 = icmp ne i8* %1, null
  br i1 %100, label %101, label %105

101:                                              ; preds = %99
  %102 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %103 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %102, i32 0, i32 6
  %104 = load i8*, i8** %103, align 8
  call void @png_chunk_error(%struct.png_struct_def* %0, i8* %104) #24
  unreachable

105:                                              ; preds = %99
  %106 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %107 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %106, i32 0, i32 6
  %108 = load i8*, i8** %107, align 8
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* %108)
  br label %117

109:                                              ; preds = %79
  %110 = icmp ugt i64 %.3, 0
  br i1 %110, label %38, label %.loopexit

.loopexit:                                        ; preds = %109
  %.3.lcssa7.ph = phi i64 [ %.3, %109 ]
  br label %111

111:                                              ; preds = %.loopexit, %93, %97
  %.3.lcssa7 = phi i64 [ %.3.lcssa6, %93 ], [ %.38, %97 ], [ %.3.lcssa7.ph, %.loopexit ]
  %112 = icmp ugt i64 %.3.lcssa7, 0
  br i1 %112, label %113, label %117

113:                                              ; preds = %111
  %114 = icmp ne i8* %1, null
  br i1 %114, label %115, label %116

115:                                              ; preds = %113
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.55.369, i32 0, i32 0)) #24
  unreachable

116:                                              ; preds = %113
  call void @png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.57.371, i32 0, i32 0))
  br label %117

117:                                              ; preds = %105, %116, %111
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_read_intrapixel(%struct.png_row_info_struct* %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %4 = load i8, i8* %3, align 8
  %5 = zext i8 %4 to i32
  %6 = and i32 %5, 2
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %100

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, 8
  br i1 %14, label %15, label %46

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %17 = load i8, i8* %16, align 8
  %18 = zext i8 %17 to i32
  %19 = icmp eq i32 %18, 2
  br i1 %19, label %25, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %22 = load i8, i8* %21, align 8
  %23 = zext i8 %22 to i32
  %24 = icmp eq i32 %23, 6
  br i1 %24, label %25, label %100

25:                                               ; preds = %20, %15
  %.02 = phi i32 [ 3, %15 ], [ 4, %20 ]
  %26 = sext i32 %.02 to i64
  %27 = icmp ult i32 0, %10
  br i1 %27, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %25
  %scevgep = getelementptr i8, i8* %1, i64 2
  br label %28

28:                                               ; preds = %.lr.ph, %28
  %lsr.iv12 = phi i8* [ %scevgep, %.lr.ph ], [ %45, %28 ]
  %lsr.iv = phi i32 [ %10, %.lr.ph ], [ %lsr.iv.next, %28 ]
  %lsr.iv1213 = bitcast i8* %lsr.iv12 to i1*
  %scevgep15 = getelementptr i8, i8* %lsr.iv12, i64 -2
  %29 = load i8, i8* %scevgep15, align 1
  %30 = zext i8 %29 to i32
  %31 = add nsw i32 256, %30
  %scevgep16 = getelementptr i8, i8* %lsr.iv12, i64 -1
  %32 = load i8, i8* %scevgep16, align 1
  %33 = zext i8 %32 to i32
  %34 = add nsw i32 %31, %33
  %35 = and i32 %34, 255
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %scevgep15, align 1
  %37 = load i8, i8* %lsr.iv12, align 1
  %38 = zext i8 %37 to i32
  %39 = add nsw i32 256, %38
  %scevgep17 = getelementptr i8, i8* %lsr.iv12, i64 -1
  %40 = load i8, i8* %scevgep17, align 1
  %41 = zext i8 %40 to i32
  %42 = add nsw i32 %39, %41
  %43 = and i32 %42, 255
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %lsr.iv12, align 1
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep14 = getelementptr i1, i1* %lsr.iv1213, i64 %26
  %45 = bitcast i1* %scevgep14 to i8*
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  br i1 %exitcond, label %28, label %..loopexit_crit_edge

46:                                               ; preds = %8
  %47 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = icmp eq i32 %49, 16
  br i1 %50, label %51, label %100

51:                                               ; preds = %46
  %52 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %53 = load i8, i8* %52, align 8
  %54 = zext i8 %53 to i32
  %55 = icmp eq i32 %54, 2
  br i1 %55, label %61, label %56

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %58 = load i8, i8* %57, align 8
  %59 = zext i8 %58 to i32
  %60 = icmp eq i32 %59, 6
  br i1 %60, label %61, label %100

61:                                               ; preds = %56, %51
  %.1 = phi i32 [ 6, %51 ], [ 8, %56 ]
  %62 = sext i32 %.1 to i64
  %63 = icmp ult i32 0, %10
  br i1 %63, label %.lr.ph10, label %.loopexit5

.lr.ph10:                                         ; preds = %61
  %scevgep20 = getelementptr i8, i8* %1, i64 5
  br label %64

64:                                               ; preds = %.lr.ph10, %64
  %lsr.iv21 = phi i8* [ %scevgep20, %.lr.ph10 ], [ %99, %64 ]
  %lsr.iv18 = phi i32 [ %10, %.lr.ph10 ], [ %lsr.iv.next19, %64 ]
  %lsr.iv2122 = bitcast i8* %lsr.iv21 to i1*
  %scevgep24 = getelementptr i8, i8* %lsr.iv21, i64 -5
  %65 = load i8, i8* %scevgep24, align 1
  %66 = zext i8 %65 to i32
  %67 = shl i32 %66, 8
  %scevgep25 = getelementptr i8, i8* %lsr.iv21, i64 -4
  %68 = load i8, i8* %scevgep25, align 1
  %69 = zext i8 %68 to i32
  %70 = or i32 %67, %69
  %scevgep26 = getelementptr i8, i8* %lsr.iv21, i64 -3
  %71 = load i8, i8* %scevgep26, align 1
  %72 = zext i8 %71 to i32
  %73 = shl i32 %72, 8
  %scevgep27 = getelementptr i8, i8* %lsr.iv21, i64 -2
  %74 = load i8, i8* %scevgep27, align 1
  %75 = zext i8 %74 to i32
  %76 = or i32 %73, %75
  %scevgep28 = getelementptr i8, i8* %lsr.iv21, i64 -1
  %77 = load i8, i8* %scevgep28, align 1
  %78 = zext i8 %77 to i32
  %79 = shl i32 %78, 8
  %80 = load i8, i8* %lsr.iv21, align 1
  %81 = zext i8 %80 to i32
  %82 = or i32 %79, %81
  %83 = add i32 %70, %76
  %84 = add i32 %83, 65536
  %85 = and i32 %84, 65535
  %86 = add i32 %82, %76
  %87 = add i32 %86, 65536
  %88 = and i32 %87, 65535
  %89 = lshr i32 %85, 8
  %90 = and i32 %89, 255
  %91 = trunc i32 %90 to i8
  store i8 %91, i8* %scevgep24, align 1
  %92 = and i32 %85, 255
  %93 = trunc i32 %92 to i8
  %scevgep29 = getelementptr i8, i8* %lsr.iv21, i64 -4
  store i8 %93, i8* %scevgep29, align 1
  %94 = lshr i32 %88, 8
  %95 = and i32 %94, 255
  %96 = trunc i32 %95 to i8
  %scevgep30 = getelementptr i8, i8* %lsr.iv21, i64 -1
  store i8 %96, i8* %scevgep30, align 1
  %97 = and i32 %88, 255
  %98 = trunc i32 %97 to i8
  store i8 %98, i8* %lsr.iv21, align 1
  %lsr.iv.next19 = add i32 %lsr.iv18, -1
  %scevgep23 = getelementptr i1, i1* %lsr.iv2122, i64 %62
  %99 = bitcast i1* %scevgep23 to i8*
  %exitcond11 = icmp ne i32 %lsr.iv.next19, 0
  br i1 %exitcond11, label %64, label %..loopexit5_crit_edge

..loopexit_crit_edge:                             ; preds = %28
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %25
  br label %100

..loopexit5_crit_edge:                            ; preds = %64
  br label %.loopexit5

.loopexit5:                                       ; preds = %..loopexit5_crit_edge, %61
  br label %100

100:                                              ; preds = %.loopexit5, %.loopexit, %46, %56, %20, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_finish_IDAT(%struct.png_struct_def* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %20

6:                                                ; preds = %1
  call void @png_read_IDAT_data(%struct.png_struct_def* %0, i8* null, i64 0)
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %8 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %7, i32 0, i32 3
  store i8* null, i8** %8, align 8
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %15 = load i32, i32* %14, align 4
  %16 = or i32 %15, 8
  store i32 %16, i32* %14, align 4
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %18 = load i32, i32* %17, align 8
  %19 = or i32 %18, 8
  store i32 %19, i32* %17, align 8
  br label %20

20:                                               ; preds = %6, %13, %1
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 1229209940
  br i1 %23, label %24, label %33

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %26 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %25, i32 0, i32 0
  store i8* null, i8** %26, align 8
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 19
  %28 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %27, i32 0, i32 1
  store i32 0, i32* %28, align 8
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  store i32 0, i32* %29, align 8
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 50
  %31 = load i32, i32* %30, align 8
  %32 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %31)
  br label %33

33:                                               ; preds = %24, %20
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_rows(%struct.png_struct_def* noalias %0, i8** %1, i8** %2, i32 %3) #11 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  br i1 %5, label %26, label %6

6:                                                ; preds = %4
  %7 = icmp ne i8** %1, null
  %8 = icmp ne i8** %2, null
  %or.cond = select i1 %7, i1 %8, i1 false
  br i1 %or.cond, label %.preheader, label %14

.preheader:                                       ; preds = %6
  %9 = icmp ult i32 0, %3
  br i1 %9, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  %10 = zext i32 %3 to i64
  br label %11

11:                                               ; preds = %.lr.ph, %11
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %11 ]
  %scevgep = getelementptr i8*, i8** %2, i64 %lsr.iv
  %scevgep20 = getelementptr i8*, i8** %1, i64 %lsr.iv
  %12 = load i8*, i8** %scevgep20, align 8
  %13 = load i8*, i8** %scevgep, align 8
  call void @png_read_row(%struct.png_struct_def* %0, i8* %12, i8* %13)
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 1
  %tmp = trunc i64 %lsr.iv.next to i32
  %tmp21 = trunc i64 %10 to i32
  %exitcond = icmp ne i32 %tmp21, %tmp
  br i1 %exitcond, label %11, label %..loopexit_crit_edge

14:                                               ; preds = %6
  %15 = icmp ne i8** %1, null
  br i1 %15, label %.preheader5, label %20

.preheader5:                                      ; preds = %14
  %16 = icmp ult i32 0, %3
  br i1 %16, label %.lr.ph14, label %.loopexit6

.lr.ph14:                                         ; preds = %.preheader5
  %17 = zext i32 %3 to i64
  br label %18

18:                                               ; preds = %.lr.ph14, %18
  %lsr.iv22 = phi i64 [ 0, %.lr.ph14 ], [ %lsr.iv.next23, %18 ]
  %scevgep24 = getelementptr i8*, i8** %1, i64 %lsr.iv22
  %19 = load i8*, i8** %scevgep24, align 8
  call void @png_read_row(%struct.png_struct_def* %0, i8* %19, i8* null)
  %lsr.iv.next23 = add nuw nsw i64 %lsr.iv22, 1
  %tmp25 = trunc i64 %lsr.iv.next23 to i32
  %tmp26 = trunc i64 %17 to i32
  %exitcond15 = icmp ne i32 %tmp26, %tmp25
  br i1 %exitcond15, label %18, label %..loopexit6_crit_edge

20:                                               ; preds = %14
  %21 = icmp ne i8** %2, null
  br i1 %21, label %.preheader7, label %26

.preheader7:                                      ; preds = %20
  %22 = icmp ult i32 0, %3
  br i1 %22, label %.lr.ph18, label %.loopexit8

.lr.ph18:                                         ; preds = %.preheader7
  %23 = zext i32 %3 to i64
  br label %24

24:                                               ; preds = %.lr.ph18, %24
  %lsr.iv27 = phi i64 [ 0, %.lr.ph18 ], [ %lsr.iv.next28, %24 ]
  %scevgep29 = getelementptr i8*, i8** %2, i64 %lsr.iv27
  %25 = load i8*, i8** %scevgep29, align 8
  call void @png_read_row(%struct.png_struct_def* %0, i8* null, i8* %25)
  %lsr.iv.next28 = add nuw nsw i64 %lsr.iv27, 1
  %tmp30 = trunc i64 %lsr.iv.next28 to i32
  %tmp31 = trunc i64 %23 to i32
  %exitcond19 = icmp ne i32 %tmp31, %tmp30
  br i1 %exitcond19, label %24, label %..loopexit8_crit_edge

..loopexit_crit_edge:                             ; preds = %11
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader
  br label %26

..loopexit6_crit_edge:                            ; preds = %18
  br label %.loopexit6

.loopexit6:                                       ; preds = %..loopexit6_crit_edge, %.preheader5
  br label %26

..loopexit8_crit_edge:                            ; preds = %24
  br label %.loopexit8

.loopexit8:                                       ; preds = %..loopexit8_crit_edge, %.preheader7
  br label %26

26:                                               ; preds = %.loopexit8, %.loopexit6, %.loopexit, %20, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_image(%struct.png_struct_def* noalias %0, i8** %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %37, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, 64
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %4
  %10 = call i32 bitcast (i32 (%struct.png_struct_def.199*)* @png_set_interlace_handling to i32 (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  call void @png_start_read_image(%struct.png_struct_def* %0)
  br label %27

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 58
  %13 = load i8, i8* %12, align 4
  %14 = zext i8 %13 to i32
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %25

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %18 = load i32, i32* %17, align 4
  %19 = and i32 %18, 2
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %25

21:                                               ; preds = %16
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.9.134, i32 0, i32 0))
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 38
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 39
  store i32 %23, i32* %24, align 8
  br label %25

25:                                               ; preds = %21, %16, %11
  %26 = call i32 bitcast (i32 (%struct.png_struct_def.199*)* @png_set_interlace_handling to i32 (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %27

27:                                               ; preds = %25, %9
  %.03 = phi i32 [ %10, %9 ], [ %26, %25 ]
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 38
  %29 = load i32, i32* %28, align 4
  %30 = icmp ult i32 0, %29
  %31 = icmp slt i32 0, %.03
  br i1 %31, label %.preheader.lr.ph, label %.loopexit

.preheader.lr.ph:                                 ; preds = %27
  %32 = zext i32 %29 to i64
  br label %.preheader

.preheader:                                       ; preds = %.preheader.lr.ph, %35
  %.016 = phi i32 [ 0, %.preheader.lr.ph ], [ %36, %35 ]
  br i1 %30, label %.lr.ph, label %35

.lr.ph:                                           ; preds = %.preheader
  br label %33

33:                                               ; preds = %.lr.ph, %33
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %33 ]
  %scevgep = getelementptr i8*, i8** %1, i64 %lsr.iv
  %34 = load i8*, i8** %scevgep, align 8
  call void @png_read_row(%struct.png_struct_def* %0, i8* %34, i8* null)
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 1
  %tmp = trunc i64 %lsr.iv.next to i32
  %tmp8 = trunc i64 %32 to i32
  %exitcond = icmp ne i32 %tmp8, %tmp
  br i1 %exitcond, label %33, label %._crit_edge

._crit_edge:                                      ; preds = %33
  br label %35

35:                                               ; preds = %._crit_edge, %.preheader
  %36 = add nuw nsw i32 %.016, 1
  %exitcond7 = icmp ne i32 %36, %.03
  br i1 %exitcond7, label %.preheader, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %35
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %27
  br label %37

37:                                               ; preds = %.loopexit, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_set_interlace_handling(%struct.png_struct_def.199* noalias %0) #11 {
  %2 = icmp ne %struct.png_struct_def.199* %0, null
  br i1 %2, label %3, label %12

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 58
  %5 = load i8, i8* %4, align 4
  %6 = zext i8 %5 to i32
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 17
  %10 = load i32, i32* %9, align 4
  %11 = or i32 %10, 2
  store i32 %11, i32* %9, align 4
  br label %12

12:                                               ; preds = %1, %3, %8
  %.0 = phi i32 [ 7, %8 ], [ 1, %3 ], [ 1, %1 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_end(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %101, label %4

4:                                                ; preds = %2
  %5 = call i32 @png_chunk_unknown_handling(%struct.png_struct_def* %0, i32 1229209940)
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %4
  call void @png_read_finish_IDAT(%struct.png_struct_def* %0)
  br label %8

8:                                                ; preds = %7, %4
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = icmp eq i32 %11, 3
  br i1 %12, label %13, label %21

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 54
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 53
  %17 = load i16, i16* %16, align 8
  %18 = zext i16 %17 to i32
  %19 = icmp sgt i32 %15, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %13
  call void @png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.10.135, i32 0, i32 0))
  br label %21

21:                                               ; preds = %20, %13, %8
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 44
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %24 = icmp eq %struct.png_info_def* %1, null
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  br label %31

31:                                               ; preds = %97, %21
  %32 = call i32 @png_read_chunk_header(%struct.png_struct_def* %0)
  %33 = load i32, i32* %22, align 8
  %cond = icmp eq i32 %33, 1229209940
  br i1 %cond, label %39, label %34

34:                                               ; preds = %31
  %35 = load i32, i32* %23, align 4
  %36 = or i32 %35, 8192
  store i32 %36, i32* %23, align 4
  switch i32 %33, label %39 [
    i32 1229278788, label %37
    i32 1229472850, label %38
  ]

37:                                               ; preds = %34
  call void @png_handle_IEND(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

38:                                               ; preds = %34
  call void @png_handle_IHDR(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

39:                                               ; preds = %31, %34
  br i1 %24, label %40, label %42

40:                                               ; preds = %39
  %41 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %32)
  br label %97

42:                                               ; preds = %39
  %43 = call i32 @png_chunk_unknown_handling(%struct.png_struct_def* %0, i32 %33)
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %45, label %63

45:                                               ; preds = %42
  %46 = icmp eq i32 %33, 1229209940
  br i1 %46, label %47, label %58

47:                                               ; preds = %45
  %48 = icmp ugt i32 %32, 0
  br i1 %48, label %49, label %53

49:                                               ; preds = %47
  %50 = load i32, i32* %27, align 8
  %51 = and i32 %50, 8
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %57

53:                                               ; preds = %49, %47
  %54 = load i32, i32* %28, align 4
  %55 = and i32 %54, 8192
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %53, %49
  call void @png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11.136, i32 0, i32 0))
  br label %58

58:                                               ; preds = %53, %57, %45
  call void @png_handle_unknown(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32, i32 %43)
  %59 = icmp eq i32 %33, 1347179589
  br i1 %59, label %60, label %97

60:                                               ; preds = %58
  %61 = load i32, i32* %29, align 4
  %62 = or i32 %61, 2
  store i32 %62, i32* %29, align 4
  br label %97

63:                                               ; preds = %42
  switch i32 %33, label %96 [
    i32 1229209940, label %64
    i32 1347179589, label %77
    i32 1649100612, label %78
    i32 1665684045, label %79
    i32 1700284774, label %80
    i32 1732332865, label %81
    i32 1749635924, label %82
    i32 1866876531, label %83
    i32 1883455820, label %84
    i32 1933787468, label %85
    i32 1883789683, label %86
    i32 1933723988, label %87
    i32 1934772034, label %88
    i32 1766015824, label %89
    i32 1934642260, label %90
    i32 1950701684, label %91
    i32 1950960965, label %92
    i32 1951551059, label %93
    i32 2052348020, label %94
    i32 1767135348, label %95
  ]

64:                                               ; preds = %63
  %65 = icmp ugt i32 %32, 0
  br i1 %65, label %66, label %70

66:                                               ; preds = %64
  %67 = load i32, i32* %25, align 8
  %68 = and i32 %67, 8
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %70, label %74

70:                                               ; preds = %66, %64
  %71 = load i32, i32* %26, align 4
  %72 = and i32 %71, 8192
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %70, %66
  call void @png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12.137, i32 0, i32 0))
  br label %75

75:                                               ; preds = %74, %70
  %76 = call i32 @png_crc_finish(%struct.png_struct_def* %0, i32 %32)
  br label %97

77:                                               ; preds = %63
  call void @png_handle_PLTE(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

78:                                               ; preds = %63
  call void @png_handle_bKGD(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

79:                                               ; preds = %63
  call void @png_handle_cHRM(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

80:                                               ; preds = %63
  call void @png_handle_eXIf(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

81:                                               ; preds = %63
  call void @png_handle_gAMA(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

82:                                               ; preds = %63
  call void @png_handle_hIST(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

83:                                               ; preds = %63
  call void @png_handle_oFFs(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

84:                                               ; preds = %63
  call void @png_handle_pCAL(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

85:                                               ; preds = %63
  call void @png_handle_sCAL(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

86:                                               ; preds = %63
  call void @png_handle_pHYs(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

87:                                               ; preds = %63
  call void @png_handle_sBIT(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

88:                                               ; preds = %63
  call void @png_handle_sRGB(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

89:                                               ; preds = %63
  call void @png_handle_iCCP(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

90:                                               ; preds = %63
  call void @png_handle_sPLT(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

91:                                               ; preds = %63
  call void @png_handle_tEXt(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

92:                                               ; preds = %63
  call void @png_handle_tIME(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

93:                                               ; preds = %63
  call void @png_handle_tRNS(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

94:                                               ; preds = %63
  call void @png_handle_zTXt(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

95:                                               ; preds = %63
  call void @png_handle_iTXt(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32)
  br label %97

96:                                               ; preds = %63
  call void @png_handle_unknown(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %32, i32 0)
  br label %97

97:                                               ; preds = %37, %40, %75, %78, %80, %82, %84, %86, %88, %90, %92, %94, %96, %95, %93, %91, %89, %87, %85, %83, %81, %79, %77, %58, %60, %38
  %98 = load i32, i32* %30, align 4
  %99 = and i32 %98, 16
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %31, label %.loopexit

.loopexit:                                        ; preds = %97
  br label %101

101:                                              ; preds = %.loopexit, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_read_status_fn(%struct.png_struct_def* noalias %0, void (%struct.png_struct_def*, i32, i32)* %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 91
  store void (%struct.png_struct_def*, i32, i32)* %1, void (%struct.png_struct_def*, i32, i32)** %5, align 8
  br label %6

6:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_read_png(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2, i8* %3) #11 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %5, i1 true, i1 %6
  br i1 %or.cond, label %119, label %7

7:                                                ; preds = %4
  call void @png_read_info(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = icmp ugt i64 %10, 536870911
  br i1 %11, label %12, label %13

12:                                               ; preds = %7
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.13.140, i32 0, i32 0)) #24
  unreachable

13:                                               ; preds = %7
  %14 = and i32 %2, 32768
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %13
  call void @png_set_scale_16(%struct.png_struct_def* %0)
  br label %17

17:                                               ; preds = %16, %13
  %18 = and i32 %2, 1
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %17
  call void @png_set_strip_16(%struct.png_struct_def* %0)
  br label %21

21:                                               ; preds = %20, %17
  %22 = and i32 %2, 2
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %21
  call void @png_set_strip_alpha(%struct.png_struct_def* %0)
  br label %25

25:                                               ; preds = %24, %21
  %26 = and i32 %2, 4
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_packing to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %29

29:                                               ; preds = %28, %25
  %30 = and i32 %2, 8
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_packswap to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %33

33:                                               ; preds = %32, %29
  %34 = and i32 %2, 16
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %33
  call void @png_set_expand(%struct.png_struct_def* %0)
  br label %37

37:                                               ; preds = %36, %33
  %38 = and i32 %2, 32
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_invert_mono to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %41

41:                                               ; preds = %40, %37
  %42 = and i32 %2, 64
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %51

44:                                               ; preds = %41
  %45 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %46 = load i32, i32* %45, align 8
  %47 = and i32 %46, 2
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 24
  call void bitcast (void (%struct.png_struct_def.199*, %struct.png_color_8_struct*)* @png_set_shift to void (%struct.png_struct_def*, %struct.png_color_8_struct*)*)(%struct.png_struct_def* %0, %struct.png_color_8_struct* %50)
  br label %51

51:                                               ; preds = %44, %49, %41
  %52 = and i32 %2, 128
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_bgr to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %55

55:                                               ; preds = %54, %51
  %56 = and i32 %2, 256
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_swap_alpha to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %59

59:                                               ; preds = %58, %55
  %60 = and i32 %2, 512
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %59
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_swap to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %63

63:                                               ; preds = %62, %59
  %64 = and i32 %2, 1024
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_invert_alpha to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %67

67:                                               ; preds = %66, %63
  %68 = and i32 %2, 8192
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %67
  call void @png_set_gray_to_rgb(%struct.png_struct_def* %0)
  br label %71

71:                                               ; preds = %70, %67
  %72 = and i32 %2, 16384
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  call void @png_set_expand_16(%struct.png_struct_def* %0)
  br label %75

75:                                               ; preds = %74, %71
  %76 = call i32 bitcast (i32 (%struct.png_struct_def.199*)* @png_set_interlace_handling to i32 (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  call void @png_read_update_info(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  call void @png_free_data(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 64, i32 0)
  %77 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 53
  %78 = load i8**, i8*** %77, align 8
  %79 = icmp eq i8** %78, null
  br i1 %79, label %80, label %113

80:                                               ; preds = %75
  %81 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = zext i32 %82 to i64
  %84 = mul i64 %83, 8
  %85 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %84)
  %86 = bitcast i8* %85 to i8**
  %87 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 53
  store i8** %86, i8*** %87, align 8
  %88 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 1
  %89 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 53
  %90 = load i32, i32* %88, align 4
  %91 = icmp ult i32 0, %90
  br i1 %91, label %.lr.ph4, label %97

.lr.ph4:                                          ; preds = %80
  br label %92

92:                                               ; preds = %.lr.ph4, %92
  %indvars.iv5 = phi i64 [ 0, %.lr.ph4 ], [ %indvars.iv.next6, %92 ]
  %93 = load i8**, i8*** %89, align 8
  %scevgep8 = getelementptr i8*, i8** %93, i64 %indvars.iv5
  store i8* null, i8** %scevgep8, align 8
  %indvars.iv.next6 = add nuw nsw i64 %indvars.iv5, 1
  %94 = load i32, i32* %88, align 4
  %95 = zext i32 %94 to i64
  %96 = icmp ult i64 %indvars.iv.next6, %95
  br i1 %96, label %92, label %._crit_edge

._crit_edge:                                      ; preds = %92
  br label %97

97:                                               ; preds = %._crit_edge, %80
  %98 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %99 = load i32, i32* %98, align 4
  %100 = or i32 %99, 64
  store i32 %100, i32* %98, align 4
  %101 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 1
  %102 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 3
  %103 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 53
  %104 = load i32, i32* %101, align 4
  %105 = icmp ult i32 0, %104
  br i1 %105, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %97
  br label %106

106:                                              ; preds = %.lr.ph, %106
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %106 ]
  %107 = load i64, i64* %102, align 8
  %108 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %107)
  %109 = load i8**, i8*** %103, align 8
  %scevgep = getelementptr i8*, i8** %109, i64 %indvars.iv
  store i8* %108, i8** %scevgep, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %110 = load i32, i32* %101, align 4
  %111 = zext i32 %110 to i64
  %112 = icmp ult i64 %indvars.iv.next, %111
  br i1 %112, label %106, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %106
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %97
  br label %113

113:                                              ; preds = %.loopexit, %75
  %114 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 53
  %115 = load i8**, i8*** %114, align 8
  call void @png_read_image(%struct.png_struct_def* %0, i8** %115)
  %116 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %117 = load i32, i32* %116, align 8
  %118 = or i32 %117, 32768
  store i32 %118, i32* %116, align 8
  call void @png_read_end(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %119

119:                                              ; preds = %4, %113
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_scale_16(%struct.png_struct_def* noalias %0) #11 {
  %2 = call i32 @png_rtran_ok(%struct.png_struct_def* %0, i32 0)
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %8, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %6 = load i32, i32* %5, align 4
  %7 = or i32 %6, 67108864
  store i32 %7, i32* %5, align 4
  br label %8

8:                                                ; preds = %1, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_strip_16(%struct.png_struct_def* noalias %0) #11 {
  %2 = call i32 @png_rtran_ok(%struct.png_struct_def* %0, i32 0)
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %8, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %6 = load i32, i32* %5, align 4
  %7 = or i32 %6, 1024
  store i32 %7, i32* %5, align 4
  br label %8

8:                                                ; preds = %1, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_strip_alpha(%struct.png_struct_def* noalias %0) #11 {
  %2 = call i32 @png_rtran_ok(%struct.png_struct_def* %0, i32 0)
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %8, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %6 = load i32, i32* %5, align 4
  %7 = or i32 %6, 262144
  store i32 %7, i32* %5, align 4
  br label %8

8:                                                ; preds = %1, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_packing(%struct.png_struct_def.199* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def.199* %0, null
  br i1 %2, label %13, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 62
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = icmp slt i32 %6, 8
  br i1 %7, label %8, label %13

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 17
  %10 = load i32, i32* %9, align 4
  %11 = or i32 %10, 4
  store i32 %11, i32* %9, align 4
  %12 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 63
  store i8 8, i8* %12, align 1
  br label %13

13:                                               ; preds = %1, %8, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_packswap(%struct.png_struct_def.199* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def.199* %0, null
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 62
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = icmp slt i32 %6, 8
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 17
  %10 = load i32, i32* %9, align 4
  %11 = or i32 %10, 65536
  store i32 %11, i32* %9, align 4
  br label %12

12:                                               ; preds = %1, %8, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_expand(%struct.png_struct_def* noalias %0) #11 {
  %2 = call i32 @png_rtran_ok(%struct.png_struct_def* %0, i32 0)
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %8, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %6 = load i32, i32* %5, align 4
  %7 = or i32 %6, 33558528
  store i32 %7, i32* %5, align 4
  br label %8

8:                                                ; preds = %1, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_invert_mono(%struct.png_struct_def.199* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def.199* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 17
  %5 = load i32, i32* %4, align 4
  %6 = or i32 %5, 32
  store i32 %6, i32* %4, align 4
  br label %7

7:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_shift(%struct.png_struct_def.199* noalias %0, %struct.png_color_8_struct* %1) #11 {
  %3 = icmp eq %struct.png_struct_def.199* %0, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 17
  %6 = load i32, i32* %5, align 4
  %7 = or i32 %6, 8
  store i32 %7, i32* %5, align 4
  %8 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 88
  %9 = bitcast %struct.png_color_8_struct* %8 to i8*
  %10 = bitcast %struct.png_color_8_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %10, i64 5, i1 false)
  br label %11

11:                                               ; preds = %2, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_bgr(%struct.png_struct_def.199* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def.199* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 17
  %5 = load i32, i32* %4, align 4
  %6 = or i32 %5, 1
  store i32 %6, i32* %4, align 4
  br label %7

7:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_swap_alpha(%struct.png_struct_def.199* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def.199* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 17
  %5 = load i32, i32* %4, align 4
  %6 = or i32 %5, 131072
  store i32 %6, i32* %4, align 4
  br label %7

7:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_swap(%struct.png_struct_def.199* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def.199* %0, null
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 62
  %5 = load i8, i8* %4, align 8
  %6 = zext i8 %5 to i32
  %7 = icmp eq i32 %6, 16
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 17
  %10 = load i32, i32* %9, align 4
  %11 = or i32 %10, 16
  store i32 %11, i32* %9, align 4
  br label %12

12:                                               ; preds = %1, %8, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_invert_alpha(%struct.png_struct_def.199* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def.199* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 17
  %5 = load i32, i32* %4, align 4
  %6 = or i32 %5, 524288
  store i32 %6, i32* %4, align 4
  br label %7

7:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_gray_to_rgb(%struct.png_struct_def* noalias %0) #11 {
  %2 = call i32 @png_rtran_ok(%struct.png_struct_def* %0, i32 0)
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %8, label %4

4:                                                ; preds = %1
  call void @png_set_expand_gray_1_2_4_to_8(%struct.png_struct_def* %0)
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %6 = load i32, i32* %5, align 4
  %7 = or i32 %6, 16384
  store i32 %7, i32* %5, align 4
  br label %8

8:                                                ; preds = %1, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_expand_16(%struct.png_struct_def* noalias %0) #11 {
  %2 = call i32 @png_rtran_ok(%struct.png_struct_def* %0, i32 0)
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %8, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %6 = load i32, i32* %5, align 4
  %7 = or i32 %6, 33559040
  store i32 %7, i32* %5, align 4
  br label %8

8:                                                ; preds = %1, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_rtran_ok(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  br i1 %3, label %4, label %22

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, 64
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  call void @png_app_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.18.198, i32 0, i32 0))
  br label %22

10:                                               ; preds = %4
  %11 = icmp ne i32 %1, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %10
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %12
  call void @png_app_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.19.199, i32 0, i32 0))
  br label %22

18:                                               ; preds = %12, %10
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %20 = load i32, i32* %19, align 8
  %21 = or i32 %20, 16384
  store i32 %21, i32* %19, align 8
  br label %22

22:                                               ; preds = %2, %17, %9, %18
  %.0 = phi i32 [ 1, %18 ], [ 0, %9 ], [ 0, %17 ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_expand_gray_1_2_4_to_8(%struct.png_struct_def* noalias %0) #11 {
  %2 = call i32 @png_rtran_ok(%struct.png_struct_def* %0, i32 0)
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %8, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %6 = load i32, i32* %5, align 4
  %7 = or i32 %6, 4096
  store i32 %7, i32* %5, align 4
  br label %8

8:                                                ; preds = %1, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_image_begin_read_from_stdio(%struct.png_image* %0, %struct._IO_FILE.1* %1) #11 {
  %magicptr = ptrtoint %struct.png_image* %0 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %27, label %3

3:                                                ; preds = %2
  %4 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %7, label %23

7:                                                ; preds = %3
  %8 = icmp ne %struct._IO_FILE.1* %1, null
  br i1 %8, label %9, label %21

9:                                                ; preds = %7
  %10 = call i32 @png_image_read_init(%struct.png_image* %0)
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %27

12:                                               ; preds = %9
  %13 = bitcast %struct._IO_FILE.1* %1 to i8*
  %14 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 0
  %15 = load %struct.png_control*, %struct.png_control** %14, align 8
  %16 = getelementptr inbounds %struct.png_control, %struct.png_control* %15, i32 0, i32 0
  %17 = load %struct.png_struct_def*, %struct.png_struct_def** %16, align 8
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %17, i32 0, i32 9
  store i8* %13, i8** %18, align 8
  %19 = bitcast %struct.png_image* %0 to i8*
  %20 = call i32 @png_safe_execute(%struct.png_image* %0, i32 (i8*)* @png_image_read_header, i8* %19)
  br label %27

21:                                               ; preds = %7
  %22 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.14.141, i32 0, i32 0))
  br label %27

23:                                               ; preds = %3
  %24 = icmp ne %struct.png_image* %0, null
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.15.142, i32 0, i32 0))
  br label %27

27:                                               ; preds = %2, %9, %23, %25, %21, %12
  %.0 = phi i32 [ %20, %12 ], [ %22, %21 ], [ %26, %25 ], [ 0, %23 ], [ 0, %2 ], [ 0, %9 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_image_read_init(%struct.png_image* %0) #11 {
  %2 = alloca %struct.png_struct_def*, align 8
  %3 = alloca %struct.png_info_def*, align 8
  %4 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 0
  %5 = load %struct.png_control*, %struct.png_control** %4, align 8
  %6 = icmp eq %struct.png_control* %5, null
  br i1 %6, label %7, label %39

7:                                                ; preds = %1
  %8 = bitcast %struct.png_image* %0 to i8*
  %9 = call noalias %struct.png_struct_def* @png_create_read_struct(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.26.143, i32 0, i32 0), i8* %8, void (%struct.png_struct_def*, i8*)* @png_safe_error, void (%struct.png_struct_def*, i8*)* @png_safe_warning)
  store %struct.png_struct_def* %9, %struct.png_struct_def** %2, align 8
  %10 = bitcast %struct.png_image* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 104, i1 false)
  %11 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 1
  store i32 1, i32* %11, align 8
  %12 = load %struct.png_struct_def*, %struct.png_struct_def** %2, align 8
  %13 = icmp ne %struct.png_struct_def* %12, null
  br i1 %13, label %14, label %37

14:                                               ; preds = %7
  %15 = load %struct.png_struct_def*, %struct.png_struct_def** %2, align 8
  %16 = call noalias %struct.png_info_def* @png_create_info_struct(%struct.png_struct_def* %15)
  store %struct.png_info_def* %16, %struct.png_info_def** %3, align 8
  %17 = load %struct.png_info_def*, %struct.png_info_def** %3, align 8
  %18 = icmp ne %struct.png_info_def* %17, null
  br i1 %18, label %19, label %36

19:                                               ; preds = %14
  %20 = load %struct.png_struct_def*, %struct.png_struct_def** %2, align 8
  %21 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %20, i64 48)
  %22 = bitcast i8* %21 to %struct.png_control*
  %23 = icmp ne %struct.png_control* %22, null
  br i1 %23, label %24, label %34

24:                                               ; preds = %19
  %25 = bitcast %struct.png_control* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 48, i1 false)
  %26 = load %struct.png_struct_def*, %struct.png_struct_def** %2, align 8
  %27 = getelementptr inbounds %struct.png_control, %struct.png_control* %22, i32 0, i32 0
  store %struct.png_struct_def* %26, %struct.png_struct_def** %27, align 8
  %28 = load %struct.png_info_def*, %struct.png_info_def** %3, align 8
  %29 = getelementptr inbounds %struct.png_control, %struct.png_control* %22, i32 0, i32 1
  store %struct.png_info_def* %28, %struct.png_info_def** %29, align 8
  %30 = getelementptr inbounds %struct.png_control, %struct.png_control* %22, i32 0, i32 5
  %31 = load i8, i8* %30, align 8
  %32 = and i8 %31, -2
  store i8 %32, i8* %30, align 8
  %33 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 0
  store %struct.png_control* %22, %struct.png_control** %33, align 8
  br label %41

34:                                               ; preds = %19
  %35 = load %struct.png_struct_def*, %struct.png_struct_def** %2, align 8
  call void @png_destroy_info_struct(%struct.png_struct_def* %35, %struct.png_info_def** %3)
  br label %36

36:                                               ; preds = %34, %14
  call void @png_destroy_read_struct(%struct.png_struct_def** %2, %struct.png_info_def** null, %struct.png_info_def** null)
  br label %37

37:                                               ; preds = %36, %7
  %38 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.27.144, i32 0, i32 0))
  br label %41

39:                                               ; preds = %1
  %40 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.28.145, i32 0, i32 0))
  br label %41

41:                                               ; preds = %39, %37, %24
  %.0 = phi i32 [ 1, %24 ], [ %38, %37 ], [ %40, %39 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_image_read_header(i8* %0) #11 {
  %2 = bitcast i8* %0 to %struct.png_image*
  %3 = getelementptr inbounds %struct.png_image, %struct.png_image* %2, i32 0, i32 0
  %4 = load %struct.png_control*, %struct.png_control** %3, align 8
  %5 = getelementptr inbounds %struct.png_control, %struct.png_control* %4, i32 0, i32 0
  %6 = load %struct.png_struct_def*, %struct.png_struct_def** %5, align 8
  %7 = getelementptr inbounds %struct.png_image, %struct.png_image* %2, i32 0, i32 0
  %8 = load %struct.png_control*, %struct.png_control** %7, align 8
  %9 = getelementptr inbounds %struct.png_control, %struct.png_control* %8, i32 0, i32 1
  %10 = load %struct.png_info_def*, %struct.png_info_def** %9, align 8
  call void @png_set_benign_errors(%struct.png_struct_def* %6, i32 1)
  call void @png_read_info(%struct.png_struct_def* %6, %struct.png_info_def* %10)
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %6, i32 0, i32 37
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.png_image, %struct.png_image* %2, i32 0, i32 2
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %6, i32 0, i32 38
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.png_image, %struct.png_image* %2, i32 0, i32 3
  store i32 %15, i32* %16, align 8
  %17 = call i32 @png_image_format(%struct.png_struct_def* %6)
  %18 = getelementptr inbounds %struct.png_image, %struct.png_image* %2, i32 0, i32 4
  store i32 %17, i32* %18, align 4
  %19 = and i32 %17, 2
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %32

21:                                               ; preds = %1
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %6, i32 0, i32 144
  %23 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %22, i32 0, i32 4
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = and i32 %25, 32834
  %27 = icmp eq i32 %26, 2
  br i1 %27, label %28, label %32

28:                                               ; preds = %21
  %29 = getelementptr inbounds %struct.png_image, %struct.png_image* %2, i32 0, i32 5
  %30 = load i32, i32* %29, align 8
  %31 = or i32 %30, 1
  store i32 %31, i32* %29, align 8
  br label %32

32:                                               ; preds = %28, %21, %1
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %6, i32 0, i32 61
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  switch i32 %35, label %45 [
    i32 0, label %36
    i32 3, label %41
  ]

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %6, i32 0, i32 62
  %38 = load i8, i8* %37, align 8
  %39 = zext i8 %38 to i32
  %40 = shl i32 1, %39
  br label %45

41:                                               ; preds = %32
  %42 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %6, i32 0, i32 53
  %43 = load i16, i16* %42, align 8
  %44 = zext i16 %43 to i32
  br label %45

45:                                               ; preds = %32, %41, %36
  %.0 = phi i32 [ %44, %41 ], [ %40, %36 ], [ 256, %32 ]
  %46 = icmp ugt i32 %.0, 256
  %spec.select = select i1 %46, i32 256, i32 %.0
  %47 = getelementptr inbounds %struct.png_image, %struct.png_image* %2, i32 0, i32 6
  store i32 %spec.select, i32* %47, align 4
  ret i32 1
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_benign_errors(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp ne i32 %1, 0
  br i1 %3, label %4, label %8

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %6 = load i32, i32* %5, align 8
  %7 = or i32 %6, 7340032
  store i32 %7, i32* %5, align 8
  br label %12

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, -7340033
  store i32 %11, i32* %9, align 8
  br label %12

12:                                               ; preds = %8, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_image_format(%struct.png_struct_def* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i32
  %5 = and i32 %4, 2
  %6 = icmp ne i32 %5, 0
  %7 = or i32 0, 2
  %spec.select = select i1 %6, i32 %7, i32 0
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = and i32 %10, 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %1
  %14 = or i32 %spec.select, 1
  br label %21

15:                                               ; preds = %1
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 55
  %17 = load i16, i16* %16, align 8
  %18 = zext i16 %17 to i32
  %19 = icmp sgt i32 %18, 0
  %20 = or i32 %spec.select, 1
  %spec.select1 = select i1 %19, i32 %20, i32 %spec.select
  br label %21

21:                                               ; preds = %15, %13
  %.2 = phi i32 [ %14, %13 ], [ %spec.select1, %15 ]
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %23 = load i8, i8* %22, align 8
  %24 = zext i8 %23 to i32
  %25 = icmp eq i32 %24, 16
  %26 = or i32 %.2, 4
  %spec.select2 = select i1 %25, i32 %26, i32 %.2
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = and i32 %29, 1
  %31 = icmp ne i32 %30, 0
  %32 = or i32 %spec.select2, 8
  %.4 = select i1 %31, i32 %32, i32 %spec.select2
  ret i32 %.4
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_image_begin_read_from_file(%struct.png_image* %0, i8* %1) #11 {
  %magicptr = ptrtoint %struct.png_image* %0 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %43, label %3

3:                                                ; preds = %2
  %4 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %7, label %39

7:                                                ; preds = %3
  %8 = icmp ne i8* %1, null
  br i1 %8, label %9, label %37

9:                                                ; preds = %7
  %10 = call %struct._IO_FILE.1* @fopen(i8* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16.146, i32 0, i32 0))
  %11 = icmp ne %struct._IO_FILE.1* %10, null
  br i1 %11, label %12, label %32

12:                                               ; preds = %9
  %13 = call i32 @png_image_read_init(%struct.png_image* %0)
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %30

15:                                               ; preds = %12
  %16 = bitcast %struct._IO_FILE.1* %10 to i8*
  %17 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 0
  %18 = load %struct.png_control*, %struct.png_control** %17, align 8
  %19 = getelementptr inbounds %struct.png_control, %struct.png_control* %18, i32 0, i32 0
  %20 = load %struct.png_struct_def*, %struct.png_struct_def** %19, align 8
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %20, i32 0, i32 9
  store i8* %16, i8** %21, align 8
  %22 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 0
  %23 = load %struct.png_control*, %struct.png_control** %22, align 8
  %24 = getelementptr inbounds %struct.png_control, %struct.png_control* %23, i32 0, i32 5
  %25 = load i8, i8* %24, align 8
  %26 = and i8 %25, -3
  %27 = or i8 %26, 2
  store i8 %27, i8* %24, align 8
  %28 = bitcast %struct.png_image* %0 to i8*
  %29 = call i32 @png_safe_execute(%struct.png_image* %0, i32 (i8*)* @png_image_read_header, i8* %28)
  br label %43

30:                                               ; preds = %12
  %31 = call i32 bitcast (i32 (%struct._IO_FILE*)* @fclose to i32 (%struct._IO_FILE.1*)*)(%struct._IO_FILE.1* %10)
  br label %43

32:                                               ; preds = %9
  %33 = call i32* @__errno_location() #20
  %34 = load i32, i32* %33, align 4
  %35 = call i8* @strerror(i32 %34) #22
  %36 = call i32 @png_image_error(%struct.png_image* %0, i8* %35)
  br label %43

37:                                               ; preds = %7
  %38 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.17.147, i32 0, i32 0))
  br label %43

39:                                               ; preds = %3
  %40 = icmp ne %struct.png_image* %0, null
  br i1 %40, label %41, label %43

41:                                               ; preds = %39
  %42 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.18.148, i32 0, i32 0))
  br label %43

43:                                               ; preds = %2, %30, %39, %41, %37, %32, %15
  %.0 = phi i32 [ %29, %15 ], [ %36, %32 ], [ %38, %37 ], [ %42, %41 ], [ 0, %39 ], [ 0, %2 ], [ 0, %30 ]
  ret i32 %.0
}

declare %struct._IO_FILE.1* @fopen(i8*, i8*) #13

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #21

; Function Attrs: nounwind
declare i8* @strerror(i32) #17

; Function Attrs: noinline nounwind uwtable
define i32 @png_image_begin_read_from_memory(%struct.png_image* %0, i8* %1, i64 %2) #11 {
  %magicptr = ptrtoint %struct.png_image* %0 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %40, label %4

4:                                                ; preds = %3
  %5 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %8, label %36

8:                                                ; preds = %4
  %9 = icmp ne i8* %1, null
  %10 = icmp ugt i64 %2, 0
  %or.cond = select i1 %9, i1 %10, i1 false
  br i1 %or.cond, label %11, label %34

11:                                               ; preds = %8
  %12 = call i32 @png_image_read_init(%struct.png_image* %0)
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %40

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 0
  %16 = load %struct.png_control*, %struct.png_control** %15, align 8
  %17 = getelementptr inbounds %struct.png_control, %struct.png_control* %16, i32 0, i32 3
  store i8* %1, i8** %17, align 8
  %18 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 0
  %19 = load %struct.png_control*, %struct.png_control** %18, align 8
  %20 = getelementptr inbounds %struct.png_control, %struct.png_control* %19, i32 0, i32 4
  store i64 %2, i64* %20, align 8
  %21 = bitcast %struct.png_image* %0 to i8*
  %22 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 0
  %23 = load %struct.png_control*, %struct.png_control** %22, align 8
  %24 = getelementptr inbounds %struct.png_control, %struct.png_control* %23, i32 0, i32 0
  %25 = load %struct.png_struct_def*, %struct.png_struct_def** %24, align 8
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %25, i32 0, i32 9
  store i8* %21, i8** %26, align 8
  %27 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 0
  %28 = load %struct.png_control*, %struct.png_control** %27, align 8
  %29 = getelementptr inbounds %struct.png_control, %struct.png_control* %28, i32 0, i32 0
  %30 = load %struct.png_struct_def*, %struct.png_struct_def** %29, align 8
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %30, i32 0, i32 8
  store void (%struct.png_struct_def*, i8*, i64)* @png_image_memory_read, void (%struct.png_struct_def*, i8*, i64)** %31, align 8
  %32 = bitcast %struct.png_image* %0 to i8*
  %33 = call i32 @png_safe_execute(%struct.png_image* %0, i32 (i8*)* @png_image_read_header, i8* %32)
  br label %40

34:                                               ; preds = %8
  %35 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.19.149, i32 0, i32 0))
  br label %40

36:                                               ; preds = %4
  %37 = icmp ne %struct.png_image* %0, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.20.150, i32 0, i32 0))
  br label %40

40:                                               ; preds = %3, %11, %36, %38, %34, %14
  %.0 = phi i32 [ %33, %14 ], [ %35, %34 ], [ %39, %38 ], [ 0, %36 ], [ 0, %3 ], [ 0, %11 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_image_memory_read(%struct.png_struct_def* %0, i8* %1, i64 %2) #11 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  br i1 %4, label %5, label %28

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 9
  %7 = load i8*, i8** %6, align 8
  %8 = bitcast i8* %7 to %struct.png_image*
  %9 = icmp ne %struct.png_image* %8, null
  br i1 %9, label %10, label %27

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 0
  %12 = load %struct.png_control*, %struct.png_control** %11, align 8
  %13 = icmp ne %struct.png_control* %12, null
  br i1 %13, label %14, label %27

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.png_control, %struct.png_control* %12, i32 0, i32 3
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %struct.png_control, %struct.png_control* %12, i32 0, i32 4
  %18 = load i64, i64* %17, align 8
  %19 = icmp ne i8* %16, null
  %20 = icmp uge i64 %18, %2
  %or.cond = select i1 %19, i1 %20, i1 false
  br i1 %or.cond, label %21, label %26

21:                                               ; preds = %14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %16, i64 %2, i1 false)
  %22 = getelementptr inbounds i8, i8* %16, i64 %2
  %23 = getelementptr inbounds %struct.png_control, %struct.png_control* %12, i32 0, i32 3
  store i8* %22, i8** %23, align 8
  %24 = sub i64 %18, %2
  %25 = getelementptr inbounds %struct.png_control, %struct.png_control* %12, i32 0, i32 4
  store i64 %24, i64* %25, align 8
  br label %28

26:                                               ; preds = %14
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.29.151, i32 0, i32 0)) #24
  unreachable

27:                                               ; preds = %10, %5
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.30.152, i32 0, i32 0)) #24
  unreachable

28:                                               ; preds = %21, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_image_finish_read(%struct.png_image* %0, %struct.png_color_struct* %1, i8* %2, i32 %3, i8* %4) #11 {
  %6 = alloca %struct.png_image_read_control, align 8
  %magicptr = ptrtoint %struct.png_image* %0 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %106, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %102

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 4
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, 8
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 4
  %18 = load i32, i32* %17, align 4
  %19 = and i32 %18, 3
  %20 = add i32 %19, 1
  br label %21

21:                                               ; preds = %11, %16
  %22 = phi i32 [ %20, %16 ], [ 1, %11 ]
  %23 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = udiv i32 2147483647, %22
  %26 = icmp ule i32 %24, %25
  br i1 %26, label %27, label %100

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = mul i32 %29, %22
  %31 = icmp eq i32 %3, 0
  %spec.select = select i1 %31, i32 %30, i32 %3
  %32 = icmp slt i32 %spec.select, 0
  %33 = sub nsw i32 0, %spec.select
  %.02 = select i1 %32, i32 %33, i32 %spec.select
  %34 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 0
  %35 = load %struct.png_control*, %struct.png_control** %34, align 8
  %36 = icmp ne %struct.png_control* %35, null
  %37 = icmp ne i8* %2, null
  %or.cond = select i1 %36, i1 %37, i1 false
  %38 = icmp uge i32 %.02, %30
  %or.cond4 = select i1 %or.cond, i1 %38, i1 false
  br i1 %or.cond4, label %39, label %98

39:                                               ; preds = %27
  %40 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 3
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 4
  %43 = load i32, i32* %42, align 4
  %44 = and i32 %43, 8
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %52, label %46

46:                                               ; preds = %39
  %47 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 4
  %48 = load i32, i32* %47, align 4
  %49 = and i32 %48, 4
  %50 = lshr i32 %49, 2
  %51 = add i32 %50, 1
  br label %52

52:                                               ; preds = %39, %46
  %53 = phi i32 [ %51, %46 ], [ 1, %39 ]
  %54 = udiv i32 -1, %53
  %55 = udiv i32 %54, %.02
  %56 = icmp ule i32 %41, %55
  br i1 %56, label %57, label %96

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 4
  %59 = load i32, i32* %58, align 4
  %60 = and i32 %59, 8
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %67, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 6
  %64 = load i32, i32* %63, align 4
  %65 = icmp ugt i32 %64, 0
  %66 = icmp ne i8* %4, null
  %or.cond5 = select i1 %65, i1 %66, i1 false
  br i1 %or.cond5, label %67, label %94

67:                                               ; preds = %62, %57
  %68 = bitcast %struct.png_image_read_control* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 80, i1 false)
  %69 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %6, i32 0, i32 0
  store %struct.png_image* %0, %struct.png_image** %69, align 8
  %70 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %6, i32 0, i32 1
  store i8* %2, i8** %70, align 8
  %71 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %6, i32 0, i32 2
  store i32 %spec.select, i32* %71, align 8
  %72 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %6, i32 0, i32 3
  store i8* %4, i8** %72, align 8
  %73 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %6, i32 0, i32 4
  store %struct.png_color_struct* %1, %struct.png_color_struct** %73, align 8
  %74 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %6, i32 0, i32 5
  store i8* null, i8** %74, align 8
  %75 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 4
  %76 = load i32, i32* %75, align 4
  %77 = and i32 %76, 8
  %78 = icmp ne i32 %77, 0
  br i1 %78, label %79, label %90

79:                                               ; preds = %67
  %80 = bitcast %struct.png_image_read_control* %6 to i8*
  %81 = call i32 @png_safe_execute(%struct.png_image* %0, i32 (i8*)* @png_image_read_colormap, i8* %80)
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %83, label %87

83:                                               ; preds = %79
  %84 = bitcast %struct.png_image_read_control* %6 to i8*
  %85 = call i32 @png_safe_execute(%struct.png_image* %0, i32 (i8*)* @png_image_read_colormapped, i8* %84)
  %86 = icmp ne i32 %85, 0
  br label %87

87:                                               ; preds = %83, %79
  %88 = phi i1 [ false, %79 ], [ %86, %83 ]
  %89 = zext i1 %88 to i32
  br label %93

90:                                               ; preds = %67
  %91 = bitcast %struct.png_image_read_control* %6 to i8*
  %92 = call i32 @png_safe_execute(%struct.png_image* %0, i32 (i8*)* @png_image_read_direct, i8* %91)
  br label %93

93:                                               ; preds = %90, %87
  %.01 = phi i32 [ %89, %87 ], [ %92, %90 ]
  call void @png_image_free(%struct.png_image* %0)
  br label %106

94:                                               ; preds = %62
  %95 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.21.153, i32 0, i32 0))
  br label %106

96:                                               ; preds = %52
  %97 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.22.154, i32 0, i32 0))
  br label %106

98:                                               ; preds = %27
  %99 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.23.155, i32 0, i32 0))
  br label %106

100:                                              ; preds = %21
  %101 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.24.156, i32 0, i32 0))
  br label %106

102:                                              ; preds = %7
  %103 = icmp ne %struct.png_image* %0, null
  br i1 %103, label %104, label %106

104:                                              ; preds = %102
  %105 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.25.157, i32 0, i32 0))
  br label %106

106:                                              ; preds = %5, %102, %104, %100, %98, %96, %94, %93
  %.0 = phi i32 [ %.01, %93 ], [ %95, %94 ], [ %97, %96 ], [ %99, %98 ], [ %101, %100 ], [ %105, %104 ], [ 0, %102 ], [ 0, %5 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_image_read_colormap(i8* %0) #11 {
  %2 = alloca %struct.png_color_16_struct, align 2
  %3 = alloca %struct.png_color_16_struct, align 2
  %4 = alloca %struct.png_color_16_struct, align 2
  %5 = alloca %struct.png_color_16_struct, align 2
  %6 = bitcast i8* %0 to %struct.png_image_read_control*
  %7 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %6, i32 0, i32 0
  %8 = load %struct.png_image*, %struct.png_image** %7, align 8
  %9 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 0
  %10 = load %struct.png_control*, %struct.png_control** %9, align 8
  %11 = getelementptr inbounds %struct.png_control, %struct.png_control* %10, i32 0, i32 0
  %12 = load %struct.png_struct_def*, %struct.png_struct_def** %11, align 8
  %13 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 4
  %16 = icmp ne i32 %15, 0
  %17 = zext i1 %16 to i64
  %18 = select i1 %16, i32 2, i32 1
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 61
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = and i32 %21, 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %31, label %24

24:                                               ; preds = %1
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 55
  %26 = load i16, i16* %25, align 8
  %27 = zext i16 %26 to i32
  %28 = icmp sgt i32 %27, 0
  %29 = and i32 %14, 1
  %30 = icmp eq i32 %29, 0
  %or.cond = select i1 %28, i1 %30, i1 false
  br i1 %or.cond, label %32, label %58

31:                                               ; preds = %1
  %.old = and i32 %14, 1
  %.old78 = icmp eq i32 %.old, 0
  br i1 %.old78, label %32, label %58

32:                                               ; preds = %24, %31
  %33 = icmp eq i32 %18, 2
  br i1 %33, label %60, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %6, i32 0, i32 4
  %36 = load %struct.png_color_struct*, %struct.png_color_struct** %35, align 8
  %37 = icmp eq %struct.png_color_struct* %36, null
  br i1 %37, label %38, label %39

38:                                               ; preds = %34
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.31.169, i32 0, i32 0)) #24
  unreachable

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %6, i32 0, i32 4
  %41 = load %struct.png_color_struct*, %struct.png_color_struct** %40, align 8
  %42 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %41, i32 0, i32 1
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = and i32 %14, 2
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %60

47:                                               ; preds = %39
  %48 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %6, i32 0, i32 4
  %49 = load %struct.png_color_struct*, %struct.png_color_struct** %48, align 8
  %50 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %49, i32 0, i32 0
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %6, i32 0, i32 4
  %54 = load %struct.png_color_struct*, %struct.png_color_struct** %53, align 8
  %55 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %54, i32 0, i32 2
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  br label %60

58:                                               ; preds = %31, %24
  %59 = icmp eq i32 %18, 2
  %. = select i1 %59, i32 65535, i32 255
  br label %60

60:                                               ; preds = %32, %47, %39, %58
  %.349 = phi i32 [ %., %58 ], [ 0, %32 ], [ %57, %47 ], [ %44, %39 ]
  %.244 = phi i32 [ %., %58 ], [ 0, %32 ], [ %44, %47 ], [ %44, %39 ]
  %.340 = phi i32 [ %., %58 ], [ 0, %32 ], [ %52, %47 ], [ %44, %39 ]
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 144
  %62 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %61, i32 0, i32 4
  %63 = load i16, i16* %62, align 2
  %64 = zext i16 %63 to i32
  %65 = and i32 %64, 1
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %90

67:                                               ; preds = %60
  %68 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 62
  %69 = load i8, i8* %68, align 8
  %70 = zext i8 %69 to i32
  %71 = icmp eq i32 %70, 16
  br i1 %71, label %72, label %80

72:                                               ; preds = %67
  %73 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 5
  %74 = load i32, i32* %73, align 8
  %75 = and i32 %74, 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %80

77:                                               ; preds = %72
  %78 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 144
  %79 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %78, i32 0, i32 0
  store i32 100000, i32* %79, align 8
  br label %83

80:                                               ; preds = %72, %67
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 144
  %82 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %81, i32 0, i32 0
  store i32 45455, i32* %82, align 8
  br label %83

83:                                               ; preds = %80, %77
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 144
  %85 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %84, i32 0, i32 4
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = or i32 %87, 1
  %89 = trunc i32 %88 to i16
  store i16 %89, i16* %85, align 2
  br label %90

90:                                               ; preds = %83, %60
  %91 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 61
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  switch i32 %93, label %756 [
    i32 0, label %94
    i32 4, label %194
    i32 2, label %353
    i32 6, label %353
    i32 3, label %635
  ]

94:                                               ; preds = %90
  %95 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 62
  %96 = load i8, i8* %95, align 8
  %97 = zext i8 %96 to i32
  %98 = icmp sle i32 %97, 8
  br i1 %98, label %99, label %141

99:                                               ; preds = %94
  %100 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 62
  %101 = load i8, i8* %100, align 8
  %102 = zext i8 %101 to i32
  %103 = shl i32 1, %102
  %104 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 6
  %105 = load i32, i32* %104, align 4
  %106 = icmp ugt i32 %103, %105
  br i1 %106, label %107, label %108

107:                                              ; preds = %99
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.32.170, i32 0, i32 0)) #24
  unreachable

108:                                              ; preds = %99
  %109 = sub i32 %103, 1
  %110 = udiv i32 255, %109
  %111 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 55
  %112 = load i16, i16* %111, align 8
  %113 = zext i16 %112 to i32
  %114 = icmp sgt i32 %113, 0
  br i1 %114, label %115, label %126

115:                                              ; preds = %108
  %116 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 90
  %117 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %116, i32 0, i32 4
  %118 = load i16, i16* %117, align 8
  %119 = zext i16 %118 to i32
  %120 = and i32 %14, 1
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %126

122:                                              ; preds = %115
  %123 = icmp eq i32 %18, 2
  %124 = zext i1 %123 to i64
  %125 = select i1 %123, i32 65535, i32 255
  br label %126

126:                                              ; preds = %115, %122, %108
  %.165 = phi i32 [ 0, %108 ], [ %125, %122 ], [ 0, %115 ]
  %.063 = phi i32 [ 256, %108 ], [ %119, %122 ], [ %119, %115 ]
  br label %127

127:                                              ; preds = %126, %131
  %.061108 = phi i32 [ 0, %126 ], [ %132, %131 ]
  %.062107 = phi i32 [ 0, %126 ], [ %133, %131 ]
  %128 = icmp ne i32 %.061108, %.063
  br i1 %128, label %129, label %130

129:                                              ; preds = %127
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 %.061108, i32 %.062107, i32 %.062107, i32 %.062107, i32 255, i32 3)
  br label %131

130:                                              ; preds = %127
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 %.061108, i32 %.340, i32 %.244, i32 %.349, i32 %.165, i32 %18)
  br label %131

131:                                              ; preds = %129, %130
  %.061109 = phi i32 [ %.061108, %129 ], [ %.061108, %130 ]
  %132 = add i32 %.061109, 1
  %133 = add i32 %.062107, %110
  %134 = icmp ult i32 %132, %103
  br i1 %134, label %127, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 62
  %137 = load i8, i8* %136, align 8
  %138 = zext i8 %137 to i32
  %139 = icmp slt i32 %138, 8
  br i1 %139, label %140, label %._crit_edge134

._crit_edge134:                                   ; preds = %135
  br label %757

140:                                              ; preds = %135
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_packing to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %12)
  br label %757

141:                                              ; preds = %94
  %142 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 6
  %143 = load i32, i32* %142, align 4
  %144 = icmp ugt i32 256, %143
  br i1 %144, label %145, label %146

145:                                              ; preds = %141
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.33.171, i32 0, i32 0)) #24
  unreachable

146:                                              ; preds = %141
  %147 = call i32 @make_gray_colormap(%struct.png_image_read_control* %6)
  %148 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 55
  %149 = load i16, i16* %148, align 8
  %150 = zext i16 %149 to i32
  %151 = icmp sgt i32 %150, 0
  br i1 %151, label %152, label %757

152:                                              ; preds = %146
  %153 = and i32 %14, 1
  %154 = icmp ne i32 %153, 0
  br i1 %154, label %193, label %155

155:                                              ; preds = %152
  %156 = icmp eq i32 %.340, %.244
  %157 = icmp eq i32 %.244, %.349
  %or.cond80 = select i1 %156, i1 %157, i1 false
  br i1 %or.cond80, label %158, label %189

158:                                              ; preds = %155
  %159 = icmp eq i32 %18, 2
  br i1 %159, label %160, label %182

160:                                              ; preds = %158
  %161 = mul i32 %.244, 255
  %162 = lshr i32 %161, 15
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %163
  %165 = load i16, i16* %164, align 2
  %166 = zext i16 %165 to i32
  %167 = mul i32 %.244, 255
  %168 = and i32 %167, 32767
  %169 = mul i32 %.244, 255
  %170 = lshr i32 %169, 15
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %171
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = mul i32 %168, %174
  %176 = lshr i32 %175, 12
  %177 = add i32 %166, %176
  %178 = lshr i32 %177, 8
  %179 = and i32 255, %178
  %180 = trunc i32 %179 to i8
  %181 = zext i8 %180 to i32
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 %181, i32 %.244, i32 %.244, i32 %.244, i32 65535, i32 2)
  br label %182

182:                                              ; preds = %160, %158
  %.067 = phi i32 [ %181, %160 ], [ %.244, %158 ]
  %183 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 0
  store i8 0, i8* %183, align 2
  %184 = trunc i32 %.067 to i16
  %185 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 3
  store i16 %184, i16* %185, align 2
  %186 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 2
  store i16 %184, i16* %186, align 2
  %187 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 1
  store i16 %184, i16* %187, align 2
  %188 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 4
  store i16 %184, i16* %188, align 2
  call void @png_set_background_fixed(%struct.png_struct_def* %12, %struct.png_color_16_struct* %2, i32 1, i32 0, i32 0)
  br label %757

189:                                              ; preds = %155
  %190 = icmp eq i32 %18, 2
  %191 = zext i1 %190 to i64
  %192 = select i1 %190, i32 65535, i32 255
  br label %193

193:                                              ; preds = %152, %189
  %.066 = phi i32 [ %192, %189 ], [ 0, %152 ]
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 254, i32 %.340, i32 %.244, i32 %.349, i32 %.066, i32 %18)
  br label %757

194:                                              ; preds = %90
  %195 = and i32 %14, 1
  %196 = icmp ne i32 %195, 0
  br i1 %196, label %197, label %204

197:                                              ; preds = %194
  %198 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 6
  %199 = load i32, i32* %198, align 4
  %200 = icmp ugt i32 256, %199
  br i1 %200, label %201, label %202

201:                                              ; preds = %197
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.34.172, i32 0, i32 0)) #24
  unreachable

202:                                              ; preds = %197
  %203 = call i32 @make_ga_colormap(%struct.png_image_read_control* %6)
  br label %757

204:                                              ; preds = %194
  %205 = and i32 %14, 2
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %210, label %207

207:                                              ; preds = %204
  %208 = icmp eq i32 %.340, %.244
  %209 = icmp eq i32 %.244, %.349
  %or.cond82 = select i1 %208, i1 %209, i1 false
  br i1 %or.cond82, label %210, label %247

210:                                              ; preds = %207, %204
  %211 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 6
  %212 = load i32, i32* %211, align 4
  %213 = icmp ugt i32 256, %212
  br i1 %213, label %214, label %215

214:                                              ; preds = %210
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.35.173, i32 0, i32 0)) #24
  unreachable

215:                                              ; preds = %210
  %216 = call i32 @make_gray_colormap(%struct.png_image_read_control* %6)
  %217 = icmp eq i32 %18, 2
  br i1 %217, label %218, label %240

218:                                              ; preds = %215
  %219 = mul i32 %.244, 255
  %220 = lshr i32 %219, 15
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %221
  %223 = load i16, i16* %222, align 2
  %224 = zext i16 %223 to i32
  %225 = mul i32 %.244, 255
  %226 = and i32 %225, 32767
  %227 = mul i32 %.244, 255
  %228 = lshr i32 %227, 15
  %229 = zext i32 %228 to i64
  %230 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %229
  %231 = load i8, i8* %230, align 1
  %232 = zext i8 %231 to i32
  %233 = mul i32 %226, %232
  %234 = lshr i32 %233, 12
  %235 = add i32 %224, %234
  %236 = lshr i32 %235, 8
  %237 = and i32 255, %236
  %238 = trunc i32 %237 to i8
  %239 = zext i8 %238 to i32
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 %239, i32 %.244, i32 %.244, i32 %.244, i32 65535, i32 2)
  br label %240

240:                                              ; preds = %218, %215
  %.068 = phi i32 [ %239, %218 ], [ %.244, %215 ]
  %241 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %3, i32 0, i32 0
  store i8 0, i8* %241, align 2
  %242 = trunc i32 %.068 to i16
  %243 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %3, i32 0, i32 3
  store i16 %242, i16* %243, align 2
  %244 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %3, i32 0, i32 2
  store i16 %242, i16* %244, align 2
  %245 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %3, i32 0, i32 1
  store i16 %242, i16* %245, align 2
  %246 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %3, i32 0, i32 4
  store i16 %242, i16* %246, align 2
  call void @png_set_background_fixed(%struct.png_struct_def* %12, %struct.png_color_16_struct* %3, i32 1, i32 0, i32 0)
  br label %757

247:                                              ; preds = %207
  %248 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 6
  %249 = load i32, i32* %248, align 4
  %250 = icmp ugt i32 256, %249
  br i1 %250, label %251, label %.preheader

.preheader:                                       ; preds = %247
  br label %252

251:                                              ; preds = %247
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.36.174, i32 0, i32 0)) #24
  unreachable

252:                                              ; preds = %.preheader, %252
  %lsr.iv136 = phi i32 [ 115, %.preheader ], [ %lsr.iv.next137, %252 ]
  %.069116 = phi i32 [ 0, %.preheader ], [ %254, %252 ]
  %253 = udiv i32 %lsr.iv136, 231
  %254 = add nuw nsw i32 %.069116, 1
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 %.069116, i32 %253, i32 %253, i32 %253, i32 255, i32 1)
  %lsr.iv.next137 = add nuw nsw i32 %lsr.iv136, 256
  %exitcond117 = icmp ne i32 %254, 231
  br i1 %exitcond117, label %252, label %255

255:                                              ; preds = %252
  %256 = add i32 231, 1
  %257 = icmp eq i32 %18, 2
  %258 = zext i1 %257 to i64
  %259 = select i1 %257, i32 65535, i32 255
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 231, i32 %.340, i32 %.244, i32 %.349, i32 %259, i32 %18)
  %260 = icmp eq i32 %18, 1
  br i1 %260, label %261, label %274

261:                                              ; preds = %255
  %262 = zext i32 %.340 to i64
  %263 = getelementptr inbounds [256 x i16], [256 x i16]* @png_sRGB_table, i64 0, i64 %262
  %264 = load i16, i16* %263, align 2
  %265 = zext i16 %264 to i32
  %266 = zext i32 %.244 to i64
  %267 = getelementptr inbounds [256 x i16], [256 x i16]* @png_sRGB_table, i64 0, i64 %266
  %268 = load i16, i16* %267, align 2
  %269 = zext i16 %268 to i32
  %270 = zext i32 %.349 to i64
  %271 = getelementptr inbounds [256 x i16], [256 x i16]* @png_sRGB_table, i64 0, i64 %270
  %272 = load i16, i16* %271, align 2
  %273 = zext i16 %272 to i32
  br label %274

274:                                              ; preds = %261, %255
  %.450 = phi i32 [ %273, %261 ], [ %.349, %255 ]
  %.345 = phi i32 [ %269, %261 ], [ %.244, %255 ]
  %.441 = phi i32 [ %265, %261 ], [ %.340, %255 ]
  br label %275

275:                                              ; preds = %274, %351
  %.170114 = phi i32 [ %256, %274 ], [ %.271.lcssa, %351 ]
  %.072113 = phi i32 [ 1, %274 ], [ %352, %351 ]
  %276 = mul nuw nsw i32 51, %.072113
  %277 = sub nuw nsw i32 255, %276
  %278 = mul i32 %277, %.441
  %279 = sub nuw nsw i32 255, %276
  %280 = mul i32 %279, %.345
  %281 = sub nuw nsw i32 255, %276
  %282 = mul i32 %281, %.450
  br label %283

283:                                              ; preds = %275, %283
  %lsr.iv = phi i64 [ 0, %275 ], [ %lsr.iv.next, %283 ]
  %.271111 = phi i32 [ %.170114, %275 ], [ %287, %283 ]
  %uglygep = getelementptr i8, i8* bitcast ([256 x i16]* @png_sRGB_table to i8*), i64 %lsr.iv
  %uglygep135 = bitcast i8* %uglygep to i16*
  %284 = load i16, i16* %uglygep135, align 2
  %285 = zext i16 %284 to i32
  %286 = mul i32 %285, %276
  %287 = add i32 %.271111, 1
  %288 = add i32 %286, %278
  %289 = lshr i32 %288, 15
  %290 = zext i32 %289 to i64
  %291 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %290
  %292 = load i16, i16* %291, align 2
  %293 = zext i16 %292 to i32
  %294 = add i32 %286, %278
  %295 = and i32 %294, 32767
  %296 = add i32 %286, %278
  %297 = lshr i32 %296, 15
  %298 = zext i32 %297 to i64
  %299 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %298
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i32
  %302 = mul i32 %295, %301
  %303 = lshr i32 %302, 12
  %304 = add i32 %293, %303
  %305 = lshr i32 %304, 8
  %306 = and i32 255, %305
  %307 = trunc i32 %306 to i8
  %308 = zext i8 %307 to i32
  %309 = add i32 %286, %280
  %310 = lshr i32 %309, 15
  %311 = zext i32 %310 to i64
  %312 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %311
  %313 = load i16, i16* %312, align 2
  %314 = zext i16 %313 to i32
  %315 = add i32 %286, %280
  %316 = and i32 %315, 32767
  %317 = add i32 %286, %280
  %318 = lshr i32 %317, 15
  %319 = zext i32 %318 to i64
  %320 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %319
  %321 = load i8, i8* %320, align 1
  %322 = zext i8 %321 to i32
  %323 = mul i32 %316, %322
  %324 = lshr i32 %323, 12
  %325 = add i32 %314, %324
  %326 = lshr i32 %325, 8
  %327 = and i32 255, %326
  %328 = trunc i32 %327 to i8
  %329 = zext i8 %328 to i32
  %330 = add i32 %286, %282
  %331 = lshr i32 %330, 15
  %332 = zext i32 %331 to i64
  %333 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %332
  %334 = load i16, i16* %333, align 2
  %335 = zext i16 %334 to i32
  %336 = add i32 %286, %282
  %337 = and i32 %336, 32767
  %338 = add i32 %286, %282
  %339 = lshr i32 %338, 15
  %340 = zext i32 %339 to i64
  %341 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %340
  %342 = load i8, i8* %341, align 1
  %343 = zext i8 %342 to i32
  %344 = mul i32 %337, %343
  %345 = lshr i32 %344, 12
  %346 = add i32 %335, %345
  %347 = lshr i32 %346, 8
  %348 = and i32 255, %347
  %349 = trunc i32 %348 to i8
  %350 = zext i8 %349 to i32
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 %.271111, i32 %308, i32 %329, i32 %350, i32 255, i32 1)
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 102
  %exitcond = icmp ne i64 %lsr.iv.next, 612
  br i1 %exitcond, label %283, label %351

351:                                              ; preds = %283
  %.271.lcssa = phi i32 [ %287, %283 ]
  %352 = add nuw nsw i32 %.072113, 1
  %exitcond115 = icmp ne i32 %352, 5
  br i1 %exitcond115, label %275, label %.loopexit

353:                                              ; preds = %90, %90
  %354 = and i32 %14, 2
  %355 = icmp eq i32 %354, 0
  br i1 %355, label %356, label %460

356:                                              ; preds = %353
  call void @png_set_rgb_to_gray_fixed(%struct.png_struct_def* %12, i32 1, i32 -1, i32 -1)
  %357 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 61
  %358 = load i8, i8* %357, align 1
  %359 = zext i8 %358 to i32
  %360 = icmp eq i32 %359, 6
  br i1 %360, label %368, label %361

361:                                              ; preds = %356
  %362 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 55
  %363 = load i16, i16* %362, align 8
  %364 = zext i16 %363 to i32
  %365 = icmp sgt i32 %364, 0
  %366 = and i32 %14, 1
  %367 = icmp ne i32 %366, 0
  %or.cond85 = select i1 %365, i1 %367, i1 false
  br i1 %or.cond85, label %369, label %376

368:                                              ; preds = %356
  %.old83 = and i32 %14, 1
  %.old84 = icmp ne i32 %.old83, 0
  br i1 %.old84, label %369, label %376

369:                                              ; preds = %361, %368
  %370 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 6
  %371 = load i32, i32* %370, align 4
  %372 = icmp ugt i32 256, %371
  br i1 %372, label %373, label %374

373:                                              ; preds = %369
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.37.175, i32 0, i32 0)) #24
  unreachable

374:                                              ; preds = %369
  %375 = call i32 @make_ga_colormap(%struct.png_image_read_control* %6)
  br label %757

376:                                              ; preds = %368, %361
  %377 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 6
  %378 = load i32, i32* %377, align 4
  %379 = icmp ugt i32 256, %378
  br i1 %379, label %380, label %381

380:                                              ; preds = %376
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.38.176, i32 0, i32 0)) #24
  unreachable

381:                                              ; preds = %376
  %382 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 61
  %383 = load i8, i8* %382, align 1
  %384 = zext i8 %383 to i32
  %385 = icmp eq i32 %384, 6
  br i1 %385, label %391, label %386

386:                                              ; preds = %381
  %387 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 55
  %388 = load i16, i16* %387, align 8
  %389 = zext i16 %388 to i32
  %390 = icmp sgt i32 %389, 0
  br i1 %390, label %391, label %399

391:                                              ; preds = %386, %381
  %392 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 144
  %393 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %392, i32 0, i32 0
  %394 = load i32, i32* %393, align 8
  %395 = call i32 @png_gamma_not_sRGB(i32 %394)
  %396 = icmp ne i32 %395, 0
  br i1 %396, label %397, label %399

397:                                              ; preds = %391
  %398 = call i32 @make_gray_file_colormap(%struct.png_image_read_control* %6)
  br label %401

399:                                              ; preds = %391, %386
  %400 = call i32 @make_gray_colormap(%struct.png_image_read_control* %6)
  br label %401

401:                                              ; preds = %399, %397
  %.123 = phi i32 [ 3, %397 ], [ 1, %399 ]
  %.3 = phi i32 [ %398, %397 ], [ %400, %399 ]
  %402 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 61
  %403 = load i8, i8* %402, align 1
  %404 = zext i8 %403 to i32
  %405 = icmp eq i32 %404, 6
  br i1 %405, label %411, label %406

406:                                              ; preds = %401
  %407 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 55
  %408 = load i16, i16* %407, align 8
  %409 = zext i16 %408 to i32
  %410 = icmp sgt i32 %409, 0
  br i1 %410, label %411, label %757

411:                                              ; preds = %406, %401
  %412 = icmp eq i32 %.123, 3
  br i1 %412, label %413, label %429

413:                                              ; preds = %411
  %414 = icmp eq i32 %18, 1
  br i1 %414, label %415, label %420

415:                                              ; preds = %413
  %416 = zext i32 %.244 to i64
  %417 = getelementptr inbounds [256 x i16], [256 x i16]* @png_sRGB_table, i64 0, i64 %416
  %418 = load i16, i16* %417, align 2
  %419 = zext i16 %418 to i32
  br label %420

420:                                              ; preds = %415, %413
  %.075 = phi i32 [ %419, %415 ], [ %.244, %413 ]
  %421 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 144
  %422 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %421, i32 0, i32 0
  %423 = load i32, i32* %422, align 8
  %424 = call zeroext i16 @png_gamma_16bit_correct(i32 %.075, i32 %423)
  %425 = zext i16 %424 to i32
  %426 = mul i32 %425, 255
  %427 = add i32 %426, 32895
  %428 = lshr i32 %427, 16
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 %428, i32 %.244, i32 %.244, i32 %.244, i32 0, i32 %18)
  br label %453

429:                                              ; preds = %411
  %430 = icmp eq i32 %18, 2
  br i1 %430, label %431, label %453

431:                                              ; preds = %429
  %432 = mul i32 %.244, 255
  %433 = lshr i32 %432, 15
  %434 = zext i32 %433 to i64
  %435 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %434
  %436 = load i16, i16* %435, align 2
  %437 = zext i16 %436 to i32
  %438 = mul i32 %.244, 255
  %439 = and i32 %438, 32767
  %440 = mul i32 %.244, 255
  %441 = lshr i32 %440, 15
  %442 = zext i32 %441 to i64
  %443 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %442
  %444 = load i8, i8* %443, align 1
  %445 = zext i8 %444 to i32
  %446 = mul i32 %439, %445
  %447 = lshr i32 %446, 12
  %448 = add i32 %437, %447
  %449 = lshr i32 %448, 8
  %450 = and i32 255, %449
  %451 = trunc i32 %450 to i8
  %452 = zext i8 %451 to i32
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 %452, i32 %.244, i32 %.244, i32 %.244, i32 0, i32 2)
  br label %453

453:                                              ; preds = %429, %431, %420
  %.277 = phi i32 [ %428, %420 ], [ %452, %431 ], [ %.244, %429 ]
  %454 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %4, i32 0, i32 0
  store i8 0, i8* %454, align 2
  %455 = trunc i32 %.277 to i16
  %456 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %4, i32 0, i32 3
  store i16 %455, i16* %456, align 2
  %457 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %4, i32 0, i32 2
  store i16 %455, i16* %457, align 2
  %458 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %4, i32 0, i32 1
  store i16 %455, i16* %458, align 2
  %459 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %4, i32 0, i32 4
  store i16 %455, i16* %459, align 2
  call void @png_set_background_fixed(%struct.png_struct_def* %12, %struct.png_color_16_struct* %4, i32 1, i32 0, i32 0)
  br label %757

460:                                              ; preds = %353
  %461 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 61
  %462 = load i8, i8* %461, align 1
  %463 = zext i8 %462 to i32
  %464 = icmp eq i32 %463, 6
  br i1 %464, label %470, label %465

465:                                              ; preds = %460
  %466 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 55
  %467 = load i16, i16* %466, align 8
  %468 = zext i16 %467 to i32
  %469 = icmp sgt i32 %468, 0
  br i1 %469, label %470, label %628

470:                                              ; preds = %465, %460
  %471 = and i32 %14, 1
  %472 = icmp ne i32 %471, 0
  br i1 %472, label %473, label %494

473:                                              ; preds = %470
  %474 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 6
  %475 = load i32, i32* %474, align 4
  %476 = icmp ugt i32 244, %475
  br i1 %476, label %477, label %478

477:                                              ; preds = %473
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.39.177, i32 0, i32 0)) #24
  unreachable

478:                                              ; preds = %473
  %479 = call i32 @make_rgb_colormap(%struct.png_image_read_control* %6)
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 %479, i32 255, i32 255, i32 255, i32 0, i32 1)
  %480 = add i32 %479, 1
  br label %.preheader91

.preheader91:                                     ; preds = %478, %490
  %.5123 = phi i32 [ %480, %478 ], [ %.6.lcssa, %490 ]
  %.073122 = phi i32 [ 0, %478 ], [ %492, %490 ]
  br label %.preheader90

.preheader90:                                     ; preds = %.preheader91, %486
  %.6121 = phi i32 [ %.5123, %.preheader91 ], [ %.7.lcssa, %486 ]
  %.060120 = phi i32 [ 0, %.preheader91 ], [ %488, %486 ]
  br label %481

481:                                              ; preds = %.preheader90, %481
  %.07119 = phi i32 [ 0, %.preheader90 ], [ %484, %481 ]
  %.7118 = phi i32 [ %.6121, %.preheader90 ], [ %482, %481 ]
  %482 = add i32 %.7118, 1
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 %.7118, i32 %.073122, i32 %.060120, i32 %.07119, i32 128, i32 1)
  %483 = shl i32 %.07119, 1
  %484 = or i32 %483, 127
  %485 = icmp ult i32 %484, 256
  br i1 %485, label %481, label %486

486:                                              ; preds = %481
  %.7.lcssa = phi i32 [ %482, %481 ]
  %487 = shl i32 %.060120, 1
  %488 = or i32 %487, 127
  %489 = icmp ult i32 %488, 256
  br i1 %489, label %.preheader90, label %490

490:                                              ; preds = %486
  %.6.lcssa = phi i32 [ %.7.lcssa, %486 ]
  %491 = shl i32 %.073122, 1
  %492 = or i32 %491, 127
  %493 = icmp ult i32 %492, 256
  br i1 %493, label %.preheader91, label %.loopexit92

494:                                              ; preds = %470
  %495 = and i32 %14, 3
  %496 = add i32 %495, 1
  %497 = and i32 %14, 4
  %498 = lshr i32 %497, 2
  %499 = add i32 %498, 1
  %500 = mul i32 %496, %499
  %501 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 6
  %502 = load i32, i32* %501, align 4
  %503 = icmp ugt i32 244, %502
  br i1 %503, label %504, label %505

504:                                              ; preds = %494
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.40.178, i32 0, i32 0)) #24
  unreachable

505:                                              ; preds = %494
  %506 = call i32 @make_rgb_colormap(%struct.png_image_read_control* %6)
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 %506, i32 %.340, i32 %.244, i32 %.349, i32 0, i32 %18)
  %507 = icmp eq i32 %18, 2
  br i1 %507, label %508, label %572

508:                                              ; preds = %505
  %509 = mul i32 %.340, 255
  %510 = lshr i32 %509, 15
  %511 = zext i32 %510 to i64
  %512 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %511
  %513 = load i16, i16* %512, align 2
  %514 = zext i16 %513 to i32
  %515 = mul i32 %.340, 255
  %516 = and i32 %515, 32767
  %517 = mul i32 %.340, 255
  %518 = lshr i32 %517, 15
  %519 = zext i32 %518 to i64
  %520 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %519
  %521 = load i8, i8* %520, align 1
  %522 = zext i8 %521 to i32
  %523 = mul i32 %516, %522
  %524 = lshr i32 %523, 12
  %525 = add i32 %514, %524
  %526 = lshr i32 %525, 8
  %527 = and i32 255, %526
  %528 = trunc i32 %527 to i8
  %529 = zext i8 %528 to i32
  %530 = mul i32 %.244, 255
  %531 = lshr i32 %530, 15
  %532 = zext i32 %531 to i64
  %533 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %532
  %534 = load i16, i16* %533, align 2
  %535 = zext i16 %534 to i32
  %536 = mul i32 %.244, 255
  %537 = and i32 %536, 32767
  %538 = mul i32 %.244, 255
  %539 = lshr i32 %538, 15
  %540 = zext i32 %539 to i64
  %541 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %540
  %542 = load i8, i8* %541, align 1
  %543 = zext i8 %542 to i32
  %544 = mul i32 %537, %543
  %545 = lshr i32 %544, 12
  %546 = add i32 %535, %545
  %547 = lshr i32 %546, 8
  %548 = and i32 255, %547
  %549 = trunc i32 %548 to i8
  %550 = zext i8 %549 to i32
  %551 = mul i32 %.349, 255
  %552 = lshr i32 %551, 15
  %553 = zext i32 %552 to i64
  %554 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %553
  %555 = load i16, i16* %554, align 2
  %556 = zext i16 %555 to i32
  %557 = mul i32 %.349, 255
  %558 = and i32 %557, 32767
  %559 = mul i32 %.349, 255
  %560 = lshr i32 %559, 15
  %561 = zext i32 %560 to i64
  %562 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %561
  %563 = load i8, i8* %562, align 1
  %564 = zext i8 %563 to i32
  %565 = mul i32 %558, %564
  %566 = lshr i32 %565, 12
  %567 = add i32 %556, %566
  %568 = lshr i32 %567, 8
  %569 = and i32 255, %568
  %570 = trunc i32 %569 to i8
  %571 = zext i8 %570 to i32
  br label %572

572:                                              ; preds = %505, %508
  %.05 = phi i32 [ %529, %508 ], [ %.340, %505 ]
  %.03 = phi i32 [ %550, %508 ], [ %.244, %505 ]
  %.02 = phi i32 [ %571, %508 ], [ %.244, %505 ]
  %573 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %6, i32 0, i32 3
  %574 = load i8*, i8** %573, align 8
  %575 = mul i32 %500, %506
  %576 = zext i32 %575 to i64
  %577 = getelementptr inbounds i8, i8* %574, i64 %576
  %578 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %6, i32 0, i32 3
  %579 = load i8*, i8** %578, align 8
  %580 = mul i32 %.05, 5
  %581 = add i32 %580, 130
  %582 = lshr i32 %581, 8
  %583 = mul i32 6, %582
  %584 = mul i32 %.03, 5
  %585 = add i32 %584, 130
  %586 = lshr i32 %585, 8
  %587 = add i32 %583, %586
  %588 = mul i32 6, %587
  %589 = mul i32 %.02, 5
  %590 = add i32 %589, 130
  %591 = lshr i32 %590, 8
  %592 = add i32 %588, %591
  %593 = trunc i32 %592 to i8
  %594 = zext i8 %593 to i32
  %595 = mul i32 %500, %594
  %596 = zext i32 %595 to i64
  %597 = getelementptr inbounds i8, i8* %579, i64 %596
  %598 = zext i32 %500 to i64
  %599 = call i32 @memcmp(i8* %577, i8* %597, i64 %598) #26
  %600 = icmp ne i32 %599, 0
  br i1 %600, label %601, label %619

601:                                              ; preds = %572
  %602 = add i32 %506, 1
  br label %.preheader99

.preheader99:                                     ; preds = %601, %615
  %.16129 = phi i32 [ 0, %601 ], [ %617, %615 ]
  %.8128 = phi i32 [ %602, %601 ], [ %.9.lcssa, %615 ]
  br label %.preheader98

.preheader98:                                     ; preds = %.preheader99, %611
  %.14127 = phi i32 [ 0, %.preheader99 ], [ %613, %611 ]
  %.9126 = phi i32 [ %.8128, %.preheader99 ], [ %.10.lcssa, %611 ]
  br label %603

603:                                              ; preds = %.preheader98, %603
  %.1125 = phi i32 [ 0, %.preheader98 ], [ %609, %603 ]
  %.10124 = phi i32 [ %.9126, %.preheader98 ], [ %604, %603 ]
  %604 = add i32 %.10124, 1
  %605 = call i32 @png_colormap_compose(%struct.png_image_read_control* %6, i32 %.16129, i32 1, i32 128, i32 %.340, i32 %18)
  %606 = call i32 @png_colormap_compose(%struct.png_image_read_control* %6, i32 %.14127, i32 1, i32 128, i32 %.244, i32 %18)
  %607 = call i32 @png_colormap_compose(%struct.png_image_read_control* %6, i32 %.1125, i32 1, i32 128, i32 %.349, i32 %18)
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 %.10124, i32 %605, i32 %606, i32 %607, i32 0, i32 %18)
  %608 = shl i32 %.1125, 1
  %609 = or i32 %608, 127
  %610 = icmp ult i32 %609, 256
  br i1 %610, label %603, label %611

611:                                              ; preds = %603
  %.10.lcssa = phi i32 [ %604, %603 ]
  %612 = shl i32 %.14127, 1
  %613 = or i32 %612, 127
  %614 = icmp ult i32 %613, 256
  br i1 %614, label %.preheader98, label %615

615:                                              ; preds = %611
  %.9.lcssa = phi i32 [ %.10.lcssa, %611 ]
  %616 = shl i32 %.16129, 1
  %617 = or i32 %616, 127
  %618 = icmp ult i32 %617, 256
  br i1 %618, label %.preheader99, label %.loopexit100

619:                                              ; preds = %572
  %620 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 0
  store i8 0, i8* %620, align 2
  %621 = trunc i32 %.340 to i16
  %622 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 1
  store i16 %621, i16* %622, align 2
  %623 = trunc i32 %.244 to i16
  %624 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 2
  store i16 %623, i16* %624, align 2
  %625 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 4
  store i16 %623, i16* %625, align 2
  %626 = trunc i32 %.349 to i16
  %627 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %5, i32 0, i32 3
  store i16 %626, i16* %627, align 2
  call void @png_set_background_fixed(%struct.png_struct_def* %12, %struct.png_color_16_struct* %5, i32 1, i32 0, i32 0)
  br label %757

628:                                              ; preds = %465
  %629 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 6
  %630 = load i32, i32* %629, align 4
  %631 = icmp ugt i32 216, %630
  br i1 %631, label %632, label %633

632:                                              ; preds = %628
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.41.179, i32 0, i32 0)) #24
  unreachable

633:                                              ; preds = %628
  %634 = call i32 @make_rgb_colormap(%struct.png_image_read_control* %6)
  br label %757

635:                                              ; preds = %90
  %636 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 55
  %637 = load i16, i16* %636, align 8
  %638 = zext i16 %637 to i32
  %639 = icmp ugt i32 %638, 0
  br i1 %639, label %640, label %643

640:                                              ; preds = %635
  %641 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 89
  %642 = load i8*, i8** %641, align 8
  br label %643

643:                                              ; preds = %635, %640
  %644 = phi i8* [ %642, %640 ], [ null, %635 ]
  %645 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 52
  %646 = load %struct.png_color_struct*, %struct.png_color_struct** %645, align 8
  %647 = icmp ne i8* %644, null
  %648 = and i32 %14, 1
  %649 = icmp eq i32 %648, 0
  %650 = select i1 %647, i1 %649, i1 false
  %651 = zext i1 %650 to i32
  %652 = icmp eq i8* %644, null
  %.01 = select i1 %652, i32 0, i32 %638
  %653 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 53
  %654 = load i16, i16* %653, align 8
  %655 = zext i16 %654 to i32
  %656 = icmp ugt i32 %655, 256
  %.15 = select i1 %656, i32 256, i32 %655
  %657 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 6
  %658 = load i32, i32* %657, align 4
  %659 = icmp ugt i32 %.15, %658
  br i1 %659, label %663, label %.preheader106

.preheader106:                                    ; preds = %643
  %660 = icmp ne i32 %651, 0
  %661 = icmp eq i32 %18, 2
  %662 = icmp ult i32 0, %.15
  br i1 %662, label %.lr.ph, label %750

.lr.ph:                                           ; preds = %.preheader106
  br label %664

663:                                              ; preds = %643
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.42.180, i32 0, i32 0)) #24
  unreachable

664:                                              ; preds = %.lr.ph, %747
  %.0130 = phi i32 [ 0, %.lr.ph ], [ %748, %747 ]
  %665 = icmp ult i32 %.0130, %.01
  %or.cond87 = select i1 %660, i1 %665, i1 false
  br i1 %or.cond87, label %666, label %723

666:                                              ; preds = %664
  %667 = zext i32 %.0130 to i64
  %668 = getelementptr inbounds i8, i8* %644, i64 %667
  %669 = load i8, i8* %668, align 1
  %670 = zext i8 %669 to i32
  %671 = icmp slt i32 %670, 255
  br i1 %671, label %672, label %723

672:                                              ; preds = %666
  %673 = zext i32 %.0130 to i64
  %674 = getelementptr inbounds i8, i8* %644, i64 %673
  %675 = load i8, i8* %674, align 1
  %676 = zext i8 %675 to i32
  %677 = icmp eq i32 %676, 0
  br i1 %677, label %678, label %679

678:                                              ; preds = %672
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 %.0130, i32 %.340, i32 %.244, i32 %.349, i32 0, i32 %18)
  br label %747

679:                                              ; preds = %672
  %680 = zext i32 %.0130 to i64
  %681 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %646, i64 %680
  %682 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %681, i32 0, i32 0
  %683 = load i8, i8* %682, align 1
  %684 = zext i8 %683 to i32
  %685 = zext i32 %.0130 to i64
  %686 = getelementptr inbounds i8, i8* %644, i64 %685
  %687 = load i8, i8* %686, align 1
  %688 = zext i8 %687 to i32
  %689 = call i32 @png_colormap_compose(%struct.png_image_read_control* %6, i32 %684, i32 3, i32 %688, i32 %.340, i32 %18)
  %690 = zext i32 %.0130 to i64
  %691 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %646, i64 %690
  %692 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %691, i32 0, i32 1
  %693 = load i8, i8* %692, align 1
  %694 = zext i8 %693 to i32
  %695 = zext i32 %.0130 to i64
  %696 = getelementptr inbounds i8, i8* %644, i64 %695
  %697 = load i8, i8* %696, align 1
  %698 = zext i8 %697 to i32
  %699 = call i32 @png_colormap_compose(%struct.png_image_read_control* %6, i32 %694, i32 3, i32 %698, i32 %.244, i32 %18)
  %700 = zext i32 %.0130 to i64
  %701 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %646, i64 %700
  %702 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %701, i32 0, i32 2
  %703 = load i8, i8* %702, align 1
  %704 = zext i8 %703 to i32
  %705 = zext i32 %.0130 to i64
  %706 = getelementptr inbounds i8, i8* %644, i64 %705
  %707 = load i8, i8* %706, align 1
  %708 = zext i8 %707 to i32
  %709 = call i32 @png_colormap_compose(%struct.png_image_read_control* %6, i32 %704, i32 3, i32 %708, i32 %.349, i32 %18)
  br i1 %661, label %710, label %716

710:                                              ; preds = %679
  %711 = zext i32 %.0130 to i64
  %712 = getelementptr inbounds i8, i8* %644, i64 %711
  %713 = load i8, i8* %712, align 1
  %714 = zext i8 %713 to i32
  %715 = mul i32 %714, 257
  br label %721

716:                                              ; preds = %679
  %717 = zext i32 %.0130 to i64
  %718 = getelementptr inbounds i8, i8* %644, i64 %717
  %719 = load i8, i8* %718, align 1
  %720 = zext i8 %719 to i32
  br label %721

721:                                              ; preds = %716, %710
  %.0132 = phi i32 [ %.0130, %710 ], [ %.0130, %716 ]
  %722 = phi i32 [ %715, %710 ], [ %720, %716 ]
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 %.0132, i32 %689, i32 %699, i32 %709, i32 %722, i32 %18)
  br label %747

723:                                              ; preds = %666, %664
  %724 = zext i32 %.0130 to i64
  %725 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %646, i64 %724
  %726 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %725, i32 0, i32 0
  %727 = load i8, i8* %726, align 1
  %728 = zext i8 %727 to i32
  %729 = zext i32 %.0130 to i64
  %730 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %646, i64 %729
  %731 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %730, i32 0, i32 1
  %732 = load i8, i8* %731, align 1
  %733 = zext i8 %732 to i32
  %734 = zext i32 %.0130 to i64
  %735 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %646, i64 %734
  %736 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %735, i32 0, i32 2
  %737 = load i8, i8* %736, align 1
  %738 = zext i8 %737 to i32
  %739 = icmp ult i32 %.0130, %.01
  br i1 %739, label %740, label %745

740:                                              ; preds = %723
  %741 = zext i32 %.0130 to i64
  %742 = getelementptr inbounds i8, i8* %644, i64 %741
  %743 = load i8, i8* %742, align 1
  %744 = zext i8 %743 to i32
  br label %745

745:                                              ; preds = %723, %740
  %.0131 = phi i32 [ %.0130, %740 ], [ %.0130, %723 ]
  %746 = phi i32 [ %744, %740 ], [ 255, %723 ]
  call void @png_create_colormap_entry(%struct.png_image_read_control* %6, i32 %.0131, i32 %728, i32 %733, i32 %738, i32 %746, i32 3)
  br label %747

747:                                              ; preds = %745, %721, %678
  %.0133 = phi i32 [ %.0131, %745 ], [ %.0132, %721 ], [ %.0130, %678 ]
  %748 = add i32 %.0133, 1
  %749 = icmp ult i32 %748, %.15
  br i1 %749, label %664, label %._crit_edge

._crit_edge:                                      ; preds = %747
  br label %750

750:                                              ; preds = %._crit_edge, %.preheader106
  %751 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 62
  %752 = load i8, i8* %751, align 8
  %753 = zext i8 %752 to i32
  %754 = icmp slt i32 %753, 8
  br i1 %754, label %755, label %757

755:                                              ; preds = %750
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_packing to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %12)
  br label %757

756:                                              ; preds = %90
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.43.181, i32 0, i32 0)) #24
  unreachable

.loopexit:                                        ; preds = %351
  %.859.ph = phi i32 [ 0, %351 ]
  %.936.ph = phi i32 [ 231, %351 ]
  %.426.ph = phi i32 [ 1, %351 ]
  %.921.ph = phi i32 [ 1, %351 ]
  %.1611.ph = phi i32 [ %.271.lcssa, %351 ]
  br label %757

.loopexit92:                                      ; preds = %490
  %.859.ph93 = phi i32 [ 1, %490 ]
  %.936.ph94 = phi i32 [ %479, %490 ]
  %.426.ph95 = phi i32 [ 1, %490 ]
  %.921.ph96 = phi i32 [ 4, %490 ]
  %.1611.ph97 = phi i32 [ %.6.lcssa, %490 ]
  br label %757

.loopexit100:                                     ; preds = %615
  %.859.ph101 = phi i32 [ 1, %615 ]
  %.936.ph102 = phi i32 [ %506, %615 ]
  %.426.ph103 = phi i32 [ 1, %615 ]
  %.921.ph104 = phi i32 [ 4, %615 ]
  %.1611.ph105 = phi i32 [ %.9.lcssa, %615 ]
  br label %757

757:                                              ; preds = %._crit_edge134, %.loopexit100, %.loopexit92, %.loopexit, %750, %755, %406, %453, %374, %619, %633, %202, %240, %140, %146, %193, %182
  %.859 = phi i32 [ 0, %182 ], [ 0, %140 ], [ 0, %._crit_edge134 ], [ 1, %193 ], [ 0, %146 ], [ 0, %240 ], [ 0, %202 ], [ 1, %374 ], [ 1, %453 ], [ 0, %406 ], [ 0, %633 ], [ 0, %619 ], [ 0, %755 ], [ 0, %750 ], [ %.859.ph, %.loopexit ], [ %.859.ph93, %.loopexit92 ], [ %.859.ph101, %.loopexit100 ]
  %.936 = phi i32 [ 256, %182 ], [ 256, %140 ], [ 256, %._crit_edge134 ], [ 254, %193 ], [ 256, %146 ], [ 231, %202 ], [ 256, %240 ], [ 231, %374 ], [ 256, %453 ], [ 256, %406 ], [ 256, %633 ], [ 256, %619 ], [ 256, %755 ], [ 256, %750 ], [ %.936.ph, %.loopexit ], [ %.936.ph94, %.loopexit92 ], [ %.936.ph102, %.loopexit100 ]
  %.426 = phi i32 [ 1, %182 ], [ 3, %140 ], [ 3, %._crit_edge134 ], [ 1, %146 ], [ 1, %193 ], [ 1, %240 ], [ 1, %202 ], [ 1, %374 ], [ %.123, %453 ], [ %.123, %406 ], [ 1, %619 ], [ 1, %633 ], [ 3, %755 ], [ 3, %750 ], [ %.426.ph, %.loopexit ], [ %.426.ph95, %.loopexit92 ], [ %.426.ph103, %.loopexit100 ]
  %.921 = phi i32 [ 0, %182 ], [ 0, %140 ], [ 0, %._crit_edge134 ], [ 2, %193 ], [ 0, %146 ], [ 1, %202 ], [ 0, %240 ], [ 1, %374 ], [ 0, %453 ], [ 0, %406 ], [ 3, %633 ], [ 3, %619 ], [ 0, %755 ], [ 0, %750 ], [ %.921.ph, %.loopexit ], [ %.921.ph96, %.loopexit92 ], [ %.921.ph104, %.loopexit100 ]
  %.1611 = phi i32 [ %147, %182 ], [ %103, %140 ], [ %103, %._crit_edge134 ], [ %147, %146 ], [ %147, %193 ], [ %203, %202 ], [ %216, %240 ], [ %375, %374 ], [ %.3, %453 ], [ %.3, %406 ], [ %634, %633 ], [ %506, %619 ], [ %.15, %755 ], [ %.15, %750 ], [ %.1611.ph, %.loopexit ], [ %.1611.ph97, %.loopexit92 ], [ %.1611.ph105, %.loopexit100 ]
  %758 = icmp ne i32 %.859, 0
  br i1 %758, label %759, label %771

759:                                              ; preds = %757
  %760 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 55
  %761 = load i16, i16* %760, align 8
  %762 = zext i16 %761 to i32
  %763 = icmp sgt i32 %762, 0
  br i1 %763, label %764, label %771

764:                                              ; preds = %759
  %765 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 61
  %766 = load i8, i8* %765, align 1
  %767 = zext i8 %766 to i32
  %768 = and i32 %767, 4
  %769 = icmp eq i32 %768, 0
  br i1 %769, label %770, label %771

770:                                              ; preds = %764
  call void @png_set_tRNS_to_alpha(%struct.png_struct_def* %12)
  br label %771

771:                                              ; preds = %770, %764, %759, %757
  switch i32 %.426, label %779 [
    i32 1, label %772
    i32 3, label %773
  ]

772:                                              ; preds = %771
  call void @png_set_alpha_mode_fixed(%struct.png_struct_def* %12, i32 0, i32 220000)
  br label %773

773:                                              ; preds = %771, %772
  %774 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %12, i32 0, i32 62
  %775 = load i8, i8* %774, align 8
  %776 = zext i8 %775 to i32
  %777 = icmp sgt i32 %776, 8
  br i1 %777, label %778, label %780

778:                                              ; preds = %773
  call void @png_set_scale_16(%struct.png_struct_def* %12)
  br label %780

779:                                              ; preds = %771
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.44.182, i32 0, i32 0)) #24
  unreachable

780:                                              ; preds = %773, %778
  %781 = icmp ugt i32 %.1611, 256
  br i1 %781, label %786, label %782

782:                                              ; preds = %780
  %783 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 6
  %784 = load i32, i32* %783, align 4
  %785 = icmp ugt i32 %.1611, %784
  br i1 %785, label %786, label %787

786:                                              ; preds = %782, %780
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.45.183, i32 0, i32 0)) #24
  unreachable

787:                                              ; preds = %782
  %788 = getelementptr inbounds %struct.png_image, %struct.png_image* %8, i32 0, i32 6
  store i32 %.1611, i32* %788, align 4
  switch i32 %.921, label %800 [
    i32 0, label %789
    i32 1, label %791
    i32 2, label %793
    i32 3, label %796
    i32 4, label %798
  ]

789:                                              ; preds = %787
  %790 = icmp ne i32 %.936, 256
  br i1 %790, label %801, label %802

791:                                              ; preds = %787
  %792 = icmp ne i32 %.936, 231
  br i1 %792, label %801, label %802

793:                                              ; preds = %787
  %794 = icmp uge i32 %.936, %.1611
  %795 = icmp ne i32 %.936, 254
  %or.cond89 = or i1 %794, %795
  br i1 %or.cond89, label %801, label %802

796:                                              ; preds = %787
  %797 = icmp ne i32 %.936, 256
  br i1 %797, label %801, label %802

798:                                              ; preds = %787
  %799 = icmp ne i32 %.936, 216
  br i1 %799, label %801, label %802

800:                                              ; preds = %787
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.46.184, i32 0, i32 0)) #24
  unreachable

801:                                              ; preds = %798, %796, %793, %791, %789
  call void @png_error(%struct.png_struct_def* %12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.47.185, i32 0, i32 0)) #24
  unreachable

802:                                              ; preds = %798, %796, %793, %791, %789
  %803 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %6, i32 0, i32 10
  store i32 %.921, i32* %803, align 8
  ret i32 1
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_image_read_colormapped(i8* %0) #11 {
  %2 = bitcast i8* %0 to %struct.png_image_read_control*
  %3 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 0
  %4 = load %struct.png_image*, %struct.png_image** %3, align 8
  %5 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 0
  %6 = load %struct.png_control*, %struct.png_control** %5, align 8
  %7 = getelementptr inbounds %struct.png_control, %struct.png_control* %6, i32 0, i32 0
  %8 = load %struct.png_struct_def*, %struct.png_struct_def** %7, align 8
  %9 = getelementptr inbounds %struct.png_control, %struct.png_control* %6, i32 0, i32 1
  %10 = load %struct.png_info_def*, %struct.png_info_def** %9, align 8
  call void @png_image_skip_unused_chunks(%struct.png_struct_def* %8)
  %11 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 10
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %1
  %15 = call i32 bitcast (i32 (%struct.png_struct_def.199*)* @png_set_interlace_handling to i32 (%struct.png_struct_def*)*)(%struct.png_struct_def* %8)
  br label %16

16:                                               ; preds = %14, %1
  %.04 = phi i32 [ %15, %14 ], [ 0, %1 ]
  call void @png_read_update_info(%struct.png_struct_def* %8, %struct.png_info_def* %10)
  %17 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 10
  %18 = load i32, i32* %17, align 8
  switch i32 %18, label %88 [
    i32 0, label %19
    i32 2, label %34
    i32 1, label %34
    i32 3, label %52
    i32 4, label %70
  ]

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %10, i32 0, i32 8
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = icmp eq i32 %22, 3
  br i1 %23, label %29, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %10, i32 0, i32 8
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %88

29:                                               ; preds = %24, %19
  %30 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %10, i32 0, i32 7
  %31 = load i8, i8* %30, align 4
  %32 = zext i8 %31 to i32
  %33 = icmp eq i32 %32, 8
  br i1 %33, label %89, label %88

34:                                               ; preds = %16, %16
  %35 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %10, i32 0, i32 8
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = icmp eq i32 %37, 4
  br i1 %38, label %39, label %88

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %10, i32 0, i32 7
  %41 = load i8, i8* %40, align 4
  %42 = zext i8 %41 to i32
  %43 = icmp eq i32 %42, 8
  br i1 %43, label %44, label %88

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 80
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 220000
  br i1 %47, label %48, label %88

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 6
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 256
  br i1 %51, label %89, label %88

52:                                               ; preds = %16
  %53 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %10, i32 0, i32 8
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = icmp eq i32 %55, 2
  br i1 %56, label %57, label %88

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %10, i32 0, i32 7
  %59 = load i8, i8* %58, align 4
  %60 = zext i8 %59 to i32
  %61 = icmp eq i32 %60, 8
  br i1 %61, label %62, label %88

62:                                               ; preds = %57
  %63 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 80
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 220000
  br i1 %65, label %66, label %88

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 6
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 216
  br i1 %69, label %89, label %88

70:                                               ; preds = %16
  %71 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %10, i32 0, i32 8
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = icmp eq i32 %73, 6
  br i1 %74, label %75, label %88

75:                                               ; preds = %70
  %76 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %10, i32 0, i32 7
  %77 = load i8, i8* %76, align 4
  %78 = zext i8 %77 to i32
  %79 = icmp eq i32 %78, 8
  br i1 %79, label %80, label %88

80:                                               ; preds = %75
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 80
  %82 = load i32, i32* %81, align 4
  %83 = icmp eq i32 %82, 220000
  br i1 %83, label %84, label %88

84:                                               ; preds = %80
  %85 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 6
  %86 = load i32, i32* %85, align 4
  %87 = icmp eq i32 %86, 244
  br i1 %87, label %89, label %88

88:                                               ; preds = %16, %70, %75, %80, %84, %52, %57, %62, %66, %34, %39, %44, %48, %24, %29
  call void @png_error(%struct.png_struct_def* %8, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.51.168, i32 0, i32 0)) #24
  unreachable

89:                                               ; preds = %84, %66, %48, %29
  %90 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 1
  %91 = load i8*, i8** %90, align 8
  %92 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 2
  %93 = load i32, i32* %92, align 8
  %94 = sext i32 %93 to i64
  %95 = icmp slt i64 %94, 0
  br i1 %95, label %96, label %104

96:                                               ; preds = %89
  %97 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 3
  %98 = load i32, i32* %97, align 8
  %99 = sub i32 %98, 1
  %100 = zext i32 %99 to i64
  %101 = sub nsw i64 0, %94
  %102 = mul nsw i64 %100, %101
  %103 = getelementptr inbounds i8, i8* %91, i64 %102
  br label %104

104:                                              ; preds = %96, %89
  %.03 = phi i8* [ %103, %96 ], [ %91, %89 ]
  %105 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 6
  store i8* %.03, i8** %105, align 8
  %106 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 7
  store i64 %94, i64* %106, align 8
  %107 = icmp eq i32 %.04, 0
  br i1 %107, label %108, label %115

108:                                              ; preds = %104
  %109 = call i64 @png_get_rowbytes(%struct.png_struct_def* %8, %struct.png_info_def* %10)
  %110 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %8, i64 %109)
  %111 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 5
  store i8* %110, i8** %111, align 8
  %112 = bitcast %struct.png_image_read_control* %2 to i8*
  %113 = call i32 @png_safe_execute(%struct.png_image* %4, i32 (i8*)* @png_image_read_and_map, i8* %112)
  %114 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 5
  store i8* null, i8** %114, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %8, i8* %110)
  br label %133

115:                                              ; preds = %104
  %116 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 7
  %117 = load i64, i64* %116, align 8
  %118 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 3
  %119 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 6
  %120 = add nsw i32 %.04, -1
  %121 = icmp sge i32 %120, 0
  br i1 %121, label %.lr.ph8, label %.loopexit5

.lr.ph8:                                          ; preds = %115
  br label %124

..loopexit_crit_edge:                             ; preds = %129
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %124
  %.1.ph = phi i32 [ %125, %..loopexit_crit_edge ], [ %125, %124 ]
  %122 = add nsw i32 %.1.ph, -1
  %123 = icmp sge i32 %122, 0
  br i1 %123, label %124, label %..loopexit5_crit_edge

124:                                              ; preds = %.lr.ph8, %.loopexit
  %125 = phi i32 [ %120, %.lr.ph8 ], [ %122, %.loopexit ]
  %126 = load i32, i32* %118, align 8
  %127 = load i8*, i8** %119, align 8
  %128 = icmp ugt i32 %126, 0
  br i1 %128, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %124
  br label %129

129:                                              ; preds = %.lr.ph, %129
  %.017 = phi i8* [ %127, %.lr.ph ], [ %130, %129 ]
  %.026 = phi i32 [ %126, %.lr.ph ], [ %131, %129 ]
  call void @png_read_row(%struct.png_struct_def* %8, i8* %.017, i8* null)
  %130 = getelementptr inbounds i8, i8* %.017, i64 %117
  %131 = add i32 %.026, -1
  %132 = icmp ugt i32 %131, 0
  br i1 %132, label %129, label %..loopexit_crit_edge

..loopexit5_crit_edge:                            ; preds = %.loopexit
  %split9 = phi i32 [ 1, %.loopexit ]
  br label %.loopexit5

.loopexit5:                                       ; preds = %..loopexit5_crit_edge, %115
  %.0.ph = phi i32 [ %split9, %..loopexit5_crit_edge ], [ 1, %115 ]
  br label %133

133:                                              ; preds = %.loopexit5, %108
  %.0 = phi i32 [ %113, %108 ], [ %.0.ph, %.loopexit5 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_image_read_direct(i8* %0) #11 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.png_color_16_struct, align 2
  %4 = alloca i16, align 2
  %5 = bitcast i8* %0 to %struct.png_image_read_control*
  %6 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 0
  %7 = load %struct.png_image*, %struct.png_image** %6, align 8
  %8 = getelementptr inbounds %struct.png_image, %struct.png_image* %7, i32 0, i32 0
  %9 = load %struct.png_control*, %struct.png_control** %8, align 8
  %10 = getelementptr inbounds %struct.png_control, %struct.png_control* %9, i32 0, i32 0
  %11 = load %struct.png_struct_def*, %struct.png_struct_def** %10, align 8
  %12 = getelementptr inbounds %struct.png_image, %struct.png_image* %7, i32 0, i32 0
  %13 = load %struct.png_control*, %struct.png_control** %12, align 8
  %14 = getelementptr inbounds %struct.png_control, %struct.png_control* %13, i32 0, i32 1
  %15 = load %struct.png_info_def*, %struct.png_info_def** %14, align 8
  %16 = getelementptr inbounds %struct.png_image, %struct.png_image* %7, i32 0, i32 4
  %17 = load i32, i32* %16, align 4
  %18 = and i32 %17, 4
  %19 = icmp ne i32 %18, 0
  %20 = zext i1 %19 to i32
  call void @png_set_expand(%struct.png_struct_def* %11)
  %21 = call i32 @png_image_format(%struct.png_struct_def* %11)
  %22 = and i32 %21, -9
  %23 = xor i32 %17, %22
  %24 = and i32 %23, 2
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %35

26:                                               ; preds = %1
  %27 = and i32 %17, 2
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  call void @png_set_gray_to_rgb(%struct.png_struct_def* %11)
  br label %33

30:                                               ; preds = %26
  %31 = and i32 %22, 1
  %32 = icmp ne i32 %31, 0
  %spec.select = select i1 %32, i32 1, i32 0
  call void @png_set_rgb_to_gray_fixed(%struct.png_struct_def* %11, i32 1, i32 -1, i32 -1)
  br label %33

33:                                               ; preds = %30, %29
  %.117 = phi i32 [ 0, %29 ], [ %spec.select, %30 ]
  %34 = and i32 %23, -3
  br label %35

35:                                               ; preds = %33, %1
  %.028 = phi i32 [ %34, %33 ], [ %23, %1 ]
  %.218 = phi i32 [ %.117, %33 ], [ 0, %1 ]
  %36 = and i32 %22, 4
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %43

38:                                               ; preds = %35
  %39 = getelementptr inbounds %struct.png_image, %struct.png_image* %7, i32 0, i32 5
  %40 = load i32, i32* %39, align 8
  %41 = and i32 %40, 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %44, label %43

43:                                               ; preds = %38, %35
  br label %44

44:                                               ; preds = %38, %43
  %.047 = phi i32 [ -1, %43 ], [ 100000, %38 ]
  call void @png_set_alpha_mode_fixed(%struct.png_struct_def* %11, i32 0, i32 %.047)
  %45 = icmp ne i32 %20, 0
  %46 = and i32 %22, 1
  %47 = icmp ne i32 %46, 0
  %. = select i1 %47, i32 1, i32 0
  %.138 = select i1 %45, i32 %., i32 0
  %.036 = select i1 %45, i32 100000, i32 -1
  %48 = and i32 %.028, 64
  %49 = icmp ne i32 %48, 0
  %50 = and i32 %.028, -65
  %.239 = select i1 %49, i32 2, i32 %.138
  %.129 = select i1 %49, i32 %50, i32 %.028
  %51 = icmp ne i32 %.218, 0
  br i1 %51, label %52, label %64

52:                                               ; preds = %44
  %53 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %11, i32 0, i32 144
  %54 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %53, i32 0, i32 0
  %55 = load i32, i32* %54, align 8
  %56 = call i32 @png_muldiv(i32* %2, i32 %.036, i32 %55, i32 100000)
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %62

58:                                               ; preds = %52
  %59 = load i32, i32* %2, align 4
  %60 = call i32 @png_gamma_significant(i32 %59)
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %64, label %62

62:                                               ; preds = %58, %52
  %63 = icmp eq i32 %.239, 1
  %spec.select48 = select i1 %63, i32 0, i32 %.239
  %spec.select49 = select i1 %63, i32 2, i32 %.218
  br label %64

64:                                               ; preds = %62, %58, %44
  %.542 = phi i32 [ %.239, %44 ], [ %spec.select48, %62 ], [ %.239, %58 ]
  %.521 = phi i32 [ %.218, %44 ], [ %spec.select49, %62 ], [ 0, %58 ]
  %65 = and i32 %.129, 4
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %67, label %73

67:                                               ; preds = %64
  %68 = icmp ne i32 %20, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %67
  call void @png_set_expand_16(%struct.png_struct_def* %11)
  br label %71

70:                                               ; preds = %67
  call void @png_set_scale_16(%struct.png_struct_def* %11)
  br label %71

71:                                               ; preds = %70, %69
  %72 = and i32 %.129, -5
  br label %73

73:                                               ; preds = %71, %64
  %.230 = phi i32 [ %72, %71 ], [ %.129, %64 ]
  %74 = and i32 %.230, 1
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %76, label %121

76:                                               ; preds = %73
  %77 = and i32 %22, 1
  %78 = icmp ne i32 %77, 0
  br i1 %78, label %79, label %114

79:                                               ; preds = %76
  %80 = icmp ne i32 %.521, 0
  br i1 %80, label %119, label %81

81:                                               ; preds = %79
  %82 = icmp ne i32 %20, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %81
  call void @png_set_strip_alpha(%struct.png_struct_def* %11)
  br label %119

84:                                               ; preds = %81
  %85 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 4
  %86 = load %struct.png_color_struct*, %struct.png_color_struct** %85, align 8
  %87 = icmp ne %struct.png_color_struct* %86, null
  br i1 %87, label %88, label %119

88:                                               ; preds = %84
  %89 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %3, i32 0, i32 0
  store i8 0, i8* %89, align 2
  %90 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 4
  %91 = load %struct.png_color_struct*, %struct.png_color_struct** %90, align 8
  %92 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %91, i32 0, i32 0
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i16
  %95 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %3, i32 0, i32 1
  store i16 %94, i16* %95, align 2
  %96 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 4
  %97 = load %struct.png_color_struct*, %struct.png_color_struct** %96, align 8
  %98 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %97, i32 0, i32 1
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i16
  %101 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %3, i32 0, i32 2
  store i16 %100, i16* %101, align 2
  %102 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 4
  %103 = load %struct.png_color_struct*, %struct.png_color_struct** %102, align 8
  %104 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %103, i32 0, i32 2
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i16
  %107 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %3, i32 0, i32 3
  store i16 %106, i16* %107, align 2
  %108 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 4
  %109 = load %struct.png_color_struct*, %struct.png_color_struct** %108, align 8
  %110 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %109, i32 0, i32 1
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i16
  %113 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %3, i32 0, i32 4
  store i16 %112, i16* %113, align 2
  call void @png_set_background_fixed(%struct.png_struct_def* %11, %struct.png_color_16_struct* %3, i32 1, i32 0, i32 0)
  br label %119

114:                                              ; preds = %76
  %115 = icmp ne i32 %20, 0
  %.50 = select i1 %115, i32 65535, i32 255
  %116 = and i32 %17, 32
  %117 = icmp ne i32 %116, 0
  %118 = and i32 %.230, -33
  %.331 = select i1 %117, i32 %118, i32 %.230
  %.010 = select i1 %117, i32 0, i32 1
  call void bitcast (void (%struct.png_struct_def.199*, i32, i32)* @png_set_add_alpha to void (%struct.png_struct_def*, i32, i32)*)(%struct.png_struct_def* %11, i32 %.50, i32 %.010)
  br label %119

119:                                              ; preds = %79, %88, %84, %83, %114
  %.946 = phi i32 [ %.542, %114 ], [ %.542, %79 ], [ %.542, %83 ], [ %.542, %88 ], [ 2, %84 ]
  %.432 = phi i32 [ %.331, %114 ], [ %.230, %83 ], [ %.230, %84 ], [ %.230, %88 ], [ %.230, %79 ]
  %.723 = phi i32 [ %.521, %114 ], [ 2, %79 ], [ %.521, %88 ], [ %.521, %84 ], [ %.521, %83 ]
  %.314 = phi i32 [ 0, %114 ], [ 0, %79 ], [ 0, %83 ], [ 0, %88 ], [ 1, %84 ]
  %120 = and i32 %.432, -2
  br label %121

121:                                              ; preds = %119, %73
  %.10 = phi i32 [ %.946, %119 ], [ %.542, %73 ]
  %.533 = phi i32 [ %120, %119 ], [ %.230, %73 ]
  %.824 = phi i32 [ %.723, %119 ], [ %.521, %73 ]
  %.415 = phi i32 [ %.314, %119 ], [ 0, %73 ]
  call void @png_set_alpha_mode_fixed(%struct.png_struct_def* %11, i32 %.10, i32 %.036)
  %122 = and i32 %.533, 16
  %123 = icmp ne i32 %122, 0
  br i1 %123, label %124, label %132

124:                                              ; preds = %121
  %125 = and i32 %17, 2
  %126 = icmp ne i32 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %124
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_bgr to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %11)
  br label %130

128:                                              ; preds = %124
  %129 = and i32 %17, -17
  br label %130

130:                                              ; preds = %128, %127
  %.06 = phi i32 [ %17, %127 ], [ %129, %128 ]
  %131 = and i32 %.533, -17
  br label %132

132:                                              ; preds = %130, %121
  %.634 = phi i32 [ %131, %130 ], [ %.533, %121 ]
  %.17 = phi i32 [ %.06, %130 ], [ %17, %121 ]
  %133 = and i32 %.634, 32
  %134 = icmp ne i32 %133, 0
  br i1 %134, label %135, label %145

135:                                              ; preds = %132
  %136 = and i32 %.17, 1
  %137 = icmp ne i32 %136, 0
  br i1 %137, label %138, label %141

138:                                              ; preds = %135
  %139 = icmp ne i32 %.824, 2
  br i1 %139, label %140, label %143

140:                                              ; preds = %138
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_swap_alpha to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %11)
  br label %143

141:                                              ; preds = %135
  %142 = and i32 %.17, -33
  br label %143

143:                                              ; preds = %138, %140, %141
  %.28 = phi i32 [ %142, %141 ], [ %.17, %140 ], [ %.17, %138 ]
  %144 = and i32 %.634, -33
  br label %145

145:                                              ; preds = %143, %132
  %.735 = phi i32 [ %144, %143 ], [ %.634, %132 ]
  %.39 = phi i32 [ %.28, %143 ], [ %.17, %132 ]
  %146 = icmp ne i32 %20, 0
  br i1 %146, label %147, label %153

147:                                              ; preds = %145
  store i16 1, i16* %4, align 2
  %148 = bitcast i16* %4 to i8*
  %149 = load i8, i8* %148, align 2
  %150 = zext i8 %149 to i32
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %152, label %153

152:                                              ; preds = %147
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_swap to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %11)
  br label %153

153:                                              ; preds = %147, %152, %145
  %154 = icmp ne i32 %.735, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %153
  call void @png_error(%struct.png_struct_def* %11, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.53.158, i32 0, i32 0)) #24
  unreachable

156:                                              ; preds = %153
  call void @png_image_skip_unused_chunks(%struct.png_struct_def* %11)
  %157 = icmp eq i32 %.415, 0
  %158 = icmp ne i32 %.824, 2
  %or.cond = select i1 %157, i1 %158, i1 false
  br i1 %or.cond, label %159, label %161

159:                                              ; preds = %156
  %160 = call i32 bitcast (i32 (%struct.png_struct_def.199*)* @png_set_interlace_handling to i32 (%struct.png_struct_def*)*)(%struct.png_struct_def* %11)
  br label %161

161:                                              ; preds = %159, %156
  %.025 = phi i32 [ %160, %159 ], [ 0, %156 ]
  call void @png_read_update_info(%struct.png_struct_def* %11, %struct.png_info_def* %15)
  %162 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %15, i32 0, i32 8
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = and i32 %164, 2
  %166 = icmp ne i32 %165, 0
  %167 = or i32 0, 2
  %spec.select51 = select i1 %166, i32 %167, i32 0
  %168 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %15, i32 0, i32 8
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = and i32 %170, 4
  %172 = icmp ne i32 %171, 0
  br i1 %172, label %173, label %180

173:                                              ; preds = %161
  %174 = icmp eq i32 %.415, 0
  br i1 %174, label %175, label %183

175:                                              ; preds = %173
  %176 = icmp ne i32 %.824, 2
  %177 = and i32 %.39, 1
  %178 = icmp ne i32 %177, 0
  %or.cond53 = select i1 %176, i1 true, i1 %178
  %179 = or i32 %spec.select51, 1
  %.1 = select i1 %or.cond53, i32 %179, i32 %spec.select51
  br label %183

180:                                              ; preds = %161
  %181 = icmp ne i32 %.415, 0
  br i1 %181, label %182, label %183

182:                                              ; preds = %180
  call void @png_error(%struct.png_struct_def* %11, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.54.159, i32 0, i32 0)) #24
  unreachable

183:                                              ; preds = %180, %173, %175
  %.3 = phi i32 [ %.1, %175 ], [ %spec.select51, %173 ], [ %spec.select51, %180 ]
  %184 = and i32 %.39, 64
  %185 = icmp ne i32 %184, 0
  %186 = or i32 %.3, 64
  %spec.select54 = select i1 %185, i32 %186, i32 %.3
  %187 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %15, i32 0, i32 7
  %188 = load i8, i8* %187, align 4
  %189 = zext i8 %188 to i32
  %190 = icmp eq i32 %189, 16
  %191 = or i32 %spec.select54, 4
  %.5 = select i1 %190, i32 %191, i32 %spec.select54
  %192 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %11, i32 0, i32 17
  %193 = load i32, i32* %192, align 4
  %194 = and i32 %193, 1
  %195 = icmp ne i32 %194, 0
  %196 = or i32 %.5, 16
  %.6 = select i1 %195, i32 %196, i32 %.5
  %197 = icmp eq i32 %.824, 2
  %198 = and i32 %.39, 32
  %199 = icmp ne i32 %198, 0
  %200 = or i32 %.6, 32
  %spec.select55 = select i1 %199, i32 %200, i32 %.6
  %.8 = select i1 %197, i32 %spec.select55, i32 %.6
  %201 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %11, i32 0, i32 17
  %202 = load i32, i32* %201, align 4
  %203 = and i32 %202, 131072
  %204 = icmp ne i32 %203, 0
  br i1 %204, label %215, label %205

205:                                              ; preds = %183
  %206 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %11, i32 0, i32 17
  %207 = load i32, i32* %206, align 4
  %208 = and i32 %207, 16777216
  %209 = icmp ne i32 %208, 0
  br i1 %209, label %210, label %220

210:                                              ; preds = %205
  %211 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %11, i32 0, i32 16
  %212 = load i32, i32* %211, align 8
  %213 = and i32 %212, 128
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %220

215:                                              ; preds = %210, %183
  %216 = icmp eq i32 %.824, 2
  br i1 %216, label %217, label %218

217:                                              ; preds = %215
  call void @png_error(%struct.png_struct_def* %11, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.55.160, i32 0, i32 0)) #24
  unreachable

218:                                              ; preds = %215
  %219 = or i32 %.8, 32
  br label %220

220:                                              ; preds = %218, %210, %205
  %.9 = phi i32 [ %219, %218 ], [ %.8, %210 ], [ %.8, %205 ]
  %221 = icmp ne i32 %.9, %.39
  br i1 %221, label %222, label %223

222:                                              ; preds = %220
  call void @png_error(%struct.png_struct_def* %11, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.56.161, i32 0, i32 0)) #24
  unreachable

223:                                              ; preds = %220
  %224 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 1
  %225 = load i8*, i8** %224, align 8
  %226 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 2
  %227 = load i32, i32* %226, align 8
  %228 = sext i32 %227 to i64
  %229 = icmp ne i32 %20, 0
  %230 = mul nsw i64 %228, 2
  %spec.select56 = select i1 %229, i64 %230, i64 %228
  %231 = icmp slt i64 %spec.select56, 0
  br i1 %231, label %232, label %240

232:                                              ; preds = %223
  %233 = getelementptr inbounds %struct.png_image, %struct.png_image* %7, i32 0, i32 3
  %234 = load i32, i32* %233, align 8
  %235 = sub i32 %234, 1
  %236 = zext i32 %235 to i64
  %237 = sub nsw i64 0, %spec.select56
  %238 = mul nsw i64 %236, %237
  %239 = getelementptr inbounds i8, i8* %225, i64 %238
  br label %240

240:                                              ; preds = %232, %223
  %.04 = phi i8* [ %239, %232 ], [ %225, %223 ]
  %241 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 6
  store i8* %.04, i8** %241, align 8
  %242 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 7
  store i64 %spec.select56, i64* %242, align 8
  %243 = icmp ne i32 %.415, 0
  br i1 %243, label %244, label %251

244:                                              ; preds = %240
  %245 = call i64 @png_get_rowbytes(%struct.png_struct_def* %11, %struct.png_info_def* %15)
  %246 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %11, i64 %245)
  %247 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 5
  store i8* %246, i8** %247, align 8
  %248 = bitcast %struct.png_image_read_control* %5 to i8*
  %249 = call i32 @png_safe_execute(%struct.png_image* %7, i32 (i8*)* @png_image_read_composite, i8* %248)
  %250 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 5
  store i8* null, i8** %250, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %11, i8* %246)
  br label %278

251:                                              ; preds = %240
  %252 = icmp eq i32 %.824, 2
  br i1 %252, label %253, label %260

253:                                              ; preds = %251
  %254 = call i64 @png_get_rowbytes(%struct.png_struct_def* %11, %struct.png_info_def* %15)
  %255 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %11, i64 %254)
  %256 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 5
  store i8* %255, i8** %256, align 8
  %257 = bitcast %struct.png_image_read_control* %5 to i8*
  %258 = call i32 @png_safe_execute(%struct.png_image* %7, i32 (i8*)* @png_image_read_background, i8* %257)
  %259 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 5
  store i8* null, i8** %259, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %11, i8* %255)
  br label %278

260:                                              ; preds = %251
  %261 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 7
  %262 = load i64, i64* %261, align 8
  %263 = getelementptr inbounds %struct.png_image, %struct.png_image* %7, i32 0, i32 3
  %264 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %5, i32 0, i32 6
  %265 = add nsw i32 %.025, -1
  %266 = icmp sge i32 %265, 0
  br i1 %266, label %.lr.ph60, label %.loopexit57

.lr.ph60:                                         ; preds = %260
  br label %269

..loopexit_crit_edge:                             ; preds = %274
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %269
  %.126.ph = phi i32 [ %270, %..loopexit_crit_edge ], [ %270, %269 ]
  %267 = add nsw i32 %.126.ph, -1
  %268 = icmp sge i32 %267, 0
  br i1 %268, label %269, label %..loopexit57_crit_edge

269:                                              ; preds = %.lr.ph60, %.loopexit
  %270 = phi i32 [ %265, %.lr.ph60 ], [ %267, %.loopexit ]
  %271 = load i32, i32* %263, align 8
  %272 = load i8*, i8** %264, align 8
  %273 = icmp ugt i32 %271, 0
  br i1 %273, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %269
  br label %274

274:                                              ; preds = %.lr.ph, %274
  %.0159 = phi i8* [ %272, %.lr.ph ], [ %275, %274 ]
  %.0258 = phi i32 [ %271, %.lr.ph ], [ %276, %274 ]
  call void @png_read_row(%struct.png_struct_def* %11, i8* %.0159, i8* null)
  %275 = getelementptr inbounds i8, i8* %.0159, i64 %262
  %276 = add i32 %.0258, -1
  %277 = icmp ugt i32 %276, 0
  br i1 %277, label %274, label %..loopexit_crit_edge

..loopexit57_crit_edge:                           ; preds = %.loopexit
  %split61 = phi i32 [ 1, %.loopexit ]
  br label %.loopexit57

.loopexit57:                                      ; preds = %..loopexit57_crit_edge, %260
  %.0.ph = phi i32 [ %split61, %..loopexit57_crit_edge ], [ 1, %260 ]
  br label %278

278:                                              ; preds = %.loopexit57, %253, %244
  %.0 = phi i32 [ %249, %244 ], [ %258, %253 ], [ %.0.ph, %.loopexit57 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_rgb_to_gray_fixed(%struct.png_struct_def* noalias %0, i32 %1, i32 %2, i32 %3) #11 {
  %5 = call i32 @png_rtran_ok(%struct.png_struct_def* %0, i32 1)
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %62, label %7

7:                                                ; preds = %4
  switch i32 %1, label %20 [
    i32 1, label %8
    i32 2, label %12
    i32 3, label %16
  ]

8:                                                ; preds = %7
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %10 = load i32, i32* %9, align 4
  %11 = or i32 %10, 6291456
  store i32 %11, i32* %9, align 4
  br label %21

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %14 = load i32, i32* %13, align 4
  %15 = or i32 %14, 4194304
  store i32 %15, i32* %13, align 4
  br label %21

16:                                               ; preds = %7
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %18 = load i32, i32* %17, align 4
  %19 = or i32 %18, 2097152
  store i32 %19, i32* %17, align 4
  br label %21

20:                                               ; preds = %7
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.8.225, i32 0, i32 0)) #24
  unreachable

21:                                               ; preds = %16, %12, %8
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = icmp eq i32 %24, 3
  br i1 %25, label %26, label %30

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %28 = load i32, i32* %27, align 4
  %29 = or i32 %28, 4096
  store i32 %29, i32* %27, align 4
  br label %30

30:                                               ; preds = %26, %21
  %31 = icmp sge i32 %2, 0
  %32 = icmp sge i32 %3, 0
  %or.cond = select i1 %31, i1 %32, i1 false
  %33 = add nsw i32 %2, %3
  %34 = icmp sle i32 %33, 100000
  %or.cond2 = select i1 %or.cond, i1 %34, i1 false
  br i1 %or.cond2, label %35, label %45

35:                                               ; preds = %30
  %36 = mul i32 %2, 32768
  %37 = udiv i32 %36, 100000
  %38 = trunc i32 %37 to i16
  %39 = mul i32 %3, 32768
  %40 = udiv i32 %39, 100000
  %41 = trunc i32 %40 to i16
  %42 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 120
  store i16 %38, i16* %42, align 2
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 121
  store i16 %41, i16* %43, align 4
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 119
  store i8 1, i8* %44, align 1
  br label %62

45:                                               ; preds = %30
  %46 = icmp sge i32 %2, 0
  %47 = icmp sge i32 %3, 0
  %or.cond3 = select i1 %46, i1 %47, i1 false
  br i1 %or.cond3, label %48, label %49

48:                                               ; preds = %45
  call void @png_app_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.9.226, i32 0, i32 0))
  br label %49

49:                                               ; preds = %48, %45
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 120
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %62

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 121
  %56 = load i16, i16* %55, align 4
  %57 = zext i16 %56 to i32
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 120
  store i16 6968, i16* %60, align 2
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 121
  store i16 23434, i16* %61, align 4
  br label %62

62:                                               ; preds = %49, %54, %59, %4, %35
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_alpha_mode_fixed(%struct.png_struct_def* noalias %0, i32 %1, i32 %2) #11 {
  %4 = call i32 @png_rtran_ok(%struct.png_struct_def* %0, i32 0)
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %79, label %6

6:                                                ; preds = %3
  %7 = call i32 @translate_gamma_flags(%struct.png_struct_def* %0, i32 %2, i32 1)
  %8 = icmp slt i32 %7, 1000
  %9 = icmp sgt i32 %7, 10000000
  %or.cond = or i1 %8, %9
  br i1 %or.cond, label %10, label %11

10:                                               ; preds = %6
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3.209, i32 0, i32 0)) #24
  unreachable

11:                                               ; preds = %6
  %12 = call i32 @png_reciprocal(i32 %7)
  switch i32 %1, label %41 [
    i32 0, label %13
    i32 1, label %20
    i32 2, label %27
    i32 3, label %34
  ]

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %15, -8388609
  store i32 %16, i32* %14, align 4
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %18 = load i32, i32* %17, align 8
  %19 = and i32 %18, -8193
  store i32 %19, i32* %17, align 8
  br label %42

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, -8388609
  store i32 %23, i32* %21, align 4
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %25 = load i32, i32* %24, align 8
  %26 = and i32 %25, -8193
  store i32 %26, i32* %24, align 8
  br label %42

27:                                               ; preds = %11
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, -8388609
  store i32 %30, i32* %28, align 4
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %32 = load i32, i32* %31, align 8
  %33 = or i32 %32, 8192
  store i32 %33, i32* %31, align 8
  br label %42

34:                                               ; preds = %11
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %36 = load i32, i32* %35, align 4
  %37 = or i32 %36, 8388608
  store i32 %37, i32* %35, align 4
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %39 = load i32, i32* %38, align 8
  %40 = and i32 %39, -8193
  store i32 %40, i32* %38, align 8
  br label %42

41:                                               ; preds = %11
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4.210, i32 0, i32 0)) #24
  unreachable

42:                                               ; preds = %34, %27, %20, %13
  %.01 = phi i32 [ %7, %34 ], [ %7, %27 ], [ 100000, %20 ], [ %7, %13 ]
  %.0 = phi i32 [ 1, %34 ], [ 1, %27 ], [ 1, %20 ], [ 0, %13 ]
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %44 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %43, i32 0, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %56

47:                                               ; preds = %42
  %48 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %49 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %48, i32 0, i32 0
  store i32 %12, i32* %49, align 8
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %51 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %50, i32 0, i32 4
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i32
  %54 = or i32 %53, 1
  %55 = trunc i32 %54 to i16
  store i16 %55, i16* %51, align 2
  br label %56

56:                                               ; preds = %47, %42
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  store i32 %.01, i32* %57, align 4
  %58 = icmp ne i32 %.0, 0
  br i1 %58, label %59, label %79

59:                                               ; preds = %56
  %60 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %61 = bitcast %struct.png_color_16_struct* %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 10, i1 false)
  %62 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %63 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %62, i32 0, i32 0
  %64 = load i32, i32* %63, align 8
  %65 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 73
  store i32 %64, i32* %65, align 8
  %66 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 72
  store i8 2, i8* %66, align 4
  %67 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %68 = load i32, i32* %67, align 4
  %69 = and i32 %68, -257
  store i32 %69, i32* %67, align 4
  %70 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %71 = load i32, i32* %70, align 4
  %72 = and i32 %71, 128
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %59
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.5.211, i32 0, i32 0)) #24
  unreachable

75:                                               ; preds = %59
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %77 = load i32, i32* %76, align 4
  %78 = or i32 %77, 128
  store i32 %78, i32* %76, align 4
  br label %79

79:                                               ; preds = %3, %75, %56
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_background_fixed(%struct.png_struct_def* noalias %0, %struct.png_color_16_struct* %1, i32 %2, i32 %3, i32 %4) #11 {
  %6 = call i32 @png_rtran_ok(%struct.png_struct_def* %0, i32 0)
  %7 = icmp eq i32 %6, 0
  %8 = icmp eq %struct.png_color_16_struct* %1, null
  %or.cond = select i1 %7, i1 true, i1 %8
  br i1 %or.cond, label %37, label %9

9:                                                ; preds = %5
  %10 = icmp eq i32 %2, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %9
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1.197, i32 0, i32 0))
  br label %37

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %14 = load i32, i32* %13, align 4
  %15 = or i32 %14, 262272
  store i32 %15, i32* %13, align 4
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %17 = load i32, i32* %16, align 4
  %18 = and i32 %17, -8388609
  store i32 %18, i32* %16, align 4
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %20 = load i32, i32* %19, align 8
  %21 = and i32 %20, -8193
  store i32 %21, i32* %19, align 8
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 74
  %23 = bitcast %struct.png_color_16_struct* %22 to i8*
  %24 = bitcast %struct.png_color_16_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* align 2 %24, i64 10, i1 false)
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 73
  store i32 %4, i32* %25, align 8
  %26 = trunc i32 %2 to i8
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 72
  store i8 %26, i8* %27, align 4
  %28 = icmp ne i32 %3, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %12
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %31 = load i32, i32* %30, align 4
  %32 = or i32 %31, 256
  store i32 %32, i32* %30, align 4
  br label %37

33:                                               ; preds = %12
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, -257
  store i32 %36, i32* %34, align 4
  br label %37

37:                                               ; preds = %5, %11, %33, %29
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_add_alpha(%struct.png_struct_def.199* noalias %0, i32 %1, i32 %2) #11 {
  %4 = icmp eq %struct.png_struct_def.199* %0, null
  br i1 %4, label %14, label %5

5:                                                ; preds = %3
  call void @png_set_filler(%struct.png_struct_def.199* %0, i32 %1, i32 %2)
  %6 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 17
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 32768
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %14

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 17
  %12 = load i32, i32* %11, align 4
  %13 = or i32 %12, 16777216
  store i32 %13, i32* %11, align 4
  br label %14

14:                                               ; preds = %3, %10, %5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_image_skip_unused_chunks(%struct.png_struct_def* noalias %0) #11 {
  call void @png_set_keep_unknown_chunks(%struct.png_struct_def* %0, i32 1, i8* null, i32 -1)
  call void @png_set_keep_unknown_chunks(%struct.png_struct_def* %0, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @png_image_skip_unused_chunks.chunks_to_process, i32 0, i32 0), i32 6)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_image_read_composite(i8* %0) #11 {
  %2 = bitcast i8* %0 to %struct.png_image_read_control*
  %3 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 0
  %4 = load %struct.png_image*, %struct.png_image** %3, align 8
  %5 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 0
  %6 = load %struct.png_control*, %struct.png_control** %5, align 8
  %7 = getelementptr inbounds %struct.png_control, %struct.png_control* %6, i32 0, i32 0
  %8 = load %struct.png_struct_def*, %struct.png_struct_def** %7, align 8
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 58
  %10 = load i8, i8* %9, align 4
  %11 = zext i8 %10 to i32
  switch i32 %11, label %13 [
    i32 0, label %14
    i32 1, label %12
  ]

12:                                               ; preds = %1
  br label %14

13:                                               ; preds = %1
  call void @png_error(%struct.png_struct_def* %8, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.52.166, i32 0, i32 0)) #24
  unreachable

14:                                               ; preds = %1, %12
  %.04 = phi i32 [ 7, %12 ], [ 1, %1 ]
  %15 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 7
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 4
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, 2
  %24 = icmp ne i32 %23, 0
  %25 = select i1 %24, i32 3, i32 1
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 58
  %27 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 5
  %28 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 6
  %29 = mul i32 %18, %25
  %30 = zext i32 %29 to i64
  %31 = zext i32 %25 to i64
  %32 = add i32 %25, 1
  %33 = zext i32 %32 to i64
  %34 = sub i64 %33, 1
  br label %35

35:                                               ; preds = %14, %144
  %.0918 = phi i32 [ 0, %14 ], [ %145, %144 ]
  %36 = load i8, i8* %26, align 4
  %37 = zext i8 %36 to i32
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %83

39:                                               ; preds = %35
  %40 = icmp sgt i32 %.0918, 1
  %41 = sub nsw i32 7, %.0918
  %42 = ashr i32 %41, 1
  %43 = select i1 %40, i32 %42, i32 3
  %44 = shl i32 1, %43
  %45 = sub nsw i32 %44, 1
  %46 = and i32 1, %.0918
  %47 = add nsw i32 %.0918, 1
  %48 = ashr i32 %47, 1
  %49 = sub nsw i32 3, %48
  %50 = shl i32 %46, %49
  %51 = and i32 %50, 7
  %52 = sub nsw i32 %45, %51
  %53 = add i32 %18, %52
  %54 = icmp sgt i32 %.0918, 1
  %55 = sub nsw i32 7, %.0918
  %56 = ashr i32 %55, 1
  %57 = select i1 %54, i32 %56, i32 3
  %58 = lshr i32 %53, %57
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %144, label %60

60:                                               ; preds = %39
  %61 = and i32 1, %.0918
  %62 = add nsw i32 %.0918, 1
  %63 = ashr i32 %62, 1
  %64 = sub nsw i32 3, %63
  %65 = shl i32 %61, %64
  %66 = and i32 %65, 7
  %67 = mul i32 %66, %25
  %68 = sub nsw i32 7, %.0918
  %69 = ashr i32 %68, 1
  %70 = shl i32 1, %69
  %71 = mul i32 %70, %25
  %72 = xor i32 %.0918, -1
  %73 = and i32 1, %72
  %74 = ashr i32 %.0918, 1
  %75 = sub nsw i32 3, %74
  %76 = shl i32 %73, %75
  %77 = and i32 %76, 7
  %78 = icmp sgt i32 %.0918, 2
  %79 = sub nsw i32 %.0918, 1
  %80 = ashr i32 %79, 1
  %81 = ashr i32 8, %80
  %82 = select i1 %78, i32 %81, i32 8
  br label %83

83:                                               ; preds = %35, %60
  %.0920 = phi i32 [ %.0918, %60 ], [ %.0918, %35 ]
  %.08 = phi i32 [ %67, %60 ], [ 0, %35 ]
  %.07 = phi i32 [ %71, %60 ], [ %25, %35 ]
  %.06 = phi i32 [ %82, %60 ], [ 1, %35 ]
  %.05 = phi i32 [ %77, %60 ], [ 0, %35 ]
  %84 = zext i32 %.08 to i64
  %85 = zext i32 %.07 to i64
  %86 = icmp ult i32 %.05, %16
  br i1 %86, label %.lr.ph17, label %.loopexit10

.lr.ph17:                                         ; preds = %83
  br label %87

87:                                               ; preds = %.lr.ph17, %141
  %.115 = phi i32 [ %.05, %.lr.ph17 ], [ %142, %141 ]
  %88 = load i8*, i8** %27, align 8
  call void @png_read_row(%struct.png_struct_def* %8, i8* %88, i8* null)
  %89 = load i8*, i8** %28, align 8
  %90 = zext i32 %.115 to i64
  %91 = mul nsw i64 %90, %20
  %92 = getelementptr inbounds i8, i8* %89, i64 %91
  %93 = getelementptr inbounds i8, i8* %92, i64 %30
  %94 = getelementptr inbounds i8, i8* %92, i64 %84
  %95 = icmp ult i8* %94, %93
  br i1 %95, label %.lr.ph, label %141

.lr.ph:                                           ; preds = %87
  br label %96

96:                                               ; preds = %.lr.ph, %137
  %.0214 = phi i8* [ %94, %.lr.ph ], [ %139, %137 ]
  %.0313 = phi i8* [ %88, %.lr.ph ], [ %138, %137 ]
  %97 = getelementptr inbounds i8, i8* %.0313, i64 %31
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = icmp sgt i32 %99, 0
  br i1 %100, label %.preheader, label %137

.preheader:                                       ; preds = %96
  %101 = zext i8 %98 to i32
  %102 = icmp slt i32 %101, 255
  %103 = zext i8 %98 to i32
  %104 = sub nsw i32 255, %103
  br label %105

105:                                              ; preds = %.preheader, %135
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %135 ]
  %scevgep = getelementptr i8, i8* %.0313, i64 %indvars.iv
  %106 = load i8, i8* %scevgep, align 1
  %107 = zext i8 %106 to i32
  br i1 %102, label %108, label %135

108:                                              ; preds = %105
  %109 = mul i32 %107, 65535
  %scevgep21 = getelementptr i8, i8* %.0214, i64 %indvars.iv
  %110 = load i8, i8* %scevgep21, align 1
  %111 = zext i8 %110 to i64
  %112 = getelementptr inbounds [256 x i16], [256 x i16]* @png_sRGB_table, i64 0, i64 %111
  %113 = load i16, i16* %112, align 2
  %114 = zext i16 %113 to i32
  %115 = mul nsw i32 %104, %114
  %116 = add i32 %109, %115
  %117 = lshr i32 %116, 15
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %118
  %120 = load i16, i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = and i32 %116, 32767
  %123 = lshr i32 %116, 15
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = mul i32 %122, %127
  %129 = lshr i32 %128, 12
  %130 = add i32 %121, %129
  %131 = lshr i32 %130, 8
  %132 = and i32 255, %131
  %133 = trunc i32 %132 to i8
  %134 = zext i8 %133 to i32
  br label %135

135:                                              ; preds = %108, %105
  %.0 = phi i32 [ %134, %108 ], [ %107, %105 ]
  %136 = trunc i32 %.0 to i8
  %scevgep22 = getelementptr i8, i8* %.0214, i64 %indvars.iv
  store i8 %136, i8* %scevgep22, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %34, %indvars.iv.next
  br i1 %exitcond, label %105, label %.loopexit

.loopexit:                                        ; preds = %135
  br label %137

137:                                              ; preds = %.loopexit, %96
  %138 = getelementptr inbounds i8, i8* %.0313, i64 %33
  %139 = getelementptr inbounds i8, i8* %.0214, i64 %85
  %140 = icmp ult i8* %139, %93
  br i1 %140, label %96, label %._crit_edge

._crit_edge:                                      ; preds = %137
  br label %141

141:                                              ; preds = %._crit_edge, %87
  %142 = add i32 %.115, %.06
  %143 = icmp ult i32 %142, %16
  br i1 %143, label %87, label %..loopexit10_crit_edge

..loopexit10_crit_edge:                           ; preds = %141
  br label %.loopexit10

.loopexit10:                                      ; preds = %..loopexit10_crit_edge, %83
  br label %144

144:                                              ; preds = %.loopexit10, %39
  %.0919 = phi i32 [ %.0920, %.loopexit10 ], [ %.0918, %39 ]
  %145 = add nsw i32 %.0919, 1
  %146 = icmp slt i32 %145, %.04
  br i1 %146, label %35, label %147

147:                                              ; preds = %144
  %148 = zext i1 %24 to i64
  ret i32 1
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_image_read_background(i8* %0) #11 {
  %2 = bitcast i8* %0 to %struct.png_image_read_control*
  %3 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 0
  %4 = load %struct.png_image*, %struct.png_image** %3, align 8
  %5 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 0
  %6 = load %struct.png_control*, %struct.png_control** %5, align 8
  %7 = getelementptr inbounds %struct.png_control, %struct.png_control* %6, i32 0, i32 0
  %8 = load %struct.png_struct_def*, %struct.png_struct_def** %7, align 8
  %9 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 0
  %10 = load %struct.png_control*, %struct.png_control** %9, align 8
  %11 = getelementptr inbounds %struct.png_control, %struct.png_control* %10, i32 0, i32 1
  %12 = load %struct.png_info_def*, %struct.png_info_def** %11, align 8
  %13 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 17
  %18 = load i32, i32* %17, align 4
  %19 = and i32 %18, 6291456
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %1
  call void @png_error(%struct.png_struct_def* %8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.57.162, i32 0, i32 0)) #24
  unreachable

22:                                               ; preds = %1
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 17
  %24 = load i32, i32* %23, align 4
  %25 = and i32 %24, 128
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  call void @png_error(%struct.png_struct_def* %8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.58.163, i32 0, i32 0)) #24
  unreachable

28:                                               ; preds = %22
  %29 = call zeroext i8 @png_get_channels(%struct.png_struct_def* %8, %struct.png_info_def* %12)
  %30 = zext i8 %29 to i32
  %31 = icmp ne i32 %30, 2
  br i1 %31, label %32, label %33

32:                                               ; preds = %28
  call void @png_error(%struct.png_struct_def* %8, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.59.164, i32 0, i32 0)) #24
  unreachable

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 4
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %44

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 4
  %40 = load i32, i32* %39, align 4
  %41 = and i32 %40, 1
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %38
  call void @png_error(%struct.png_struct_def* %8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.60.165, i32 0, i32 0)) #24
  unreachable

44:                                               ; preds = %38, %33
  %45 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 58
  %46 = load i8, i8* %45, align 4
  %47 = zext i8 %46 to i32
  switch i32 %47, label %49 [
    i32 0, label %50
    i32 1, label %48
  ]

48:                                               ; preds = %44
  br label %50

49:                                               ; preds = %44
  call void @png_error(%struct.png_struct_def* %8, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.52.166, i32 0, i32 0)) #24
  unreachable

50:                                               ; preds = %44, %48
  %.010 = phi i32 [ 7, %48 ], [ 1, %44 ]
  %51 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %12, i32 0, i32 7
  %52 = load i8, i8* %51, align 4
  %53 = zext i8 %52 to i32
  switch i32 %53, label %369 [
    i32 8, label %54
    i32 16, label %246
  ]

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 6
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 7
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 58
  %60 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 4
  %61 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 4
  %62 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 5
  %63 = zext i32 %16 to i64
  %64 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 5
  %65 = zext i32 %16 to i64
  br label %66

66:                                               ; preds = %54, %243
  %.0842 = phi i32 [ 0, %54 ], [ %244, %243 ]
  %67 = load i8, i8* %59, align 4
  %68 = zext i8 %67 to i32
  %69 = icmp eq i32 %68, 1
  br i1 %69, label %70, label %112

70:                                               ; preds = %66
  %71 = icmp sgt i32 %.0842, 1
  %72 = sub nsw i32 7, %.0842
  %73 = ashr i32 %72, 1
  %74 = select i1 %71, i32 %73, i32 3
  %75 = shl i32 1, %74
  %76 = sub nsw i32 %75, 1
  %77 = and i32 1, %.0842
  %78 = add nsw i32 %.0842, 1
  %79 = ashr i32 %78, 1
  %80 = sub nsw i32 3, %79
  %81 = shl i32 %77, %80
  %82 = and i32 %81, 7
  %83 = sub nsw i32 %76, %82
  %84 = add i32 %16, %83
  %85 = icmp sgt i32 %.0842, 1
  %86 = sub nsw i32 7, %.0842
  %87 = ashr i32 %86, 1
  %88 = select i1 %85, i32 %87, i32 3
  %89 = lshr i32 %84, %88
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %243, label %91

91:                                               ; preds = %70
  %92 = and i32 1, %.0842
  %93 = add nsw i32 %.0842, 1
  %94 = ashr i32 %93, 1
  %95 = sub nsw i32 3, %94
  %96 = shl i32 %92, %95
  %97 = and i32 %96, 7
  %98 = sub nsw i32 7, %.0842
  %99 = ashr i32 %98, 1
  %100 = shl i32 1, %99
  %101 = xor i32 %.0842, -1
  %102 = and i32 1, %101
  %103 = ashr i32 %.0842, 1
  %104 = sub nsw i32 3, %103
  %105 = shl i32 %102, %104
  %106 = and i32 %105, 7
  %107 = icmp sgt i32 %.0842, 2
  %108 = sub nsw i32 %.0842, 1
  %109 = ashr i32 %108, 1
  %110 = ashr i32 8, %109
  %111 = select i1 %107, i32 %110, i32 8
  br label %112

112:                                              ; preds = %66, %91
  %.0844 = phi i32 [ %.0842, %91 ], [ %.0842, %66 ]
  %.017 = phi i32 [ %106, %91 ], [ 0, %66 ]
  %.016 = phi i32 [ %111, %91 ], [ 1, %66 ]
  %.015 = phi i32 [ %100, %91 ], [ 1, %66 ]
  %.014 = phi i32 [ %97, %91 ], [ 0, %66 ]
  %113 = load %struct.png_color_struct*, %struct.png_color_struct** %60, align 8
  %114 = icmp eq %struct.png_color_struct* %113, null
  br i1 %114, label %.preheader, label %177

.preheader:                                       ; preds = %112
  %115 = zext i32 %.014 to i64
  %116 = zext i32 %.015 to i64
  %117 = icmp ult i32 %.017, %14
  br i1 %117, label %.lr.ph41, label %.loopexit

.lr.ph41:                                         ; preds = %.preheader
  br label %118

118:                                              ; preds = %.lr.ph41, %174
  %.11840 = phi i32 [ %.017, %.lr.ph41 ], [ %175, %174 ]
  %119 = load i8*, i8** %64, align 8
  %120 = zext i32 %.11840 to i64
  %121 = mul nsw i64 %120, %58
  %122 = getelementptr inbounds i8, i8* %56, i64 %121
  %123 = getelementptr inbounds i8, i8* %122, i64 %65
  call void @png_read_row(%struct.png_struct_def* %8, i8* %119, i8* null)
  %124 = getelementptr inbounds i8, i8* %122, i64 %115
  %125 = icmp ult i8* %124, %123
  br i1 %125, label %.lr.ph38, label %174

.lr.ph38:                                         ; preds = %118
  %scevgep58 = getelementptr i8, i8* %119, i64 1
  br label %126

126:                                              ; preds = %.lr.ph38, %171
  %lsr.iv59 = phi i8* [ %scevgep58, %.lr.ph38 ], [ %scevgep60, %171 ]
  %.02035 = phi i8* [ %124, %.lr.ph38 ], [ %172, %171 ]
  %scevgep61 = getelementptr i8, i8* %lsr.iv59, i64 -1
  %127 = load i8, i8* %lsr.iv59, align 1
  %128 = zext i8 %127 to i32
  %129 = icmp sgt i32 %128, 0
  br i1 %129, label %130, label %171

130:                                              ; preds = %126
  %131 = load i8, i8* %scevgep61, align 1
  %132 = zext i8 %131 to i32
  %133 = zext i8 %127 to i32
  %134 = icmp slt i32 %133, 255
  br i1 %134, label %135, label %169

135:                                              ; preds = %130
  %136 = zext i32 %132 to i64
  %137 = getelementptr inbounds [256 x i16], [256 x i16]* @png_sRGB_table, i64 0, i64 %136
  %138 = load i16, i16* %137, align 2
  %139 = zext i16 %138 to i32
  %140 = zext i8 %127 to i32
  %141 = mul nsw i32 %139, %140
  %142 = load i8, i8* %.02035, align 1
  %143 = zext i8 %142 to i64
  %144 = getelementptr inbounds [256 x i16], [256 x i16]* @png_sRGB_table, i64 0, i64 %143
  %145 = load i16, i16* %144, align 2
  %146 = zext i16 %145 to i32
  %147 = zext i8 %127 to i32
  %148 = sub nsw i32 255, %147
  %149 = mul nsw i32 %146, %148
  %150 = add i32 %141, %149
  %151 = lshr i32 %150, 15
  %152 = zext i32 %151 to i64
  %153 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %152
  %154 = load i16, i16* %153, align 2
  %155 = zext i16 %154 to i32
  %156 = and i32 %150, 32767
  %157 = lshr i32 %150, 15
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %158
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = mul i32 %156, %161
  %163 = lshr i32 %162, 12
  %164 = add i32 %155, %163
  %165 = lshr i32 %164, 8
  %166 = and i32 255, %165
  %167 = trunc i32 %166 to i8
  %168 = zext i8 %167 to i32
  br label %169

169:                                              ; preds = %135, %130
  %.023 = phi i32 [ %168, %135 ], [ %132, %130 ]
  %170 = trunc i32 %.023 to i8
  store i8 %170, i8* %.02035, align 1
  br label %171

171:                                              ; preds = %169, %126
  %172 = getelementptr inbounds i8, i8* %.02035, i64 %116
  %scevgep60 = getelementptr i8, i8* %lsr.iv59, i64 2
  %173 = icmp ult i8* %172, %123
  br i1 %173, label %126, label %._crit_edge39

._crit_edge39:                                    ; preds = %171
  br label %174

174:                                              ; preds = %._crit_edge39, %118
  %175 = add i32 %.11840, %.016
  %176 = icmp ult i32 %175, %14
  br i1 %176, label %118, label %..loopexit_crit_edge

177:                                              ; preds = %112
  %178 = load %struct.png_color_struct*, %struct.png_color_struct** %61, align 8
  %179 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %178, i32 0, i32 1
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i64
  %182 = getelementptr inbounds [256 x i16], [256 x i16]* @png_sRGB_table, i64 0, i64 %181
  %183 = load i16, i16* %182, align 2
  %184 = zext i32 %.014 to i64
  %185 = zext i16 %183 to i32
  %186 = zext i32 %.015 to i64
  %187 = icmp ult i32 %.017, %14
  br i1 %187, label %.lr.ph34, label %.loopexit24

.lr.ph34:                                         ; preds = %177
  br label %188

188:                                              ; preds = %.lr.ph34, %240
  %.231 = phi i32 [ %.017, %.lr.ph34 ], [ %241, %240 ]
  %189 = load i8*, i8** %62, align 8
  %190 = zext i32 %.231 to i64
  %191 = mul nsw i64 %190, %58
  %192 = getelementptr inbounds i8, i8* %56, i64 %191
  %193 = getelementptr inbounds i8, i8* %192, i64 %63
  call void @png_read_row(%struct.png_struct_def* %8, i8* %189, i8* null)
  %194 = getelementptr inbounds i8, i8* %192, i64 %184
  %195 = icmp ult i8* %194, %193
  br i1 %195, label %.lr.ph, label %240

.lr.ph:                                           ; preds = %188
  %scevgep = getelementptr i8, i8* %189, i64 1
  br label %196

196:                                              ; preds = %.lr.ph, %237
  %lsr.iv = phi i8* [ %scevgep, %.lr.ph ], [ %scevgep56, %237 ]
  %.02129 = phi i8* [ %194, %.lr.ph ], [ %238, %237 ]
  %scevgep57 = getelementptr i8, i8* %lsr.iv, i64 -1
  %197 = load i8, i8* %lsr.iv, align 1
  %198 = zext i8 %197 to i32
  %199 = icmp sgt i32 %198, 0
  br i1 %199, label %200, label %236

200:                                              ; preds = %196
  %201 = load i8, i8* %scevgep57, align 1
  %202 = zext i8 %201 to i32
  %203 = zext i8 %197 to i32
  %204 = icmp slt i32 %203, 255
  br i1 %204, label %205, label %234

205:                                              ; preds = %200
  %206 = zext i32 %202 to i64
  %207 = getelementptr inbounds [256 x i16], [256 x i16]* @png_sRGB_table, i64 0, i64 %206
  %208 = load i16, i16* %207, align 2
  %209 = zext i16 %208 to i32
  %210 = zext i8 %197 to i32
  %211 = mul nsw i32 %209, %210
  %212 = zext i8 %197 to i32
  %213 = sub nsw i32 255, %212
  %214 = mul nsw i32 %185, %213
  %215 = add i32 %211, %214
  %216 = lshr i32 %215, 15
  %217 = zext i32 %216 to i64
  %218 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %217
  %219 = load i16, i16* %218, align 2
  %220 = zext i16 %219 to i32
  %221 = and i32 %215, 32767
  %222 = lshr i32 %215, 15
  %223 = zext i32 %222 to i64
  %224 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %223
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  %227 = mul i32 %221, %226
  %228 = lshr i32 %227, 12
  %229 = add i32 %220, %228
  %230 = lshr i32 %229, 8
  %231 = and i32 255, %230
  %232 = trunc i32 %231 to i8
  %233 = zext i8 %232 to i32
  br label %234

234:                                              ; preds = %205, %200
  %.012 = phi i32 [ %233, %205 ], [ %202, %200 ]
  %235 = trunc i32 %.012 to i8
  store i8 %235, i8* %.02129, align 1
  br label %237

236:                                              ; preds = %196
  store i8 %180, i8* %.02129, align 1
  br label %237

237:                                              ; preds = %236, %234
  %.02130 = phi i8* [ %.02129, %236 ], [ %.02129, %234 ]
  %238 = getelementptr inbounds i8, i8* %.02130, i64 %186
  %239 = icmp ult i8* %238, %193
  %scevgep56 = getelementptr i8, i8* %lsr.iv, i64 2
  br i1 %239, label %196, label %._crit_edge

._crit_edge:                                      ; preds = %237
  br label %240

240:                                              ; preds = %._crit_edge, %188
  %241 = add i32 %.231, %.016
  %242 = icmp ult i32 %241, %14
  br i1 %242, label %188, label %..loopexit24_crit_edge

..loopexit_crit_edge:                             ; preds = %174
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader
  br label %243

..loopexit24_crit_edge:                           ; preds = %240
  br label %.loopexit24

.loopexit24:                                      ; preds = %..loopexit24_crit_edge, %177
  br label %243

243:                                              ; preds = %.loopexit24, %.loopexit, %70
  %.0843 = phi i32 [ %.0844, %.loopexit24 ], [ %.0844, %.loopexit ], [ %.0842, %70 ]
  %244 = add nsw i32 %.0843, 1
  %245 = icmp slt i32 %244, %.010
  br i1 %245, label %66, label %.loopexit25

246:                                              ; preds = %50
  %247 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 6
  %248 = load i8*, i8** %247, align 8
  %249 = bitcast i8* %248 to i16*
  %250 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 7
  %251 = load i64, i64* %250, align 8
  %252 = sdiv i64 %251, 2
  %253 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 4
  %254 = load i32, i32* %253, align 4
  %255 = and i32 %254, 1
  %256 = icmp ne i32 %255, 0
  %257 = zext i1 %256 to i32
  %258 = add i32 1, %257
  %259 = icmp ne i32 %257, 0
  br i1 %259, label %260, label %265

260:                                              ; preds = %246
  %261 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 4
  %262 = load i32, i32* %261, align 4
  %263 = and i32 %262, 32
  %264 = icmp ne i32 %263, 0
  %spec.select = select i1 %264, i32 1, i32 0
  br label %265

265:                                              ; preds = %260, %246
  %.011 = phi i32 [ 0, %246 ], [ %spec.select, %260 ]
  %266 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 58
  %267 = mul i32 %16, %258
  %268 = zext i32 %267 to i64
  %269 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 5
  %270 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 5
  %271 = sext i32 %.011 to i64
  %272 = icmp ne i32 %257, 0
  %273 = xor i32 1, %.011
  %274 = sext i32 %273 to i64
  %275 = shl nuw nsw i64 %271, 1
  %scevgep62 = getelementptr i8, i8* %248, i64 %275
  %276 = shl i64 %252, 1
  %277 = shl nuw nsw i64 %274, 1
  %scevgep67 = getelementptr i8, i8* %248, i64 %277
  br label %278

278:                                              ; preds = %265, %366
  %.1953 = phi i32 [ 0, %265 ], [ %367, %366 ]
  %279 = load i8, i8* %266, align 4
  %280 = zext i8 %279 to i32
  %281 = icmp eq i32 %280, 1
  br i1 %281, label %282, label %326

282:                                              ; preds = %278
  %283 = icmp sgt i32 %.1953, 1
  %284 = sub nsw i32 7, %.1953
  %285 = ashr i32 %284, 1
  %286 = select i1 %283, i32 %285, i32 3
  %287 = shl i32 1, %286
  %288 = sub nsw i32 %287, 1
  %289 = and i32 1, %.1953
  %290 = add nsw i32 %.1953, 1
  %291 = ashr i32 %290, 1
  %292 = sub nsw i32 3, %291
  %293 = shl i32 %289, %292
  %294 = and i32 %293, 7
  %295 = sub nsw i32 %288, %294
  %296 = add i32 %16, %295
  %297 = icmp sgt i32 %.1953, 1
  %298 = sub nsw i32 7, %.1953
  %299 = ashr i32 %298, 1
  %300 = select i1 %297, i32 %299, i32 3
  %301 = lshr i32 %296, %300
  %302 = icmp eq i32 %301, 0
  br i1 %302, label %366, label %303

303:                                              ; preds = %282
  %304 = and i32 1, %.1953
  %305 = add nsw i32 %.1953, 1
  %306 = ashr i32 %305, 1
  %307 = sub nsw i32 3, %306
  %308 = shl i32 %304, %307
  %309 = and i32 %308, 7
  %310 = mul i32 %309, %258
  %311 = sub nsw i32 7, %.1953
  %312 = ashr i32 %311, 1
  %313 = shl i32 1, %312
  %314 = mul i32 %313, %258
  %315 = xor i32 %.1953, -1
  %316 = and i32 1, %315
  %317 = ashr i32 %.1953, 1
  %318 = sub nsw i32 3, %317
  %319 = shl i32 %316, %318
  %320 = and i32 %319, 7
  %321 = icmp sgt i32 %.1953, 2
  %322 = sub nsw i32 %.1953, 1
  %323 = ashr i32 %322, 1
  %324 = ashr i32 8, %323
  %325 = select i1 %321, i32 %324, i32 8
  br label %326

326:                                              ; preds = %278, %303
  %.1955 = phi i32 [ %.1953, %303 ], [ %.1953, %278 ]
  %.07 = phi i32 [ %310, %303 ], [ 0, %278 ]
  %.06 = phi i32 [ %314, %303 ], [ %258, %278 ]
  %.05 = phi i32 [ %325, %303 ], [ 1, %278 ]
  %.03 = phi i32 [ %320, %303 ], [ 0, %278 ]
  %327 = zext i32 %.07 to i64
  %328 = zext i32 %.06 to i64
  %329 = icmp ult i32 %.03, %14
  br i1 %329, label %.lr.ph52, label %.loopexit26

.lr.ph52:                                         ; preds = %326
  %330 = shl nuw nsw i64 %327, 1
  %scevgep63 = getelementptr i8, i8* %scevgep62, i64 %330
  %331 = shl nuw nsw i64 %328, 1
  %scevgep68 = getelementptr i8, i8* %scevgep67, i64 %330
  %scevgep71 = getelementptr i8, i8* %248, i64 %330
  br label %332

332:                                              ; preds = %.lr.ph52, %363
  %.1450 = phi i32 [ %.03, %.lr.ph52 ], [ %364, %363 ]
  %333 = zext i32 %.1450 to i64
  %334 = mul i64 %276, %333
  %335 = zext i32 %.1450 to i64
  %336 = mul nsw i64 %335, %252
  %337 = getelementptr inbounds i16, i16* %249, i64 %336
  %338 = getelementptr inbounds i16, i16* %337, i64 %268
  %339 = load i8*, i8** %269, align 8
  call void @png_read_row(%struct.png_struct_def* %8, i8* %339, i8* null)
  %340 = load i8*, i8** %270, align 8
  %341 = bitcast i8* %340 to i16*
  %342 = getelementptr inbounds i16, i16* %337, i64 %327
  %343 = icmp ult i16* %342, %338
  br i1 %343, label %.lr.ph48, label %363

.lr.ph48:                                         ; preds = %332
  br label %344

344:                                              ; preds = %.lr.ph48, %361
  %lsr.iv64 = phi i64 [ %334, %.lr.ph48 ], [ %lsr.iv.next, %361 ]
  %.0245 = phi i16* [ %341, %.lr.ph48 ], [ %scevgep75, %361 ]
  %345 = load i16, i16* %.0245, align 2
  %346 = zext i16 %345 to i32
  %scevgep74 = getelementptr i16, i16* %.0245, i64 1
  %347 = load i16, i16* %scevgep74, align 2
  %348 = zext i16 %347 to i32
  %349 = icmp sgt i32 %348, 0
  br i1 %349, label %350, label %358

350:                                              ; preds = %344
  %351 = zext i16 %347 to i32
  %352 = icmp slt i32 %351, 65535
  br i1 %352, label %353, label %358

353:                                              ; preds = %350
  %354 = zext i16 %347 to i32
  %355 = mul i32 %346, %354
  %356 = add i32 %355, 32767
  %357 = udiv i32 %356, 65535
  br label %358

358:                                              ; preds = %344, %350, %353
  %.1 = phi i32 [ %357, %353 ], [ %346, %350 ], [ 0, %344 ]
  %359 = trunc i32 %.1 to i16
  %scevgep65 = getelementptr i8, i8* %scevgep63, i64 %lsr.iv64
  %scevgep6566 = bitcast i8* %scevgep65 to i16*
  store i16 %359, i16* %scevgep6566, align 2
  br i1 %272, label %360, label %361

360:                                              ; preds = %358
  %scevgep69 = getelementptr i8, i8* %scevgep68, i64 %lsr.iv64
  %scevgep6970 = bitcast i8* %scevgep69 to i16*
  store i16 %347, i16* %scevgep6970, align 2
  br label %361

361:                                              ; preds = %360, %358
  %lsr.iv.next = add i64 %lsr.iv64, %331
  %scevgep72 = getelementptr i8, i8* %scevgep71, i64 %lsr.iv.next
  %scevgep7273 = bitcast i8* %scevgep72 to i16*
  %362 = icmp ult i16* %scevgep7273, %338
  %scevgep75 = getelementptr i16, i16* %.0245, i64 2
  br i1 %362, label %344, label %._crit_edge49

._crit_edge49:                                    ; preds = %361
  br label %363

363:                                              ; preds = %._crit_edge49, %332
  %364 = add i32 %.1450, %.05
  %365 = icmp ult i32 %364, %14
  br i1 %365, label %332, label %..loopexit26_crit_edge

..loopexit26_crit_edge:                           ; preds = %363
  br label %.loopexit26

.loopexit26:                                      ; preds = %..loopexit26_crit_edge, %326
  br label %366

366:                                              ; preds = %.loopexit26, %282
  %.1954 = phi i32 [ %.1955, %.loopexit26 ], [ %.1953, %282 ]
  %367 = add nsw i32 %.1954, 1
  %368 = icmp slt i32 %367, %.010
  br i1 %368, label %278, label %.loopexit27

369:                                              ; preds = %50
  call void @png_error(%struct.png_struct_def* %8, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.61.167, i32 0, i32 0)) #24
  unreachable

.loopexit25:                                      ; preds = %243
  br label %370

.loopexit27:                                      ; preds = %366
  br label %370

370:                                              ; preds = %.loopexit27, %.loopexit25
  ret i32 1
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_keep_unknown_chunks(%struct.png_struct_def* noalias %0, i32 %1, i8* %2, i32 %3) #11 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  br i1 %5, label %88, label %6

6:                                                ; preds = %4
  %7 = icmp slt i32 %1, 0
  %8 = icmp sge i32 %1, 4
  %or.cond = or i1 %7, %8
  br i1 %or.cond, label %9, label %10

9:                                                ; preds = %6
  call void @png_app_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.46.459, i32 0, i32 0))
  br label %88

10:                                               ; preds = %6
  %11 = icmp sle i32 %3, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %10
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 115
  store i32 %1, i32* %13, align 8
  %14 = icmp eq i32 %3, 0
  br i1 %14, label %88, label %15

15:                                               ; preds = %12, %10
  %16 = icmp slt i32 %3, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %15
  %18 = icmp eq i8* %2, null
  br i1 %18, label %19, label %20

19:                                               ; preds = %17
  call void @png_app_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.47.460, i32 0, i32 0))
  br label %88

20:                                               ; preds = %17, %15
  %.07 = phi i32 [ 18, %15 ], [ %3, %17 ]
  %.03 = phi i8* [ getelementptr inbounds ([90 x i8], [90 x i8]* @png_set_keep_unknown_chunks.chunks_to_ignore, i32 0, i32 0), %15 ], [ %2, %17 ]
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 116
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 117
  %24 = load i8*, i8** %23, align 8
  %25 = icmp eq i8* %24, null
  %spec.select = select i1 %25, i32 0, i32 %22
  %26 = add i32 %.07, %spec.select
  %27 = icmp ugt i32 %26, 858993459
  br i1 %27, label %28, label %29

28:                                               ; preds = %20
  call void @png_app_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.48.461, i32 0, i32 0))
  br label %88

29:                                               ; preds = %20
  %30 = icmp ne i32 %1, 0
  br i1 %30, label %31, label %42

31:                                               ; preds = %29
  %32 = add i32 %.07, %spec.select
  %33 = mul i32 5, %32
  %34 = zext i32 %33 to i64
  %35 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %34)
  %36 = icmp ugt i32 %spec.select, 0
  br i1 %36, label %37, label %47

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 117
  %39 = load i8*, i8** %38, align 8
  %40 = mul i32 5, %spec.select
  %41 = zext i32 %40 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 %39, i64 %41, i1 false)
  br label %47

42:                                               ; preds = %29
  %43 = icmp ugt i32 %spec.select, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %42
  %45 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 117
  %46 = load i8*, i8** %45, align 8
  br label %47

47:                                               ; preds = %44, %42, %31, %37
  %.16 = phi i8* [ %35, %37 ], [ %35, %31 ], [ %46, %44 ], [ null, %42 ]
  %48 = icmp ne i8* %.16, null
  br i1 %48, label %.preheader13, label %74

.preheader13:                                     ; preds = %47
  %49 = icmp ult i32 0, %.07
  br i1 %49, label %.lr.ph20, label %.preheader

.lr.ph20:                                         ; preds = %.preheader13
  %wide.trip.count = zext i32 %.07 to i64
  %50 = mul nuw nsw i64 %wide.trip.count, 5
  br label %52

..preheader_crit_edge:                            ; preds = %52
  %split21 = phi i32 [ %55, %52 ]
  %split22 = phi i32 [ 0, %52 ]
  %split23 = phi i8* [ %.16, %52 ]
  %split24 = phi i8* [ %.16, %52 ]
  %split25 = phi i32 [ 0, %52 ]
  br label %.preheader

.preheader:                                       ; preds = %..preheader_crit_edge, %.preheader13
  %.112.lcssa.ph = phi i32 [ %split21, %..preheader_crit_edge ], [ %spec.select, %.preheader13 ]
  %.18.ph = phi i32 [ %split22, %..preheader_crit_edge ], [ 0, %.preheader13 ]
  %.04.ph = phi i8* [ %split23, %..preheader_crit_edge ], [ %.16, %.preheader13 ]
  %.01.ph = phi i8* [ %split24, %..preheader_crit_edge ], [ %.16, %.preheader13 ]
  %.1.ph = phi i32 [ %split25, %..preheader_crit_edge ], [ 0, %.preheader13 ]
  %51 = icmp ult i32 %.1.ph, %.112.lcssa.ph
  br i1 %51, label %.lr.ph, label %67

.lr.ph:                                           ; preds = %.preheader
  br label %56

52:                                               ; preds = %.lr.ph20, %52
  %lsr.iv28 = phi i64 [ 0, %.lr.ph20 ], [ %lsr.iv.next29, %52 ]
  %.11218 = phi i32 [ %spec.select, %.lr.ph20 ], [ %55, %52 ]
  %tmp = trunc i64 %lsr.iv28 to i32
  %53 = zext i32 %tmp to i64
  %54 = getelementptr inbounds i8, i8* %.03, i64 %53
  %55 = call i32 @add_one_chunk(i8* %.16, i32 %.11218, i8* %54, i32 %1)
  %lsr.iv.next29 = add nuw nsw i64 %lsr.iv28, 5
  %exitcond27 = icmp ne i64 %50, %lsr.iv.next29
  br i1 %exitcond27, label %52, label %..preheader_crit_edge

56:                                               ; preds = %.lr.ph, %65
  %lsr.iv = phi i32 [ %.112.lcssa.ph, %.lr.ph ], [ %lsr.iv.next, %65 ]
  %.0116 = phi i8* [ %.01.ph, %.lr.ph ], [ %.12, %65 ]
  %.0415 = phi i8* [ %.04.ph, %.lr.ph ], [ %66, %65 ]
  %.1814 = phi i32 [ %.18.ph, %.lr.ph ], [ %.29, %65 ]
  %scevgep = getelementptr i8, i8* %.0415, i64 4
  %57 = load i8, i8* %scevgep, align 1
  %58 = icmp ne i8 %57, 0
  br i1 %58, label %59, label %65

59:                                               ; preds = %56
  %60 = icmp ne i8* %.0415, %.0116
  br i1 %60, label %61, label %62

61:                                               ; preds = %59
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %.0116, i8* align 1 %.0415, i64 5, i1 false)
  br label %62

62:                                               ; preds = %61, %59
  %63 = getelementptr inbounds i8, i8* %.0116, i64 5
  %64 = add i32 %.1814, 1
  br label %65

65:                                               ; preds = %56, %62
  %.29 = phi i32 [ %64, %62 ], [ %.1814, %56 ]
  %.12 = phi i8* [ %63, %62 ], [ %.0116, %56 ]
  %66 = getelementptr inbounds i8, i8* %.0415, i64 5
  %lsr.iv.next = add i32 %lsr.iv, -1
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  br i1 %exitcond, label %56, label %._crit_edge

._crit_edge:                                      ; preds = %65
  %split = phi i32 [ %.29, %65 ]
  br label %67

67:                                               ; preds = %._crit_edge, %.preheader
  %.18.lcssa = phi i32 [ %split, %._crit_edge ], [ %.18.ph, %.preheader ]
  %68 = icmp eq i32 %.18.lcssa, 0
  br i1 %68, label %69, label %74

69:                                               ; preds = %67
  %70 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 117
  %71 = load i8*, i8** %70, align 8
  %72 = icmp ne i8* %71, %.16
  br i1 %72, label %73, label %74

73:                                               ; preds = %69
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %.16)
  br label %74

74:                                               ; preds = %47, %67, %73, %69
  %.310 = phi i32 [ %.18.lcssa, %69 ], [ %.18.lcssa, %73 ], [ %.18.lcssa, %67 ], [ 0, %47 ]
  %.3 = phi i8* [ %.16, %67 ], [ null, %73 ], [ null, %69 ], [ %.16, %47 ]
  %75 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 116
  store i32 %.310, i32* %75, align 4
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 117
  %77 = load i8*, i8** %76, align 8
  %78 = icmp ne i8* %77, %.3
  br i1 %78, label %79, label %88

79:                                               ; preds = %74
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 117
  %81 = load i8*, i8** %80, align 8
  %82 = icmp ne i8* %81, null
  br i1 %82, label %83, label %86

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 117
  %85 = load i8*, i8** %84, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %85)
  br label %86

86:                                               ; preds = %83, %79
  %87 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 117
  store i8* %.3, i8** %87, align 8
  br label %88

88:                                               ; preds = %12, %4, %9, %19, %28, %86, %74
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_one_chunk(i8* %0, i32 %1, i8* %2, i32 %3) #11 {
  %5 = icmp ult i32 0, %1
  br i1 %5, label %.lr.ph, label %14

.lr.ph:                                           ; preds = %4
  br label %6

6:                                                ; preds = %.lr.ph, %12
  %lsr.iv = phi i32 [ %1, %.lr.ph ], [ %lsr.iv.next, %12 ]
  %.016 = phi i8* [ %0, %.lr.ph ], [ %13, %12 ]
  %7 = call i32 @memcmp(i8* %.016, i8* %2, i64 4) #26
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %6
  %.01.lcssa4 = phi i8* [ %.016, %6 ]
  %10 = trunc i32 %3 to i8
  %11 = getelementptr inbounds i8, i8* %.01.lcssa4, i64 4
  store i8 %10, i8* %11, align 1
  br label %20

12:                                               ; preds = %6
  %13 = getelementptr inbounds i8, i8* %.016, i64 5
  %lsr.iv.next = add i32 %lsr.iv, -1
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  br i1 %exitcond, label %6, label %._crit_edge

._crit_edge:                                      ; preds = %12
  %split = phi i8* [ %13, %12 ]
  br label %14

14:                                               ; preds = %._crit_edge, %4
  %.01.lcssa = phi i8* [ %split, %._crit_edge ], [ %0, %4 ]
  %15 = icmp ne i32 %3, 0
  br i1 %15, label %16, label %._crit_edge7

._crit_edge7:                                     ; preds = %14
  br label %20

16:                                               ; preds = %14
  %17 = add i32 %1, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %.01.lcssa, i8* align 1 %2, i64 4, i1 false)
  %18 = trunc i32 %3 to i8
  %19 = getelementptr inbounds i8, i8* %.01.lcssa, i64 4
  store i8 %18, i8* %19, align 1
  br label %20

20:                                               ; preds = %._crit_edge7, %16, %9
  %.0 = phi i32 [ %1, %9 ], [ %17, %16 ], [ %1, %._crit_edge7 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_filler(%struct.png_struct_def.199* noalias %0, i32 %1, i32 %2) #11 {
  %4 = icmp eq %struct.png_struct_def.199* %0, null
  br i1 %4, label %41, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 15
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 32768
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %5
  %11 = trunc i32 %1 to i16
  %12 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 71
  store i16 %11, i16* %12, align 2
  br label %28

13:                                               ; preds = %5
  %14 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 61
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  switch i32 %16, label %27 [
    i32 2, label %17
    i32 0, label %19
  ]

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 66
  store i8 4, i8* %18, align 4
  br label %28

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 62
  %21 = load i8, i8* %20, align 8
  %22 = zext i8 %21 to i32
  %23 = icmp sge i32 %22, 8
  br i1 %23, label %24, label %26

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 66
  store i8 2, i8* %25, align 4
  br label %28

26:                                               ; preds = %19
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_app_error to void (%struct.png_struct_def.199*, i8*)*)(%struct.png_struct_def.199* %0, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.482, i32 0, i32 0))
  br label %41

27:                                               ; preds = %13
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_app_error to void (%struct.png_struct_def.199*, i8*)*)(%struct.png_struct_def.199* %0, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1.483, i32 0, i32 0))
  br label %41

28:                                               ; preds = %17, %24, %10
  %29 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 17
  %30 = load i32, i32* %29, align 4
  %31 = or i32 %30, 32768
  store i32 %31, i32* %29, align 4
  %32 = icmp eq i32 %2, 1
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 16
  %35 = load i32, i32* %34, align 8
  %36 = or i32 %35, 128
  store i32 %36, i32* %34, align 8
  br label %41

37:                                               ; preds = %28
  %38 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 16
  %39 = load i32, i32* %38, align 8
  %40 = and i32 %39, -129
  store i32 %40, i32* %38, align 8
  br label %41

41:                                               ; preds = %3, %26, %27, %37, %33
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @translate_gamma_flags(%struct.png_struct_def* noalias %0, i32 %1, i32 %2) #11 {
  switch i32 %1, label %11 [
    i32 -1, label %4
    i32 -100000, label %4
    i32 -2, label %9
    i32 -50000, label %9
  ]

4:                                                ; preds = %3, %3
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %6 = load i32, i32* %5, align 8
  %7 = or i32 %6, 4096
  store i32 %7, i32* %5, align 8
  %8 = icmp ne i32 %2, 0
  %. = select i1 %8, i32 220000, i32 45455
  br label %11

9:                                                ; preds = %3, %3
  %10 = icmp ne i32 %2, 0
  %.4 = select i1 %10, i32 151724, i32 65909
  br label %11

11:                                               ; preds = %9, %3, %4
  %.3 = phi i32 [ %., %4 ], [ %.4, %9 ], [ %1, %3 ]
  ret i32 %.3
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_image_read_and_map(i8* %0) #11 {
  %2 = bitcast i8* %0 to %struct.png_image_read_control*
  %3 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 0
  %4 = load %struct.png_image*, %struct.png_image** %3, align 8
  %5 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 0
  %6 = load %struct.png_control*, %struct.png_control** %5, align 8
  %7 = getelementptr inbounds %struct.png_control, %struct.png_control* %6, i32 0, i32 0
  %8 = load %struct.png_struct_def*, %struct.png_struct_def** %7, align 8
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 58
  %10 = load i8, i8* %9, align 4
  %11 = zext i8 %10 to i32
  switch i32 %11, label %13 [
    i32 0, label %14
    i32 1, label %12
  ]

12:                                               ; preds = %1
  br label %14

13:                                               ; preds = %1
  call void @png_error(%struct.png_struct_def* %8, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.52.166, i32 0, i32 0)) #24
  unreachable

14:                                               ; preds = %1, %12
  %.011 = phi i32 [ 7, %12 ], [ 1, %1 ]
  %15 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 10
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 6
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 7
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 58
  %26 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %2, i32 0, i32 5
  %27 = zext i32 %18 to i64
  br label %28

28:                                               ; preds = %14, %221
  %.01741 = phi i32 [ 0, %14 ], [ %222, %221 ]
  %29 = load i8, i8* %25, align 4
  %30 = zext i8 %29 to i32
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %32, label %74

32:                                               ; preds = %28
  %33 = icmp sgt i32 %.01741, 1
  %34 = sub nsw i32 7, %.01741
  %35 = ashr i32 %34, 1
  %36 = select i1 %33, i32 %35, i32 3
  %37 = shl i32 1, %36
  %38 = sub nsw i32 %37, 1
  %39 = and i32 1, %.01741
  %40 = add nsw i32 %.01741, 1
  %41 = ashr i32 %40, 1
  %42 = sub nsw i32 3, %41
  %43 = shl i32 %39, %42
  %44 = and i32 %43, 7
  %45 = sub nsw i32 %38, %44
  %46 = add i32 %18, %45
  %47 = icmp sgt i32 %.01741, 1
  %48 = sub nsw i32 7, %.01741
  %49 = ashr i32 %48, 1
  %50 = select i1 %47, i32 %49, i32 3
  %51 = lshr i32 %46, %50
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %221, label %53

53:                                               ; preds = %32
  %54 = and i32 1, %.01741
  %55 = add nsw i32 %.01741, 1
  %56 = ashr i32 %55, 1
  %57 = sub nsw i32 3, %56
  %58 = shl i32 %54, %57
  %59 = and i32 %58, 7
  %60 = sub nsw i32 7, %.01741
  %61 = ashr i32 %60, 1
  %62 = shl i32 1, %61
  %63 = xor i32 %.01741, -1
  %64 = and i32 1, %63
  %65 = ashr i32 %.01741, 1
  %66 = sub nsw i32 3, %65
  %67 = shl i32 %64, %66
  %68 = and i32 %67, 7
  %69 = icmp sgt i32 %.01741, 2
  %70 = sub nsw i32 %.01741, 1
  %71 = ashr i32 %70, 1
  %72 = ashr i32 8, %71
  %73 = select i1 %69, i32 %72, i32 8
  br label %74

74:                                               ; preds = %28, %53
  %.01743 = phi i32 [ %.01741, %53 ], [ %.01741, %28 ]
  %.016 = phi i32 [ %59, %53 ], [ 0, %28 ]
  %.015 = phi i32 [ %62, %53 ], [ 1, %28 ]
  %.014 = phi i32 [ %73, %53 ], [ 1, %28 ]
  %.012 = phi i32 [ %68, %53 ], [ 0, %28 ]
  %75 = zext i32 %.016 to i64
  %76 = zext i32 %.015 to i64
  %77 = zext i32 %.015 to i64
  %78 = zext i32 %.015 to i64
  %79 = zext i32 %.015 to i64
  %80 = icmp ult i32 %.012, %16
  br i1 %80, label %.lr.ph40, label %.loopexit24

.lr.ph40:                                         ; preds = %74
  br label %81

81:                                               ; preds = %.lr.ph40, %218
  %.11339 = phi i32 [ %.012, %.lr.ph40 ], [ %219, %218 ]
  %82 = load i8*, i8** %26, align 8
  %83 = zext i32 %.11339 to i64
  %84 = mul nsw i64 %83, %24
  %85 = getelementptr inbounds i8, i8* %22, i64 %84
  %86 = getelementptr inbounds i8, i8* %85, i64 %27
  call void @png_read_row(%struct.png_struct_def* %8, i8* %82, i8* null)
  %87 = getelementptr inbounds i8, i8* %85, i64 %75
  switch i32 %20, label %218 [
    i32 1, label %.preheader
    i32 2, label %.preheader18
    i32 3, label %.preheader20
    i32 4, label %.preheader22
  ]

.preheader22:                                     ; preds = %81
  %88 = icmp ult i8* %87, %86
  br i1 %88, label %.lr.ph, label %.loopexit23

.lr.ph:                                           ; preds = %.preheader22
  br label %155

.preheader20:                                     ; preds = %81
  %89 = icmp ult i8* %87, %86
  br i1 %89, label %.lr.ph31, label %.loopexit21

.lr.ph31:                                         ; preds = %.preheader20
  br label %132

.preheader18:                                     ; preds = %81
  %90 = icmp ult i8* %87, %86
  br i1 %90, label %.lr.ph35, label %.loopexit19

.lr.ph35:                                         ; preds = %.preheader18
  br label %118

.preheader:                                       ; preds = %81
  %91 = icmp ult i8* %87, %86
  br i1 %91, label %.lr.ph38, label %.loopexit

.lr.ph38:                                         ; preds = %.preheader
  br label %92

92:                                               ; preds = %.lr.ph38, %114
  %.0337 = phi i8* [ %87, %.lr.ph38 ], [ %116, %114 ]
  %.0736 = phi i8* [ %82, %.lr.ph38 ], [ %scevgep52, %114 ]
  %93 = load i8, i8* %.0736, align 1
  %94 = zext i8 %93 to i32
  %scevgep51 = getelementptr i8, i8* %.0736, i64 1
  %95 = load i8, i8* %scevgep51, align 1
  %96 = zext i8 %95 to i32
  %97 = icmp ugt i32 %96, 229
  br i1 %97, label %98, label %102

98:                                               ; preds = %92
  %99 = mul i32 231, %94
  %100 = add i32 %99, 128
  %101 = lshr i32 %100, 8
  br label %114

102:                                              ; preds = %92
  %103 = icmp ult i32 %96, 26
  br i1 %103, label %114, label %104

104:                                              ; preds = %102
  %105 = mul i32 %96, 5
  %106 = add i32 %105, 130
  %107 = lshr i32 %106, 8
  %108 = mul i32 6, %107
  %109 = add i32 226, %108
  %110 = mul i32 %94, 5
  %111 = add i32 %110, 130
  %112 = lshr i32 %111, 8
  %113 = add i32 %109, %112
  br label %114

114:                                              ; preds = %104, %102, %98
  %.12 = phi i32 [ %101, %98 ], [ %113, %104 ], [ 231, %102 ]
  %115 = trunc i32 %.12 to i8
  store i8 %115, i8* %.0337, align 1
  %116 = getelementptr inbounds i8, i8* %.0337, i64 %79
  %117 = icmp ult i8* %116, %86
  %scevgep52 = getelementptr i8, i8* %.0736, i64 2
  br i1 %117, label %92, label %..loopexit_crit_edge

118:                                              ; preds = %.lr.ph35, %129
  %.1433 = phi i8* [ %87, %.lr.ph35 ], [ %130, %129 ]
  %.1832 = phi i8* [ %82, %.lr.ph35 ], [ %scevgep50, %129 ]
  %119 = load i8, i8* %.1832, align 1
  %scevgep49 = getelementptr i8, i8* %.1832, i64 1
  %120 = load i8, i8* %scevgep49, align 1
  %121 = zext i8 %120 to i32
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %124

123:                                              ; preds = %118
  store i8 -2, i8* %.1433, align 1
  br label %129

124:                                              ; preds = %118
  %125 = zext i8 %119 to i32
  %126 = icmp ne i32 %125, 254
  br i1 %126, label %127, label %128

127:                                              ; preds = %124
  store i8 %119, i8* %.1433, align 1
  br label %129

128:                                              ; preds = %124
  store i8 -1, i8* %.1433, align 1
  br label %129

129:                                              ; preds = %123, %128, %127
  %130 = getelementptr inbounds i8, i8* %.1433, i64 %78
  %131 = icmp ult i8* %130, %86
  %scevgep50 = getelementptr i8, i8* %.1832, i64 2
  br i1 %131, label %118, label %..loopexit19_crit_edge

132:                                              ; preds = %.lr.ph31, %132
  %.2530 = phi i8* [ %87, %.lr.ph31 ], [ %153, %132 ]
  %.2929 = phi i8* [ %82, %.lr.ph31 ], [ %scevgep48, %132 ]
  %133 = load i8, i8* %.2929, align 1
  %134 = zext i8 %133 to i32
  %135 = mul nsw i32 %134, 5
  %136 = add nsw i32 %135, 130
  %137 = ashr i32 %136, 8
  %138 = mul nsw i32 6, %137
  %scevgep46 = getelementptr i8, i8* %.2929, i64 1
  %139 = load i8, i8* %scevgep46, align 1
  %140 = zext i8 %139 to i32
  %141 = mul nsw i32 %140, 5
  %142 = add nsw i32 %141, 130
  %143 = ashr i32 %142, 8
  %144 = add nsw i32 %138, %143
  %145 = mul nsw i32 6, %144
  %scevgep47 = getelementptr i8, i8* %.2929, i64 2
  %146 = load i8, i8* %scevgep47, align 1
  %147 = zext i8 %146 to i32
  %148 = mul nsw i32 %147, 5
  %149 = add nsw i32 %148, 130
  %150 = ashr i32 %149, 8
  %151 = add nsw i32 %145, %150
  %152 = trunc i32 %151 to i8
  store i8 %152, i8* %.2530, align 1
  %153 = getelementptr inbounds i8, i8* %.2530, i64 %77
  %154 = icmp ult i8* %153, %86
  %scevgep48 = getelementptr i8, i8* %.2929, i64 3
  br i1 %154, label %132, label %..loopexit21_crit_edge

155:                                              ; preds = %.lr.ph, %214
  %.3627 = phi i8* [ %87, %.lr.ph ], [ %216, %214 ]
  %.31025 = phi i8* [ %82, %.lr.ph ], [ %215, %214 ]
  %scevgep = getelementptr i8, i8* %.31025, i64 3
  %156 = load i8, i8* %scevgep, align 1
  %157 = zext i8 %156 to i32
  %158 = icmp uge i32 %157, 196
  br i1 %158, label %159, label %180

159:                                              ; preds = %155
  %160 = load i8, i8* %.31025, align 1
  %161 = zext i8 %160 to i32
  %162 = mul nsw i32 %161, 5
  %163 = add nsw i32 %162, 130
  %164 = ashr i32 %163, 8
  %165 = mul nsw i32 6, %164
  %scevgep44 = getelementptr i8, i8* %.31025, i64 1
  %166 = load i8, i8* %scevgep44, align 1
  %167 = zext i8 %166 to i32
  %168 = mul nsw i32 %167, 5
  %169 = add nsw i32 %168, 130
  %170 = ashr i32 %169, 8
  %171 = add nsw i32 %165, %170
  %172 = mul nsw i32 6, %171
  %scevgep45 = getelementptr i8, i8* %.31025, i64 2
  %173 = load i8, i8* %scevgep45, align 1
  %174 = zext i8 %173 to i32
  %175 = mul nsw i32 %174, 5
  %176 = add nsw i32 %175, 130
  %177 = ashr i32 %176, 8
  %178 = add nsw i32 %172, %177
  %179 = trunc i32 %178 to i8
  store i8 %179, i8* %.3627, align 1
  br label %214

180:                                              ; preds = %155
  %181 = icmp ult i32 %157, 64
  br i1 %181, label %182, label %183

182:                                              ; preds = %180
  store i8 -40, i8* %.3627, align 1
  br label %214

183:                                              ; preds = %180
  %184 = load i8, i8* %.31025, align 1
  %185 = zext i8 %184 to i32
  %186 = and i32 %185, 128
  %187 = icmp ne i32 %186, 0
  %spec.select = select i1 %187, i32 226, i32 217
  %188 = load i8, i8* %.31025, align 1
  %189 = zext i8 %188 to i32
  %190 = and i32 %189, 64
  %191 = icmp ne i32 %190, 0
  %192 = add i32 %spec.select, 9
  %.1 = select i1 %191, i32 %192, i32 %spec.select
  %193 = load i8, i8* %.31025, align 1
  %194 = zext i8 %193 to i32
  %195 = and i32 %194, 128
  %196 = icmp ne i32 %195, 0
  %197 = add i32 %.1, 3
  %.2 = select i1 %196, i32 %197, i32 %.1
  %198 = load i8, i8* %.31025, align 1
  %199 = zext i8 %198 to i32
  %200 = and i32 %199, 64
  %201 = icmp ne i32 %200, 0
  %202 = add i32 %.2, 3
  %.3 = select i1 %201, i32 %202, i32 %.2
  %203 = load i8, i8* %.31025, align 1
  %204 = zext i8 %203 to i32
  %205 = and i32 %204, 128
  %206 = icmp ne i32 %205, 0
  %207 = add i32 %.3, 1
  %.4 = select i1 %206, i32 %207, i32 %.3
  %208 = load i8, i8* %.31025, align 1
  %209 = zext i8 %208 to i32
  %210 = and i32 %209, 64
  %211 = icmp ne i32 %210, 0
  %212 = add i32 %.4, 1
  %.5 = select i1 %211, i32 %212, i32 %.4
  %213 = trunc i32 %.5 to i8
  store i8 %213, i8* %.3627, align 1
  br label %214

214:                                              ; preds = %182, %183, %159
  %215 = getelementptr inbounds i8, i8* %.31025, i64 4
  %216 = getelementptr inbounds i8, i8* %.3627, i64 %76
  %217 = icmp ult i8* %216, %86
  br i1 %217, label %155, label %..loopexit23_crit_edge

..loopexit_crit_edge:                             ; preds = %114
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader
  br label %218

..loopexit19_crit_edge:                           ; preds = %129
  br label %.loopexit19

.loopexit19:                                      ; preds = %..loopexit19_crit_edge, %.preheader18
  br label %218

..loopexit21_crit_edge:                           ; preds = %132
  br label %.loopexit21

.loopexit21:                                      ; preds = %..loopexit21_crit_edge, %.preheader20
  br label %218

..loopexit23_crit_edge:                           ; preds = %214
  br label %.loopexit23

.loopexit23:                                      ; preds = %..loopexit23_crit_edge, %.preheader22
  br label %218

218:                                              ; preds = %.loopexit23, %.loopexit21, %.loopexit19, %.loopexit, %81
  %219 = add i32 %.11339, %.014
  %220 = icmp ult i32 %219, %16
  br i1 %220, label %81, label %..loopexit24_crit_edge

..loopexit24_crit_edge:                           ; preds = %218
  br label %.loopexit24

.loopexit24:                                      ; preds = %..loopexit24_crit_edge, %74
  br label %221

221:                                              ; preds = %.loopexit24, %32
  %.01742 = phi i32 [ %.01743, %.loopexit24 ], [ %.01741, %32 ]
  %222 = add nsw i32 %.01742, 1
  %223 = icmp slt i32 %222, %.011
  br i1 %223, label %28, label %224

224:                                              ; preds = %221
  ret i32 1
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_create_colormap_entry(%struct.png_image_read_control* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6) #11 {
  %8 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %0, i32 0, i32 0
  %9 = load %struct.png_image*, %struct.png_image** %8, align 8
  %10 = getelementptr inbounds %struct.png_image, %struct.png_image* %9, i32 0, i32 4
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, 4
  %13 = icmp ne i32 %12, 0
  %14 = zext i1 %13 to i64
  %15 = select i1 %13, i32 2, i32 1
  %16 = getelementptr inbounds %struct.png_image, %struct.png_image* %9, i32 0, i32 4
  %17 = load i32, i32* %16, align 4
  %18 = and i32 %17, 2
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %7
  %21 = icmp ne i32 %2, %3
  %22 = icmp ne i32 %3, %4
  %spec.select = select i1 %21, i1 true, i1 %22
  br label %23

23:                                               ; preds = %20, %7
  %24 = phi i1 [ false, %7 ], [ %spec.select, %20 ]
  %25 = zext i1 %24 to i32
  %26 = icmp ugt i32 %1, 255
  br i1 %26, label %27, label %32

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.png_image, %struct.png_image* %9, i32 0, i32 0
  %29 = load %struct.png_control*, %struct.png_control** %28, align 8
  %30 = getelementptr inbounds %struct.png_control, %struct.png_control* %29, i32 0, i32 0
  %31 = load %struct.png_struct_def*, %struct.png_struct_def** %30, align 8
  call void @png_error(%struct.png_struct_def* %31, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.48.187, i32 0, i32 0)) #24
  unreachable

32:                                               ; preds = %23
  %33 = icmp eq i32 %6, 3
  br i1 %33, label %34, label %42

34:                                               ; preds = %32
  %35 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %0, i32 0, i32 8
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %34
  call void @set_file_encoding(%struct.png_image_read_control* %0)
  br label %39

39:                                               ; preds = %38, %34
  %40 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %0, i32 0, i32 8
  %41 = load i32, i32* %40, align 8
  br label %42

42:                                               ; preds = %39, %32
  %.027 = phi i32 [ %41, %39 ], [ %6, %32 ]
  switch i32 %.027, label %145 [
    i32 3, label %43
    i32 4, label %123
    i32 1, label %128
  ]

43:                                               ; preds = %42
  %44 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %0, i32 0, i32 9
  %45 = load i32, i32* %44, align 4
  %46 = mul i32 %2, 257
  %47 = call zeroext i16 @png_gamma_16bit_correct(i32 %46, i32 %45)
  %48 = zext i16 %47 to i32
  %49 = mul i32 %3, 257
  %50 = call zeroext i16 @png_gamma_16bit_correct(i32 %49, i32 %45)
  %51 = zext i16 %50 to i32
  %52 = mul i32 %4, 257
  %53 = call zeroext i16 @png_gamma_16bit_correct(i32 %52, i32 %45)
  %54 = zext i16 %53 to i32
  %55 = icmp ne i32 %25, 0
  %56 = icmp eq i32 %15, 2
  %or.cond = select i1 %55, i1 true, i1 %56
  br i1 %or.cond, label %57, label %59

57:                                               ; preds = %43
  %58 = mul i32 %5, 257
  br label %145

59:                                               ; preds = %43
  %60 = mul i32 %48, 255
  %61 = lshr i32 %60, 15
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %62
  %64 = load i16, i16* %63, align 2
  %65 = zext i16 %64 to i32
  %66 = mul i32 %48, 255
  %67 = and i32 %66, 32767
  %68 = mul i32 %48, 255
  %69 = lshr i32 %68, 15
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = mul i32 %67, %73
  %75 = lshr i32 %74, 12
  %76 = add i32 %65, %75
  %77 = lshr i32 %76, 8
  %78 = and i32 255, %77
  %79 = trunc i32 %78 to i8
  %80 = zext i8 %79 to i32
  %81 = mul i32 %51, 255
  %82 = lshr i32 %81, 15
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %83
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = mul i32 %51, 255
  %88 = and i32 %87, 32767
  %89 = mul i32 %51, 255
  %90 = lshr i32 %89, 15
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = mul i32 %88, %94
  %96 = lshr i32 %95, 12
  %97 = add i32 %86, %96
  %98 = lshr i32 %97, 8
  %99 = and i32 255, %98
  %100 = trunc i32 %99 to i8
  %101 = zext i8 %100 to i32
  %102 = mul i32 %54, 255
  %103 = lshr i32 %102, 15
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %104
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = mul i32 %54, 255
  %109 = and i32 %108, 32767
  %110 = mul i32 %54, 255
  %111 = lshr i32 %110, 15
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = mul i32 %109, %115
  %117 = lshr i32 %116, 12
  %118 = add i32 %107, %117
  %119 = lshr i32 %118, 8
  %120 = and i32 255, %119
  %121 = trunc i32 %120 to i8
  %122 = zext i8 %121 to i32
  br label %145

123:                                              ; preds = %42
  %124 = mul i32 %2, 257
  %125 = mul i32 %3, 257
  %126 = mul i32 %4, 257
  %127 = mul i32 %5, 257
  br label %145

128:                                              ; preds = %42
  %129 = icmp ne i32 %25, 0
  %130 = icmp eq i32 %15, 2
  %or.cond37 = select i1 %129, i1 true, i1 %130
  br i1 %or.cond37, label %131, label %145

131:                                              ; preds = %128
  %132 = zext i32 %2 to i64
  %133 = getelementptr inbounds [256 x i16], [256 x i16]* @png_sRGB_table, i64 0, i64 %132
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  %136 = zext i32 %3 to i64
  %137 = getelementptr inbounds [256 x i16], [256 x i16]* @png_sRGB_table, i64 0, i64 %136
  %138 = load i16, i16* %137, align 2
  %139 = zext i16 %138 to i32
  %140 = zext i32 %4 to i64
  %141 = getelementptr inbounds [256 x i16], [256 x i16]* @png_sRGB_table, i64 0, i64 %140
  %142 = load i16, i16* %141, align 2
  %143 = zext i16 %142 to i32
  %144 = mul i32 %5, 257
  br label %145

145:                                              ; preds = %123, %128, %42, %131, %57, %59
  %.431 = phi i32 [ 2, %57 ], [ 1, %59 ], [ 2, %123 ], [ 2, %131 ], [ %.027, %42 ], [ %.027, %128 ]
  %.322 = phi i32 [ %58, %57 ], [ %5, %59 ], [ %127, %123 ], [ %144, %131 ], [ %5, %42 ], [ %5, %128 ]
  %.313 = phi i32 [ %54, %57 ], [ %122, %59 ], [ %126, %123 ], [ %143, %131 ], [ %4, %42 ], [ %4, %128 ]
  %.34 = phi i32 [ %51, %57 ], [ %101, %59 ], [ %125, %123 ], [ %139, %131 ], [ %3, %42 ], [ %3, %128 ]
  %.3 = phi i32 [ %48, %57 ], [ %80, %59 ], [ %124, %123 ], [ %135, %131 ], [ %2, %42 ], [ %2, %128 ]
  %146 = icmp eq i32 %.431, 2
  br i1 %146, label %147, label %259

147:                                              ; preds = %145
  %148 = icmp ne i32 %25, 0
  br i1 %148, label %149, label %190

149:                                              ; preds = %147
  %150 = mul i32 6968, %.3
  %151 = mul i32 23434, %.34
  %152 = add i32 %150, %151
  %153 = mul i32 2366, %.313
  %154 = add i32 %152, %153
  %155 = icmp eq i32 %15, 2
  br i1 %155, label %156, label %159

156:                                              ; preds = %149
  %157 = add i32 %154, 16384
  %158 = lshr i32 %157, 15
  br label %259

159:                                              ; preds = %149
  %160 = add i32 %154, 128
  %161 = lshr i32 %160, 8
  %162 = mul i32 %161, 255
  %163 = add i32 %162, 64
  %164 = lshr i32 %163, 7
  %165 = lshr i32 %164, 15
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %166
  %168 = load i16, i16* %167, align 2
  %169 = zext i16 %168 to i32
  %170 = add i32 %162, 64
  %171 = lshr i32 %170, 7
  %172 = and i32 %171, 32767
  %173 = add i32 %162, 64
  %174 = lshr i32 %173, 7
  %175 = lshr i32 %174, 15
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %176
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = mul i32 %172, %179
  %181 = lshr i32 %180, 12
  %182 = add i32 %169, %181
  %183 = lshr i32 %182, 8
  %184 = and i32 255, %183
  %185 = trunc i32 %184 to i8
  %186 = zext i8 %185 to i32
  %187 = mul i32 %.322, 255
  %188 = add i32 %187, 32895
  %189 = lshr i32 %188, 16
  br label %259

190:                                              ; preds = %147
  %191 = icmp eq i32 %15, 1
  br i1 %191, label %192, label %259

192:                                              ; preds = %190
  %193 = mul i32 %.3, 255
  %194 = lshr i32 %193, 15
  %195 = zext i32 %194 to i64
  %196 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %195
  %197 = load i16, i16* %196, align 2
  %198 = zext i16 %197 to i32
  %199 = mul i32 %.3, 255
  %200 = and i32 %199, 32767
  %201 = mul i32 %.3, 255
  %202 = lshr i32 %201, 15
  %203 = zext i32 %202 to i64
  %204 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %203
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i32
  %207 = mul i32 %200, %206
  %208 = lshr i32 %207, 12
  %209 = add i32 %198, %208
  %210 = lshr i32 %209, 8
  %211 = and i32 255, %210
  %212 = trunc i32 %211 to i8
  %213 = zext i8 %212 to i32
  %214 = mul i32 %.34, 255
  %215 = lshr i32 %214, 15
  %216 = zext i32 %215 to i64
  %217 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %216
  %218 = load i16, i16* %217, align 2
  %219 = zext i16 %218 to i32
  %220 = mul i32 %.34, 255
  %221 = and i32 %220, 32767
  %222 = mul i32 %.34, 255
  %223 = lshr i32 %222, 15
  %224 = zext i32 %223 to i64
  %225 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %224
  %226 = load i8, i8* %225, align 1
  %227 = zext i8 %226 to i32
  %228 = mul i32 %221, %227
  %229 = lshr i32 %228, 12
  %230 = add i32 %219, %229
  %231 = lshr i32 %230, 8
  %232 = and i32 255, %231
  %233 = trunc i32 %232 to i8
  %234 = zext i8 %233 to i32
  %235 = mul i32 %.313, 255
  %236 = lshr i32 %235, 15
  %237 = zext i32 %236 to i64
  %238 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %237
  %239 = load i16, i16* %238, align 2
  %240 = zext i16 %239 to i32
  %241 = mul i32 %.313, 255
  %242 = and i32 %241, 32767
  %243 = mul i32 %.313, 255
  %244 = lshr i32 %243, 15
  %245 = zext i32 %244 to i64
  %246 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %245
  %247 = load i8, i8* %246, align 1
  %248 = zext i8 %247 to i32
  %249 = mul i32 %242, %248
  %250 = lshr i32 %249, 12
  %251 = add i32 %240, %250
  %252 = lshr i32 %251, 8
  %253 = and i32 255, %252
  %254 = trunc i32 %253 to i8
  %255 = zext i8 %254 to i32
  %256 = mul i32 %.322, 255
  %257 = add i32 %256, 32895
  %258 = lshr i32 %257, 16
  br label %259

259:                                              ; preds = %159, %156, %192, %190, %145
  %.835 = phi i32 [ %.431, %145 ], [ %.431, %156 ], [ 1, %159 ], [ 1, %192 ], [ %.431, %190 ]
  %.726 = phi i32 [ %.322, %145 ], [ %.322, %156 ], [ %189, %159 ], [ %258, %192 ], [ %.322, %190 ]
  %.616 = phi i32 [ %.313, %145 ], [ %158, %156 ], [ %186, %159 ], [ %255, %192 ], [ %.313, %190 ]
  %.67 = phi i32 [ %.34, %145 ], [ %158, %156 ], [ %186, %159 ], [ %234, %192 ], [ %.34, %190 ]
  %.6 = phi i32 [ %.3, %145 ], [ %158, %156 ], [ %186, %159 ], [ %213, %192 ], [ %.3, %190 ]
  %260 = icmp ne i32 %.835, %15
  br i1 %260, label %261, label %266

261:                                              ; preds = %259
  %262 = getelementptr inbounds %struct.png_image, %struct.png_image* %9, i32 0, i32 0
  %263 = load %struct.png_control*, %struct.png_control** %262, align 8
  %264 = getelementptr inbounds %struct.png_control, %struct.png_control* %263, i32 0, i32 0
  %265 = load %struct.png_struct_def*, %struct.png_struct_def** %264, align 8
  call void @png_error(%struct.png_struct_def* %265, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.49.188, i32 0, i32 0)) #24
  unreachable

266:                                              ; preds = %259
  %267 = getelementptr inbounds %struct.png_image, %struct.png_image* %9, i32 0, i32 4
  %268 = load i32, i32* %267, align 4
  %269 = and i32 %268, 32
  %270 = icmp ne i32 %269, 0
  br i1 %270, label %271, label %276

271:                                              ; preds = %266
  %272 = getelementptr inbounds %struct.png_image, %struct.png_image* %9, i32 0, i32 4
  %273 = load i32, i32* %272, align 4
  %274 = and i32 %273, 1
  %275 = icmp ne i32 %274, 0
  br label %276

276:                                              ; preds = %271, %266
  %277 = phi i1 [ false, %266 ], [ %275, %271 ]
  %278 = zext i1 %277 to i32
  %279 = getelementptr inbounds %struct.png_image, %struct.png_image* %9, i32 0, i32 4
  %280 = load i32, i32* %279, align 4
  %281 = and i32 %280, 16
  %282 = icmp ne i32 %281, 0
  %283 = zext i1 %282 to i64
  %284 = select i1 %282, i32 2, i32 0
  %285 = icmp eq i32 %15, 2
  br i1 %285, label %286, label %353

286:                                              ; preds = %276
  %287 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %0, i32 0, i32 3
  %288 = load i8*, i8** %287, align 8
  %289 = bitcast i8* %288 to i16*
  %290 = getelementptr inbounds %struct.png_image, %struct.png_image* %9, i32 0, i32 4
  %291 = load i32, i32* %290, align 4
  %292 = and i32 %291, 3
  %293 = add i32 %292, 1
  %294 = mul i32 %1, %293
  %295 = zext i32 %294 to i64
  %296 = getelementptr inbounds i16, i16* %289, i64 %295
  %297 = getelementptr inbounds %struct.png_image, %struct.png_image* %9, i32 0, i32 4
  %298 = load i32, i32* %297, align 4
  %299 = and i32 %298, 3
  %300 = add i32 %299, 1
  switch i32 %300, label %397 [
    i32 4, label %301
    i32 3, label %308
    i32 2, label %336
    i32 1, label %341
  ]

301:                                              ; preds = %286
  %302 = trunc i32 %.726 to i16
  %303 = icmp ne i32 %278, 0
  %304 = zext i1 %303 to i64
  %305 = select i1 %303, i32 0, i32 3
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i16, i16* %296, i64 %306
  store i16 %302, i16* %307, align 2
  br label %308

308:                                              ; preds = %286, %301
  %309 = icmp ult i32 %.726, 65535
  br i1 %309, label %310, label %322

310:                                              ; preds = %308
  %311 = icmp ugt i32 %.726, 0
  br i1 %311, label %312, label %322

312:                                              ; preds = %310
  %313 = mul i32 %.616, %.726
  %314 = add i32 %313, 32767
  %315 = udiv i32 %314, 65535
  %316 = mul i32 %.67, %.726
  %317 = add i32 %316, 32767
  %318 = udiv i32 %317, 65535
  %319 = mul i32 %.6, %.726
  %320 = add i32 %319, 32767
  %321 = udiv i32 %320, 65535
  br label %322

322:                                              ; preds = %312, %310, %308
  %.818 = phi i32 [ %.616, %308 ], [ %315, %312 ], [ 0, %310 ]
  %.89 = phi i32 [ %.67, %308 ], [ %318, %312 ], [ 0, %310 ]
  %.8 = phi i32 [ %.6, %308 ], [ %321, %312 ], [ 0, %310 ]
  %323 = trunc i32 %.818 to i16
  %324 = xor i32 2, %284
  %325 = add nsw i32 %278, %324
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds i16, i16* %296, i64 %326
  store i16 %323, i16* %327, align 2
  %328 = trunc i32 %.89 to i16
  %329 = add nsw i32 %278, 1
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds i16, i16* %296, i64 %330
  store i16 %328, i16* %331, align 2
  %332 = trunc i32 %.8 to i16
  %333 = add nsw i32 %278, %284
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds i16, i16* %296, i64 %334
  store i16 %332, i16* %335, align 2
  br label %397

336:                                              ; preds = %286
  %337 = trunc i32 %.726 to i16
  %338 = xor i32 1, %278
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds i16, i16* %296, i64 %339
  store i16 %337, i16* %340, align 2
  br label %341

341:                                              ; preds = %286, %336
  %342 = icmp ult i32 %.726, 65535
  br i1 %342, label %343, label %349

343:                                              ; preds = %341
  %344 = icmp ugt i32 %.726, 0
  br i1 %344, label %345, label %349

345:                                              ; preds = %343
  %346 = mul i32 %.67, %.726
  %347 = add i32 %346, 32767
  %348 = udiv i32 %347, 65535
  br label %349

349:                                              ; preds = %345, %343, %341
  %.10 = phi i32 [ %.67, %341 ], [ %348, %345 ], [ 0, %343 ]
  %350 = trunc i32 %.10 to i16
  %351 = sext i32 %278 to i64
  %352 = getelementptr inbounds i16, i16* %296, i64 %351
  store i16 %350, i16* %352, align 2
  br label %397

353:                                              ; preds = %276
  %354 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %0, i32 0, i32 3
  %355 = load i8*, i8** %354, align 8
  %356 = getelementptr inbounds %struct.png_image, %struct.png_image* %9, i32 0, i32 4
  %357 = load i32, i32* %356, align 4
  %358 = and i32 %357, 3
  %359 = add i32 %358, 1
  %360 = mul i32 %1, %359
  %361 = zext i32 %360 to i64
  %362 = getelementptr inbounds i8, i8* %355, i64 %361
  %363 = getelementptr inbounds %struct.png_image, %struct.png_image* %9, i32 0, i32 4
  %364 = load i32, i32* %363, align 4
  %365 = and i32 %364, 3
  %366 = add i32 %365, 1
  switch i32 %366, label %397 [
    i32 4, label %367
    i32 3, label %374
    i32 2, label %388
    i32 1, label %393
  ]

367:                                              ; preds = %353
  %368 = trunc i32 %.726 to i8
  %369 = icmp ne i32 %278, 0
  %370 = zext i1 %369 to i64
  %371 = select i1 %369, i32 0, i32 3
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds i8, i8* %362, i64 %372
  store i8 %368, i8* %373, align 1
  br label %374

374:                                              ; preds = %353, %367
  %375 = trunc i32 %.616 to i8
  %376 = xor i32 2, %284
  %377 = add nsw i32 %278, %376
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds i8, i8* %362, i64 %378
  store i8 %375, i8* %379, align 1
  %380 = trunc i32 %.67 to i8
  %381 = add nsw i32 %278, 1
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds i8, i8* %362, i64 %382
  store i8 %380, i8* %383, align 1
  %384 = trunc i32 %.6 to i8
  %385 = add nsw i32 %278, %284
  %386 = sext i32 %385 to i64
  %387 = getelementptr inbounds i8, i8* %362, i64 %386
  store i8 %384, i8* %387, align 1
  br label %397

388:                                              ; preds = %353
  %389 = trunc i32 %.726 to i8
  %390 = xor i32 1, %278
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i8, i8* %362, i64 %391
  store i8 %389, i8* %392, align 1
  br label %393

393:                                              ; preds = %353, %388
  %394 = trunc i32 %.67 to i8
  %395 = sext i32 %278 to i64
  %396 = getelementptr inbounds i8, i8* %362, i64 %395
  store i8 %394, i8* %396, align 1
  br label %397

397:                                              ; preds = %374, %393, %353, %322, %349, %286
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @make_gray_colormap(%struct.png_image_read_control* %0) #11 {
  br label %2

2:                                                ; preds = %1, %2
  %.01 = phi i32 [ 0, %1 ], [ %3, %2 ]
  call void @png_create_colormap_entry(%struct.png_image_read_control* %0, i32 %.01, i32 %.01, i32 %.01, i32 %.01, i32 255, i32 1)
  %3 = add nuw nsw i32 %.01, 1
  %exitcond = icmp ne i32 %3, 256
  br i1 %exitcond, label %2, label %4

4:                                                ; preds = %2
  ret i32 256
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @make_ga_colormap(%struct.png_image_read_control* %0) #11 {
  br label %2

2:                                                ; preds = %1, %2
  %lsr.iv10 = phi i32 [ 115, %1 ], [ %lsr.iv.next11, %2 ]
  %.018 = phi i32 [ 0, %1 ], [ %4, %2 ]
  %3 = udiv i32 %lsr.iv10, 231
  %4 = add nuw nsw i32 %.018, 1
  call void @png_create_colormap_entry(%struct.png_image_read_control* %0, i32 %.018, i32 %3, i32 %3, i32 %3, i32 255, i32 1)
  %lsr.iv.next11 = add nuw nsw i32 %lsr.iv10, 256
  %exitcond9 = icmp ne i32 %4, 231
  br i1 %exitcond9, label %2, label %5

5:                                                ; preds = %2
  %6 = add i32 231, 1
  call void @png_create_colormap_entry(%struct.png_image_read_control* %0, i32 231, i32 255, i32 255, i32 255, i32 0, i32 1)
  br label %.preheader

.preheader:                                       ; preds = %5, %10
  %.16 = phi i32 [ %6, %5 ], [ %.2.lcssa, %10 ]
  %.025 = phi i32 [ 1, %5 ], [ %11, %10 ]
  %7 = mul nuw nsw i32 %.025, 51
  br label %8

8:                                                ; preds = %.preheader, %8
  %lsr.iv = phi i32 [ 0, %.preheader ], [ %lsr.iv.next, %8 ]
  %.23 = phi i32 [ %.16, %.preheader ], [ %9, %8 ]
  %9 = add i32 %.23, 1
  call void @png_create_colormap_entry(%struct.png_image_read_control* %0, i32 %.23, i32 %lsr.iv, i32 %lsr.iv, i32 %lsr.iv, i32 %7, i32 1)
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 51
  %exitcond = icmp ne i32 %lsr.iv.next, 306
  br i1 %exitcond, label %8, label %10

10:                                               ; preds = %8
  %.2.lcssa = phi i32 [ %9, %8 ]
  %11 = add nuw nsw i32 %.025, 1
  %exitcond7 = icmp ne i32 %11, 5
  br i1 %exitcond7, label %.preheader, label %12

12:                                               ; preds = %10
  %.1.lcssa = phi i32 [ %.2.lcssa, %10 ]
  ret i32 %.1.lcssa
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_gamma_not_sRGB(i32 %0) #11 {
  %2 = icmp slt i32 %0, 100000
  br i1 %2, label %3, label %10

3:                                                ; preds = %1
  %4 = icmp eq i32 %0, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %3
  %6 = mul nsw i32 %0, 11
  %7 = add nsw i32 %6, 2
  %8 = sdiv i32 %7, 5
  %9 = call i32 @png_gamma_significant(i32 %8)
  br label %10

10:                                               ; preds = %1, %3, %5
  %.0 = phi i32 [ %9, %5 ], [ 0, %3 ], [ 1, %1 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @make_gray_file_colormap(%struct.png_image_read_control* %0) #11 {
  br label %2

2:                                                ; preds = %1, %2
  %.01 = phi i32 [ 0, %1 ], [ %3, %2 ]
  call void @png_create_colormap_entry(%struct.png_image_read_control* %0, i32 %.01, i32 %.01, i32 %.01, i32 %.01, i32 255, i32 3)
  %3 = add nuw nsw i32 %.01, 1
  %exitcond = icmp ne i32 %3, 256
  br i1 %exitcond, label %2, label %4

4:                                                ; preds = %2
  ret i32 256
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @make_rgb_colormap(%struct.png_image_read_control* %0) #11 {
  br label %.preheader4

.preheader4:                                      ; preds = %1, %8
  %.0111 = phi i32 [ 0, %1 ], [ %.1.lcssa, %8 ]
  %.0210 = phi i32 [ 0, %1 ], [ %9, %8 ]
  %2 = mul nuw nsw i32 %.0210, 51
  br label %.preheader

.preheader:                                       ; preds = %.preheader4, %6
  %.18 = phi i32 [ %.0111, %.preheader4 ], [ %.2.lcssa, %6 ]
  %.037 = phi i32 [ 0, %.preheader4 ], [ %7, %6 ]
  %3 = mul nuw nsw i32 %.037, 51
  br label %4

4:                                                ; preds = %.preheader, %4
  %lsr.iv = phi i32 [ 0, %.preheader ], [ %lsr.iv.next, %4 ]
  %.25 = phi i32 [ %.18, %.preheader ], [ %5, %4 ]
  %5 = add i32 %.25, 1
  call void @png_create_colormap_entry(%struct.png_image_read_control* %0, i32 %.25, i32 %2, i32 %3, i32 %lsr.iv, i32 255, i32 1)
  %lsr.iv.next = add nuw nsw i32 %lsr.iv, 51
  %exitcond = icmp ne i32 %lsr.iv.next, 306
  br i1 %exitcond, label %4, label %6

6:                                                ; preds = %4
  %.2.lcssa = phi i32 [ %5, %4 ]
  %7 = add nuw nsw i32 %.037, 1
  %exitcond9 = icmp ne i32 %7, 6
  br i1 %exitcond9, label %.preheader, label %8

8:                                                ; preds = %6
  %.1.lcssa = phi i32 [ %.2.lcssa, %6 ]
  %9 = add nuw nsw i32 %.0210, 1
  %exitcond12 = icmp ne i32 %9, 6
  br i1 %exitcond12, label %.preheader4, label %10

10:                                               ; preds = %8
  %.01.lcssa = phi i32 [ %.1.lcssa, %8 ]
  ret i32 %.01.lcssa
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_colormap_compose(%struct.png_image_read_control* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) #11 {
  %7 = call i32 @decode_gamma(%struct.png_image_read_control* %0, i32 %1, i32 %2)
  %8 = call i32 @decode_gamma(%struct.png_image_read_control* %0, i32 %4, i32 %5)
  %9 = mul i32 %7, %3
  %10 = sub i32 255, %3
  %11 = mul i32 %8, %10
  %12 = add i32 %9, %11
  %13 = icmp eq i32 %5, 2
  br i1 %13, label %14, label %20

14:                                               ; preds = %6
  %15 = mul i32 %12, 257
  %16 = lshr i32 %15, 16
  %17 = add i32 %15, %16
  %18 = add i32 %17, 32768
  %19 = lshr i32 %18, 16
  br label %39

20:                                               ; preds = %6
  %21 = lshr i32 %12, 15
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = and i32 %12, 32767
  %27 = lshr i32 %12, 15
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = mul i32 %26, %31
  %33 = lshr i32 %32, 12
  %34 = add i32 %25, %33
  %35 = lshr i32 %34, 8
  %36 = and i32 255, %35
  %37 = trunc i32 %36 to i8
  %38 = zext i8 %37 to i32
  br label %39

39:                                               ; preds = %20, %14
  %.0 = phi i32 [ %19, %14 ], [ %38, %20 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_tRNS_to_alpha(%struct.png_struct_def* noalias %0) #11 {
  %2 = call i32 @png_rtran_ok(%struct.png_struct_def* %0, i32 0)
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %8, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %6 = load i32, i32* %5, align 4
  %7 = or i32 %6, 33558528
  store i32 %7, i32* %5, align 4
  br label %8

8:                                                ; preds = %1, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @decode_gamma(%struct.png_image_read_control* %0, i32 %1, i32 %2) #11 {
  %4 = icmp eq i32 %2, 3
  br i1 %4, label %5, label %8

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %0, i32 0, i32 8
  %7 = load i32, i32* %6, align 8
  br label %8

8:                                                ; preds = %5, %3
  %.0 = phi i32 [ %7, %5 ], [ %2, %3 ]
  %9 = icmp eq i32 %.0, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %8
  call void @set_file_encoding(%struct.png_image_read_control* %0)
  %11 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %0, i32 0, i32 8
  %12 = load i32, i32* %11, align 8
  br label %13

13:                                               ; preds = %10, %8
  %.1 = phi i32 [ %12, %10 ], [ %.0, %8 ]
  switch i32 %.1, label %27 [
    i32 3, label %14
    i32 1, label %20
    i32 2, label %34
    i32 4, label %25
  ]

14:                                               ; preds = %13
  %15 = mul i32 %1, 257
  %16 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %0, i32 0, i32 9
  %17 = load i32, i32* %16, align 4
  %18 = call zeroext i16 @png_gamma_16bit_correct(i32 %15, i32 %17)
  %19 = zext i16 %18 to i32
  br label %34

20:                                               ; preds = %13
  %21 = zext i32 %1 to i64
  %22 = getelementptr inbounds [256 x i16], [256 x i16]* @png_sRGB_table, i64 0, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i32
  br label %34

25:                                               ; preds = %13
  %26 = mul i32 %1, 257
  br label %34

27:                                               ; preds = %13
  %28 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %0, i32 0, i32 0
  %29 = load %struct.png_image*, %struct.png_image** %28, align 8
  %30 = getelementptr inbounds %struct.png_image, %struct.png_image* %29, i32 0, i32 0
  %31 = load %struct.png_control*, %struct.png_control** %30, align 8
  %32 = getelementptr inbounds %struct.png_control, %struct.png_control* %31, i32 0, i32 0
  %33 = load %struct.png_struct_def*, %struct.png_struct_def** %32, align 8
  call void @png_error(%struct.png_struct_def* %33, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.50.186, i32 0, i32 0)) #24
  unreachable

34:                                               ; preds = %13, %25, %20, %14
  %.01 = phi i32 [ %26, %25 ], [ %24, %20 ], [ %19, %14 ], [ %1, %13 ]
  ret i32 %.01
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_file_encoding(%struct.png_image_read_control* %0) #11 {
  %2 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %0, i32 0, i32 0
  %3 = load %struct.png_image*, %struct.png_image** %2, align 8
  %4 = getelementptr inbounds %struct.png_image, %struct.png_image* %3, i32 0, i32 0
  %5 = load %struct.png_control*, %struct.png_control** %4, align 8
  %6 = getelementptr inbounds %struct.png_control, %struct.png_control* %5, i32 0, i32 0
  %7 = load %struct.png_struct_def*, %struct.png_struct_def** %6, align 8
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %7, i32 0, i32 144
  %9 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %8, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = call i32 @png_gamma_significant(i32 %10)
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %1
  %14 = call i32 @png_gamma_not_sRGB(i32 %10)
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %0, i32 0, i32 8
  store i32 3, i32* %17, align 8
  %18 = call i32 @png_reciprocal(i32 %10)
  %19 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %0, i32 0, i32 9
  store i32 %18, i32* %19, align 4
  br label %24

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %0, i32 0, i32 8
  store i32 1, i32* %21, align 8
  br label %24

22:                                               ; preds = %1
  %23 = getelementptr inbounds %struct.png_image_read_control, %struct.png_image_read_control* %0, i32 0, i32 8
  store i32 4, i32* %23, align 8
  br label %24

24:                                               ; preds = %16, %20, %22
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_crc_action(%struct.png_struct_def* noalias %0, i32 %1, i32 %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %51, label %5

5:                                                ; preds = %3
  switch i32 %1, label %21 [
    i32 5, label %25
    i32 3, label %6
    i32 4, label %13
    i32 2, label %20
  ]

6:                                                ; preds = %5
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, -3073
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %11 = load i32, i32* %10, align 8
  %12 = or i32 %11, 1024
  store i32 %12, i32* %10, align 8
  br label %25

13:                                               ; preds = %5
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %15 = load i32, i32* %14, align 8
  %16 = and i32 %15, -3073
  store i32 %16, i32* %14, align 8
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %18 = load i32, i32* %17, align 8
  %19 = or i32 %18, 3072
  store i32 %19, i32* %17, align 8
  br label %25

20:                                               ; preds = %5
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.194, i32 0, i32 0))
  br label %21

21:                                               ; preds = %20, %5
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, -3073
  store i32 %24, i32* %22, align 8
  br label %25

25:                                               ; preds = %5, %21, %13, %6
  switch i32 %2, label %47 [
    i32 5, label %51
    i32 3, label %26
    i32 4, label %33
    i32 1, label %40
  ]

26:                                               ; preds = %25
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %28 = load i32, i32* %27, align 8
  %29 = and i32 %28, -769
  store i32 %29, i32* %27, align 8
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %31 = load i32, i32* %30, align 8
  %32 = or i32 %31, 256
  store i32 %32, i32* %30, align 8
  br label %51

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %35 = load i32, i32* %34, align 8
  %36 = and i32 %35, -769
  store i32 %36, i32* %34, align 8
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %38 = load i32, i32* %37, align 8
  %39 = or i32 %38, 768
  store i32 %39, i32* %37, align 8
  br label %51

40:                                               ; preds = %25
  %41 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %42 = load i32, i32* %41, align 8
  %43 = and i32 %42, -769
  store i32 %43, i32* %41, align 8
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %45 = load i32, i32* %44, align 8
  %46 = or i32 %45, 512
  store i32 %46, i32* %44, align 8
  br label %51

47:                                               ; preds = %25
  %48 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %49 = load i32, i32* %48, align 8
  %50 = and i32 %49, -769
  store i32 %50, i32* %48, align 8
  br label %51

51:                                               ; preds = %25, %3, %47, %40, %33, %26
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_background(%struct.png_struct_def* noalias %0, %struct.png_color_16_struct* %1, i32 %2, i32 %3, double %4) #11 {
  %6 = call i32 @png_fixed(%struct.png_struct_def* %0, double %4, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.200, i32 0, i32 0))
  call void @png_set_background_fixed(%struct.png_struct_def* %0, %struct.png_color_16_struct* %1, i32 %2, i32 %3, i32 %6)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_alpha_mode(%struct.png_struct_def* noalias %0, i32 %1, double %2) #11 {
  %4 = call i32 @convert_gamma_value(%struct.png_struct_def* %0, double %2)
  call void @png_set_alpha_mode_fixed(%struct.png_struct_def* %0, i32 %1, i32 %4)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @convert_gamma_value(%struct.png_struct_def* noalias %0, double %1) #11 {
  %3 = fcmp ogt double %1, 0.000000e+00
  %4 = fcmp olt double %1, 1.280000e+02
  %or.cond = and i1 %3, %4
  %5 = fmul double %1, 1.000000e+05
  %.0 = select i1 %or.cond, double %5, double %1
  %6 = fadd double %.0, 5.000000e-01
  %7 = call double @llvm.floor.f64(double %6)
  %8 = fcmp ogt double %7, 0x41DFFFFFFFC00000
  %9 = fcmp olt double %7, 0xC1DFFFFFFFC00000
  %or.cond1 = or i1 %8, %9
  br i1 %or.cond1, label %10, label %11

10:                                               ; preds = %2
  call void @png_fixed_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.20.212, i32 0, i32 0)) #24
  unreachable

11:                                               ; preds = %2
  %12 = fptosi double %7 to i32
  ret i32 %12
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_quantize(%struct.png_struct_def* noalias %0, %struct.png_color_struct* %1, i32 %2, i32 %3, i16* %4, i32 %5) #11 {
  %7 = alloca %struct.png_color_struct, align 1
  %8 = call i32 @png_rtran_ok(%struct.png_struct_def* %0, i32 0)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %562, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %12 = load i32, i32* %11, align 4
  %13 = or i32 %12, 64
  store i32 %13, i32* %11, align 4
  %14 = icmp eq i32 %5, 0
  br i1 %14, label %15, label %24

15:                                               ; preds = %10
  %16 = zext i32 %2 to i64
  %17 = mul i64 %16, 1
  %18 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %17)
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 109
  store i8* %18, i8** %19, align 8
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 109
  %21 = icmp slt i32 0, %2
  br i1 %21, label %.lr.ph212, label %.loopexit59

.lr.ph212:                                        ; preds = %15
  %wide.trip.count216 = zext i32 %2 to i64
  br label %22

22:                                               ; preds = %.lr.ph212, %22
  %indvars.iv213 = phi i64 [ 0, %.lr.ph212 ], [ %indvars.iv.next214, %22 ]
  %23 = load i8*, i8** %20, align 8
  %scevgep259 = getelementptr i8, i8* %23, i64 %indvars.iv213
  %tmp258 = trunc i64 %indvars.iv213 to i8
  store i8 %tmp258, i8* %scevgep259, align 1
  %indvars.iv.next214 = add nuw nsw i64 %indvars.iv213, 1
  %exitcond217 = icmp ne i64 %wide.trip.count216, %indvars.iv.next214
  br i1 %exitcond217, label %22, label %..loopexit59_crit_edge

..loopexit59_crit_edge:                           ; preds = %22
  br label %.loopexit59

.loopexit59:                                      ; preds = %..loopexit59_crit_edge, %15
  br label %24

24:                                               ; preds = %.loopexit59, %10
  %25 = icmp sgt i32 %2, %3
  br i1 %25, label %26, label %477

26:                                               ; preds = %24
  %27 = icmp ne i16* %4, null
  br i1 %27, label %28, label %230

28:                                               ; preds = %26
  %29 = zext i32 %2 to i64
  %30 = mul i64 %29, 1
  %31 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %30)
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 128
  store i8* %31, i8** %32, align 8
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 128
  %34 = icmp slt i32 0, %2
  br i1 %34, label %.lr.ph125, label %37

.lr.ph125:                                        ; preds = %28
  %wide.trip.count130 = zext i32 %2 to i64
  br label %35

35:                                               ; preds = %.lr.ph125, %35
  %indvars.iv127 = phi i64 [ 0, %.lr.ph125 ], [ %indvars.iv.next128, %35 ]
  %36 = load i8*, i8** %33, align 8
  %scevgep238 = getelementptr i8, i8* %36, i64 %indvars.iv127
  %tmp237 = trunc i64 %indvars.iv127 to i8
  store i8 %tmp237, i8* %scevgep238, align 1
  %indvars.iv.next128 = add nuw nsw i64 %indvars.iv127, 1
  %exitcond131 = icmp ne i64 %wide.trip.count130, %indvars.iv.next128
  br i1 %exitcond131, label %35, label %._crit_edge126

._crit_edge126:                                   ; preds = %35
  br label %37

37:                                               ; preds = %._crit_edge126, %28
  %38 = sub nsw i32 %2, 1
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 128
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 128
  %41 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 128
  %42 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 128
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 128
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 128
  %45 = icmp sge i32 %38, %3
  br i1 %45, label %.preheader52.lr.ph, label %74

.preheader52.lr.ph:                               ; preds = %37
  br label %.preheader52

46:                                               ; preds = %71
  %.1 = phi i32 [ %73, %71 ]
  %47 = icmp sge i32 %.1, %3
  br i1 %47, label %.preheader52, label %._crit_edge122

.preheader52:                                     ; preds = %.preheader52.lr.ph, %46
  %.1119 = phi i32 [ %38, %.preheader52.lr.ph ], [ %.1, %46 ]
  %48 = icmp slt i32 0, %.1119
  br i1 %48, label %.lr.ph111, label %.preheader52._crit_edge

.preheader52._crit_edge:                          ; preds = %.preheader52
  br label %71

.lr.ph111:                                        ; preds = %.preheader52
  %wide.trip.count117 = zext i32 %.1119 to i64
  br label %49

49:                                               ; preds = %.lr.ph111, %70
  %indvars.iv114 = phi i64 [ 0, %.lr.ph111 ], [ %indvars.iv.next115, %70 ]
  %.08110 = phi i32 [ 1, %.lr.ph111 ], [ %.19, %70 ]
  %50 = load i8*, i8** %39, align 8
  %scevgep228 = getelementptr i8, i8* %50, i64 %indvars.iv114
  %51 = load i8, i8* %scevgep228, align 1
  %52 = zext i8 %51 to i64
  %53 = getelementptr inbounds i16, i16* %4, i64 %52
  %54 = load i16, i16* %53, align 2
  %55 = zext i16 %54 to i32
  %56 = load i8*, i8** %40, align 8
  %indvars.iv.next115 = add nuw nsw i64 %indvars.iv114, 1
  %scevgep235 = getelementptr i8, i8* %56, i64 1
  %scevgep236 = getelementptr i8, i8* %scevgep235, i64 %indvars.iv114
  %57 = load i8, i8* %scevgep236, align 1
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds i16, i16* %4, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = icmp slt i32 %55, %61
  br i1 %62, label %63, label %70

63:                                               ; preds = %49
  %64 = load i8*, i8** %41, align 8
  %scevgep229 = getelementptr i8, i8* %64, i64 %indvars.iv114
  %65 = load i8, i8* %scevgep229, align 1
  %66 = load i8*, i8** %42, align 8
  %scevgep230 = getelementptr i8, i8* %66, i64 1
  %scevgep231 = getelementptr i8, i8* %scevgep230, i64 %indvars.iv114
  %67 = load i8, i8* %scevgep231, align 1
  %68 = load i8*, i8** %43, align 8
  %scevgep232 = getelementptr i8, i8* %68, i64 %indvars.iv114
  store i8 %67, i8* %scevgep232, align 1
  %69 = load i8*, i8** %44, align 8
  %scevgep233 = getelementptr i8, i8* %69, i64 1
  %scevgep234 = getelementptr i8, i8* %scevgep233, i64 %indvars.iv114
  store i8 %65, i8* %scevgep234, align 1
  br label %70

70:                                               ; preds = %49, %63
  %.19 = phi i32 [ 0, %63 ], [ %.08110, %49 ]
  %exitcond118 = icmp ne i64 %wide.trip.count117, %indvars.iv.next115
  br i1 %exitcond118, label %49, label %._crit_edge112

._crit_edge112:                                   ; preds = %70
  %split113 = phi i32 [ %.19, %70 ]
  br label %71

71:                                               ; preds = %.preheader52._crit_edge, %._crit_edge112
  %.1120 = phi i32 [ %.1119, %._crit_edge112 ], [ %.1119, %.preheader52._crit_edge ]
  %.08.lcssa = phi i32 [ %split113, %._crit_edge112 ], [ 1, %.preheader52._crit_edge ]
  %72 = icmp ne i32 %.08.lcssa, 0
  %73 = add nsw i32 %.1120, -1
  br i1 %72, label %._crit_edge121, label %46

._crit_edge121:                                   ; preds = %71
  br label %74

._crit_edge122:                                   ; preds = %46
  br label %74

74:                                               ; preds = %._crit_edge122, %._crit_edge121, %37
  %75 = icmp ne i32 %5, 0
  br i1 %75, label %.preheader47, label %.preheader51

.preheader51:                                     ; preds = %74
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 128
  %77 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 128
  %78 = bitcast %struct.png_color_struct* %7 to i8*
  %79 = bitcast %struct.png_color_struct* %7 to i8*
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 109
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 109
  %82 = icmp slt i32 0, %3
  br i1 %82, label %.lr.ph102, label %.preheader48

.lr.ph102:                                        ; preds = %.preheader51
  %wide.trip.count107 = zext i32 %3 to i64
  br label %117

.preheader47:                                     ; preds = %74
  %83 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 128
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 128
  %85 = icmp slt i32 0, %3
  br i1 %85, label %.lr.ph73, label %.loopexit

.lr.ph73:                                         ; preds = %.preheader47
  %wide.trip.count77 = zext i32 %3 to i64
  br label %86

86:                                               ; preds = %.lr.ph73, %105
  %indvars.iv74 = phi i64 [ 0, %.lr.ph73 ], [ %indvars.iv.next75, %105 ]
  %.01271 = phi i32 [ %2, %.lr.ph73 ], [ %.214, %105 ]
  %87 = load i8*, i8** %83, align 8
  %88 = getelementptr inbounds i8, i8* %87, i64 %indvars.iv74
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = icmp sge i32 %90, %3
  br i1 %91, label %.preheader, label %105

.preheader:                                       ; preds = %86
  %92 = load i8*, i8** %84, align 8
  %93 = sext i32 %.01271 to i64
  %scevgep = getelementptr i8, i8* %92, i64 -1
  br label %94

94:                                               ; preds = %.preheader, %94
  %indvars.iv68 = phi i64 [ %93, %.preheader ], [ %indvars.iv.next69, %94 ]
  %indvars.iv.next69 = add i64 %indvars.iv68, -1
  %scevgep218 = getelementptr i8, i8* %scevgep, i64 %indvars.iv68
  %95 = load i8, i8* %scevgep218, align 1
  %96 = zext i8 %95 to i32
  %97 = icmp sge i32 %96, %3
  br i1 %97, label %94, label %98

98:                                               ; preds = %94
  %.lcssa.wide = phi i64 [ %indvars.iv.next69, %94 ]
  %99 = trunc i64 %.lcssa.wide to i32
  %100 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %indvars.iv74
  %101 = sext i32 %99 to i64
  %102 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %101
  %103 = bitcast %struct.png_color_struct* %100 to i8*
  %104 = bitcast %struct.png_color_struct* %102 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %103, i8* align 1 %104, i64 3, i1 false)
  br label %105

105:                                              ; preds = %86, %98
  %.214 = phi i32 [ %99, %98 ], [ %.01271, %86 ]
  %indvars.iv.next75 = add nuw nsw i64 %indvars.iv74, 1
  %exitcond78 = icmp ne i64 %indvars.iv.next75, %wide.trip.count77
  br i1 %exitcond78, label %86, label %..loopexit_crit_edge

..preheader48_crit_edge:                          ; preds = %149
  %split103 = phi i32 [ 0, %149 ]
  br label %.preheader48

.preheader48:                                     ; preds = %..preheader48_crit_edge, %.preheader51
  %.4.ph = phi i32 [ %split103, %..preheader48_crit_edge ], [ 0, %.preheader51 ]
  %106 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 109
  %107 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 109
  %108 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 0
  %109 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %108, i32 0, i32 0
  %110 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 0
  %111 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %110, i32 0, i32 1
  %112 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 0
  %113 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %112, i32 0, i32 2
  %114 = icmp slt i32 1, %3
  %wide.trip.count88 = zext i32 %3 to i64
  %115 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 109
  %116 = icmp slt i32 %.4.ph, %2
  br i1 %116, label %.lr.ph91, label %.loopexit49

.lr.ph91:                                         ; preds = %.preheader48
  %wide.trip.count95 = zext i32 %2 to i64
  %scevgep219 = getelementptr %struct.png_color_struct, %struct.png_color_struct* %1, i64 1, i32 2
  %scevgep219220 = bitcast i8* %scevgep219 to %struct.png_color_struct*
  br label %150

117:                                              ; preds = %.lr.ph102, %149
  %indvars.iv104 = phi i64 [ 0, %.lr.ph102 ], [ %indvars.iv.next105, %149 ]
  %.015100 = phi i32 [ %2, %.lr.ph102 ], [ %.217, %149 ]
  %118 = load i8*, i8** %76, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 %indvars.iv104
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = icmp sge i32 %121, %3
  br i1 %122, label %.preheader50, label %149

.preheader50:                                     ; preds = %117
  %123 = load i8*, i8** %77, align 8
  %124 = sext i32 %.015100 to i64
  %scevgep226 = getelementptr i8, i8* %123, i64 -1
  br label %125

125:                                              ; preds = %.preheader50, %125
  %indvars.iv97 = phi i64 [ %124, %.preheader50 ], [ %indvars.iv.next98, %125 ]
  %indvars.iv.next98 = add i64 %indvars.iv97, -1
  %scevgep227 = getelementptr i8, i8* %scevgep226, i64 %indvars.iv97
  %126 = load i8, i8* %scevgep227, align 1
  %127 = zext i8 %126 to i32
  %128 = icmp sge i32 %127, %3
  br i1 %128, label %125, label %129

129:                                              ; preds = %125
  %.lcssa46.wide = phi i64 [ %indvars.iv.next98, %125 ]
  %130 = trunc i64 %.lcssa46.wide to i32
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %131
  %133 = bitcast %struct.png_color_struct* %132 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %133, i64 3, i1 false)
  %134 = sext i32 %130 to i64
  %135 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %134
  %136 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %indvars.iv104
  %137 = bitcast %struct.png_color_struct* %135 to i8*
  %138 = bitcast %struct.png_color_struct* %136 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %137, i8* align 1 %138, i64 3, i1 false)
  %139 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %indvars.iv104
  %140 = bitcast %struct.png_color_struct* %139 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %140, i8* align 1 %79, i64 3, i1 false)
  %141 = trunc i64 %indvars.iv104 to i32
  %142 = trunc i32 %141 to i8
  %143 = load i8*, i8** %80, align 8
  %144 = sext i32 %130 to i64
  %145 = getelementptr inbounds i8, i8* %143, i64 %144
  store i8 %142, i8* %145, align 1
  %146 = trunc i32 %130 to i8
  %147 = load i8*, i8** %81, align 8
  %148 = getelementptr inbounds i8, i8* %147, i64 %indvars.iv104
  store i8 %146, i8* %148, align 1
  br label %149

149:                                              ; preds = %117, %129
  %.217 = phi i32 [ %130, %129 ], [ %.015100, %117 ]
  %indvars.iv.next105 = add nuw nsw i64 %indvars.iv104, 1
  %exitcond108 = icmp ne i64 %indvars.iv.next105, %wide.trip.count107
  br i1 %exitcond108, label %117, label %..preheader48_crit_edge

150:                                              ; preds = %.lr.ph91, %225
  %indvars.iv92 = phi i64 [ 0, %.lr.ph91 ], [ %indvars.iv.next93, %225 ]
  %151 = load i8*, i8** %106, align 8
  %152 = getelementptr inbounds i8, i8* %151, i64 %indvars.iv92
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = icmp sge i32 %154, %3
  br i1 %155, label %156, label %225

156:                                              ; preds = %150
  %157 = load i8*, i8** %107, align 8
  %158 = getelementptr inbounds i8, i8* %157, i64 %indvars.iv92
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %161
  %163 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %162, i32 0, i32 0
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = load i8, i8* %109, align 1
  %167 = zext i8 %166 to i32
  %168 = sub nsw i32 %165, %167
  %169 = call i32 @abs(i32 %168) #20
  %170 = sext i32 %160 to i64
  %171 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %170
  %172 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %171, i32 0, i32 1
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = load i8, i8* %111, align 1
  %176 = zext i8 %175 to i32
  %177 = sub nsw i32 %174, %176
  %178 = call i32 @abs(i32 %177) #20
  %179 = add nsw i32 %169, %178
  %180 = sext i32 %160 to i64
  %181 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %180
  %182 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %181, i32 0, i32 2
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i32
  %185 = load i8, i8* %113, align 1
  %186 = zext i8 %185 to i32
  %187 = sub nsw i32 %184, %186
  %188 = call i32 @abs(i32 %187) #20
  %189 = add nsw i32 %179, %188
  %190 = sext i32 %160 to i64
  %191 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %190
  %192 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %191, i32 0, i32 0
  %193 = sext i32 %160 to i64
  %194 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %193
  %195 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %194, i32 0, i32 1
  %196 = sext i32 %160 to i64
  %197 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %196
  %198 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %197, i32 0, i32 2
  br i1 %114, label %.lr.ph83, label %221

.lr.ph83:                                         ; preds = %156
  br label %199

199:                                              ; preds = %.lr.ph83, %199
  %lsr.iv221 = phi %struct.png_color_struct* [ %scevgep219220, %.lr.ph83 ], [ %scevgep222, %199 ]
  %indvars.iv85 = phi i64 [ 1, %.lr.ph83 ], [ %indvars.iv.next86, %199 ]
  %.01881 = phi i32 [ %189, %.lr.ph83 ], [ %spec.select45, %199 ]
  %.02179 = phi i32 [ 0, %.lr.ph83 ], [ %spec.select, %199 ]
  %lsr.iv221223 = bitcast %struct.png_color_struct* %lsr.iv221 to i8*
  %200 = load i8, i8* %192, align 1
  %201 = zext i8 %200 to i32
  %scevgep224 = getelementptr i8, i8* %lsr.iv221223, i64 -2
  %202 = load i8, i8* %scevgep224, align 1
  %203 = zext i8 %202 to i32
  %204 = sub nsw i32 %201, %203
  %205 = call i32 @abs(i32 %204) #20
  %206 = load i8, i8* %195, align 1
  %207 = zext i8 %206 to i32
  %scevgep225 = getelementptr i8, i8* %lsr.iv221223, i64 -1
  %208 = load i8, i8* %scevgep225, align 1
  %209 = zext i8 %208 to i32
  %210 = sub nsw i32 %207, %209
  %211 = call i32 @abs(i32 %210) #20
  %212 = add nsw i32 %205, %211
  %213 = load i8, i8* %198, align 1
  %214 = zext i8 %213 to i32
  %215 = load i8, i8* %lsr.iv221223, align 1
  %216 = zext i8 %215 to i32
  %217 = sub nsw i32 %214, %216
  %218 = call i32 @abs(i32 %217) #20
  %219 = add nsw i32 %212, %218
  %220 = icmp slt i32 %219, %.01881
  %tmp = trunc i64 %indvars.iv85 to i32
  %spec.select = select i1 %220, i32 %tmp, i32 %.02179
  %spec.select45 = select i1 %220, i32 %219, i32 %.01881
  %indvars.iv.next86 = add nuw nsw i64 %indvars.iv85, 1
  %scevgep222 = getelementptr %struct.png_color_struct, %struct.png_color_struct* %lsr.iv221, i64 1
  %exitcond89 = icmp ne i64 %wide.trip.count88, %indvars.iv.next86
  br i1 %exitcond89, label %199, label %._crit_edge84

._crit_edge84:                                    ; preds = %199
  %split = phi i32 [ %spec.select, %199 ]
  br label %221

221:                                              ; preds = %._crit_edge84, %156
  %.021.lcssa = phi i32 [ %split, %._crit_edge84 ], [ 0, %156 ]
  %222 = trunc i32 %.021.lcssa to i8
  %223 = load i8*, i8** %115, align 8
  %224 = getelementptr inbounds i8, i8* %223, i64 %indvars.iv92
  store i8 %222, i8* %224, align 1
  br label %225

225:                                              ; preds = %150, %221
  %indvars.iv.next93 = add nuw nsw i64 %indvars.iv92, 1
  %exitcond96 = icmp ne i64 %indvars.iv.next93, %wide.trip.count95
  br i1 %exitcond96, label %150, label %..loopexit49_crit_edge

..loopexit_crit_edge:                             ; preds = %105
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader47
  br label %226

..loopexit49_crit_edge:                           ; preds = %225
  br label %.loopexit49

.loopexit49:                                      ; preds = %..loopexit49_crit_edge, %.preheader48
  br label %226

226:                                              ; preds = %.loopexit49, %.loopexit
  %227 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 128
  %228 = load i8*, i8** %227, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %228)
  %229 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 128
  store i8* null, i8** %229, align 8
  br label %477

230:                                              ; preds = %26
  %231 = zext i32 %2 to i64
  %232 = mul i64 %231, 1
  %233 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %232)
  %234 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 129
  store i8* %233, i8** %234, align 8
  %235 = zext i32 %2 to i64
  %236 = mul i64 %235, 1
  %237 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %236)
  %238 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 130
  store i8* %237, i8** %238, align 8
  %239 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 129
  %240 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 130
  %241 = icmp slt i32 0, %2
  br i1 %241, label %.lr.ph203, label %245

.lr.ph203:                                        ; preds = %230
  %wide.trip.count208 = zext i32 %2 to i64
  br label %242

242:                                              ; preds = %.lr.ph203, %242
  %indvars.iv205 = phi i64 [ 0, %.lr.ph203 ], [ %indvars.iv.next206, %242 ]
  %243 = load i8*, i8** %239, align 8
  %scevgep256 = getelementptr i8, i8* %243, i64 %indvars.iv205
  %tmp254 = trunc i64 %indvars.iv205 to i8
  store i8 %tmp254, i8* %scevgep256, align 1
  %244 = load i8*, i8** %240, align 8
  %scevgep257 = getelementptr i8, i8* %244, i64 %indvars.iv205
  %tmp255 = trunc i64 %indvars.iv205 to i8
  store i8 %tmp255, i8* %scevgep257, align 1
  %indvars.iv.next206 = add nuw nsw i64 %indvars.iv205, 1
  %exitcond209 = icmp ne i64 %wide.trip.count208, %indvars.iv.next206
  br i1 %exitcond209, label %242, label %._crit_edge204

._crit_edge204:                                   ; preds = %242
  br label %245

245:                                              ; preds = %._crit_edge204, %230
  %246 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_calloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 6152)
  %247 = bitcast i8* %246 to %struct.png_dsort_struct**
  %248 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 129
  %249 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 129
  %250 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 129
  %251 = icmp eq i32 %5, 0
  %252 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 109
  %253 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 129
  %254 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 129
  %255 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 109
  %256 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 109
  %257 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 129
  %258 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 109
  %259 = icmp slt i32 0, %2
  %wide.trip.count164 = zext i32 %2 to i64
  %260 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 129
  %261 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 129
  %262 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 130
  %263 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 130
  %264 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 130
  %265 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 129
  %266 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 129
  %267 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 130
  %268 = icmp sgt i32 %2, %3
  br i1 %268, label %.preheader58.lr.ph, label %469

.preheader58.lr.ph:                               ; preds = %245
  %scevgep239 = getelementptr %struct.png_color_struct, %struct.png_color_struct* %1, i64 0, i32 2
  br label %.preheader58

.preheader58:                                     ; preds = %.preheader58.lr.ph, %466
  %.029199 = phi i32 [ 96, %.preheader58.lr.ph ], [ %467, %466 ]
  %.030198 = phi i32 [ %2, %.preheader58.lr.ph ], [ %.7, %466 ]
  %.035197 = phi %struct.png_dsort_struct* [ null, %.preheader58.lr.ph ], [ %.641.lcssa, %466 ]
  %indvars.iv181195 = phi i32 [ 97, %.preheader58.lr.ph ], [ %indvars.iv.next182, %466 ]
  %269 = sub i32 %.030198, 1
  %270 = icmp slt i32 0, %269
  br i1 %270, label %.lr.ph148, label %325

.lr.ph148:                                        ; preds = %.preheader58
  %271 = sext i32 %.030198 to i64
  %wide.trip.count157 = zext i32 %269 to i64
  br label %272

272:                                              ; preds = %.lr.ph148, %323
  %indvars.iv153 = phi i64 [ 0, %.lr.ph148 ], [ %indvars.iv.next154, %323 ]
  %273 = phi i64 [ 1, %.lr.ph148 ], [ %324, %323 ]
  %.136146 = phi %struct.png_dsort_struct* [ %.035197, %.lr.ph148 ], [ %.439, %323 ]
  %indvars156 = trunc i64 %273 to i32
  %indvars.iv.next154 = add nuw nsw i64 %indvars.iv153, 1
  %274 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %indvars.iv153
  %275 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %274, i32 0, i32 0
  %276 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %indvars.iv153
  %277 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %276, i32 0, i32 1
  %278 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %indvars.iv153
  %279 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %278, i32 0, i32 2
  %280 = trunc i64 %indvars.iv153 to i32
  %281 = trunc i32 %280 to i8
  %282 = icmp slt i64 %indvars.iv.next154, %271
  br i1 %282, label %.lr.ph137, label %.split.loop.exit132

.lr.ph137:                                        ; preds = %272
  %283 = mul nsw i64 %273, 3
  %scevgep240 = getelementptr i8, i8* %scevgep239, i64 %283
  %scevgep240241 = bitcast i8* %scevgep240 to %struct.png_color_struct*
  br label %284

284:                                              ; preds = %.lr.ph137, %319
  %lsr.iv247 = phi i32 [ %indvars156, %.lr.ph137 ], [ %lsr.iv.next248, %319 ]
  %lsr.iv242 = phi %struct.png_color_struct* [ %scevgep240241, %.lr.ph137 ], [ %scevgep243, %319 ]
  %.237135 = phi %struct.png_dsort_struct* [ %.136146, %.lr.ph137 ], [ %.338, %319 ]
  %lsr.iv242244 = bitcast %struct.png_color_struct* %lsr.iv242 to i8*
  %285 = load i8, i8* %275, align 1
  %286 = zext i8 %285 to i32
  %scevgep245 = getelementptr i8, i8* %lsr.iv242244, i64 -2
  %287 = load i8, i8* %scevgep245, align 1
  %288 = zext i8 %287 to i32
  %289 = sub nsw i32 %286, %288
  %290 = call i32 @abs(i32 %289) #20
  %291 = load i8, i8* %277, align 1
  %292 = zext i8 %291 to i32
  %scevgep246 = getelementptr i8, i8* %lsr.iv242244, i64 -1
  %293 = load i8, i8* %scevgep246, align 1
  %294 = zext i8 %293 to i32
  %295 = sub nsw i32 %292, %294
  %296 = call i32 @abs(i32 %295) #20
  %297 = add nsw i32 %290, %296
  %298 = load i8, i8* %279, align 1
  %299 = zext i8 %298 to i32
  %300 = load i8, i8* %lsr.iv242244, align 1
  %301 = zext i8 %300 to i32
  %302 = sub nsw i32 %299, %301
  %303 = call i32 @abs(i32 %302) #20
  %304 = add nsw i32 %297, %303
  %305 = icmp sle i32 %304, %.029199
  br i1 %305, label %306, label %319

306:                                              ; preds = %284
  %307 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 16)
  %308 = bitcast i8* %307 to %struct.png_dsort_struct*
  %309 = icmp eq %struct.png_dsort_struct* %308, null
  br i1 %309, label %.split.loop.exit, label %310

310:                                              ; preds = %306
  %311 = sext i32 %304 to i64
  %312 = getelementptr inbounds %struct.png_dsort_struct*, %struct.png_dsort_struct** %247, i64 %311
  %313 = load %struct.png_dsort_struct*, %struct.png_dsort_struct** %312, align 8
  %314 = getelementptr inbounds %struct.png_dsort_struct, %struct.png_dsort_struct* %308, i32 0, i32 0
  store %struct.png_dsort_struct* %313, %struct.png_dsort_struct** %314, align 8
  %315 = getelementptr inbounds %struct.png_dsort_struct, %struct.png_dsort_struct* %308, i32 0, i32 1
  store i8 %281, i8* %315, align 8
  %316 = getelementptr inbounds %struct.png_dsort_struct, %struct.png_dsort_struct* %308, i32 0, i32 2
  %tmp249 = trunc i32 %lsr.iv247 to i8
  store i8 %tmp249, i8* %316, align 1
  %317 = sext i32 %304 to i64
  %318 = getelementptr inbounds %struct.png_dsort_struct*, %struct.png_dsort_struct** %247, i64 %317
  store %struct.png_dsort_struct* %308, %struct.png_dsort_struct** %318, align 8
  br label %319

319:                                              ; preds = %284, %310
  %.338 = phi %struct.png_dsort_struct* [ %308, %310 ], [ %.237135, %284 ]
  %scevgep243 = getelementptr %struct.png_color_struct, %struct.png_color_struct* %lsr.iv242, i64 1
  %lsr.iv.next248 = add i32 %lsr.iv247, 1
  %exitcond144 = icmp ne i32 %.030198, %lsr.iv.next248
  br i1 %exitcond144, label %284, label %..split.loop.exit132_crit_edge

.split.loop.exit:                                 ; preds = %306
  %.lcssa = phi i8* [ %307, %306 ]
  %320 = bitcast i8* %.lcssa to %struct.png_dsort_struct*
  br label %321

..split.loop.exit132_crit_edge:                   ; preds = %319
  %split138 = phi %struct.png_dsort_struct* [ %.338, %319 ]
  br label %.split.loop.exit132

.split.loop.exit132:                              ; preds = %..split.loop.exit132_crit_edge, %272
  %.439.ph133 = phi %struct.png_dsort_struct* [ %split138, %..split.loop.exit132_crit_edge ], [ %.136146, %272 ]
  br label %321

321:                                              ; preds = %.split.loop.exit132, %.split.loop.exit
  %.439 = phi %struct.png_dsort_struct* [ %320, %.split.loop.exit ], [ %.439.ph133, %.split.loop.exit132 ]
  %322 = icmp eq %struct.png_dsort_struct* %.439, null
  br i1 %322, label %._crit_edge149, label %323

323:                                              ; preds = %321
  %indvars.iv.next140 = add nuw i32 %indvars156, 1
  %324 = sext i32 %indvars.iv.next140 to i64
  %exitcond158 = icmp ne i64 %indvars.iv.next154, %wide.trip.count157
  br i1 %exitcond158, label %272, label %._crit_edge151

._crit_edge149:                                   ; preds = %321
  %split150 = phi %struct.png_dsort_struct* [ %.439, %321 ]
  br label %325

._crit_edge151:                                   ; preds = %323
  %split152 = phi %struct.png_dsort_struct* [ %.439, %323 ]
  br label %325

325:                                              ; preds = %._crit_edge151, %._crit_edge149, %.preheader58
  %.540 = phi %struct.png_dsort_struct* [ %split152, %._crit_edge151 ], [ %split150, %._crit_edge149 ], [ %.035197, %.preheader58 ]
  %326 = icmp ne %struct.png_dsort_struct* %.540, null
  br i1 %326, label %.preheader56, label %450

.preheader56:                                     ; preds = %325
  %wide.trip.count183 = zext i32 %indvars.iv181195 to i64
  br label %327

327:                                              ; preds = %.preheader56, %449
  %indvars.iv178 = phi i64 [ 0, %.preheader56 ], [ %indvars.iv.next179, %449 ]
  %.131176 = phi i32 [ %.030198, %.preheader56 ], [ %.5, %449 ]
  %328 = getelementptr inbounds %struct.png_dsort_struct*, %struct.png_dsort_struct** %247, i64 %indvars.iv178
  %329 = load %struct.png_dsort_struct*, %struct.png_dsort_struct** %328, align 8
  %330 = icmp ne %struct.png_dsort_struct* %329, null
  br i1 %330, label %331, label %449

331:                                              ; preds = %327
  %332 = getelementptr inbounds %struct.png_dsort_struct*, %struct.png_dsort_struct** %247, i64 %indvars.iv178
  %333 = load %struct.png_dsort_struct*, %struct.png_dsort_struct** %332, align 8
  %334 = icmp ne %struct.png_dsort_struct* %333, null
  br i1 %334, label %.lr.ph171, label %447

.lr.ph171:                                        ; preds = %331
  br label %335

335:                                              ; preds = %.lr.ph171, %443
  %.232169 = phi i32 [ %.131176, %.lr.ph171 ], [ %.333, %443 ]
  %.043166 = phi %struct.png_dsort_struct* [ %333, %.lr.ph171 ], [ %445, %443 ]
  %336 = load i8*, i8** %248, align 8
  %337 = getelementptr inbounds %struct.png_dsort_struct, %struct.png_dsort_struct* %.043166, i32 0, i32 1
  %338 = load i8, i8* %337, align 8
  %339 = zext i8 %338 to i64
  %340 = getelementptr inbounds i8, i8* %336, i64 %339
  %341 = load i8, i8* %340, align 1
  %342 = zext i8 %341 to i32
  %343 = icmp slt i32 %342, %.232169
  br i1 %343, label %344, label %441

344:                                              ; preds = %335
  %345 = load i8*, i8** %249, align 8
  %346 = getelementptr inbounds %struct.png_dsort_struct, %struct.png_dsort_struct* %.043166, i32 0, i32 2
  %347 = load i8, i8* %346, align 1
  %348 = zext i8 %347 to i64
  %349 = getelementptr inbounds i8, i8* %345, i64 %348
  %350 = load i8, i8* %349, align 1
  %351 = zext i8 %350 to i32
  %352 = icmp slt i32 %351, %.232169
  br i1 %352, label %353, label %441

353:                                              ; preds = %344
  %354 = and i32 %.232169, 1
  %355 = icmp ne i32 %354, 0
  br i1 %355, label %356, label %363

356:                                              ; preds = %353
  %357 = getelementptr inbounds %struct.png_dsort_struct, %struct.png_dsort_struct* %.043166, i32 0, i32 1
  %358 = load i8, i8* %357, align 8
  %359 = zext i8 %358 to i32
  %360 = getelementptr inbounds %struct.png_dsort_struct, %struct.png_dsort_struct* %.043166, i32 0, i32 2
  %361 = load i8, i8* %360, align 1
  %362 = zext i8 %361 to i32
  br label %370

363:                                              ; preds = %353
  %364 = getelementptr inbounds %struct.png_dsort_struct, %struct.png_dsort_struct* %.043166, i32 0, i32 2
  %365 = load i8, i8* %364, align 1
  %366 = zext i8 %365 to i32
  %367 = getelementptr inbounds %struct.png_dsort_struct, %struct.png_dsort_struct* %.043166, i32 0, i32 1
  %368 = load i8, i8* %367, align 8
  %369 = zext i8 %368 to i32
  br label %370

370:                                              ; preds = %363, %356
  %.043168 = phi %struct.png_dsort_struct* [ %.043166, %356 ], [ %.043166, %363 ]
  %.024 = phi i32 [ %359, %356 ], [ %366, %363 ]
  %.023 = phi i32 [ %362, %356 ], [ %369, %363 ]
  %371 = add nsw i32 %.232169, -1
  %372 = load i8*, i8** %250, align 8
  %373 = sext i32 %.024 to i64
  %374 = getelementptr inbounds i8, i8* %372, i64 %373
  %375 = load i8, i8* %374, align 1
  %376 = zext i8 %375 to i64
  %377 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %376
  %378 = sext i32 %371 to i64
  %379 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %378
  %380 = bitcast %struct.png_color_struct* %377 to i8*
  %381 = bitcast %struct.png_color_struct* %379 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %380, i8* align 1 %381, i64 3, i1 false)
  br i1 %251, label %.preheader53, label %410

.preheader53:                                     ; preds = %370
  %382 = sext i32 %.024 to i64
  %383 = sext i32 %.023 to i64
  %384 = sext i32 %.024 to i64
  br i1 %259, label %.lr.ph160, label %.loopexit54

.lr.ph160:                                        ; preds = %.preheader53
  br label %385

385:                                              ; preds = %.lr.ph160, %409
  %indvars.iv161 = phi i64 [ 0, %.lr.ph160 ], [ %indvars.iv.next162, %409 ]
  %386 = load i8*, i8** %252, align 8
  %scevgep250 = getelementptr i8, i8* %386, i64 %indvars.iv161
  %387 = load i8, i8* %scevgep250, align 1
  %388 = zext i8 %387 to i32
  %389 = load i8*, i8** %253, align 8
  %390 = getelementptr inbounds i8, i8* %389, i64 %382
  %391 = load i8, i8* %390, align 1
  %392 = zext i8 %391 to i32
  %393 = icmp eq i32 %388, %392
  br i1 %393, label %394, label %399

394:                                              ; preds = %385
  %395 = load i8*, i8** %254, align 8
  %396 = getelementptr inbounds i8, i8* %395, i64 %383
  %397 = load i8, i8* %396, align 1
  %398 = load i8*, i8** %255, align 8
  %scevgep251 = getelementptr i8, i8* %398, i64 %indvars.iv161
  store i8 %397, i8* %scevgep251, align 1
  br label %399

399:                                              ; preds = %394, %385
  %400 = load i8*, i8** %256, align 8
  %scevgep252 = getelementptr i8, i8* %400, i64 %indvars.iv161
  %401 = load i8, i8* %scevgep252, align 1
  %402 = zext i8 %401 to i32
  %403 = icmp eq i32 %402, %371
  br i1 %403, label %404, label %409

404:                                              ; preds = %399
  %405 = load i8*, i8** %257, align 8
  %406 = getelementptr inbounds i8, i8* %405, i64 %384
  %407 = load i8, i8* %406, align 1
  %408 = load i8*, i8** %258, align 8
  %scevgep253 = getelementptr i8, i8* %408, i64 %indvars.iv161
  store i8 %407, i8* %scevgep253, align 1
  br label %409

409:                                              ; preds = %399, %404
  %indvars.iv.next162 = add nuw nsw i64 %indvars.iv161, 1
  %exitcond165 = icmp ne i64 %wide.trip.count164, %indvars.iv.next162
  br i1 %exitcond165, label %385, label %..loopexit54_crit_edge

..loopexit54_crit_edge:                           ; preds = %409
  br label %.loopexit54

.loopexit54:                                      ; preds = %..loopexit54_crit_edge, %.preheader53
  br label %410

410:                                              ; preds = %.loopexit54, %370
  %411 = load i8*, i8** %260, align 8
  %412 = sext i32 %.024 to i64
  %413 = getelementptr inbounds i8, i8* %411, i64 %412
  %414 = load i8, i8* %413, align 1
  %415 = load i8*, i8** %261, align 8
  %416 = load i8*, i8** %262, align 8
  %417 = sext i32 %371 to i64
  %418 = getelementptr inbounds i8, i8* %416, i64 %417
  %419 = load i8, i8* %418, align 1
  %420 = zext i8 %419 to i64
  %421 = getelementptr inbounds i8, i8* %415, i64 %420
  store i8 %414, i8* %421, align 1
  %422 = load i8*, i8** %263, align 8
  %423 = sext i32 %371 to i64
  %424 = getelementptr inbounds i8, i8* %422, i64 %423
  %425 = load i8, i8* %424, align 1
  %426 = load i8*, i8** %264, align 8
  %427 = load i8*, i8** %265, align 8
  %428 = sext i32 %.024 to i64
  %429 = getelementptr inbounds i8, i8* %427, i64 %428
  %430 = load i8, i8* %429, align 1
  %431 = zext i8 %430 to i64
  %432 = getelementptr inbounds i8, i8* %426, i64 %431
  store i8 %425, i8* %432, align 1
  %433 = trunc i32 %371 to i8
  %434 = load i8*, i8** %266, align 8
  %435 = sext i32 %.024 to i64
  %436 = getelementptr inbounds i8, i8* %434, i64 %435
  store i8 %433, i8* %436, align 1
  %437 = trunc i32 %.024 to i8
  %438 = load i8*, i8** %267, align 8
  %439 = sext i32 %371 to i64
  %440 = getelementptr inbounds i8, i8* %438, i64 %439
  store i8 %437, i8* %440, align 1
  br label %441

441:                                              ; preds = %410, %344, %335
  %.043167 = phi %struct.png_dsort_struct* [ %.043168, %410 ], [ %.043166, %344 ], [ %.043166, %335 ]
  %.333 = phi i32 [ %371, %410 ], [ %.232169, %344 ], [ %.232169, %335 ]
  %442 = icmp sle i32 %.333, %3
  br i1 %442, label %._crit_edge172, label %443

443:                                              ; preds = %441
  %444 = getelementptr inbounds %struct.png_dsort_struct, %struct.png_dsort_struct* %.043167, i32 0, i32 0
  %445 = load %struct.png_dsort_struct*, %struct.png_dsort_struct** %444, align 8
  %446 = icmp ne %struct.png_dsort_struct* %445, null
  br i1 %446, label %335, label %._crit_edge174

._crit_edge172:                                   ; preds = %441
  %split173 = phi i32 [ %.333, %441 ]
  br label %447

._crit_edge174:                                   ; preds = %443
  %split175 = phi i32 [ %.333, %443 ]
  br label %447

447:                                              ; preds = %._crit_edge174, %._crit_edge172, %331
  %.434 = phi i32 [ %split175, %._crit_edge174 ], [ %split173, %._crit_edge172 ], [ %.131176, %331 ]
  %448 = icmp sle i32 %.434, %3
  br i1 %448, label %.loopexit57, label %449

449:                                              ; preds = %327, %447
  %.5 = phi i32 [ %.131176, %327 ], [ %.434, %447 ]
  %indvars.iv.next179 = add nuw nsw i64 %indvars.iv178, 1
  %exitcond184 = icmp ne i64 %indvars.iv.next179, %wide.trip.count183
  br i1 %exitcond184, label %327, label %.loopexit57

.loopexit57:                                      ; preds = %447, %449
  %.7.ph = phi i32 [ %.434, %447 ], [ %.5, %449 ]
  br label %450

450:                                              ; preds = %.loopexit57, %325
  %indvars.iv181196 = phi i32 [ %indvars.iv181195, %325 ], [ %indvars.iv181195, %.loopexit57 ]
  %.7 = phi i32 [ %.030198, %325 ], [ %.7.ph, %.loopexit57 ]
  br label %451

451:                                              ; preds = %450, %464
  %indvars.iv191 = phi i64 [ 0, %450 ], [ %indvars.iv.next192, %464 ]
  %.641189 = phi %struct.png_dsort_struct* [ %.540, %450 ], [ %.8, %464 ]
  %452 = getelementptr inbounds %struct.png_dsort_struct*, %struct.png_dsort_struct** %247, i64 %indvars.iv191
  %453 = load %struct.png_dsort_struct*, %struct.png_dsort_struct** %452, align 8
  %454 = icmp ne %struct.png_dsort_struct* %453, null
  br i1 %454, label %455, label %464

455:                                              ; preds = %451
  %456 = getelementptr inbounds %struct.png_dsort_struct*, %struct.png_dsort_struct** %247, i64 %indvars.iv191
  %457 = load %struct.png_dsort_struct*, %struct.png_dsort_struct** %456, align 8
  %458 = icmp ne %struct.png_dsort_struct* %457, null
  br i1 %458, label %.lr.ph187, label %.loopexit55

.lr.ph187:                                        ; preds = %455
  br label %459

459:                                              ; preds = %.lr.ph187, %459
  %.05185 = phi %struct.png_dsort_struct* [ %457, %.lr.ph187 ], [ %461, %459 ]
  %460 = getelementptr inbounds %struct.png_dsort_struct, %struct.png_dsort_struct* %.05185, i32 0, i32 0
  %461 = load %struct.png_dsort_struct*, %struct.png_dsort_struct** %460, align 8
  %462 = bitcast %struct.png_dsort_struct* %.05185 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %462)
  %463 = icmp ne %struct.png_dsort_struct* %461, null
  br i1 %463, label %459, label %..loopexit55_crit_edge

..loopexit55_crit_edge:                           ; preds = %459
  %split188 = phi %struct.png_dsort_struct* [ %461, %459 ]
  br label %.loopexit55

.loopexit55:                                      ; preds = %..loopexit55_crit_edge, %455
  %.8.ph = phi %struct.png_dsort_struct* [ %split188, %..loopexit55_crit_edge ], [ %.641189, %455 ]
  br label %464

464:                                              ; preds = %.loopexit55, %451
  %.8 = phi %struct.png_dsort_struct* [ %.641189, %451 ], [ %.8.ph, %.loopexit55 ]
  %465 = getelementptr inbounds %struct.png_dsort_struct*, %struct.png_dsort_struct** %247, i64 %indvars.iv191
  store %struct.png_dsort_struct* null, %struct.png_dsort_struct** %465, align 8
  %indvars.iv.next192 = add nuw nsw i64 %indvars.iv191, 1
  %exitcond194 = icmp ne i64 %indvars.iv.next192, 769
  br i1 %exitcond194, label %451, label %466

466:                                              ; preds = %464
  %.641.lcssa = phi %struct.png_dsort_struct* [ %.8, %464 ]
  %467 = add nuw nsw i32 %.029199, 96
  %indvars.iv.next182 = add nuw i32 %indvars.iv181196, 96
  %468 = icmp sgt i32 %.7, %3
  br i1 %468, label %.preheader58, label %._crit_edge200

._crit_edge200:                                   ; preds = %466
  br label %469

469:                                              ; preds = %._crit_edge200, %245
  %470 = bitcast %struct.png_dsort_struct** %247 to i8*
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %470)
  %471 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 130
  %472 = load i8*, i8** %471, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %472)
  %473 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 129
  %474 = load i8*, i8** %473, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %474)
  %475 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 130
  store i8* null, i8** %475, align 8
  %476 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 129
  store i8* null, i8** %476, align 8
  br label %477

477:                                              ; preds = %226, %469, %24
  %.02 = phi i32 [ %2, %24 ], [ %3, %469 ], [ %3, %226 ]
  %478 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  %479 = load %struct.png_color_struct*, %struct.png_color_struct** %478, align 8
  %480 = icmp eq %struct.png_color_struct* %479, null
  br i1 %480, label %481, label %483

481:                                              ; preds = %477
  %482 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 52
  store %struct.png_color_struct* %1, %struct.png_color_struct** %482, align 8
  br label %483

483:                                              ; preds = %481, %477
  %484 = trunc i32 %.02 to i16
  %485 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 53
  store i16 %484, i16* %485, align 8
  %486 = icmp ne i32 %5, 0
  br i1 %486, label %487, label %562

487:                                              ; preds = %483
  %488 = zext i32 15 to i64
  %489 = shl i64 1, %488
  %490 = mul i64 %489, 1
  %491 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_calloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %490)
  %492 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 108
  store i8* %491, i8** %492, align 8
  %493 = mul i64 %489, 1
  %494 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %493)
  %495 = mul i64 %489, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %494, i8 -1, i64 %495, i1 false)
  %496 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 108
  %497 = icmp slt i32 0, %.02
  br i1 %497, label %.lr.ph, label %561

.lr.ph:                                           ; preds = %487
  %wide.trip.count = zext i32 %.02 to i64
  br label %498

498:                                              ; preds = %.lr.ph, %560
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %560 ]
  %499 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %indvars.iv
  %500 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %499, i32 0, i32 0
  %501 = load i8, i8* %500, align 1
  %502 = zext i8 %501 to i32
  %503 = ashr i32 %502, 3
  %504 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %indvars.iv
  %505 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %504, i32 0, i32 1
  %506 = load i8, i8* %505, align 1
  %507 = zext i8 %506 to i32
  %508 = ashr i32 %507, 3
  %509 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %1, i64 %indvars.iv
  %510 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %509, i32 0, i32 2
  %511 = load i8, i8* %510, align 1
  %512 = zext i8 %511 to i32
  %513 = ashr i32 %512, 3
  %514 = trunc i64 %indvars.iv to i32
  %515 = trunc i32 %514 to i8
  %516 = mul nsw i32 %513, -1
  br label %517

517:                                              ; preds = %498, %558
  %.0363 = phi i32 [ 0, %498 ], [ %559, %558 ]
  %518 = icmp ugt i32 %.0363, %503
  %519 = sub nsw i32 %.0363, %503
  %520 = sub nsw i32 %503, %.0363
  %521 = select i1 %518, i32 %519, i32 %520
  %522 = shl i32 %.0363, 10
  br label %523

523:                                              ; preds = %517, %556
  %.0161 = phi i32 [ 0, %517 ], [ %557, %556 ]
  %524 = icmp ugt i32 %.0161, %508
  %525 = sub nsw i32 %.0161, %508
  %526 = sub nsw i32 %508, %.0161
  %527 = select i1 %524, i32 %525, i32 %526
  %528 = add nsw i32 %521, %527
  %529 = icmp sgt i32 %521, %527
  %530 = select i1 %529, i32 %521, i32 %527
  %531 = shl i32 %.0161, 5
  %532 = or i32 %522, %531
  br label %533

533:                                              ; preds = %523, %554
  %lsr.iv = phi i32 [ %513, %523 ], [ %lsr.iv.next, %554 ]
  %.060 = phi i32 [ 0, %523 ], [ %555, %554 ]
  %534 = or i32 %532, %.060
  %535 = icmp ugt i32 %.060, %513
  %536 = add i32 %516, %.060
  %537 = select i1 %535, i32 %536, i32 %lsr.iv
  %538 = icmp sgt i32 %530, %537
  %539 = select i1 %538, i32 %530, i32 %537
  %540 = add nsw i32 %539, %528
  %541 = add nsw i32 %540, %537
  %542 = sext i32 %534 to i64
  %543 = getelementptr inbounds i8, i8* %494, i64 %542
  %544 = load i8, i8* %543, align 1
  %545 = zext i8 %544 to i32
  %546 = icmp slt i32 %541, %545
  br i1 %546, label %547, label %554

547:                                              ; preds = %533
  %548 = trunc i32 %541 to i8
  %549 = sext i32 %534 to i64
  %550 = getelementptr inbounds i8, i8* %494, i64 %549
  store i8 %548, i8* %550, align 1
  %551 = load i8*, i8** %496, align 8
  %552 = sext i32 %534 to i64
  %553 = getelementptr inbounds i8, i8* %551, i64 %552
  store i8 %515, i8* %553, align 1
  br label %554

554:                                              ; preds = %533, %547
  %555 = add nuw nsw i32 %.060, 1
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %exitcond = icmp ne i32 %555, 32
  br i1 %exitcond, label %533, label %556

556:                                              ; preds = %554
  %557 = add nuw nsw i32 %.0161, 1
  %exitcond62 = icmp ne i32 %557, 32
  br i1 %exitcond62, label %523, label %558

558:                                              ; preds = %556
  %559 = add nuw nsw i32 %.0363, 1
  %exitcond64 = icmp ne i32 %559, 32
  br i1 %exitcond64, label %517, label %560

560:                                              ; preds = %558
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond67 = icmp ne i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond67, label %498, label %._crit_edge

._crit_edge:                                      ; preds = %560
  br label %561

561:                                              ; preds = %._crit_edge, %487
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %494)
  br label %562

562:                                              ; preds = %6, %561, %483
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32) #21

; Function Attrs: noinline nounwind uwtable
define void @png_set_gamma_fixed(%struct.png_struct_def* noalias %0, i32 %1, i32 %2) #11 {
  %4 = call i32 @png_rtran_ok(%struct.png_struct_def* %0, i32 0)
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %24, label %6

6:                                                ; preds = %3
  %7 = call i32 @translate_gamma_flags(%struct.png_struct_def* %0, i32 %1, i32 1)
  %8 = call i32 @translate_gamma_flags(%struct.png_struct_def* %0, i32 %2, i32 0)
  %9 = icmp sle i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %6
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.6.213, i32 0, i32 0)) #24
  unreachable

11:                                               ; preds = %6
  %12 = icmp sle i32 %7, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %11
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.214, i32 0, i32 0)) #24
  unreachable

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %16 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %15, i32 0, i32 0
  store i32 %8, i32* %16, align 8
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 144
  %18 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %17, i32 0, i32 4
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = or i32 %20, 1
  %22 = trunc i32 %21 to i16
  store i16 %22, i16* %18, align 2
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 80
  store i32 %7, i32* %23, align 4
  br label %24

24:                                               ; preds = %3, %14
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_gamma(%struct.png_struct_def* noalias %0, double %1, double %2) #11 {
  %4 = call i32 @convert_gamma_value(%struct.png_struct_def* %0, double %1)
  %5 = call i32 @convert_gamma_value(%struct.png_struct_def* %0, double %2)
  call void @png_set_gamma_fixed(%struct.png_struct_def* %0, i32 %4, i32 %5)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_palette_to_rgb(%struct.png_struct_def* noalias %0) #11 {
  %2 = call i32 @png_rtran_ok(%struct.png_struct_def* %0, i32 0)
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %8, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %6 = load i32, i32* %5, align 4
  %7 = or i32 %6, 33558528
  store i32 %7, i32* %5, align 4
  br label %8

8:                                                ; preds = %1, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_rgb_to_gray(%struct.png_struct_def* noalias %0, i32 %1, double %2, double %3) #11 {
  %5 = call i32 @png_fixed(%struct.png_struct_def* %0, double %2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.10.227, i32 0, i32 0))
  %6 = call i32 @png_fixed(%struct.png_struct_def* %0, double %3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.11.228, i32 0, i32 0))
  call void @png_set_rgb_to_gray_fixed(%struct.png_struct_def* %0, i32 %1, i32 %5, i32 %6)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_read_user_transform_fn(%struct.png_struct_def* noalias %0, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)* %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %4 = load i32, i32* %3, align 4
  %5 = or i32 %4, 1048576
  store i32 %5, i32* %3, align 4
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 10
  store void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)* %1, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_uint_32(i8* %0) #11 {
  %2 = load i8, i8* %0, align 1
  %3 = zext i8 %2 to i32
  %4 = shl i32 %3, 24
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl i32 %7, 16
  %9 = add i32 %4, %8
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = shl i32 %12, 8
  %14 = add i32 %9, %13
  %15 = getelementptr inbounds i8, i8* %0, i64 3
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = add i32 %14, %17
  ret i32 %18
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_int_32(i8* %0) #11 {
  %2 = load i8, i8* %0, align 1
  %3 = zext i8 %2 to i32
  %4 = shl i32 %3, 24
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl i32 %7, 16
  %9 = add i32 %4, %8
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = shl i32 %12, 8
  %14 = add i32 %9, %13
  %15 = getelementptr inbounds i8, i8* %0, i64 3
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = add i32 %14, %17
  %19 = and i32 %18, -2147483648
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %27, label %21

21:                                               ; preds = %1
  %22 = xor i32 %18, -1
  %23 = add i32 %22, 1
  %24 = and i32 %23, -2147483648
  %25 = icmp eq i32 %24, 0
  %26 = sub nsw i32 0, %23
  %spec.select = select i1 %25, i32 %26, i32 0
  br label %27

27:                                               ; preds = %21, %1
  %.0 = phi i32 [ %18, %1 ], [ %spec.select, %21 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define zeroext i16 @png_get_uint_16(i8* %0) #11 {
  %2 = load i8, i8* %0, align 1
  %3 = zext i8 %2 to i32
  %4 = shl i32 %3, 8
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = add i32 %4, %7
  %9 = trunc i32 %8 to i16
  ret i16 %9
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_cHRM_fixed(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9) #11 {
  %11 = alloca %struct.png_xy, align 4
  %12 = icmp eq %struct.png_struct_def* %0, null
  %13 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %12, i1 true, i1 %13
  br i1 %or.cond, label %34, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i32 0, i32 0
  store i32 %4, i32* %15, align 4
  %16 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i32 0, i32 1
  store i32 %5, i32* %16, align 4
  %17 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i32 0, i32 2
  store i32 %6, i32* %17, align 4
  %18 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i32 0, i32 3
  store i32 %7, i32* %18, align 4
  %19 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i32 0, i32 4
  store i32 %8, i32* %19, align 4
  %20 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i32 0, i32 5
  store i32 %9, i32* %20, align 4
  %21 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i32 0, i32 6
  store i32 %2, i32* %21, align 4
  %22 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i32 0, i32 7
  store i32 %3, i32* %22, align 4
  %23 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %24 = call i32 @png_colorspace_set_chromaticities(%struct.png_struct_def* %0, %struct.png_colorspace* %23, %struct.png_xy* %11, i32 2)
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %33

26:                                               ; preds = %14
  %27 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %28 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %27, i32 0, i32 4
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = or i32 %30, 16
  %32 = trunc i32 %31 to i16
  store i16 %32, i16* %28, align 2
  br label %33

33:                                               ; preds = %26, %14
  call void @png_colorspace_sync_info(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %34

34:                                               ; preds = %10, %33
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_cHRM_XYZ_fixed(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10) #11 {
  %12 = alloca %struct.png_XYZ, align 4
  %13 = icmp eq %struct.png_struct_def* %0, null
  %14 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %13, i1 true, i1 %14
  br i1 %or.cond, label %36, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i32 0, i32 0
  store i32 %2, i32* %16, align 4
  %17 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i32 0, i32 1
  store i32 %3, i32* %17, align 4
  %18 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i32 0, i32 2
  store i32 %4, i32* %18, align 4
  %19 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i32 0, i32 3
  store i32 %5, i32* %19, align 4
  %20 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i32 0, i32 4
  store i32 %6, i32* %20, align 4
  %21 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i32 0, i32 5
  store i32 %7, i32* %21, align 4
  %22 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i32 0, i32 6
  store i32 %8, i32* %22, align 4
  %23 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i32 0, i32 7
  store i32 %9, i32* %23, align 4
  %24 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i32 0, i32 8
  store i32 %10, i32* %24, align 4
  %25 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %26 = call i32 @png_colorspace_set_endpoints(%struct.png_struct_def* %0, %struct.png_colorspace* %25, %struct.png_XYZ* %12, i32 2)
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %35

28:                                               ; preds = %15
  %29 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %30 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %29, i32 0, i32 4
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = or i32 %32, 16
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %30, align 2
  br label %35

35:                                               ; preds = %28, %15
  call void @png_colorspace_sync_info(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %36

36:                                               ; preds = %11, %35
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_cHRM(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, double %2, double %3, double %4, double %5, double %6, double %7, double %8, double %9) #11 {
  %11 = call i32 @png_fixed(%struct.png_struct_def* %0, double %2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.381, i32 0, i32 0))
  %12 = call i32 @png_fixed(%struct.png_struct_def* %0, double %3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1.382, i32 0, i32 0))
  %13 = call i32 @png_fixed(%struct.png_struct_def* %0, double %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2.383, i32 0, i32 0))
  %14 = call i32 @png_fixed(%struct.png_struct_def* %0, double %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3.384, i32 0, i32 0))
  %15 = call i32 @png_fixed(%struct.png_struct_def* %0, double %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4.385, i32 0, i32 0))
  %16 = call i32 @png_fixed(%struct.png_struct_def* %0, double %7, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.386, i32 0, i32 0))
  %17 = call i32 @png_fixed(%struct.png_struct_def* %0, double %8, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6.387, i32 0, i32 0))
  %18 = call i32 @png_fixed(%struct.png_struct_def* %0, double %9, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7.388, i32 0, i32 0))
  call void @png_set_cHRM_fixed(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_cHRM_XYZ(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, double %2, double %3, double %4, double %5, double %6, double %7, double %8, double %9, double %10) #11 {
  %12 = call i32 @png_fixed(%struct.png_struct_def* %0, double %2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2.383, i32 0, i32 0))
  %13 = call i32 @png_fixed(%struct.png_struct_def* %0, double %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3.384, i32 0, i32 0))
  %14 = call i32 @png_fixed(%struct.png_struct_def* %0, double %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8.389, i32 0, i32 0))
  %15 = call i32 @png_fixed(%struct.png_struct_def* %0, double %5, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4.385, i32 0, i32 0))
  %16 = call i32 @png_fixed(%struct.png_struct_def* %0, double %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.386, i32 0, i32 0))
  %17 = call i32 @png_fixed(%struct.png_struct_def* %0, double %7, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9.390, i32 0, i32 0))
  %18 = call i32 @png_fixed(%struct.png_struct_def* %0, double %8, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6.387, i32 0, i32 0))
  %19 = call i32 @png_fixed(%struct.png_struct_def* %0, double %9, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7.388, i32 0, i32 0))
  %20 = call i32 @png_fixed(%struct.png_struct_def* %0, double %10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.391, i32 0, i32 0))
  call void @png_set_cHRM_XYZ_fixed(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19, i32 %20)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_eXIf(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i8* %2) #11 {
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.11.392, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_gAMA_fixed(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  %5 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 true, i1 %5
  br i1 %or.cond, label %8, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  call void @png_colorspace_set_gamma(%struct.png_struct_def* %0, %struct.png_colorspace* %7, i32 %2)
  call void @png_colorspace_sync_info(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %8

8:                                                ; preds = %3, %6
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_gAMA(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, double %2) #11 {
  %4 = call i32 @png_fixed(%struct.png_struct_def* %0, double %2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13.396, i32 0, i32 0))
  call void @png_set_gAMA_fixed(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %4)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_sCAL(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2, double %3, double %4) #11 {
  %6 = alloca [18 x i8], align 16
  %7 = alloca [18 x i8], align 16
  %8 = fcmp ole double %3, 0.000000e+00
  br i1 %8, label %9, label %10

9:                                                ; preds = %5
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.27.420, i32 0, i32 0))
  br label %18

10:                                               ; preds = %5
  %11 = fcmp ole double %4, 0.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %10
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.28.421, i32 0, i32 0))
  br label %18

13:                                               ; preds = %10
  %14 = getelementptr inbounds [18 x i8], [18 x i8]* %6, i32 0, i32 0
  call void @png_ascii_from_fp(%struct.png_struct_def* %0, i8* %14, i64 18, double %3, i32 5)
  %15 = getelementptr inbounds [18 x i8], [18 x i8]* %7, i32 0, i32 0
  call void @png_ascii_from_fp(%struct.png_struct_def* %0, i8* %15, i64 18, double %4, i32 5)
  %16 = getelementptr inbounds [18 x i8], [18 x i8]* %6, i32 0, i32 0
  %17 = getelementptr inbounds [18 x i8], [18 x i8]* %7, i32 0, i32 0
  call void @png_set_sCAL_s(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %2, i8* %16, i8* %17)
  br label %18

18:                                               ; preds = %12, %13, %9
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_sCAL_fixed(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2, i32 %3, i32 %4) #11 {
  %6 = alloca [18 x i8], align 16
  %7 = alloca [18 x i8], align 16
  %8 = icmp sle i32 %3, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %5
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.27.420, i32 0, i32 0))
  br label %18

10:                                               ; preds = %5
  %11 = icmp sle i32 %4, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %10
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.28.421, i32 0, i32 0))
  br label %18

13:                                               ; preds = %10
  %14 = getelementptr inbounds [18 x i8], [18 x i8]* %6, i32 0, i32 0
  call void @png_ascii_from_fixed(%struct.png_struct_def* %0, i8* %14, i64 18, i32 %3)
  %15 = getelementptr inbounds [18 x i8], [18 x i8]* %7, i32 0, i32 0
  call void @png_ascii_from_fixed(%struct.png_struct_def* %0, i8* %15, i64 18, i32 %4)
  %16 = getelementptr inbounds [18 x i8], [18 x i8]* %6, i32 0, i32 0
  %17 = getelementptr inbounds [18 x i8], [18 x i8]* %7, i32 0, i32 0
  call void @png_set_sCAL_s(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %2, i8* %16, i8* %17)
  br label %18

18:                                               ; preds = %12, %13, %9
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_sRGB(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  %5 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 true, i1 %5
  br i1 %or.cond, label %9, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %8 = call i32 @png_colorspace_set_sRGB(%struct.png_struct_def* %0, %struct.png_colorspace* %7, i32 %2)
  call void @png_colorspace_sync_info(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %9

9:                                                ; preds = %3, %6
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_sRGB_gAMA_and_cHRM(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  %5 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 true, i1 %5
  br i1 %or.cond, label %18, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %8 = call i32 @png_colorspace_set_sRGB(%struct.png_struct_def* %0, %struct.png_colorspace* %7, i32 %2)
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %12 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %11, i32 0, i32 4
  %13 = load i16, i16* %12, align 2
  %14 = zext i16 %13 to i32
  %15 = or i32 %14, 24
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %12, align 2
  br label %17

17:                                               ; preds = %10, %6
  call void @png_colorspace_sync_info(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %18

18:                                               ; preds = %3, %17
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_iCCP(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i8* %2, i32 %3, i8* %4, i32 %5) #11 {
  %7 = icmp eq %struct.png_struct_def* %0, null
  %8 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %7, i1 true, i1 %8
  %9 = icmp eq i8* %2, null
  %or.cond1 = select i1 %or.cond, i1 true, i1 %9
  %10 = icmp eq i8* %4, null
  %or.cond2 = select i1 %or.cond1, i1 true, i1 %10
  br i1 %or.cond2, label %49, label %11

11:                                               ; preds = %6
  %12 = icmp ne i32 %3, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %11
  call void @png_app_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.31.430, i32 0, i32 0))
  br label %14

14:                                               ; preds = %13, %11
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = call i32 @png_colorspace_set_ICC(%struct.png_struct_def* %0, %struct.png_colorspace* %15, i8* %2, i32 %5, i8* %4, i32 %18)
  call void @png_colorspace_sync_info(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %49, label %21

21:                                               ; preds = %14
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %23 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %22, i32 0, i32 4
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = or i32 %25, 24
  %27 = trunc i32 %26 to i16
  store i16 %27, i16* %23, align 2
  %28 = call i64 @strlen(i8* %2) #26
  %29 = add i64 %28, 1
  %30 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %29)
  %31 = icmp eq i8* %30, null
  br i1 %31, label %32, label %33

32:                                               ; preds = %21
  call void @png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.32.431, i32 0, i32 0))
  br label %49

33:                                               ; preds = %21
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %2, i64 %29, i1 false)
  %34 = zext i32 %5 to i64
  %35 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %34)
  %36 = icmp eq i8* %35, null
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %0, i8* %30)
  call void @png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.33.432, i32 0, i32 0))
  br label %49

38:                                               ; preds = %33
  %39 = zext i32 %5 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 %4, i64 %39, i1 false)
  call void @png_free_data(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 16, i32 0)
  %40 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 19
  store i32 %5, i32* %40, align 8
  %41 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 17
  store i8* %30, i8** %41, align 8
  %42 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 18
  store i8* %35, i8** %42, align 8
  %43 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 45
  %44 = load i32, i32* %43, align 4
  %45 = or i32 %44, 16
  store i32 %45, i32* %43, align 4
  %46 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %47 = load i32, i32* %46, align 8
  %48 = or i32 %47, 4096
  store i32 %48, i32* %46, align 8
  br label %49

49:                                               ; preds = %14, %6, %38, %37, %32
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_text(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, %struct.png_text_struct* %2, i32 %3) #11 {
  %5 = call i32 @png_set_text_2(%struct.png_struct_def* %0, %struct.png_info_def* %1, %struct.png_text_struct* %2, i32 %3)
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %4
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.34.435, i32 0, i32 0)) #24
  unreachable

8:                                                ; preds = %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_unknown_chunk_location(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2, i32 %3) #11 {
  %5 = icmp ne %struct.png_struct_def* %0, null
  %6 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %5, i1 %6, i1 false
  %7 = icmp sge i32 %2, 0
  %or.cond1 = select i1 %or.cond, i1 %7, i1 false
  br i1 %or.cond1, label %8, label %25

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 47
  %10 = load i32, i32* %9, align 8
  %11 = icmp slt i32 %2, %10
  br i1 %11, label %12, label %25

12:                                               ; preds = %8
  %13 = and i32 %3, 11
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %12
  call void @png_app_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.45.456, i32 0, i32 0))
  %16 = and i32 %3, 4
  %17 = icmp ne i32 %16, 0
  %. = select i1 %17, i32 8, i32 1
  br label %18

18:                                               ; preds = %15, %12
  %.1 = phi i32 [ %., %15 ], [ %3, %12 ]
  %19 = call zeroext i8 @check_location(%struct.png_struct_def* %0, i32 %.1)
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 46
  %21 = load %struct.png_unknown_chunk_t*, %struct.png_unknown_chunk_t** %20, align 8
  %22 = sext i32 %2 to i64
  %23 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %21, i64 %22
  %24 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %23, i32 0, i32 3
  store i8 %19, i8* %24, align 8
  br label %25

25:                                               ; preds = %18, %8, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_permit_mng_features(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = and i32 %1, 5
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 122
  store i32 %5, i32* %6, align 8
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 122
  %8 = load i32, i32* %7, align 8
  br label %9

9:                                                ; preds = %2, %4
  %.0 = phi i32 [ %8, %4 ], [ 0, %2 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_read_user_chunk_fn(%struct.png_struct_def* noalias %0, i8* %1, i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)* %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 114
  store i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)* %2, i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)** %6, align 8
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 113
  store i8* %1, i8** %7, align 8
  br label %8

8:                                                ; preds = %3, %5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_rows(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i8** %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  %5 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 true, i1 %5
  br i1 %or.cond, label %22, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 53
  %8 = load i8**, i8*** %7, align 8
  %9 = icmp ne i8** %8, null
  br i1 %9, label %10, label %15

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 53
  %12 = load i8**, i8*** %11, align 8
  %13 = icmp ne i8** %12, %2
  br i1 %13, label %14, label %15

14:                                               ; preds = %10
  call void @png_free_data(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 64, i32 0)
  br label %15

15:                                               ; preds = %14, %10, %6
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 53
  store i8** %2, i8*** %16, align 8
  %17 = icmp ne i8** %2, null
  br i1 %17, label %18, label %22

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %20 = load i32, i32* %19, align 8
  %21 = or i32 %20, 32768
  store i32 %21, i32* %19, align 8
  br label %22

22:                                               ; preds = %3, %18, %15
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_compression_buffer_size(%struct.png_struct_def* noalias %0, i64 %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %41, label %4

4:                                                ; preds = %2
  %5 = icmp eq i64 %1, 0
  %6 = icmp ugt i64 %1, 2147483647
  %or.cond = or i1 %5, %6
  br i1 %or.cond, label %7, label %8

7:                                                ; preds = %4
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.49.462, i32 0, i32 0)) #24
  unreachable

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 32768
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %8
  %14 = trunc i64 %1 to i32
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 140
  store i32 %14, i32* %15, align 8
  br label %41

16:                                               ; preds = %8
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %18 = load i32, i32* %17, align 4
  %19 = and i32 %18, 32768
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %41

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 18
  %23 = load i32, i32* %22, align 8
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.50.463, i32 0, i32 0))
  br label %41

26:                                               ; preds = %21
  %27 = icmp ugt i64 %1, 4294967295
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.51.464, i32 0, i32 0))
  br label %29

29:                                               ; preds = %28, %26
  %.0 = phi i64 [ 4294967295, %28 ], [ %1, %26 ]
  %30 = icmp ult i64 %.0, 6
  br i1 %30, label %31, label %32

31:                                               ; preds = %29
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.52.465, i32 0, i32 0))
  br label %41

32:                                               ; preds = %29
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 21
  %34 = load i32, i32* %33, align 8
  %35 = zext i32 %34 to i64
  %36 = icmp ne i64 %35, %.0
  br i1 %36, label %37, label %41

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 20
  call void bitcast (void (%struct.png_struct_def.60*, %struct.png_compression_buffer**)* @png_free_buffer_list to void (%struct.png_struct_def*, %struct.png_compression_buffer**)*)(%struct.png_struct_def* %0, %struct.png_compression_buffer** %38)
  %39 = trunc i64 %.0 to i32
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 21
  store i32 %39, i32* %40, align 8
  br label %41

41:                                               ; preds = %32, %37, %2, %13, %25, %31, %16
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_invalid(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %or.cond = select i1 %4, i1 %5, i1 false
  br i1 %or.cond, label %6, label %11

6:                                                ; preds = %3
  %7 = xor i32 %2, -1
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, %7
  store i32 %10, i32* %8, align 8
  br label %11

11:                                               ; preds = %6, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_user_limits(%struct.png_struct_def* noalias %0, i32 %1, i32 %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 132
  store i32 %1, i32* %6, align 4
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 133
  store i32 %2, i32* %7, align 8
  br label %8

8:                                                ; preds = %3, %5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_chunk_cache_max(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 134
  store i32 %1, i32* %5, align 4
  br label %6

6:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_chunk_malloc_max(%struct.png_struct_def* noalias %0, i64 %1) #11 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 135
  store i64 %1, i64* %5, align 8
  br label %6

6:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_check_for_invalid_index(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 54
  store i32 0, i32* %5, align 4
  br label %8

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 54
  store i32 -1, i32* %7, align 4
  br label %8

8:                                                ; preds = %6, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_check_keyword(%struct.png_struct_def* noalias %0, i8* %1, i8* %2) #11 {
  %4 = alloca [8 x [32 x i8]], align 16
  %5 = icmp eq i8* %1, null
  br i1 %5, label %9, label %.preheader

.preheader:                                       ; preds = %3
  %6 = load i8, i8* %1, align 1
  %7 = sext i8 %6 to i32
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %.lr.ph, label %38

.lr.ph:                                           ; preds = %.preheader
  br label %10

9:                                                ; preds = %3
  store i8 0, i8* %2, align 1
  br label %56

10:                                               ; preds = %.lr.ph, %33
  %.0125 = phi i32 [ 1, %.lr.ph ], [ %.2, %33 ]
  %.0224 = phi i8* [ %1, %.lr.ph ], [ %11, %33 ]
  %.0323 = phi i8* [ %2, %.lr.ph ], [ %.25, %33 ]
  %.0622 = phi i32 [ 0, %.lr.ph ], [ %.4, %33 ]
  %.01021 = phi i32 [ 0, %.lr.ph ], [ %.212, %33 ]
  %11 = getelementptr inbounds i8, i8* %.0224, i32 1
  %scevgep = getelementptr i8, i8* %.0224, i64 1
  %12 = load i8, i8* %.0224, align 1
  %13 = zext i8 %12 to i32
  %14 = icmp sgt i32 %13, 32
  %15 = zext i8 %12 to i32
  %16 = icmp sle i32 %15, 126
  %or.cond = and i1 %14, %16
  %17 = zext i8 %12 to i32
  %18 = icmp sge i32 %17, 161
  %or.cond16 = select i1 %or.cond, i1 true, i1 %18
  br i1 %or.cond16, label %19, label %22

19:                                               ; preds = %10
  %20 = getelementptr inbounds i8, i8* %.0323, i32 1
  store i8 %12, i8* %.0323, align 1
  %21 = add i32 %.01021, 1
  br label %33

22:                                               ; preds = %10
  %23 = icmp eq i32 %.0125, 0
  br i1 %23, label %24, label %30

24:                                               ; preds = %22
  %25 = getelementptr inbounds i8, i8* %.0323, i32 1
  store i8 32, i8* %.0323, align 1
  %26 = add i32 %.01021, 1
  %27 = zext i8 %12 to i32
  %28 = icmp ne i32 %27, 32
  %29 = zext i8 %12 to i32
  %spec.select17 = select i1 %28, i32 %29, i32 %.0622
  br label %33

30:                                               ; preds = %22
  %31 = icmp eq i32 %.0622, 0
  %32 = zext i8 %12 to i32
  %spec.select18 = select i1 %31, i32 %32, i32 %.0622
  br label %33

33:                                               ; preds = %24, %30, %19
  %.212 = phi i32 [ %21, %19 ], [ %26, %24 ], [ %.01021, %30 ]
  %.4 = phi i32 [ %.0622, %19 ], [ %spec.select17, %24 ], [ %spec.select18, %30 ]
  %.25 = phi i8* [ %20, %19 ], [ %25, %24 ], [ %.0323, %30 ]
  %.2 = phi i32 [ 0, %19 ], [ 1, %24 ], [ %.0125, %30 ]
  %34 = load i8, i8* %scevgep, align 1
  %35 = sext i8 %34 to i32
  %36 = icmp ne i32 %35, 0
  %37 = icmp ult i32 %.212, 79
  %spec.select = select i1 %36, i1 %37, i1 false
  br i1 %spec.select, label %10, label %._crit_edge

._crit_edge:                                      ; preds = %33
  %split = phi i32 [ %.212, %33 ]
  %split26 = phi i32 [ %.4, %33 ]
  %split27 = phi i8* [ %.25, %33 ]
  %split28 = phi i8* [ %11, %33 ]
  %split29 = phi i32 [ %.2, %33 ]
  br label %38

38:                                               ; preds = %._crit_edge, %.preheader
  %.010.lcssa = phi i32 [ %split, %._crit_edge ], [ 0, %.preheader ]
  %.06.lcssa = phi i32 [ %split26, %._crit_edge ], [ 0, %.preheader ]
  %.03.lcssa = phi i8* [ %split27, %._crit_edge ], [ %2, %.preheader ]
  %.02.lcssa = phi i8* [ %split28, %._crit_edge ], [ %1, %.preheader ]
  %.01.lcssa = phi i32 [ %split29, %._crit_edge ], [ 1, %.preheader ]
  %39 = icmp ugt i32 %.010.lcssa, 0
  %40 = icmp ne i32 %.01.lcssa, 0
  %or.cond19 = select i1 %39, i1 %40, i1 false
  %41 = add i32 %.010.lcssa, -1
  %42 = getelementptr inbounds i8, i8* %.03.lcssa, i32 -1
  %43 = icmp eq i32 %.06.lcssa, 0
  %spec.select20 = select i1 %43, i32 32, i32 %.06.lcssa
  %.313 = select i1 %or.cond19, i32 %41, i32 %.010.lcssa
  %.6 = select i1 %or.cond19, i32 %spec.select20, i32 %.06.lcssa
  %.3 = select i1 %or.cond19, i8* %42, i8* %.03.lcssa
  store i8 0, i8* %.3, align 1
  %44 = icmp eq i32 %.313, 0
  br i1 %44, label %56, label %45

45:                                               ; preds = %38
  %46 = load i8, i8* %.02.lcssa, align 1
  %47 = sext i8 %46 to i32
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %45
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.53.468, i32 0, i32 0))
  br label %56

50:                                               ; preds = %45
  %51 = icmp ne i32 %.6, 0
  br i1 %51, label %52, label %56

52:                                               ; preds = %50
  %53 = getelementptr inbounds [8 x [32 x i8]], [8 x [32 x i8]]* %4, i32 0, i32 0
  call void @png_warning_parameter([32 x i8]* %53, i32 1, i8* %1)
  %54 = getelementptr inbounds [8 x [32 x i8]], [8 x [32 x i8]]* %4, i32 0, i32 0
  call void @png_warning_parameter_signed([32 x i8]* %54, i32 2, i32 4, i32 %.6)
  %55 = getelementptr inbounds [8 x [32 x i8]], [8 x [32 x i8]]* %4, i32 0, i32 0
  call void @png_formatted_warning(%struct.png_struct_def* %0, [32 x i8]* %55, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.54.469, i32 0, i32 0))
  br label %56

56:                                               ; preds = %49, %52, %50, %38, %9
  %.0 = phi i32 [ 0, %9 ], [ 0, %38 ], [ %.313, %50 ], [ %.313, %52 ], [ %.313, %49 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_user_transform_info(%struct.png_struct_def.199* noalias %0, i8* %1, i32 %2, i32 %3) #11 {
  %5 = icmp eq %struct.png_struct_def.199* %0, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 15
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 32768
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 16
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 64
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %11
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_app_error to void (%struct.png_struct_def.199*, i8*)*)(%struct.png_struct_def.199* %0, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.2.504, i32 0, i32 0))
  br label %23

17:                                               ; preds = %11, %6
  %18 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 12
  store i8* %1, i8** %18, align 8
  %19 = trunc i32 %2 to i8
  %20 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 13
  store i8 %19, i8* %20, align 8
  %21 = trunc i32 %3 to i8
  %22 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 14
  store i8 %21, i8* %22, align 1
  br label %23

23:                                               ; preds = %4, %17, %16
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i8* @png_get_user_transform_ptr(%struct.png_struct_def.199* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def.199* %0, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 12
  %5 = load i8*, i8** %4, align 8
  br label %6

6:                                                ; preds = %1, %3
  %.0 = phi i8* [ %5, %3 ], [ null, %1 ]
  ret i8* %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_get_current_row_number(%struct.png_struct_def.199* noalias %0) #11 {
  %2 = icmp ne %struct.png_struct_def.199* %0, null
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 43
  %5 = load i32, i32* %4, align 4
  br label %6

6:                                                ; preds = %1, %3
  %.0 = phi i32 [ %5, %3 ], [ -1, %1 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define zeroext i8 @png_get_current_pass_number(%struct.png_struct_def.199* noalias %0) #11 {
  %2 = icmp ne %struct.png_struct_def.199* %0, null
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def.199, %struct.png_struct_def.199* %0, i32 0, i32 59
  %5 = load i8, i8* %4, align 1
  br label %6

6:                                                ; preds = %1, %3
  %.0 = phi i8 [ %5, %3 ], [ 8, %1 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_data(%struct.png_struct_def* noalias %0, i8* %1, i64 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 7
  %5 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %4, align 8
  %6 = icmp ne void (%struct.png_struct_def*, i8*, i64)* %5, null
  br i1 %6, label %7, label %12

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 7
  %9 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %8, align 8
  %10 = ptrtoint i8* %1 to i64
  %11 = inttoptr i64 %10 to i8*
  call void %9(%struct.png_struct_def* %0, i8* %11, i64 %2)
  ret void

12:                                               ; preds = %3
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.505, i32 0, i32 0)) #24
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define void @png_default_write_data(%struct.png_struct_def* %0, i8* %1, i64 %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 9
  %7 = load i8*, i8** %6, align 8
  %8 = bitcast i8* %7 to %struct._IO_FILE.1*
  %9 = call i64 @fwrite(i8* %1, i64 1, i64 %2, %struct._IO_FILE.1* %8)
  %10 = icmp ne i64 %9, %2
  br i1 %10, label %11, label %12

11:                                               ; preds = %5
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1.506, i32 0, i32 0)) #24
  unreachable

12:                                               ; preds = %3, %5
  ret void
}

declare i64 @fwrite(i8*, i64, i64, %struct._IO_FILE.1*) #13

; Function Attrs: noinline nounwind uwtable
define void @png_flush(%struct.png_struct_def* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 76
  %3 = load void (%struct.png_struct_def*)*, void (%struct.png_struct_def*)** %2, align 8
  %4 = icmp ne void (%struct.png_struct_def*)* %3, null
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 76
  %7 = load void (%struct.png_struct_def*)*, void (%struct.png_struct_def*)** %6, align 8
  call void %7(%struct.png_struct_def* %0)
  br label %8

8:                                                ; preds = %5, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_default_flush(%struct.png_struct_def* %0) #11 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 9
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct._IO_FILE.1*
  %7 = call i32 @fflush(%struct._IO_FILE.1* %6)
  br label %8

8:                                                ; preds = %1, %3
  ret void
}

declare i32 @fflush(%struct._IO_FILE.1*) #13

; Function Attrs: noinline nounwind uwtable
define void @png_set_write_fn(%struct.png_struct_def* noalias %0, i8* %1, void (%struct.png_struct_def*, i8*, i64)* %2, void (%struct.png_struct_def*)* %3) #11 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 9
  store i8* %1, i8** %7, align 8
  %8 = icmp ne void (%struct.png_struct_def*, i8*, i64)* %2, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %6
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 7
  store void (%struct.png_struct_def*, i8*, i64)* %2, void (%struct.png_struct_def*, i8*, i64)** %10, align 8
  br label %13

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 7
  store void (%struct.png_struct_def*, i8*, i64)* @png_default_write_data, void (%struct.png_struct_def*, i8*, i64)** %12, align 8
  br label %13

13:                                               ; preds = %11, %9
  %14 = icmp ne void (%struct.png_struct_def*)* %3, null
  br i1 %14, label %15, label %17

15:                                               ; preds = %13
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 76
  store void (%struct.png_struct_def*)* %3, void (%struct.png_struct_def*)** %16, align 8
  br label %19

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 76
  store void (%struct.png_struct_def*)* @png_default_flush, void (%struct.png_struct_def*)** %18, align 8
  br label %19

19:                                               ; preds = %17, %15
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 8
  %21 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %20, align 8
  %22 = icmp ne void (%struct.png_struct_def*, i8*, i64)* %21, null
  br i1 %22, label %23, label %25

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 8
  store void (%struct.png_struct_def*, i8*, i64)* null, void (%struct.png_struct_def*, i8*, i64)** %24, align 8
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.2.507, i32 0, i32 0))
  br label %25

25:                                               ; preds = %4, %23, %19
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_info_before_PLTE(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  %4 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 true, i1 %4
  br i1 %or.cond, label %139, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 1024
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %139

10:                                               ; preds = %5
  call void bitcast (void (%struct.png_struct_def.60*)* @png_write_sig to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 4096
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %21

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 122
  %17 = load i32, i32* %16, align 8
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %15
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.508, i32 0, i32 0))
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 122
  store i32 0, i32* %20, align 8
  br label %21

21:                                               ; preds = %19, %15, %10
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 7
  %27 = load i8, i8* %26, align 4
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 9
  %33 = load i8, i8* %32, align 2
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 10
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 11
  %39 = load i8, i8* %38, align 8
  %40 = zext i8 %39 to i32
  call void bitcast (void (%struct.png_struct_def.60*, i32, i32, i32, i32, i32, i32, i32)* @png_write_IHDR to void (%struct.png_struct_def*, i32, i32, i32, i32, i32, i32, i32)*)(%struct.png_struct_def* %0, i32 %23, i32 %25, i32 %28, i32 %31, i32 %34, i32 %37, i32 %40)
  %41 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %42 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %41, i32 0, i32 4
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = and i32 %44, 32768
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %63

47:                                               ; preds = %21
  %48 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %49 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %48, i32 0, i32 4
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = and i32 %51, 8
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %63

54:                                               ; preds = %47
  %55 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %56 = load i32, i32* %55, align 8
  %57 = and i32 %56, 1
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %63

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %61 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %60, i32 0, i32 0
  %62 = load i32, i32* %61, align 4
  call void bitcast (void (%struct.png_struct_def.60*, i32)* @png_write_gAMA_fixed to void (%struct.png_struct_def*, i32)*)(%struct.png_struct_def* %0, i32 %62)
  br label %63

63:                                               ; preds = %59, %54, %47, %21
  %64 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %65 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %64, i32 0, i32 4
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = and i32 %67, 32768
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %86

70:                                               ; preds = %63
  %71 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %72 = load i32, i32* %71, align 8
  %73 = and i32 %72, 4096
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %75, label %86

75:                                               ; preds = %70
  %76 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %77 = load i32, i32* %76, align 8
  %78 = and i32 %77, 2048
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %75
  call void @png_app_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1.509, i32 0, i32 0))
  br label %81

81:                                               ; preds = %80, %75
  %82 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 17
  %83 = load i8*, i8** %82, align 8
  %84 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 18
  %85 = load i8*, i8** %84, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*, i8*)* @png_write_iCCP to void (%struct.png_struct_def*, i8*, i8*)*)(%struct.png_struct_def* %0, i8* %83, i8* %85)
  br label %103

86:                                               ; preds = %70, %63
  %87 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %88 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %87, i32 0, i32 4
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = and i32 %90, 32768
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %103

93:                                               ; preds = %86
  %94 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %95 = load i32, i32* %94, align 8
  %96 = and i32 %95, 2048
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %103

98:                                               ; preds = %93
  %99 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %100 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %99, i32 0, i32 3
  %101 = load i16, i16* %100, align 4
  %102 = zext i16 %101 to i32
  call void bitcast (void (%struct.png_struct_def.60*, i32)* @png_write_sRGB to void (%struct.png_struct_def*, i32)*)(%struct.png_struct_def* %0, i32 %102)
  br label %103

103:                                              ; preds = %86, %93, %98, %81
  %104 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %105 = load i32, i32* %104, align 8
  %106 = and i32 %105, 2
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %108, label %113

108:                                              ; preds = %103
  %109 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 24
  %110 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  call void bitcast (void (%struct.png_struct_def.60*, %struct.png_color_8_struct*, i32)* @png_write_sBIT to void (%struct.png_struct_def*, %struct.png_color_8_struct*, i32)*)(%struct.png_struct_def* %0, %struct.png_color_8_struct* %109, i32 %112)
  br label %113

113:                                              ; preds = %108, %103
  %114 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %115 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %114, i32 0, i32 4
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i32
  %118 = and i32 %117, 32768
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %135

120:                                              ; preds = %113
  %121 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %122 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %121, i32 0, i32 4
  %123 = load i16, i16* %122, align 2
  %124 = zext i16 %123 to i32
  %125 = and i32 %124, 16
  %126 = icmp ne i32 %125, 0
  br i1 %126, label %127, label %135

127:                                              ; preds = %120
  %128 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %129 = load i32, i32* %128, align 8
  %130 = and i32 %129, 4
  %131 = icmp ne i32 %130, 0
  br i1 %131, label %132, label %135

132:                                              ; preds = %127
  %133 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 16
  %134 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %133, i32 0, i32 1
  call void bitcast (void (%struct.png_struct_def.60*, %struct.png_xy*)* @png_write_cHRM_fixed to void (%struct.png_struct_def*, %struct.png_xy*)*)(%struct.png_struct_def* %0, %struct.png_xy* %134)
  br label %135

135:                                              ; preds = %132, %127, %120, %113
  call void @write_unknown_chunks(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 1)
  %136 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %137 = load i32, i32* %136, align 4
  %138 = or i32 %137, 1024
  store i32 %138, i32* %136, align 4
  br label %139

139:                                              ; preds = %2, %135, %5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_sig(%struct.png_struct_def.60* noalias %0) #11 {
  %2 = alloca [8 x i8], align 1
  %3 = bitcast [8 x i8]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @png_write_sig.png_signature, i32 0, i32 0), i64 8, i1 false)
  %4 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 141
  store i32 18, i32* %4, align 4
  %5 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 67
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i64
  %8 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 %7
  %9 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 67
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = sub nsw i32 8, %11
  %13 = sext i32 %12 to i64
  call void bitcast (void (%struct.png_struct_def*, i8*, i64)* @png_write_data to void (%struct.png_struct_def.60*, i8*, i64)*)(%struct.png_struct_def.60* %0, i8* %8, i64 %13)
  %14 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 67
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = icmp slt i32 %16, 3
  br i1 %17, label %18, label %22

18:                                               ; preds = %1
  %19 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 15
  %20 = load i32, i32* %19, align 4
  %21 = or i32 %20, 4096
  store i32 %21, i32* %19, align 4
  br label %22

22:                                               ; preds = %18, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_IHDR(%struct.png_struct_def.60* noalias %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7) #11 {
  %9 = alloca [13 x i8], align 1
  switch i32 %4, label %48 [
    i32 0, label %10
    i32 2, label %14
    i32 3, label %24
    i32 4, label %28
    i32 6, label %38
  ]

10:                                               ; preds = %8
  switch i32 %3, label %13 [
    i32 1, label %11
    i32 2, label %11
    i32 4, label %11
    i32 8, label %11
    i32 16, label %11
  ]

11:                                               ; preds = %10, %10, %10, %10, %10
  %12 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 65
  store i8 1, i8* %12, align 1
  br label %49

13:                                               ; preds = %10
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.555, i32 0, i32 0)) #24
  unreachable

14:                                               ; preds = %8
  %15 = icmp ne i32 %3, 8
  %16 = zext i1 %15 to i32
  %17 = icmp ne i32 %16, 0
  %18 = icmp ne i32 %3, 16
  %spec.select = select i1 %17, i1 %18, i1 false
  %19 = zext i1 %spec.select to i32
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %14
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1.556, i32 0, i32 0)) #24
  unreachable

22:                                               ; preds = %14
  %23 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 65
  store i8 3, i8* %23, align 1
  br label %49

24:                                               ; preds = %8
  switch i32 %3, label %27 [
    i32 1, label %25
    i32 2, label %25
    i32 4, label %25
    i32 8, label %25
  ]

25:                                               ; preds = %24, %24, %24, %24
  %26 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 65
  store i8 1, i8* %26, align 1
  br label %49

27:                                               ; preds = %24
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2.557, i32 0, i32 0)) #24
  unreachable

28:                                               ; preds = %8
  %29 = icmp ne i32 %3, 8
  %30 = zext i1 %29 to i32
  %31 = icmp ne i32 %30, 0
  %32 = icmp ne i32 %3, 16
  %spec.select3 = select i1 %31, i1 %32, i1 false
  %33 = zext i1 %spec.select3 to i32
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %28
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3.558, i32 0, i32 0)) #24
  unreachable

36:                                               ; preds = %28
  %37 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 65
  store i8 2, i8* %37, align 1
  br label %49

38:                                               ; preds = %8
  %39 = icmp ne i32 %3, 8
  %40 = zext i1 %39 to i32
  %41 = icmp ne i32 %40, 0
  %42 = icmp ne i32 %3, 16
  %spec.select4 = select i1 %41, i1 %42, i1 false
  %43 = zext i1 %spec.select4 to i32
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4.559, i32 0, i32 0)) #24
  unreachable

46:                                               ; preds = %38
  %47 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 65
  store i8 4, i8* %47, align 1
  br label %49

48:                                               ; preds = %8
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5.560, i32 0, i32 0)) #24
  unreachable

49:                                               ; preds = %46, %36, %25, %22, %11
  %50 = icmp ne i32 %5, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %49
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6.561, i32 0, i32 0))
  br label %52

52:                                               ; preds = %51, %49
  %.02 = phi i32 [ 0, %51 ], [ %5, %49 ]
  %53 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 122
  %54 = load i32, i32* %53, align 8
  %55 = and i32 %54, 4
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %57, label %64

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 15
  %59 = load i32, i32* %58, align 4
  %60 = and i32 %59, 4096
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %57
  switch i32 %4, label %64 [
    i32 2, label %63
    i32 6, label %63
  ]

63:                                               ; preds = %62, %62
  switch i32 %6, label %66 [
    i32 64, label %67
    i32 0, label %67
  ]

64:                                               ; preds = %62, %57, %52
  %65 = icmp ne i32 %6, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63, %64
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7.562, i32 0, i32 0))
  br label %67

67:                                               ; preds = %63, %63, %66, %64
  %.01 = phi i32 [ %6, %63 ], [ 0, %66 ], [ %6, %64 ], [ %6, %63 ]
  switch i32 %7, label %68 [
    i32 0, label %69
    i32 1, label %69
  ]

68:                                               ; preds = %67
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8.563, i32 0, i32 0))
  br label %69

69:                                               ; preds = %67, %67, %68
  %.0 = phi i32 [ 1, %68 ], [ %7, %67 ], [ %7, %67 ]
  %70 = trunc i32 %3 to i8
  %71 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 62
  store i8 %70, i8* %71, align 8
  %72 = trunc i32 %4 to i8
  %73 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 61
  store i8 %72, i8* %73, align 1
  %74 = trunc i32 %.0 to i8
  %75 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 58
  store i8 %74, i8* %75, align 4
  %76 = trunc i32 %.01 to i8
  %77 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 123
  store i8 %76, i8* %77, align 4
  %78 = trunc i32 %.02 to i8
  %79 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 131
  store i8 %78, i8* %79, align 8
  %80 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 37
  store i32 %1, i32* %80, align 8
  %81 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 38
  store i32 %2, i32* %81, align 4
  %82 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 65
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = mul nsw i32 %3, %84
  %86 = trunc i32 %85 to i8
  %87 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 64
  store i8 %86, i8* %87, align 2
  %88 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 64
  %89 = load i8, i8* %88, align 2
  %90 = zext i8 %89 to i32
  %91 = icmp sge i32 %90, 8
  br i1 %91, label %92, label %99

92:                                               ; preds = %69
  %93 = zext i32 %1 to i64
  %94 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 64
  %95 = load i8, i8* %94, align 2
  %96 = zext i8 %95 to i64
  %97 = lshr i64 %96, 3
  %98 = mul i64 %93, %97
  br label %107

99:                                               ; preds = %69
  %100 = zext i32 %1 to i64
  %101 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 64
  %102 = load i8, i8* %101, align 2
  %103 = zext i8 %102 to i64
  %104 = mul i64 %100, %103
  %105 = add i64 %104, 7
  %106 = lshr i64 %105, 3
  br label %107

107:                                              ; preds = %99, %92
  %108 = phi i64 [ %98, %92 ], [ %106, %99 ]
  %109 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 41
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 37
  %111 = load i32, i32* %110, align 8
  %112 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 40
  store i32 %111, i32* %112, align 4
  %113 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 62
  %114 = load i8, i8* %113, align 8
  %115 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 63
  store i8 %114, i8* %115, align 1
  %116 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 65
  %117 = load i8, i8* %116, align 1
  %118 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 66
  store i8 %117, i8* %118, align 4
  %119 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i32 0, i32 0
  call void @png_save_uint_32(i8* %119, i32 %1)
  %120 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i32 0, i32 0
  %121 = getelementptr inbounds i8, i8* %120, i64 4
  call void @png_save_uint_32(i8* %121, i32 %2)
  %122 = trunc i32 %3 to i8
  %123 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 8
  store i8 %122, i8* %123, align 1
  %124 = trunc i32 %4 to i8
  %125 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 9
  store i8 %124, i8* %125, align 1
  %126 = trunc i32 %.02 to i8
  %127 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 10
  store i8 %126, i8* %127, align 1
  %128 = trunc i32 %.01 to i8
  %129 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 11
  store i8 %128, i8* %129, align 1
  %130 = trunc i32 %.0 to i8
  %131 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 12
  store i8 %130, i8* %131, align 1
  %132 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i32 0, i32 0
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1229472850, i8* %132, i64 13)
  %133 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 60
  %134 = load i8, i8* %133, align 2
  %135 = zext i8 %134 to i32
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %151

137:                                              ; preds = %107
  %138 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 61
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = icmp eq i32 %140, 3
  br i1 %141, label %147, label %142

142:                                              ; preds = %137
  %143 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 62
  %144 = load i8, i8* %143, align 8
  %145 = zext i8 %144 to i32
  %146 = icmp slt i32 %145, 8
  br i1 %146, label %147, label %149

147:                                              ; preds = %142, %137
  %148 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 60
  store i8 8, i8* %148, align 2
  br label %151

149:                                              ; preds = %142
  %150 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 60
  store i8 -8, i8* %150, align 2
  br label %151

151:                                              ; preds = %147, %149, %107
  %152 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 15
  store i32 1, i32* %152, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_gAMA_fixed(%struct.png_struct_def.60* noalias %0, i32 %1) #11 {
  %3 = alloca [4 x i8], align 1
  %4 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i32 0, i32 0
  call void @png_save_uint_32(i8* %4, i32 %1)
  %5 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i32 0, i32 0
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1732332865, i8* %5, i64 4)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_iCCP(%struct.png_struct_def.60* noalias %0, i8* %1, i8* %2) #11 {
  %4 = alloca [81 x i8], align 16
  %5 = alloca %struct.compression_state, align 8
  %6 = icmp eq i8* %2, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13.583, i32 0, i32 0)) #24
  unreachable

8:                                                ; preds = %3
  %9 = load i8, i8* %2, align 1
  %10 = zext i8 %9 to i32
  %11 = shl i32 %10, 24
  %12 = getelementptr inbounds i8, i8* %2, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = shl i32 %14, 16
  %16 = add i32 %11, %15
  %17 = getelementptr inbounds i8, i8* %2, i64 2
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = shl i32 %19, 8
  %21 = add i32 %16, %20
  %22 = getelementptr inbounds i8, i8* %2, i64 3
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = add i32 %21, %24
  %26 = icmp ult i32 %25, 132
  br i1 %26, label %27, label %28

27:                                               ; preds = %8
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14.584, i32 0, i32 0)) #24
  unreachable

28:                                               ; preds = %8
  %29 = getelementptr inbounds i8, i8* %2, i64 8
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = icmp ugt i32 %31, 3
  %33 = and i32 %25, 3
  %34 = icmp ne i32 %33, 0
  %or.cond = select i1 %32, i1 %34, i1 false
  br i1 %or.cond, label %35, label %36

35:                                               ; preds = %28
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.15.585, i32 0, i32 0)) #24
  unreachable

36:                                               ; preds = %28
  %37 = load i8, i8* %2, align 1
  %38 = zext i8 %37 to i32
  %39 = shl i32 %38, 24
  %40 = getelementptr inbounds i8, i8* %2, i64 1
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = shl i32 %42, 16
  %44 = add i32 %39, %43
  %45 = getelementptr inbounds i8, i8* %2, i64 2
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = shl i32 %47, 8
  %49 = add i32 %44, %48
  %50 = getelementptr inbounds i8, i8* %2, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = add i32 %49, %52
  %54 = icmp ne i32 %25, %53
  br i1 %54, label %55, label %56

55:                                               ; preds = %36
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.16.586, i32 0, i32 0)) #24
  unreachable

56:                                               ; preds = %36
  %57 = getelementptr inbounds [81 x i8], [81 x i8]* %4, i32 0, i32 0
  %58 = call i32 bitcast (i32 (%struct.png_struct_def*, i8*, i8*)* @png_check_keyword to i32 (%struct.png_struct_def.60*, i8*, i8*)*)(%struct.png_struct_def.60* %0, i8* %1, i8* %57)
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %56
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.17.587, i32 0, i32 0)) #24
  unreachable

61:                                               ; preds = %56
  %62 = add i32 %58, 1
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds [81 x i8], [81 x i8]* %4, i64 0, i64 %63
  store i8 0, i8* %64, align 1
  %65 = add i32 %62, 1
  %66 = zext i32 %25 to i64
  call void @png_text_compress_init(%struct.compression_state* %5, i8* %2, i64 %66)
  %67 = call i32 @png_text_compress(%struct.png_struct_def.60* %0, i32 1766015824, %struct.compression_state* %5, i32 %65)
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %69, label %73

69:                                               ; preds = %61
  %70 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %71 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %70, i32 0, i32 6
  %72 = load i8*, i8** %71, align 8
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* %72) #24
  unreachable

73:                                               ; preds = %61
  %74 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %5, i32 0, i32 2
  %75 = load i32, i32* %74, align 8
  %76 = add i32 %65, %75
  call void @png_write_chunk_header(%struct.png_struct_def.60* %0, i32 1766015824, i32 %76)
  %77 = getelementptr inbounds [81 x i8], [81 x i8]* %4, i32 0, i32 0
  %78 = zext i32 %65 to i64
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %77, i64 %78)
  call void @png_write_compressed_data_out(%struct.png_struct_def.60* %0, %struct.compression_state* %5)
  call void @png_write_chunk_end(%struct.png_struct_def.60* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_sRGB(%struct.png_struct_def.60* noalias %0, i32 %1) #11 {
  %3 = alloca [1 x i8], align 1
  %4 = icmp sge i32 %1, 4
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.12.580, i32 0, i32 0))
  br label %6

6:                                                ; preds = %5, %2
  %7 = trunc i32 %1 to i8
  %8 = getelementptr inbounds [1 x i8], [1 x i8]* %3, i64 0, i64 0
  store i8 %7, i8* %8, align 1
  %9 = getelementptr inbounds [1 x i8], [1 x i8]* %3, i32 0, i32 0
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1934772034, i8* %9, i64 1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_sBIT(%struct.png_struct_def.60* noalias %0, %struct.png_color_8_struct* %1, i32 %2) #11 {
  %4 = alloca [4 x i8], align 1
  %5 = and i32 %2, 2
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %59

7:                                                ; preds = %3
  %8 = icmp eq i32 %2, 3
  br i1 %8, label %13, label %9

9:                                                ; preds = %7
  %10 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 63
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %7, %9
  %14 = phi i32 [ %12, %9 ], [ 8, %7 ]
  %15 = trunc i32 %14 to i8
  %16 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1, i32 0, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %48, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1, i32 0, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = zext i8 %15 to i32
  %25 = icmp sgt i32 %23, %24
  br i1 %25, label %48, label %26

26:                                               ; preds = %20
  %27 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1, i32 0, i32 1
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %48, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1, i32 0, i32 1
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = zext i8 %15 to i32
  %36 = icmp sgt i32 %34, %35
  br i1 %36, label %48, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1, i32 0, i32 2
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %48, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1, i32 0, i32 2
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = zext i8 %15 to i32
  %47 = icmp sgt i32 %45, %46
  br i1 %47, label %48, label %49

48:                                               ; preds = %42, %37, %31, %26, %20, %13
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.19.595, i32 0, i32 0))
  br label %101

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1, i32 0, i32 0
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 0
  store i8 %51, i8* %52, align 1
  %53 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1, i32 0, i32 1
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  store i8 %54, i8* %55, align 1
  %56 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1, i32 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 2
  store i8 %57, i8* %58, align 1
  br label %77

59:                                               ; preds = %3
  %60 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1, i32 0, i32 3
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %72, label %64

64:                                               ; preds = %59
  %65 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1, i32 0, i32 3
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 63
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = icmp sgt i32 %67, %70
  br i1 %71, label %72, label %73

72:                                               ; preds = %64, %59
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.19.595, i32 0, i32 0))
  br label %101

73:                                               ; preds = %64
  %74 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1, i32 0, i32 3
  %75 = load i8, i8* %74, align 1
  %76 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 0
  store i8 %75, i8* %76, align 1
  br label %77

77:                                               ; preds = %73, %49
  %.0 = phi i64 [ 3, %49 ], [ 1, %73 ]
  %78 = and i32 %2, 4
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %99

80:                                               ; preds = %77
  %81 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1, i32 0, i32 4
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %93, label %85

85:                                               ; preds = %80
  %86 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1, i32 0, i32 4
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 63
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = icmp sgt i32 %88, %91
  br i1 %92, label %93, label %94

93:                                               ; preds = %85, %80
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.19.595, i32 0, i32 0))
  br label %101

94:                                               ; preds = %85
  %95 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %1, i32 0, i32 4
  %96 = load i8, i8* %95, align 1
  %97 = add i64 %.0, 1
  %98 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 %.0
  store i8 %96, i8* %98, align 1
  br label %99

99:                                               ; preds = %94, %77
  %.1 = phi i64 [ %97, %94 ], [ %.0, %77 ]
  %100 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i32 0, i32 0
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1933723988, i8* %100, i64 %.1)
  br label %101

101:                                              ; preds = %99, %93, %72, %48
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_cHRM_fixed(%struct.png_struct_def.60* noalias %0, %struct.png_xy* %1) #11 {
  %3 = alloca [32 x i8], align 16
  %4 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i32 0, i32 0
  %5 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 6
  %6 = load i32, i32* %5, align 4
  call void @png_save_int_32(i8* %4, i32 %6)
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i32 0, i32 0
  %8 = getelementptr inbounds i8, i8* %7, i64 4
  %9 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 7
  %10 = load i32, i32* %9, align 4
  call void @png_save_int_32(i8* %8, i32 %10)
  %11 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i32 0, i32 0
  %12 = getelementptr inbounds i8, i8* %11, i64 8
  %13 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 0
  %14 = load i32, i32* %13, align 4
  call void @png_save_int_32(i8* %12, i32 %14)
  %15 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i32 0, i32 0
  %16 = getelementptr inbounds i8, i8* %15, i64 12
  %17 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  call void @png_save_int_32(i8* %16, i32 %18)
  %19 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i32 0, i32 0
  %20 = getelementptr inbounds i8, i8* %19, i64 16
  %21 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 2
  %22 = load i32, i32* %21, align 4
  call void @png_save_int_32(i8* %20, i32 %22)
  %23 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i32 0, i32 0
  %24 = getelementptr inbounds i8, i8* %23, i64 20
  %25 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 3
  %26 = load i32, i32* %25, align 4
  call void @png_save_int_32(i8* %24, i32 %26)
  %27 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i32 0, i32 0
  %28 = getelementptr inbounds i8, i8* %27, i64 24
  %29 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 4
  %30 = load i32, i32* %29, align 4
  call void @png_save_int_32(i8* %28, i32 %30)
  %31 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i32 0, i32 0
  %32 = getelementptr inbounds i8, i8* %31, i64 28
  %33 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i32 0, i32 5
  %34 = load i32, i32* %33, align 4
  call void @png_save_int_32(i8* %32, i32 %34)
  %35 = getelementptr inbounds [32 x i8], [32 x i8]* %3, i32 0, i32 0
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1665684045, i8* %35, i64 32)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @write_unknown_chunks(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2) #11 {
  %4 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 47
  %5 = load i32, i32* %4, align 8
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %47

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 46
  %9 = load %struct.png_unknown_chunk_t*, %struct.png_unknown_chunk_t** %8, align 8
  %10 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 46
  %11 = load %struct.png_unknown_chunk_t*, %struct.png_unknown_chunk_t** %10, align 8
  %12 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 47
  %13 = load i32, i32* %12, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %11, i64 %14
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 115
  %17 = icmp ult %struct.png_unknown_chunk_t* %9, %15
  br i1 %17, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %7
  br label %18

18:                                               ; preds = %.lr.ph, %44
  %.01 = phi %struct.png_unknown_chunk_t* [ %9, %.lr.ph ], [ %45, %44 ]
  %.012 = bitcast %struct.png_unknown_chunk_t* %.01 to i8*
  %.014 = bitcast %struct.png_unknown_chunk_t* %.01 to i64*
  %.016 = bitcast %struct.png_unknown_chunk_t* %.01 to i8**
  %scevgep = getelementptr i8, i8* %.012, i64 24
  %19 = load i8, i8* %scevgep, align 8
  %20 = zext i8 %19 to i32
  %21 = and i32 %20, %2
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %44

23:                                               ; preds = %18
  %24 = call i32 @png_handle_as_unknown(%struct.png_struct_def* %0, i8* %.012)
  %25 = icmp ne i32 %24, 1
  br i1 %25, label %26, label %44

26:                                               ; preds = %23
  %scevgep3 = getelementptr i8, i8* %.012, i64 3
  %27 = load i8, i8* %scevgep3, align 1
  %28 = zext i8 %27 to i32
  %29 = and i32 %28, 32
  %30 = icmp ne i32 %29, 0
  %31 = icmp eq i32 %24, 3
  %or.cond = select i1 %30, i1 true, i1 %31
  br i1 %or.cond, label %37, label %32

32:                                               ; preds = %26
  %33 = icmp eq i32 %24, 0
  br i1 %33, label %34, label %44

34:                                               ; preds = %32
  %35 = load i32, i32* %16, align 8
  %36 = icmp eq i32 %35, 3
  br i1 %36, label %37, label %44

37:                                               ; preds = %34, %26
  %scevgep5 = getelementptr i64, i64* %.014, i64 2
  %38 = load i64, i64* %scevgep5, align 8
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.22.510, i32 0, i32 0))
  br label %41

41:                                               ; preds = %40, %37
  %scevgep7 = getelementptr i8*, i8** %.016, i64 1
  %42 = load i8*, i8** %scevgep7, align 8
  %scevgep8 = getelementptr i64, i64* %.014, i64 2
  %43 = load i64, i64* %scevgep8, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*, i8*, i64)* @png_write_chunk to void (%struct.png_struct_def*, i8*, i8*, i64)*)(%struct.png_struct_def* %0, i8* %.012, i8* %42, i64 %43)
  br label %44

44:                                               ; preds = %18, %41, %34, %32, %23
  %45 = getelementptr inbounds %struct.png_unknown_chunk_t, %struct.png_unknown_chunk_t* %.01, i32 1
  %46 = icmp ult %struct.png_unknown_chunk_t* %45, %15
  br i1 %46, label %18, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %44
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %7
  br label %47

47:                                               ; preds = %.loopexit, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_chunk(%struct.png_struct_def.60* noalias %0, i8* %1, i8* %2, i64 %3) #11 {
  %5 = getelementptr inbounds i8, i8* %1, i64 0
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = and i32 255, %7
  %9 = shl i32 %8, 24
  %10 = getelementptr inbounds i8, i8* %1, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = and i32 255, %12
  %14 = shl i32 %13, 16
  %15 = or i32 %9, %14
  %16 = getelementptr inbounds i8, i8* %1, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = and i32 255, %18
  %20 = shl i32 %19, 8
  %21 = or i32 %15, %20
  %22 = getelementptr inbounds i8, i8* %1, i64 3
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = and i32 255, %24
  %26 = shl i32 %25, 0
  %27 = or i32 %21, %26
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 %27, i8* %2, i64 %3)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_write_complete_chunk(%struct.png_struct_def.60* noalias %0, i32 %1, i8* %2, i64 %3) #11 {
  %5 = icmp eq %struct.png_struct_def.60* %0, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %4
  %7 = icmp ugt i64 %3, 2147483647
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.42.550, i32 0, i32 0)) #24
  unreachable

9:                                                ; preds = %6
  %10 = trunc i64 %3 to i32
  call void @png_write_chunk_header(%struct.png_struct_def.60* %0, i32 %1, i32 %10)
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %2, i64 %3)
  call void @png_write_chunk_end(%struct.png_struct_def.60* %0)
  br label %11

11:                                               ; preds = %4, %9
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_write_chunk_header(%struct.png_struct_def.60* noalias %0, i32 %1, i32 %2) #11 {
  %4 = alloca [8 x i8], align 1
  %5 = icmp eq %struct.png_struct_def.60* %0, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 141
  store i32 34, i32* %7, align 4
  %8 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 0
  call void @png_save_uint_32(i8* %8, i32 %2)
  %9 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 0
  %10 = getelementptr inbounds i8, i8* %9, i64 4
  call void @png_save_uint_32(i8* %10, i32 %1)
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 0
  call void bitcast (void (%struct.png_struct_def*, i8*, i64)* @png_write_data to void (%struct.png_struct_def.60*, i8*, i64)*)(%struct.png_struct_def.60* %0, i8* %11, i64 8)
  %12 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 44
  store i32 %1, i32* %12, align 8
  call void bitcast (void (%struct.png_struct_def*)* @png_reset_crc to void (%struct.png_struct_def.60*)*)(%struct.png_struct_def.60* %0)
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 0
  %14 = getelementptr inbounds i8, i8* %13, i64 4
  call void bitcast (void (%struct.png_struct_def*, i8*, i64)* @png_calculate_crc to void (%struct.png_struct_def.60*, i8*, i64)*)(%struct.png_struct_def.60* %0, i8* %14, i64 4)
  %15 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 141
  store i32 66, i32* %15, align 4
  br label %16

16:                                               ; preds = %3, %6
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_chunk_data(%struct.png_struct_def.60* noalias %0, i8* %1, i64 %2) #11 {
  %4 = icmp ne %struct.png_struct_def.60* %0, null
  %5 = icmp ne i8* %1, null
  %or.cond = select i1 %4, i1 %5, i1 false
  %6 = icmp ugt i64 %2, 0
  %or.cond1 = select i1 %or.cond, i1 %6, i1 false
  br i1 %or.cond1, label %7, label %8

7:                                                ; preds = %3
  call void bitcast (void (%struct.png_struct_def*, i8*, i64)* @png_write_data to void (%struct.png_struct_def.60*, i8*, i64)*)(%struct.png_struct_def.60* %0, i8* %1, i64 %2)
  call void bitcast (void (%struct.png_struct_def*, i8*, i64)* @png_calculate_crc to void (%struct.png_struct_def.60*, i8*, i64)*)(%struct.png_struct_def.60* %0, i8* %1, i64 %2)
  br label %8

8:                                                ; preds = %3, %7
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_chunk_end(%struct.png_struct_def.60* noalias %0) #11 {
  %2 = alloca [4 x i8], align 1
  %3 = icmp eq %struct.png_struct_def.60* %0, null
  br i1 %3, label %10, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 141
  store i32 130, i32* %5, align 4
  %6 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i32 0, i32 0
  %7 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 51
  %8 = load i32, i32* %7, align 4
  call void @png_save_uint_32(i8* %6, i32 %8)
  %9 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i32 0, i32 0
  call void bitcast (void (%struct.png_struct_def*, i8*, i64)* @png_write_data to void (%struct.png_struct_def.60*, i8*, i64)*)(%struct.png_struct_def.60* %0, i8* %9, i64 4)
  br label %10

10:                                               ; preds = %1, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_text_compress_init(%struct.compression_state* %0, i8* %1, i64 %2) #11 {
  %4 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %0, i32 0, i32 0
  store i8* %1, i8** %4, align 8
  %5 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %0, i32 0, i32 1
  store i64 %2, i64* %5, align 8
  %6 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %0, i32 0, i32 2
  store i32 0, i32* %6, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_text_compress(%struct.png_struct_def.60* noalias %0, i32 %1, %struct.compression_state* %2, i32 %3) #11 {
  %5 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %2, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = call i32 @png_deflate_claim(%struct.png_struct_def.60* %0, i32 %1, i64 %6)
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %105, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 20
  %11 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %2, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %2, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %16 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %15, i32 0, i32 0
  store i8* %14, i8** %16, align 8
  %17 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %18 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %17, i32 0, i32 1
  store i32 0, i32* %18, align 8
  %19 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %2, i32 0, i32 3
  %20 = getelementptr inbounds [1024 x i8], [1024 x i8]* %19, i32 0, i32 0
  %21 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %22 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %21, i32 0, i32 3
  store i8* %20, i8** %22, align 8
  %23 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %24 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %23, i32 0, i32 4
  store i32 1024, i32* %24, align 8
  %25 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %26 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %25, i32 0, i32 4
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 21
  %29 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %30 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %29, i32 0, i32 1
  %31 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %32 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %31, i32 0, i32 4
  %33 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %34 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %33, i32 0, i32 3
  %35 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 21
  %36 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %37 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %36, i32 0, i32 4
  %38 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %39 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %38, i32 0, i32 4
  %40 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %41 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %42 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %41, i32 0, i32 1
  %43 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %44 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %43, i32 0, i32 1
  br label %45

45:                                               ; preds = %74, %9
  %.08 = phi %struct.png_compression_buffer** [ %10, %9 ], [ %.19, %74 ]
  %.04 = phi i64 [ %12, %9 ], [ %80, %74 ]
  %.03 = phi i32 [ %27, %9 ], [ %.1, %74 ]
  %46 = icmp ugt i64 4294967295, %.04
  %47 = trunc i64 %.04 to i32
  %spec.select = select i1 %46, i32 %47, i32 -1
  %48 = zext i32 %spec.select to i64
  %49 = sub i64 %.04, %48
  store i32 %spec.select, i32* %30, align 8
  %50 = load i32, i32* %32, align 8
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %74

52:                                               ; preds = %45
  %53 = add i32 %.03, %3
  %54 = icmp ugt i32 %53, 2147483647
  br i1 %54, label %82, label %55

55:                                               ; preds = %52
  %56 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %.08, align 8
  %57 = icmp eq %struct.png_compression_buffer* %56, null
  br i1 %57, label %58, label %67

58:                                               ; preds = %55
  %59 = load i32, i32* %28, align 8
  %60 = zext i32 %59 to i64
  %61 = add i64 8, %60
  %62 = call noalias i8* @png_malloc_base(%struct.png_struct_def.60* %0, i64 %61)
  %63 = bitcast i8* %62 to %struct.png_compression_buffer*
  %64 = icmp eq %struct.png_compression_buffer* %63, null
  br i1 %64, label %82, label %65

65:                                               ; preds = %58
  %66 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %63, i32 0, i32 0
  store %struct.png_compression_buffer* null, %struct.png_compression_buffer** %66, align 8
  store %struct.png_compression_buffer* %63, %struct.png_compression_buffer** %.08, align 8
  br label %67

67:                                               ; preds = %65, %55
  %.01 = phi %struct.png_compression_buffer* [ %63, %65 ], [ %56, %55 ]
  %68 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %.01, i32 0, i32 1
  %69 = getelementptr inbounds [1 x i8], [1 x i8]* %68, i32 0, i32 0
  store i8* %69, i8** %34, align 8
  %70 = load i32, i32* %35, align 8
  store i32 %70, i32* %37, align 8
  %71 = load i32, i32* %39, align 8
  %72 = add i32 %.03, %71
  %73 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %.01, i32 0, i32 0
  br label %74

74:                                               ; preds = %67, %45
  %.19 = phi %struct.png_compression_buffer** [ %73, %67 ], [ %.08, %45 ]
  %.1 = phi i32 [ %72, %67 ], [ %.03, %45 ]
  %75 = icmp ugt i64 %49, 0
  %76 = select i1 %75, i32 0, i32 4
  %77 = call i32 @deflate(%struct.z_stream_s* %40, i32 %76)
  %78 = load i32, i32* %42, align 8
  %79 = zext i32 %78 to i64
  %80 = add i64 %49, %79
  store i32 0, i32* %44, align 8
  %81 = icmp eq i32 %77, 0
  br i1 %81, label %45, label %82

82:                                               ; preds = %58, %52, %74
  %.06 = phi i32 [ %77, %74 ], [ -4, %52 ], [ -4, %58 ]
  %.15 = phi i64 [ %80, %74 ], [ %49, %52 ], [ %49, %58 ]
  %.2 = phi i32 [ %.1, %74 ], [ %.03, %52 ], [ %.03, %58 ]
  %83 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %84 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %83, i32 0, i32 4
  %85 = load i32, i32* %84, align 8
  %86 = sub i32 %.2, %85
  %87 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %88 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %87, i32 0, i32 4
  store i32 0, i32* %88, align 8
  %89 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %2, i32 0, i32 2
  store i32 %86, i32* %89, align 8
  %90 = add i32 %86, %3
  %91 = icmp uge i32 %90, 2147483647
  br i1 %91, label %92, label %95

92:                                               ; preds = %82
  %93 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %94 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %93, i32 0, i32 6
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.46.589, i32 0, i32 0), i8** %94, align 8
  br label %96

95:                                               ; preds = %82
  call void bitcast (void (%struct.png_struct_def*, i32)* @png_zstream_error to void (%struct.png_struct_def.60*, i32)*)(%struct.png_struct_def.60* %0, i32 %.06)
  br label %96

96:                                               ; preds = %95, %92
  %.17 = phi i32 [ -4, %92 ], [ %.06, %95 ]
  %97 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 18
  store i32 0, i32* %97, align 8
  %98 = icmp eq i32 %.17, 1
  %99 = icmp eq i64 %.15, 0
  %or.cond = select i1 %98, i1 %99, i1 false
  br i1 %or.cond, label %100, label %105

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %2, i32 0, i32 3
  %102 = getelementptr inbounds [1024 x i8], [1024 x i8]* %101, i32 0, i32 0
  %103 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %2, i32 0, i32 1
  %104 = load i64, i64* %103, align 8
  call void @optimize_cmf(i8* %102, i64 %104)
  br label %105

105:                                              ; preds = %96, %4, %100
  %.0 = phi i32 [ 0, %100 ], [ %7, %4 ], [ %.17, %96 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_write_compressed_data_out(%struct.png_struct_def.60* noalias %0, %struct.compression_state* %1) #11 {
  %3 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %1, i32 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %1, i32 0, i32 3
  %6 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 20
  %8 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %7, align 8
  %9 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 21
  %10 = icmp ugt i32 1024, %4
  %spec.select4 = select i1 %10, i32 %4, i32 1024
  %11 = zext i32 %spec.select4 to i64
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %6, i64 %11)
  %12 = sub i32 %4, %spec.select4
  %13 = icmp eq i32 %12, 0
  %14 = icmp eq %struct.png_compression_buffer* %8, null
  %or.cond5 = select i1 %13, i1 true, i1 %14
  br i1 %or.cond5, label %27, label %.lr.ph

.lr.ph:                                           ; preds = %2
  br label %15

15:                                               ; preds = %.lr.ph, %15
  %16 = phi i32 [ %12, %.lr.ph ], [ %24, %15 ]
  %.06 = phi %struct.png_compression_buffer* [ %8, %.lr.ph ], [ %21, %15 ]
  %17 = load i32, i32* %9, align 8
  %18 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %.06, i32 0, i32 1
  %19 = getelementptr inbounds [1 x i8], [1 x i8]* %18, i32 0, i32 0
  %20 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %.06, i32 0, i32 0
  %21 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %20, align 8
  %22 = icmp ugt i32 %17, %16
  %spec.select = select i1 %22, i32 %16, i32 %17
  %23 = zext i32 %spec.select to i64
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %19, i64 %23)
  %24 = sub i32 %16, %spec.select
  %25 = icmp eq i32 %24, 0
  %26 = icmp eq %struct.png_compression_buffer* %21, null
  %or.cond = select i1 %25, i1 true, i1 %26
  br i1 %or.cond, label %._crit_edge, label %15

._crit_edge:                                      ; preds = %15
  %split = phi i32 [ %24, %15 ]
  br label %27

27:                                               ; preds = %._crit_edge, %2
  %.lcssa = phi i32 [ %split, %._crit_edge ], [ %12, %2 ]
  %28 = icmp ugt i32 %.lcssa, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %27
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.47.588, i32 0, i32 0)) #24
  unreachable

30:                                               ; preds = %27
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_deflate_claim(%struct.png_struct_def.60* noalias %0, i32 %1, i64 %2) #11 {
  %4 = alloca [64 x i8], align 16
  %5 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 18
  %6 = load i32, i32* %5, align 8
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %64

8:                                                ; preds = %3
  %9 = lshr i32 %1, 24
  %10 = and i32 %9, 255
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  %13 = getelementptr inbounds i8, i8* %12, i64 0
  store i8 %11, i8* %13, align 16
  %14 = lshr i32 %1, 16
  %15 = and i32 %14, 255
  %16 = trunc i32 %15 to i8
  %17 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8 %16, i8* %18, align 1
  %19 = lshr i32 %1, 8
  %20 = and i32 %19, 255
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  %23 = getelementptr inbounds i8, i8* %22, i64 2
  store i8 %21, i8* %23, align 2
  %24 = and i32 %1, 255
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  %27 = getelementptr inbounds i8, i8* %26, i64 3
  store i8 %25, i8* %27, align 1
  %28 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 4
  store i8 58, i8* %28, align 4
  %29 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 5
  store i8 32, i8* %29, align 1
  %30 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 18
  %31 = load i32, i32* %30, align 8
  %32 = lshr i32 %31, 24
  %33 = and i32 %32, 255
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  %36 = getelementptr inbounds i8, i8* %35, i64 6
  %37 = getelementptr inbounds i8, i8* %36, i64 0
  store i8 %34, i8* %37, align 1
  %38 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 18
  %39 = load i32, i32* %38, align 8
  %40 = lshr i32 %39, 16
  %41 = and i32 %40, 255
  %42 = trunc i32 %41 to i8
  %43 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  %44 = getelementptr inbounds i8, i8* %43, i64 6
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  store i8 %42, i8* %45, align 1
  %46 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 18
  %47 = load i32, i32* %46, align 8
  %48 = lshr i32 %47, 8
  %49 = and i32 %48, 255
  %50 = trunc i32 %49 to i8
  %51 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  %52 = getelementptr inbounds i8, i8* %51, i64 6
  %53 = getelementptr inbounds i8, i8* %52, i64 2
  store i8 %50, i8* %53, align 1
  %54 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 18
  %55 = load i32, i32* %54, align 8
  %56 = and i32 %55, 255
  %57 = trunc i32 %56 to i8
  %58 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  %59 = getelementptr inbounds i8, i8* %58, i64 6
  %60 = getelementptr inbounds i8, i8* %59, i64 3
  store i8 %57, i8* %60, align 1
  %61 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  %62 = call i64 @png_safecat(i8* %61, i64 64, i64 10, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.43.571, i32 0, i32 0))
  %63 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i32 0, i32 0
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* %63) #24
  unreachable

64:                                               ; preds = %3
  %65 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 22
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 23
  %68 = load i32, i32* %67, align 8
  %69 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 24
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 25
  %72 = load i32, i32* %71, align 8
  %73 = icmp eq i32 %1, 1229209940
  br i1 %73, label %74, label %87

74:                                               ; preds = %64
  %75 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 16
  %76 = load i32, i32* %75, align 8
  %77 = and i32 %76, 1
  %78 = icmp ne i32 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %74
  %80 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 26
  %81 = load i32, i32* %80, align 4
  br label %98

82:                                               ; preds = %74
  %83 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 60
  %84 = load i8, i8* %83, align 2
  %85 = zext i8 %84 to i32
  %86 = icmp ne i32 %85, 8
  %. = select i1 %86, i32 1, i32 0
  br label %98

87:                                               ; preds = %64
  %88 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 27
  %89 = load i32, i32* %88, align 8
  %90 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 28
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 29
  %93 = load i32, i32* %92, align 8
  %94 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 30
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 31
  %97 = load i32, i32* %96, align 8
  br label %98

98:                                               ; preds = %79, %82, %87
  %.08 = phi i32 [ %95, %87 ], [ %72, %82 ], [ %72, %79 ]
  %.05 = phi i32 [ %93, %87 ], [ %70, %82 ], [ %70, %79 ]
  %.04 = phi i32 [ %91, %87 ], [ %68, %82 ], [ %68, %79 ]
  %.03 = phi i32 [ %89, %87 ], [ %66, %82 ], [ %66, %79 ]
  %.2 = phi i32 [ %97, %87 ], [ %81, %79 ], [ %., %82 ]
  %99 = icmp ule i64 %2, 16384
  br i1 %99, label %100, label %111

100:                                              ; preds = %98
  %101 = sub nsw i32 %.05, 1
  %102 = shl i32 1, %101
  %103 = add i64 %2, 262
  %104 = zext i32 %102 to i64
  %105 = icmp ule i64 %103, %104
  br i1 %105, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %100
  %106 = trunc i64 %103 to i32
  br label %107

107:                                              ; preds = %.lr.ph, %107
  %.010 = phi i32 [ %102, %.lr.ph ], [ %108, %107 ]
  %.169 = phi i32 [ %.05, %.lr.ph ], [ %109, %107 ]
  %108 = lshr i32 %.010, 1
  %109 = add i32 %.169, -1
  %110 = icmp ule i32 %106, %108
  br i1 %110, label %107, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %107
  %split = phi i32 [ %109, %107 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %100
  %.27.ph = phi i32 [ %split, %..loopexit_crit_edge ], [ %.05, %100 ]
  br label %111

111:                                              ; preds = %.loopexit, %98
  %.27 = phi i32 [ %.05, %98 ], [ %.27.ph, %.loopexit ]
  %112 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 16
  %113 = load i32, i32* %112, align 8
  %114 = and i32 %113, 2
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %145

116:                                              ; preds = %111
  %117 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 32
  %118 = load i32, i32* %117, align 4
  %119 = icmp ne i32 %118, %.03
  br i1 %119, label %136, label %120

120:                                              ; preds = %116
  %121 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 33
  %122 = load i32, i32* %121, align 8
  %123 = icmp ne i32 %122, %.04
  br i1 %123, label %136, label %124

124:                                              ; preds = %120
  %125 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 34
  %126 = load i32, i32* %125, align 4
  %127 = icmp ne i32 %126, %.27
  br i1 %127, label %136, label %128

128:                                              ; preds = %124
  %129 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 35
  %130 = load i32, i32* %129, align 8
  %131 = icmp ne i32 %130, %.08
  br i1 %131, label %136, label %132

132:                                              ; preds = %128
  %133 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 36
  %134 = load i32, i32* %133, align 4
  %135 = icmp ne i32 %134, %.2
  br i1 %135, label %136, label %145

136:                                              ; preds = %132, %128, %124, %120, %116
  %137 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %138 = call i32 @deflateEnd(%struct.z_stream_s* %137)
  %139 = icmp ne i32 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %136
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.44.572, i32 0, i32 0))
  br label %141

141:                                              ; preds = %140, %136
  %142 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 16
  %143 = load i32, i32* %142, align 8
  %144 = and i32 %143, -3
  store i32 %144, i32* %142, align 8
  br label %145

145:                                              ; preds = %141, %132, %111
  %146 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %147 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %146, i32 0, i32 0
  store i8* null, i8** %147, align 8
  %148 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %149 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %148, i32 0, i32 1
  store i32 0, i32* %149, align 8
  %150 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %151 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %150, i32 0, i32 3
  store i8* null, i8** %151, align 8
  %152 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %153 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %152, i32 0, i32 4
  store i32 0, i32* %153, align 8
  %154 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 16
  %155 = load i32, i32* %154, align 8
  %156 = and i32 %155, 2
  %157 = icmp ne i32 %156, 0
  br i1 %157, label %158, label %161

158:                                              ; preds = %145
  %159 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %160 = call i32 @deflateReset(%struct.z_stream_s* %159)
  br label %169

161:                                              ; preds = %145
  %162 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %163 = call i32 @deflateInit2_(%struct.z_stream_s* %162, i32 %.03, i32 %.04, i32 %.27, i32 %.08, i32 %.2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45.573, i32 0, i32 0), i32 112)
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %169

165:                                              ; preds = %161
  %166 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 16
  %167 = load i32, i32* %166, align 8
  %168 = or i32 %167, 2
  store i32 %168, i32* %166, align 8
  br label %169

169:                                              ; preds = %161, %165, %158
  %.01 = phi i32 [ %160, %158 ], [ %163, %165 ], [ %163, %161 ]
  %170 = icmp eq i32 %.01, 0
  br i1 %170, label %171, label %173

171:                                              ; preds = %169
  %172 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 18
  store i32 %1, i32* %172, align 8
  br label %174

173:                                              ; preds = %169
  call void bitcast (void (%struct.png_struct_def*, i32)* @png_zstream_error to void (%struct.png_struct_def.60*, i32)*)(%struct.png_struct_def.60* %0, i32 %.01)
  br label %174

174:                                              ; preds = %173, %171
  ret i32 %.01
}

declare i32 @deflate(%struct.z_stream_s*, i32) #13

; Function Attrs: noinline nounwind uwtable
define internal void @optimize_cmf(i8* %0, i64 %1) #11 {
  %3 = icmp ule i64 %1, 16384
  br i1 %3, label %4, label %42

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %0, i64 0
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = and i32 %7, 15
  %9 = icmp eq i32 %8, 8
  %10 = and i32 %7, 240
  %11 = icmp ule i32 %10, 112
  %or.cond = and i1 %9, %11
  br i1 %or.cond, label %12, label %42

12:                                               ; preds = %4
  %13 = lshr i32 %7, 4
  %14 = add i32 %13, 7
  %15 = shl i32 1, %14
  %16 = zext i32 %15 to i64
  %17 = icmp ule i64 %1, %16
  br i1 %17, label %.preheader, label %42

.preheader:                                       ; preds = %12
  br label %18

18:                                               ; preds = %.preheader, %18
  %.01 = phi i32 [ %20, %18 ], [ %13, %.preheader ]
  %.0 = phi i32 [ %19, %18 ], [ %15, %.preheader ]
  %19 = lshr i32 %.0, 1
  %20 = add i32 %.01, -1
  %21 = icmp ugt i32 %20, 0
  %22 = zext i32 %19 to i64
  %23 = icmp ule i64 %1, %22
  %24 = select i1 %21, i1 %23, i1 false
  br i1 %24, label %18, label %25

25:                                               ; preds = %18
  %.lcssa = phi i32 [ %20, %18 ]
  %26 = and i32 %7, 15
  %27 = shl i32 %.lcssa, 4
  %28 = or i32 %26, %27
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds i8, i8* %0, i64 0
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds i8, i8* %0, i64 1
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = and i32 %33, 224
  %35 = shl i32 %28, 8
  %36 = add i32 %35, %34
  %37 = urem i32 %36, 31
  %38 = sub i32 31, %37
  %39 = add i32 %34, %38
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %40, i8* %41, align 1
  br label %42

42:                                               ; preds = %4, %25, %12, %2
  ret void
}

declare i32 @deflateReset(%struct.z_stream_s*) #13

declare i32 @deflateInit2_(%struct.z_stream_s*, i32, i32, i32, i32, i32, i8*, i32) #13

; Function Attrs: noinline nounwind uwtable
define void @png_write_info(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  %4 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %3, i1 true, i1 %4
  br i1 %or.cond, label %260, label %5

5:                                                ; preds = %2
  call void @png_write_info_before_PLTE(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 8
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 4
  %12 = load %struct.png_color_struct*, %struct.png_color_struct** %11, align 8
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 5
  %14 = load i16, i16* %13, align 8
  %15 = zext i16 %14 to i32
  call void bitcast (void (%struct.png_struct_def.60*, %struct.png_color_struct*, i32)* @png_write_PLTE to void (%struct.png_struct_def*, %struct.png_color_struct*, i32)*)(%struct.png_struct_def* %0, %struct.png_color_struct* %12, i32 %15)
  br label %22

16:                                               ; preds = %5
  %17 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = icmp eq i32 %19, 3
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2.511, i32 0, i32 0)) #24
  unreachable

22:                                               ; preds = %16, %10
  %23 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %24 = load i32, i32* %23, align 8
  %25 = and i32 %24, 16
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %62

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, 524288
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %52

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = icmp eq i32 %35, 3
  br i1 %36, label %37, label %52

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 6
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = icmp sgt i32 %40, 256
  %spec.select = select i1 %41, i32 256, i32 %40
  %42 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 25
  %43 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 25
  %44 = icmp slt i32 0, %spec.select
  br i1 %44, label %.lr.ph14, label %.loopexit3

.lr.ph14:                                         ; preds = %37
  %wide.trip.count = zext i32 %spec.select to i64
  br label %45

45:                                               ; preds = %.lr.ph14, %45
  %indvars.iv15 = phi i64 [ 0, %.lr.ph14 ], [ %indvars.iv.next16, %45 ]
  %46 = load i8*, i8** %42, align 8
  %scevgep72 = getelementptr i8, i8* %46, i64 %indvars.iv15
  %47 = load i8, i8* %scevgep72, align 1
  %48 = zext i8 %47 to i32
  %49 = sub nsw i32 255, %48
  %50 = trunc i32 %49 to i8
  %51 = load i8*, i8** %43, align 8
  %scevgep73 = getelementptr i8, i8* %51, i64 %indvars.iv15
  store i8 %50, i8* %scevgep73, align 1
  %indvars.iv.next16 = add nuw nsw i64 %indvars.iv15, 1
  %exitcond = icmp ne i64 %wide.trip.count, %indvars.iv.next16
  br i1 %exitcond, label %45, label %..loopexit3_crit_edge

..loopexit3_crit_edge:                            ; preds = %45
  br label %.loopexit3

.loopexit3:                                       ; preds = %..loopexit3_crit_edge, %37
  br label %52

52:                                               ; preds = %.loopexit3, %32, %27
  %53 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 25
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 26
  %56 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 6
  %57 = load i16, i16* %56, align 2
  %58 = zext i16 %57 to i32
  %59 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  call void bitcast (void (%struct.png_struct_def.60*, i8*, %struct.png_color_16_struct*, i32, i32)* @png_write_tRNS to void (%struct.png_struct_def*, i8*, %struct.png_color_16_struct*, i32, i32)*)(%struct.png_struct_def* %0, i8* %54, %struct.png_color_16_struct* %55, i32 %58, i32 %61)
  br label %62

62:                                               ; preds = %52, %22
  %63 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %64 = load i32, i32* %63, align 8
  %65 = and i32 %64, 32
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %67, label %72

67:                                               ; preds = %62
  %68 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 27
  %69 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 8
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  call void bitcast (void (%struct.png_struct_def.60*, %struct.png_color_16_struct*, i32)* @png_write_bKGD to void (%struct.png_struct_def*, %struct.png_color_16_struct*, i32)*)(%struct.png_struct_def* %0, %struct.png_color_16_struct* %68, i32 %71)
  br label %72

72:                                               ; preds = %67, %62
  %73 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = and i32 %74, 65536
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %77, label %82

77:                                               ; preds = %72
  %78 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 35
  %79 = load i8*, i8** %78, align 8
  %80 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 34
  %81 = load i32, i32* %80, align 4
  call void bitcast (void (%struct.png_struct_def.60*, i8*, i32)* @png_write_eXIf to void (%struct.png_struct_def*, i8*, i32)*)(%struct.png_struct_def* %0, i8* %79, i32 %81)
  br label %82

82:                                               ; preds = %77, %72
  %83 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %84 = load i32, i32* %83, align 8
  %85 = and i32 %84, 64
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %93

87:                                               ; preds = %82
  %88 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 37
  %89 = load i16*, i16** %88, align 8
  %90 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 5
  %91 = load i16, i16* %90, align 8
  %92 = zext i16 %91 to i32
  call void bitcast (void (%struct.png_struct_def.60*, i16*, i32)* @png_write_hIST to void (%struct.png_struct_def*, i16*, i32)*)(%struct.png_struct_def* %0, i16* %89, i32 %92)
  br label %93

93:                                               ; preds = %87, %82
  %94 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %95 = load i32, i32* %94, align 8
  %96 = and i32 %95, 256
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %106

98:                                               ; preds = %93
  %99 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 28
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 29
  %102 = load i32, i32* %101, align 8
  %103 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 30
  %104 = load i8, i8* %103, align 4
  %105 = zext i8 %104 to i32
  call void bitcast (void (%struct.png_struct_def.60*, i32, i32, i32)* @png_write_oFFs to void (%struct.png_struct_def*, i32, i32, i32)*)(%struct.png_struct_def* %0, i32 %100, i32 %102, i32 %105)
  br label %106

106:                                              ; preds = %98, %93
  %107 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %108 = load i32, i32* %107, align 8
  %109 = and i32 %108, 1024
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %111, label %128

111:                                              ; preds = %106
  %112 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 38
  %113 = load i8*, i8** %112, align 8
  %114 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 39
  %115 = load i32, i32* %114, align 8
  %116 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 40
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 43
  %119 = load i8, i8* %118, align 8
  %120 = zext i8 %119 to i32
  %121 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 44
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 41
  %125 = load i8*, i8** %124, align 8
  %126 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 42
  %127 = load i8**, i8*** %126, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*, i32, i32, i32, i32, i8*, i8**)* @png_write_pCAL to void (%struct.png_struct_def*, i8*, i32, i32, i32, i32, i8*, i8**)*)(%struct.png_struct_def* %0, i8* %113, i32 %115, i32 %117, i32 %120, i32 %123, i8* %125, i8** %127)
  br label %128

128:                                              ; preds = %111, %106
  %129 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %130 = load i32, i32* %129, align 8
  %131 = and i32 %130, 16384
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %133, label %141

133:                                              ; preds = %128
  %134 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 50
  %135 = load i8, i8* %134, align 4
  %136 = zext i8 %135 to i32
  %137 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 51
  %138 = load i8*, i8** %137, align 8
  %139 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 52
  %140 = load i8*, i8** %139, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i32, i8*, i8*)* @png_write_sCAL_s to void (%struct.png_struct_def*, i32, i8*, i8*)*)(%struct.png_struct_def* %0, i32 %136, i8* %138, i8* %140)
  br label %141

141:                                              ; preds = %133, %128
  %142 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %143 = load i32, i32* %142, align 8
  %144 = and i32 %143, 128
  %145 = icmp ne i32 %144, 0
  br i1 %145, label %146, label %154

146:                                              ; preds = %141
  %147 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 31
  %148 = load i32, i32* %147, align 8
  %149 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 32
  %150 = load i32, i32* %149, align 4
  %151 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 33
  %152 = load i8, i8* %151, align 8
  %153 = zext i8 %152 to i32
  call void bitcast (void (%struct.png_struct_def.60*, i32, i32, i32)* @png_write_pHYs to void (%struct.png_struct_def*, i32, i32, i32)*)(%struct.png_struct_def* %0, i32 %148, i32 %150, i32 %153)
  br label %154

154:                                              ; preds = %146, %141
  %155 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %156 = load i32, i32* %155, align 8
  %157 = and i32 %156, 512
  %158 = icmp ne i32 %157, 0
  br i1 %158, label %159, label %164

159:                                              ; preds = %154
  %160 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 23
  call void bitcast (void (%struct.png_struct_def.60*, %struct.png_time_struct*)* @png_write_tIME to void (%struct.png_struct_def*, %struct.png_time_struct*)*)(%struct.png_struct_def* %0, %struct.png_time_struct* %160)
  %161 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %162 = load i32, i32* %161, align 4
  %163 = or i32 %162, 512
  store i32 %163, i32* %161, align 4
  br label %164

164:                                              ; preds = %159, %154
  %165 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %166 = load i32, i32* %165, align 8
  %167 = and i32 %166, 8192
  %168 = icmp ne i32 %167, 0
  br i1 %168, label %.preheader, label %179

.preheader:                                       ; preds = %164
  %169 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 49
  %170 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 48
  %171 = load i32, i32* %169, align 8
  %172 = icmp slt i32 0, %171
  br i1 %172, label %.lr.ph8, label %.loopexit

.lr.ph8:                                          ; preds = %.preheader
  br label %173

173:                                              ; preds = %.lr.ph8, %173
  %lsr.iv68 = phi i64 [ 0, %.lr.ph8 ], [ %lsr.iv.next69, %173 ]
  %indvars.iv9 = phi i64 [ 0, %.lr.ph8 ], [ %indvars.iv.next10, %173 ]
  %174 = load %struct.png_sPLT_struct*, %struct.png_sPLT_struct** %170, align 8
  %175 = bitcast %struct.png_sPLT_struct* %174 to i8*
  %uglygep70 = getelementptr i8, i8* %175, i64 %lsr.iv68
  %uglygep7071 = bitcast i8* %uglygep70 to %struct.png_sPLT_struct*
  call void bitcast (void (%struct.png_struct_def.60*, %struct.png_sPLT_struct*)* @png_write_sPLT to void (%struct.png_struct_def*, %struct.png_sPLT_struct*)*)(%struct.png_struct_def* %0, %struct.png_sPLT_struct* %uglygep7071)
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1
  %176 = load i32, i32* %169, align 8
  %177 = sext i32 %176 to i64
  %lsr.iv.next69 = add nuw nsw i64 %lsr.iv68, 32
  %178 = icmp slt i64 %indvars.iv.next10, %177
  br i1 %178, label %173, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %173
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader
  br label %179

179:                                              ; preds = %.loopexit, %164
  %180 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 20
  %181 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %182 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %183 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %184 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %185 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %186 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %187 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %188 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %189 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %190 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %191 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %192 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %193 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %194 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %195 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %196 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %197 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %198 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %199 = load i32, i32* %180, align 4
  %200 = icmp slt i32 0, %199
  br i1 %200, label %.lr.ph, label %259

.lr.ph:                                           ; preds = %179
  br label %201

201:                                              ; preds = %.lr.ph, %255
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %255 ]
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %255 ]
  %202 = load %struct.png_text_struct*, %struct.png_text_struct** %181, align 8
  %203 = bitcast %struct.png_text_struct* %202 to i8*
  %uglygep = getelementptr i8, i8* %203, i64 %lsr.iv
  %uglygep18 = bitcast i8* %uglygep to i32*
  %204 = load i32, i32* %uglygep18, align 8
  %205 = icmp sgt i32 %204, 0
  br i1 %205, label %206, label %228

206:                                              ; preds = %201
  %207 = load %struct.png_text_struct*, %struct.png_text_struct** %191, align 8
  %208 = bitcast %struct.png_text_struct* %207 to i8*
  %uglygep19 = getelementptr i8, i8* %208, i64 %lsr.iv
  %uglygep1920 = bitcast i8* %uglygep19 to i32*
  %209 = load i32, i32* %uglygep1920, align 8
  %210 = load %struct.png_text_struct*, %struct.png_text_struct** %192, align 8
  %scevgep = getelementptr %struct.png_text_struct, %struct.png_text_struct* %210, i64 0, i32 1
  %scevgep21 = bitcast i8** %scevgep to i8*
  %uglygep22 = getelementptr i8, i8* %scevgep21, i64 %lsr.iv
  %uglygep2223 = bitcast i8* %uglygep22 to i8**
  %211 = load i8*, i8** %uglygep2223, align 8
  %212 = load %struct.png_text_struct*, %struct.png_text_struct** %193, align 8
  %scevgep24 = getelementptr %struct.png_text_struct, %struct.png_text_struct* %212, i64 0, i32 5
  %scevgep2425 = bitcast i8** %scevgep24 to i8*
  %uglygep26 = getelementptr i8, i8* %scevgep2425, i64 %lsr.iv
  %uglygep2627 = bitcast i8* %uglygep26 to i8**
  %213 = load i8*, i8** %uglygep2627, align 8
  %214 = load %struct.png_text_struct*, %struct.png_text_struct** %194, align 8
  %scevgep28 = getelementptr %struct.png_text_struct, %struct.png_text_struct* %214, i64 0, i32 6
  %scevgep2829 = bitcast i8** %scevgep28 to i8*
  %uglygep30 = getelementptr i8, i8* %scevgep2829, i64 %lsr.iv
  %uglygep3031 = bitcast i8* %uglygep30 to i8**
  %215 = load i8*, i8** %uglygep3031, align 8
  %216 = load %struct.png_text_struct*, %struct.png_text_struct** %195, align 8
  %scevgep32 = getelementptr %struct.png_text_struct, %struct.png_text_struct* %216, i64 0, i32 2
  %scevgep3233 = bitcast i8** %scevgep32 to i8*
  %uglygep34 = getelementptr i8, i8* %scevgep3233, i64 %lsr.iv
  %uglygep3435 = bitcast i8* %uglygep34 to i8**
  %217 = load i8*, i8** %uglygep3435, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i32, i8*, i8*, i8*, i8*)* @png_write_iTXt to void (%struct.png_struct_def*, i32, i8*, i8*, i8*, i8*)*)(%struct.png_struct_def* %0, i32 %209, i8* %211, i8* %213, i8* %215, i8* %217)
  %218 = load %struct.png_text_struct*, %struct.png_text_struct** %196, align 8
  %219 = bitcast %struct.png_text_struct* %218 to i8*
  %uglygep36 = getelementptr i8, i8* %219, i64 %lsr.iv
  %uglygep3637 = bitcast i8* %uglygep36 to i32*
  %220 = load i32, i32* %uglygep3637, align 8
  %221 = icmp eq i32 %220, -1
  br i1 %221, label %222, label %225

222:                                              ; preds = %206
  %223 = load %struct.png_text_struct*, %struct.png_text_struct** %198, align 8
  %224 = bitcast %struct.png_text_struct* %223 to i8*
  %uglygep38 = getelementptr i8, i8* %224, i64 %lsr.iv
  %uglygep3839 = bitcast i8* %uglygep38 to i32*
  store i32 -3, i32* %uglygep3839, align 8
  br label %255

225:                                              ; preds = %206
  %226 = load %struct.png_text_struct*, %struct.png_text_struct** %197, align 8
  %227 = bitcast %struct.png_text_struct* %226 to i8*
  %uglygep40 = getelementptr i8, i8* %227, i64 %lsr.iv
  %uglygep4041 = bitcast i8* %uglygep40 to i32*
  store i32 -2, i32* %uglygep4041, align 8
  br label %255

228:                                              ; preds = %201
  %229 = load %struct.png_text_struct*, %struct.png_text_struct** %182, align 8
  %230 = bitcast %struct.png_text_struct* %229 to i8*
  %uglygep42 = getelementptr i8, i8* %230, i64 %lsr.iv
  %uglygep4243 = bitcast i8* %uglygep42 to i32*
  %231 = load i32, i32* %uglygep4243, align 8
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %243

233:                                              ; preds = %228
  %234 = load %struct.png_text_struct*, %struct.png_text_struct** %187, align 8
  %scevgep44 = getelementptr %struct.png_text_struct, %struct.png_text_struct* %234, i64 0, i32 1
  %scevgep4445 = bitcast i8** %scevgep44 to i8*
  %uglygep46 = getelementptr i8, i8* %scevgep4445, i64 %lsr.iv
  %uglygep4647 = bitcast i8* %uglygep46 to i8**
  %235 = load i8*, i8** %uglygep4647, align 8
  %236 = load %struct.png_text_struct*, %struct.png_text_struct** %188, align 8
  %scevgep48 = getelementptr %struct.png_text_struct, %struct.png_text_struct* %236, i64 0, i32 2
  %scevgep4849 = bitcast i8** %scevgep48 to i8*
  %uglygep50 = getelementptr i8, i8* %scevgep4849, i64 %lsr.iv
  %uglygep5051 = bitcast i8* %uglygep50 to i8**
  %237 = load i8*, i8** %uglygep5051, align 8
  %238 = load %struct.png_text_struct*, %struct.png_text_struct** %189, align 8
  %239 = bitcast %struct.png_text_struct* %238 to i8*
  %uglygep52 = getelementptr i8, i8* %239, i64 %lsr.iv
  %uglygep5253 = bitcast i8* %uglygep52 to i32*
  %240 = load i32, i32* %uglygep5253, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*, i8*, i32)* @png_write_zTXt to void (%struct.png_struct_def*, i8*, i8*, i32)*)(%struct.png_struct_def* %0, i8* %235, i8* %237, i32 %240)
  %241 = load %struct.png_text_struct*, %struct.png_text_struct** %190, align 8
  %242 = bitcast %struct.png_text_struct* %241 to i8*
  %uglygep54 = getelementptr i8, i8* %242, i64 %lsr.iv
  %uglygep5455 = bitcast i8* %uglygep54 to i32*
  store i32 -2, i32* %uglygep5455, align 8
  br label %255

243:                                              ; preds = %228
  %244 = load %struct.png_text_struct*, %struct.png_text_struct** %183, align 8
  %245 = bitcast %struct.png_text_struct* %244 to i8*
  %uglygep56 = getelementptr i8, i8* %245, i64 %lsr.iv
  %uglygep5657 = bitcast i8* %uglygep56 to i32*
  %246 = load i32, i32* %uglygep5657, align 8
  %247 = icmp eq i32 %246, -1
  br i1 %247, label %248, label %255

248:                                              ; preds = %243
  %249 = load %struct.png_text_struct*, %struct.png_text_struct** %184, align 8
  %scevgep58 = getelementptr %struct.png_text_struct, %struct.png_text_struct* %249, i64 0, i32 1
  %scevgep5859 = bitcast i8** %scevgep58 to i8*
  %uglygep60 = getelementptr i8, i8* %scevgep5859, i64 %lsr.iv
  %uglygep6061 = bitcast i8* %uglygep60 to i8**
  %250 = load i8*, i8** %uglygep6061, align 8
  %251 = load %struct.png_text_struct*, %struct.png_text_struct** %185, align 8
  %scevgep62 = getelementptr %struct.png_text_struct, %struct.png_text_struct* %251, i64 0, i32 2
  %scevgep6263 = bitcast i8** %scevgep62 to i8*
  %uglygep64 = getelementptr i8, i8* %scevgep6263, i64 %lsr.iv
  %uglygep6465 = bitcast i8* %uglygep64 to i8**
  %252 = load i8*, i8** %uglygep6465, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*, i8*, i64)* @png_write_tEXt to void (%struct.png_struct_def*, i8*, i8*, i64)*)(%struct.png_struct_def* %0, i8* %250, i8* %252, i64 0)
  %253 = load %struct.png_text_struct*, %struct.png_text_struct** %186, align 8
  %254 = bitcast %struct.png_text_struct* %253 to i8*
  %uglygep66 = getelementptr i8, i8* %254, i64 %lsr.iv
  %uglygep6667 = bitcast i8* %uglygep66 to i32*
  store i32 -3, i32* %uglygep6667, align 8
  br label %255

255:                                              ; preds = %225, %222, %243, %248, %233
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %256 = load i32, i32* %180, align 4
  %257 = sext i32 %256 to i64
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 56
  %258 = icmp slt i64 %indvars.iv.next, %257
  br i1 %258, label %201, label %._crit_edge

._crit_edge:                                      ; preds = %255
  br label %259

259:                                              ; preds = %._crit_edge, %179
  call void @write_unknown_chunks(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 2)
  br label %260

260:                                              ; preds = %2, %259
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_PLTE(%struct.png_struct_def.60* noalias %0, %struct.png_color_struct* %1, i32 %2) #11 {
  %4 = alloca [3 x i8], align 1
  %5 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 61
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = icmp eq i32 %7, 3
  br i1 %8, label %9, label %14

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 62
  %11 = load i8, i8* %10, align 8
  %12 = zext i8 %11 to i32
  %13 = shl i32 1, %12
  br label %14

14:                                               ; preds = %3, %9
  %15 = phi i32 [ %13, %9 ], [ 256, %3 ]
  %16 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 122
  %17 = load i32, i32* %16, align 8
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = icmp eq i32 %2, 0
  %or.cond = select i1 %19, i1 %20, i1 false
  %21 = icmp ugt i32 %2, %15
  %or.cond2 = select i1 %or.cond, i1 true, i1 %21
  br i1 %or.cond2, label %22, label %29

22:                                               ; preds = %14
  %23 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 61
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = icmp eq i32 %25, 3
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.9.566, i32 0, i32 0)) #24
  unreachable

28:                                               ; preds = %22
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.9.566, i32 0, i32 0))
  br label %53

29:                                               ; preds = %14
  %30 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 61
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %29
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.10.567, i32 0, i32 0))
  br label %53

36:                                               ; preds = %29
  %37 = trunc i32 %2 to i16
  %38 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 53
  store i16 %37, i16* %38, align 8
  %39 = mul i32 %2, 3
  call void @png_write_chunk_header(%struct.png_struct_def.60* %0, i32 1347179589, i32 %39)
  %40 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 0
  %41 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 1
  %42 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 2
  %43 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i32 0, i32 0
  %44 = icmp ult i32 0, %2
  br i1 %44, label %.lr.ph, label %49

.lr.ph:                                           ; preds = %36
  br label %45

45:                                               ; preds = %.lr.ph, %45
  %lsr.iv = phi i32 [ %2, %.lr.ph ], [ %lsr.iv.next, %45 ]
  %.04 = phi %struct.png_color_struct* [ %1, %.lr.ph ], [ %lsr.chain8, %45 ]
  %.045 = bitcast %struct.png_color_struct* %.04 to i8*
  %46 = load i8, i8* %.045, align 1
  store i8 %46, i8* %40, align 1
  %scevgep = getelementptr i8, i8* %.045, i64 1
  %47 = load i8, i8* %scevgep, align 1
  store i8 %47, i8* %41, align 1
  %scevgep6 = getelementptr i8, i8* %.045, i64 2
  %48 = load i8, i8* %scevgep6, align 1
  store i8 %48, i8* %42, align 1
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %43, i64 3)
  %lsr.iv.next = add i32 %lsr.iv, -1
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  %scevgep7 = getelementptr i8, i8* %.045, i64 3
  %lsr.chain8 = bitcast i8* %scevgep7 to %struct.png_color_struct*
  br i1 %exitcond, label %45, label %._crit_edge

._crit_edge:                                      ; preds = %45
  br label %49

49:                                               ; preds = %._crit_edge, %36
  call void @png_write_chunk_end(%struct.png_struct_def.60* %0)
  %50 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 15
  %51 = load i32, i32* %50, align 4
  %52 = or i32 %51, 2
  store i32 %52, i32* %50, align 4
  br label %53

53:                                               ; preds = %49, %35, %28
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_tRNS(%struct.png_struct_def.60* noalias %0, i8* %1, %struct.png_color_16_struct* %2, i32 %3, i32 %4) #11 {
  %6 = alloca [6 x i8], align 1
  switch i32 %4, label %68 [
    i32 3, label %7
    i32 0, label %17
    i32 2, label %33
  ]

7:                                                ; preds = %5
  %8 = icmp sle i32 %3, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %7
  %10 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 53
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = icmp sgt i32 %3, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %9, %7
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_app_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.20.600, i32 0, i32 0))
  br label %69

15:                                               ; preds = %9
  %16 = sext i32 %3 to i64
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1951551059, i8* %1, i64 %16)
  br label %69

17:                                               ; preds = %5
  %18 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 4
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 62
  %22 = load i8, i8* %21, align 8
  %23 = zext i8 %22 to i32
  %24 = shl i32 1, %23
  %25 = icmp sge i32 %20, %24
  br i1 %25, label %26, label %27

26:                                               ; preds = %17
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_app_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.21.601, i32 0, i32 0))
  br label %69

27:                                               ; preds = %17
  %28 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %29 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 4
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  call void @png_save_uint_16(i8* %28, i32 %31)
  %32 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1951551059, i8* %32, i64 2)
  br label %69

33:                                               ; preds = %5
  %34 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %35 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 1
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  call void @png_save_uint_16(i8* %34, i32 %37)
  %38 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %39 = getelementptr inbounds i8, i8* %38, i64 2
  %40 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 2
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  call void @png_save_uint_16(i8* %39, i32 %42)
  %43 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  %44 = getelementptr inbounds i8, i8* %43, i64 4
  %45 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i32 0, i32 3
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  call void @png_save_uint_16(i8* %44, i32 %47)
  %48 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 62
  %49 = load i8, i8* %48, align 8
  %50 = zext i8 %49 to i32
  %51 = icmp eq i32 %50, 8
  br i1 %51, label %52, label %66

52:                                               ; preds = %33
  %53 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 0
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 2
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = or i32 %55, %58
  %60 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 4
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = or i32 %59, %62
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %52
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_app_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.22.602, i32 0, i32 0))
  br label %69

66:                                               ; preds = %52, %33
  %67 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i32 0, i32 0
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1951551059, i8* %67, i64 6)
  br label %69

68:                                               ; preds = %5
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_app_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.23.603, i32 0, i32 0))
  br label %69

69:                                               ; preds = %27, %68, %66, %14, %26, %65, %15
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_bKGD(%struct.png_struct_def.60* noalias %0, %struct.png_color_16_struct* %1, i32 %2) #11 {
  %4 = alloca [6 x i8], align 1
  %5 = icmp eq i32 %2, 3
  br i1 %5, label %6, label %30

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 53
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 122
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %25

16:                                               ; preds = %11, %6
  %17 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1, i32 0, i32 0
  %18 = load i8, i8* %17, align 2
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 53
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i32
  %23 = icmp sge i32 %19, %22
  br i1 %23, label %24, label %25

24:                                               ; preds = %16
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.24.606, i32 0, i32 0))
  br label %84

25:                                               ; preds = %16, %11
  %26 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1, i32 0, i32 0
  %27 = load i8, i8* %26, align 2
  %28 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 0
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1649100612, i8* %29, i64 1)
  br label %84

30:                                               ; preds = %3
  %31 = and i32 %2, 2
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %68

33:                                               ; preds = %30
  %34 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %35 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1, i32 0, i32 1
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  call void @png_save_uint_16(i8* %34, i32 %37)
  %38 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %39 = getelementptr inbounds i8, i8* %38, i64 2
  %40 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1, i32 0, i32 2
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  call void @png_save_uint_16(i8* %39, i32 %42)
  %43 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %44 = getelementptr inbounds i8, i8* %43, i64 4
  %45 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1, i32 0, i32 3
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  call void @png_save_uint_16(i8* %44, i32 %47)
  %48 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 62
  %49 = load i8, i8* %48, align 8
  %50 = zext i8 %49 to i32
  %51 = icmp eq i32 %50, 8
  br i1 %51, label %52, label %66

52:                                               ; preds = %33
  %53 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 0
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 2
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = or i32 %55, %58
  %60 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 4
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = or i32 %59, %62
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %52
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.25.607, i32 0, i32 0))
  br label %84

66:                                               ; preds = %52, %33
  %67 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1649100612, i8* %67, i64 6)
  br label %84

68:                                               ; preds = %30
  %69 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1, i32 0, i32 4
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 62
  %73 = load i8, i8* %72, align 8
  %74 = zext i8 %73 to i32
  %75 = shl i32 1, %74
  %76 = icmp sge i32 %71, %75
  br i1 %76, label %77, label %78

77:                                               ; preds = %68
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.26.608, i32 0, i32 0))
  br label %84

78:                                               ; preds = %68
  %79 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  %80 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1, i32 0, i32 4
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  call void @png_save_uint_16(i8* %79, i32 %82)
  %83 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i32 0, i32 0
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1649100612, i8* %83, i64 2)
  br label %84

84:                                               ; preds = %66, %78, %24, %65, %77, %25
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_eXIf(%struct.png_struct_def.60* noalias %0, i8* %1, i32 %2) #11 {
  %4 = alloca [1 x i8], align 1
  call void @png_write_chunk_header(%struct.png_struct_def.60* %0, i32 1700284774, i32 %2)
  %5 = getelementptr inbounds [1 x i8], [1 x i8]* %4, i64 0, i64 0
  %6 = getelementptr inbounds [1 x i8], [1 x i8]* %4, i32 0, i32 0
  %7 = icmp slt i32 0, %2
  br i1 %7, label %.lr.ph, label %10

.lr.ph:                                           ; preds = %3
  %wide.trip.count = zext i32 %2 to i64
  br label %8

8:                                                ; preds = %.lr.ph, %8
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %8 ]
  %scevgep = getelementptr i8, i8* %1, i64 %indvars.iv
  %9 = load i8, i8* %scevgep, align 1
  store i8 %9, i8* %5, align 1
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %6, i64 1)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %wide.trip.count, %indvars.iv.next
  br i1 %exitcond, label %8, label %._crit_edge

._crit_edge:                                      ; preds = %8
  br label %10

10:                                               ; preds = %._crit_edge, %3
  call void @png_write_chunk_end(%struct.png_struct_def.60* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_hIST(%struct.png_struct_def.60* noalias %0, i16* %1, i32 %2) #11 {
  %4 = alloca [3 x i8], align 1
  %5 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 53
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = icmp sgt i32 %2, %7
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.27.613, i32 0, i32 0))
  br label %19

10:                                               ; preds = %3
  %11 = mul nsw i32 %2, 2
  call void @png_write_chunk_header(%struct.png_struct_def.60* %0, i32 1749635924, i32 %11)
  %12 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i32 0, i32 0
  %13 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i32 0, i32 0
  %14 = icmp slt i32 0, %2
  br i1 %14, label %.lr.ph, label %18

.lr.ph:                                           ; preds = %10
  %wide.trip.count = zext i32 %2 to i64
  br label %15

15:                                               ; preds = %.lr.ph, %15
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %15 ]
  %scevgep = getelementptr i16, i16* %1, i64 %indvars.iv
  %16 = load i16, i16* %scevgep, align 2
  %17 = zext i16 %16 to i32
  call void @png_save_uint_16(i8* %12, i32 %17)
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %13, i64 2)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %wide.trip.count, %indvars.iv.next
  br i1 %exitcond, label %15, label %._crit_edge

._crit_edge:                                      ; preds = %15
  br label %18

18:                                               ; preds = %._crit_edge, %10
  call void @png_write_chunk_end(%struct.png_struct_def.60* %0)
  br label %19

19:                                               ; preds = %18, %9
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_oFFs(%struct.png_struct_def.60* noalias %0, i32 %1, i32 %2, i32 %3) #11 {
  %5 = alloca [9 x i8], align 1
  %6 = icmp sge i32 %3, 2
  br i1 %6, label %7, label %8

7:                                                ; preds = %4
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.36.630, i32 0, i32 0))
  br label %8

8:                                                ; preds = %7, %4
  %9 = getelementptr inbounds [9 x i8], [9 x i8]* %5, i32 0, i32 0
  call void @png_save_int_32(i8* %9, i32 %1)
  %10 = getelementptr inbounds [9 x i8], [9 x i8]* %5, i32 0, i32 0
  %11 = getelementptr inbounds i8, i8* %10, i64 4
  call void @png_save_int_32(i8* %11, i32 %2)
  %12 = trunc i32 %3 to i8
  %13 = getelementptr inbounds [9 x i8], [9 x i8]* %5, i64 0, i64 8
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds [9 x i8], [9 x i8]* %5, i32 0, i32 0
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1866876531, i8* %14, i64 9)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_pCAL(%struct.png_struct_def.60* noalias %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i8* %6, i8** %7) #11 {
  %9 = alloca [10 x i8], align 1
  %10 = alloca [80 x i8], align 16
  %11 = icmp sge i32 %4, 4
  br i1 %11, label %12, label %13

12:                                               ; preds = %8
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.37.633, i32 0, i32 0)) #24
  unreachable

13:                                               ; preds = %8
  %14 = getelementptr inbounds [80 x i8], [80 x i8]* %10, i32 0, i32 0
  %15 = call i32 bitcast (i32 (%struct.png_struct_def*, i8*, i8*)* @png_check_keyword to i32 (%struct.png_struct_def.60*, i8*, i8*)*)(%struct.png_struct_def.60* %0, i8* %1, i8* %14)
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.38.634, i32 0, i32 0)) #24
  unreachable

18:                                               ; preds = %13
  %19 = add i32 %15, 1
  %20 = call i64 @strlen(i8* %6) #26
  %21 = icmp eq i32 %5, 0
  %22 = zext i1 %21 to i64
  %23 = select i1 %21, i32 0, i32 1
  %24 = sext i32 %23 to i64
  %25 = add i64 %20, %24
  %26 = zext i32 %19 to i64
  %27 = add i64 %26, %25
  %28 = add i64 %27, 10
  %29 = sext i32 %5 to i64
  %30 = mul i64 %29, 8
  %31 = call noalias i8* @png_malloc(%struct.png_struct_def.60* %0, i64 %30)
  %32 = bitcast i8* %31 to i64*
  %33 = sub nsw i32 %5, 1
  %34 = icmp slt i32 0, %5
  br i1 %34, label %.lr.ph7, label %47

.lr.ph7:                                          ; preds = %18
  %35 = zext i32 %33 to i64
  %wide.trip.count12 = zext i32 %5 to i64
  br label %36

36:                                               ; preds = %.lr.ph7, %36
  %indvars.iv9 = phi i64 [ 0, %.lr.ph7 ], [ %indvars.iv.next10, %36 ]
  %.014 = phi i64 [ %28, %.lr.ph7 ], [ %46, %36 ]
  %scevgep16 = getelementptr i8*, i8** %7, i64 %indvars.iv9
  %37 = load i8*, i8** %scevgep16, align 8
  %38 = call i64 @strlen(i8* %37) #26
  %39 = icmp eq i64 %35, %indvars.iv9
  %40 = select i1 %39, i32 0, i32 1
  %41 = sext i32 %40 to i64
  %42 = add i64 %38, %41
  %43 = shl nuw nsw i64 %indvars.iv9, 3
  %scevgep17 = getelementptr i8, i8* %31, i64 %43
  %scevgep1718 = bitcast i8* %scevgep17 to i64*
  store i64 %42, i64* %scevgep1718, align 8
  %44 = shl nuw nsw i64 %indvars.iv9, 3
  %scevgep19 = getelementptr i8, i8* %31, i64 %44
  %scevgep1920 = bitcast i8* %scevgep19 to i64*
  %45 = load i64, i64* %scevgep1920, align 8
  %46 = add i64 %.014, %45
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 1
  %exitcond13 = icmp ne i64 %wide.trip.count12, %indvars.iv.next10
  br i1 %exitcond13, label %36, label %._crit_edge8

._crit_edge8:                                     ; preds = %36
  %split = phi i64 [ %46, %36 ]
  br label %47

47:                                               ; preds = %._crit_edge8, %18
  %.01.lcssa = phi i64 [ %split, %._crit_edge8 ], [ %28, %18 ]
  %48 = trunc i64 %.01.lcssa to i32
  call void @png_write_chunk_header(%struct.png_struct_def.60* %0, i32 1883455820, i32 %48)
  %49 = getelementptr inbounds [80 x i8], [80 x i8]* %10, i32 0, i32 0
  %50 = zext i32 %19 to i64
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %49, i64 %50)
  %51 = getelementptr inbounds [10 x i8], [10 x i8]* %9, i32 0, i32 0
  call void @png_save_int_32(i8* %51, i32 %2)
  %52 = getelementptr inbounds [10 x i8], [10 x i8]* %9, i32 0, i32 0
  %53 = getelementptr inbounds i8, i8* %52, i64 4
  call void @png_save_int_32(i8* %53, i32 %3)
  %54 = trunc i32 %4 to i8
  %55 = getelementptr inbounds [10 x i8], [10 x i8]* %9, i64 0, i64 8
  store i8 %54, i8* %55, align 1
  %56 = trunc i32 %5 to i8
  %57 = getelementptr inbounds [10 x i8], [10 x i8]* %9, i64 0, i64 9
  store i8 %56, i8* %57, align 1
  %58 = getelementptr inbounds [10 x i8], [10 x i8]* %9, i32 0, i32 0
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %58, i64 10)
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %6, i64 %25)
  %59 = icmp slt i32 0, %5
  br i1 %59, label %.lr.ph, label %64

.lr.ph:                                           ; preds = %47
  %wide.trip.count = zext i32 %5 to i64
  br label %60

60:                                               ; preds = %.lr.ph, %60
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %60 ]
  %scevgep = getelementptr i8*, i8** %7, i64 %indvars.iv
  %61 = load i8*, i8** %scevgep, align 8
  %62 = shl nuw nsw i64 %indvars.iv, 3
  %scevgep14 = getelementptr i8, i8* %31, i64 %62
  %scevgep1415 = bitcast i8* %scevgep14 to i64*
  %63 = load i64, i64* %scevgep1415, align 8
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %61, i64 %63)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %wide.trip.count, %indvars.iv.next
  br i1 %exitcond, label %60, label %._crit_edge

._crit_edge:                                      ; preds = %60
  br label %64

64:                                               ; preds = %._crit_edge, %47
  %65 = bitcast i64* %32 to i8*
  call void @png_free(%struct.png_struct_def.60* %0, i8* %65)
  call void @png_write_chunk_end(%struct.png_struct_def.60* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_sCAL_s(%struct.png_struct_def.60* noalias %0, i32 %1, i8* %2, i8* %3) #11 {
  %5 = alloca [64 x i8], align 16
  %6 = call i64 @strlen(i8* %2) #26
  %7 = call i64 @strlen(i8* %3) #26
  %8 = add i64 %6, %7
  %9 = add i64 %8, 2
  %10 = icmp ugt i64 %9, 64
  br i1 %10, label %11, label %12

11:                                               ; preds = %4
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.39.637, i32 0, i32 0))
  br label %22

12:                                               ; preds = %4
  %13 = trunc i32 %1 to i8
  %14 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 0
  store i8 %13, i8* %14, align 16
  %15 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  %17 = add i64 %6, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %2, i64 %17, i1 false)
  %18 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  %19 = getelementptr inbounds i8, i8* %18, i64 %6
  %20 = getelementptr inbounds i8, i8* %19, i64 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %3, i64 %7, i1 false)
  %21 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1933787468, i8* %21, i64 %9)
  br label %22

22:                                               ; preds = %12, %11
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_pHYs(%struct.png_struct_def.60* noalias %0, i32 %1, i32 %2, i32 %3) #11 {
  %5 = alloca [9 x i8], align 1
  %6 = icmp sge i32 %3, 2
  br i1 %6, label %7, label %8

7:                                                ; preds = %4
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.40.640, i32 0, i32 0))
  br label %8

8:                                                ; preds = %7, %4
  %9 = getelementptr inbounds [9 x i8], [9 x i8]* %5, i32 0, i32 0
  call void @png_save_uint_32(i8* %9, i32 %1)
  %10 = getelementptr inbounds [9 x i8], [9 x i8]* %5, i32 0, i32 0
  %11 = getelementptr inbounds i8, i8* %10, i64 4
  call void @png_save_uint_32(i8* %11, i32 %2)
  %12 = trunc i32 %3 to i8
  %13 = getelementptr inbounds [9 x i8], [9 x i8]* %5, i64 0, i64 8
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds [9 x i8], [9 x i8]* %5, i32 0, i32 0
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1883789683, i8* %14, i64 9)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_tIME(%struct.png_struct_def.60* noalias %0, %struct.png_time_struct* %1) #11 {
  %3 = alloca [7 x i8], align 1
  %4 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 1
  %5 = load i8, i8* %4, align 2
  %6 = zext i8 %5 to i32
  %7 = icmp sgt i32 %6, 12
  br i1 %7, label %33, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 1
  %10 = load i8, i8* %9, align 2
  %11 = zext i8 %10 to i32
  %12 = icmp slt i32 %11, 1
  br i1 %12, label %33, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = icmp sgt i32 %16, 31
  br i1 %17, label %33, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 2
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = icmp slt i32 %21, 1
  br i1 %22, label %33, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 3
  %25 = load i8, i8* %24, align 2
  %26 = zext i8 %25 to i32
  %27 = icmp sgt i32 %26, 23
  br i1 %27, label %33, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 5
  %30 = load i8, i8* %29, align 2
  %31 = zext i8 %30 to i32
  %32 = icmp sgt i32 %31, 60
  br i1 %32, label %33, label %34

33:                                               ; preds = %28, %23, %18, %13, %8, %2
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_warning to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.41.643, i32 0, i32 0))
  br label %55

34:                                               ; preds = %28
  %35 = getelementptr inbounds [7 x i8], [7 x i8]* %3, i32 0, i32 0
  %36 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 0
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  call void @png_save_uint_16(i8* %35, i32 %38)
  %39 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 1
  %40 = load i8, i8* %39, align 2
  %41 = getelementptr inbounds [7 x i8], [7 x i8]* %3, i64 0, i64 2
  store i8 %40, i8* %41, align 1
  %42 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 2
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds [7 x i8], [7 x i8]* %3, i64 0, i64 3
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 3
  %46 = load i8, i8* %45, align 2
  %47 = getelementptr inbounds [7 x i8], [7 x i8]* %3, i64 0, i64 4
  store i8 %46, i8* %47, align 1
  %48 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 4
  %49 = load i8, i8* %48, align 1
  %50 = getelementptr inbounds [7 x i8], [7 x i8]* %3, i64 0, i64 5
  store i8 %49, i8* %50, align 1
  %51 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %1, i32 0, i32 5
  %52 = load i8, i8* %51, align 2
  %53 = getelementptr inbounds [7 x i8], [7 x i8]* %3, i64 0, i64 6
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds [7 x i8], [7 x i8]* %3, i32 0, i32 0
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1950960965, i8* %54, i64 7)
  br label %55

55:                                               ; preds = %34, %33
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_sPLT(%struct.png_struct_def.60* noalias %0, %struct.png_sPLT_struct* %1) #11 {
  %3 = alloca [80 x i8], align 16
  %4 = alloca [10 x i8], align 1
  %5 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %1, i32 0, i32 1
  %6 = load i8, i8* %5, align 8
  %7 = zext i8 %6 to i32
  %8 = icmp eq i32 %7, 8
  %9 = zext i1 %8 to i64
  %10 = select i1 %8, i32 6, i32 10
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %1, i32 0, i32 3
  %13 = load i32, i32* %12, align 8
  %14 = sext i32 %13 to i64
  %15 = mul i64 %11, %14
  %16 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %1, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds [80 x i8], [80 x i8]* %3, i32 0, i32 0
  %19 = call i32 bitcast (i32 (%struct.png_struct_def*, i8*, i8*)* @png_check_keyword to i32 (%struct.png_struct_def.60*, i8*, i8*)*)(%struct.png_struct_def.60* %0, i8* %17, i8* %18)
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %2
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.18.592, i32 0, i32 0)) #24
  unreachable

22:                                               ; preds = %2
  %23 = add i32 %19, 2
  %24 = zext i32 %23 to i64
  %25 = add i64 %24, %15
  %26 = trunc i64 %25 to i32
  call void @png_write_chunk_header(%struct.png_struct_def.60* %0, i32 1934642260, i32 %26)
  %27 = getelementptr inbounds [80 x i8], [80 x i8]* %3, i32 0, i32 0
  %28 = add i32 %19, 1
  %29 = zext i32 %28 to i64
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %27, i64 %29)
  %30 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %1, i32 0, i32 1
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %30, i64 1)
  %31 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %1, i32 0, i32 2
  %32 = load %struct.png_sPLT_entry_struct*, %struct.png_sPLT_entry_struct** %31, align 8
  %33 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %1, i32 0, i32 2
  %34 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %1, i32 0, i32 3
  %35 = getelementptr inbounds %struct.png_sPLT_struct, %struct.png_sPLT_struct* %1, i32 0, i32 1
  %36 = getelementptr inbounds [10 x i8], [10 x i8]* %4, i32 0, i32 0
  %37 = getelementptr inbounds i8, i8* %36, i64 0
  %38 = getelementptr inbounds [10 x i8], [10 x i8]* %4, i32 0, i32 0
  %39 = getelementptr inbounds i8, i8* %38, i64 2
  %40 = getelementptr inbounds [10 x i8], [10 x i8]* %4, i32 0, i32 0
  %41 = getelementptr inbounds i8, i8* %40, i64 4
  %42 = getelementptr inbounds [10 x i8], [10 x i8]* %4, i32 0, i32 0
  %43 = getelementptr inbounds i8, i8* %42, i64 6
  %44 = getelementptr inbounds [10 x i8], [10 x i8]* %4, i32 0, i32 0
  %45 = getelementptr inbounds i8, i8* %44, i64 8
  %46 = getelementptr inbounds [10 x i8], [10 x i8]* %4, i64 0, i64 0
  %47 = getelementptr inbounds [10 x i8], [10 x i8]* %4, i64 0, i64 1
  %48 = getelementptr inbounds [10 x i8], [10 x i8]* %4, i64 0, i64 2
  %49 = getelementptr inbounds [10 x i8], [10 x i8]* %4, i64 0, i64 3
  %50 = getelementptr inbounds [10 x i8], [10 x i8]* %4, i32 0, i32 0
  %51 = getelementptr inbounds i8, i8* %50, i64 4
  %52 = getelementptr inbounds [10 x i8], [10 x i8]* %4, i32 0, i32 0
  %53 = load %struct.png_sPLT_entry_struct*, %struct.png_sPLT_entry_struct** %33, align 8
  %54 = load i32, i32* %34, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds %struct.png_sPLT_entry_struct, %struct.png_sPLT_entry_struct* %53, i64 %55
  %57 = icmp ult %struct.png_sPLT_entry_struct* %32, %56
  br i1 %57, label %.lr.ph, label %101

.lr.ph:                                           ; preds = %22
  br label %58

58:                                               ; preds = %.lr.ph, %94
  %.01 = phi %struct.png_sPLT_entry_struct* [ %32, %.lr.ph ], [ %95, %94 ]
  %59 = load i8, i8* %35, align 8
  %60 = zext i8 %59 to i32
  %61 = icmp eq i32 %60, 8
  br i1 %61, label %62, label %78

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.png_sPLT_entry_struct, %struct.png_sPLT_entry_struct* %.01, i32 0, i32 0
  %64 = load i16, i16* %63, align 2
  %65 = trunc i16 %64 to i8
  store i8 %65, i8* %46, align 1
  %66 = getelementptr inbounds %struct.png_sPLT_entry_struct, %struct.png_sPLT_entry_struct* %.01, i32 0, i32 1
  %67 = load i16, i16* %66, align 2
  %68 = trunc i16 %67 to i8
  store i8 %68, i8* %47, align 1
  %69 = getelementptr inbounds %struct.png_sPLT_entry_struct, %struct.png_sPLT_entry_struct* %.01, i32 0, i32 2
  %70 = load i16, i16* %69, align 2
  %71 = trunc i16 %70 to i8
  store i8 %71, i8* %48, align 1
  %72 = getelementptr inbounds %struct.png_sPLT_entry_struct, %struct.png_sPLT_entry_struct* %.01, i32 0, i32 3
  %73 = load i16, i16* %72, align 2
  %74 = trunc i16 %73 to i8
  store i8 %74, i8* %49, align 1
  %75 = getelementptr inbounds %struct.png_sPLT_entry_struct, %struct.png_sPLT_entry_struct* %.01, i32 0, i32 4
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  call void @png_save_uint_16(i8* %51, i32 %77)
  br label %94

78:                                               ; preds = %58
  %79 = getelementptr inbounds %struct.png_sPLT_entry_struct, %struct.png_sPLT_entry_struct* %.01, i32 0, i32 0
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  call void @png_save_uint_16(i8* %37, i32 %81)
  %82 = getelementptr inbounds %struct.png_sPLT_entry_struct, %struct.png_sPLT_entry_struct* %.01, i32 0, i32 1
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  call void @png_save_uint_16(i8* %39, i32 %84)
  %85 = getelementptr inbounds %struct.png_sPLT_entry_struct, %struct.png_sPLT_entry_struct* %.01, i32 0, i32 2
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  call void @png_save_uint_16(i8* %41, i32 %87)
  %88 = getelementptr inbounds %struct.png_sPLT_entry_struct, %struct.png_sPLT_entry_struct* %.01, i32 0, i32 3
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  call void @png_save_uint_16(i8* %43, i32 %90)
  %91 = getelementptr inbounds %struct.png_sPLT_entry_struct, %struct.png_sPLT_entry_struct* %.01, i32 0, i32 4
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  call void @png_save_uint_16(i8* %45, i32 %93)
  br label %94

94:                                               ; preds = %78, %62
  %.02 = phi %struct.png_sPLT_entry_struct* [ %.01, %78 ], [ %.01, %62 ]
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %52, i64 %11)
  %95 = getelementptr inbounds %struct.png_sPLT_entry_struct, %struct.png_sPLT_entry_struct* %.02, i32 1
  %96 = load %struct.png_sPLT_entry_struct*, %struct.png_sPLT_entry_struct** %33, align 8
  %97 = load i32, i32* %34, align 8
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds %struct.png_sPLT_entry_struct, %struct.png_sPLT_entry_struct* %96, i64 %98
  %100 = icmp ult %struct.png_sPLT_entry_struct* %95, %99
  br i1 %100, label %58, label %._crit_edge

._crit_edge:                                      ; preds = %94
  br label %101

101:                                              ; preds = %._crit_edge, %22
  call void @png_write_chunk_end(%struct.png_struct_def.60* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_iTXt(%struct.png_struct_def.60* noalias %0, i32 %1, i8* %2, i8* %3, i8* %4, i8* %5) #11 {
  %7 = alloca [82 x i8], align 16
  %8 = alloca %struct.compression_state, align 8
  %9 = getelementptr inbounds [82 x i8], [82 x i8]* %7, i32 0, i32 0
  %10 = call i32 bitcast (i32 (%struct.png_struct_def*, i8*, i8*)* @png_check_keyword to i32 (%struct.png_struct_def.60*, i8*, i8*)*)(%struct.png_struct_def.60* %0, i8* %2, i8* %9)
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %6
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.32.624, i32 0, i32 0)) #24
  unreachable

13:                                               ; preds = %6
  switch i32 %1, label %22 [
    i32 1, label %14
    i32 -1, label %14
    i32 0, label %18
    i32 2, label %18
  ]

14:                                               ; preds = %13, %13
  %15 = add i32 %10, 1
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [82 x i8], [82 x i8]* %7, i64 0, i64 %16
  store i8 0, i8* %17, align 1
  br label %23

18:                                               ; preds = %13, %13
  %19 = add i32 %10, 1
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [82 x i8], [82 x i8]* %7, i64 0, i64 %20
  store i8 1, i8* %21, align 1
  br label %23

22:                                               ; preds = %13
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.33.625, i32 0, i32 0)) #24
  unreachable

23:                                               ; preds = %18, %14
  %.02 = phi i32 [ %19, %18 ], [ %15, %14 ]
  %.01 = phi i32 [ 1, %18 ], [ 0, %14 ]
  %24 = add i32 %.02, 1
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [82 x i8], [82 x i8]* %7, i64 0, i64 %25
  store i8 0, i8* %26, align 1
  %27 = add i32 %24, 1
  %28 = icmp eq i8* %3, null
  %spec.select = select i1 %28, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.34.626, i32 0, i32 0), i8* %3
  %29 = call i64 @strlen(i8* %spec.select) #26
  %30 = add i64 %29, 1
  %31 = icmp eq i8* %4, null
  %.04 = select i1 %31, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.34.626, i32 0, i32 0), i8* %4
  %32 = call i64 @strlen(i8* %.04) #26
  %33 = add i64 %32, 1
  %34 = icmp eq i8* %5, null
  %.05 = select i1 %34, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.34.626, i32 0, i32 0), i8* %5
  %35 = sub i32 2147483647, %27
  %36 = zext i32 %35 to i64
  %37 = icmp ugt i64 %30, %36
  %38 = zext i32 %27 to i64
  %39 = add i64 %38, %30
  %40 = trunc i64 %39 to i32
  %.0 = select i1 %37, i32 2147483647, i32 %40
  %41 = sub i32 2147483647, %.0
  %42 = zext i32 %41 to i64
  %43 = icmp ugt i64 %33, %42
  %44 = zext i32 %.0 to i64
  %45 = add i64 %44, %33
  %46 = trunc i64 %45 to i32
  %.1 = select i1 %43, i32 2147483647, i32 %46
  %47 = call i64 @strlen(i8* %.05) #26
  call void @png_text_compress_init(%struct.compression_state* %8, i8* %.05, i64 %47)
  %48 = icmp ne i32 %.01, 0
  br i1 %48, label %49, label %56

49:                                               ; preds = %23
  %50 = call i32 @png_text_compress(%struct.png_struct_def.60* %0, i32 1767135348, %struct.compression_state* %8, i32 %.1)
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %68

52:                                               ; preds = %49
  %53 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %54 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %53, i32 0, i32 6
  %55 = load i8*, i8** %54, align 8
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* %55) #24
  unreachable

56:                                               ; preds = %23
  %57 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %8, i32 0, i32 1
  %58 = load i64, i64* %57, align 8
  %59 = sub i32 2147483647, %.1
  %60 = zext i32 %59 to i64
  %61 = icmp ugt i64 %58, %60
  br i1 %61, label %62, label %63

62:                                               ; preds = %56
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.35.627, i32 0, i32 0)) #24
  unreachable

63:                                               ; preds = %56
  %64 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %8, i32 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = trunc i64 %65 to i32
  %67 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %8, i32 0, i32 2
  store i32 %66, i32* %67, align 8
  br label %68

68:                                               ; preds = %49, %63
  %69 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %8, i32 0, i32 2
  %70 = load i32, i32* %69, align 8
  %71 = add i32 %70, %.1
  call void @png_write_chunk_header(%struct.png_struct_def.60* %0, i32 1767135348, i32 %71)
  %72 = getelementptr inbounds [82 x i8], [82 x i8]* %7, i32 0, i32 0
  %73 = zext i32 %27 to i64
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %72, i64 %73)
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %spec.select, i64 %30)
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %.04, i64 %33)
  %74 = icmp ne i32 %.01, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %68
  call void @png_write_compressed_data_out(%struct.png_struct_def.60* %0, %struct.compression_state* %8)
  br label %80

76:                                               ; preds = %68
  %77 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %8, i32 0, i32 2
  %78 = load i32, i32* %77, align 8
  %79 = zext i32 %78 to i64
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %.05, i64 %79)
  br label %80

80:                                               ; preds = %76, %75
  call void @png_write_chunk_end(%struct.png_struct_def.60* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_zTXt(%struct.png_struct_def.60* noalias %0, i8* %1, i8* %2, i32 %3) #11 {
  %5 = alloca [81 x i8], align 16
  %6 = alloca %struct.compression_state, align 8
  switch i32 %3, label %8 [
    i32 -1, label %7
    i32 0, label %9
  ]

7:                                                ; preds = %4
  call void @png_write_tEXt(%struct.png_struct_def.60* %0, i8* %1, i8* %2, i64 0)
  br label %36

8:                                                ; preds = %4
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.30.620, i32 0, i32 0)) #24
  unreachable

9:                                                ; preds = %4
  %10 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i32 0, i32 0
  %11 = call i32 bitcast (i32 (%struct.png_struct_def*, i8*, i8*)* @png_check_keyword to i32 (%struct.png_struct_def.60*, i8*, i8*)*)(%struct.png_struct_def.60* %0, i8* %1, i8* %10)
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %9
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.621, i32 0, i32 0)) #24
  unreachable

14:                                               ; preds = %9
  %15 = add i32 %11, 1
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i64 0, i64 %16
  store i8 0, i8* %17, align 1
  %18 = add i32 %15, 1
  %19 = icmp eq i8* %2, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %14
  %21 = call i64 @strlen(i8* %2) #26
  br label %22

22:                                               ; preds = %14, %20
  %23 = phi i64 [ %21, %20 ], [ 0, %14 ]
  call void @png_text_compress_init(%struct.compression_state* %6, i8* %2, i64 %23)
  %24 = call i32 @png_text_compress(%struct.png_struct_def.60* %0, i32 2052348020, %struct.compression_state* %6, i32 %18)
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %30

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %28 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %27, i32 0, i32 6
  %29 = load i8*, i8** %28, align 8
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* %29) #24
  unreachable

30:                                               ; preds = %22
  %31 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %6, i32 0, i32 2
  %32 = load i32, i32* %31, align 8
  %33 = add i32 %18, %32
  call void @png_write_chunk_header(%struct.png_struct_def.60* %0, i32 2052348020, i32 %33)
  %34 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i32 0, i32 0
  %35 = zext i32 %18 to i64
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %34, i64 %35)
  call void @png_write_compressed_data_out(%struct.png_struct_def.60* %0, %struct.compression_state* %6)
  call void @png_write_chunk_end(%struct.png_struct_def.60* %0)
  br label %36

36:                                               ; preds = %30, %7
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_tEXt(%struct.png_struct_def.60* noalias %0, i8* %1, i8* %2, i64 %3) #11 {
  %5 = alloca [80 x i8], align 16
  %6 = getelementptr inbounds [80 x i8], [80 x i8]* %5, i32 0, i32 0
  %7 = call i32 bitcast (i32 (%struct.png_struct_def*, i8*, i8*)* @png_check_keyword to i32 (%struct.png_struct_def.60*, i8*, i8*)*)(%struct.png_struct_def.60* %0, i8* %1, i8* %6)
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.28.616, i32 0, i32 0)) #24
  unreachable

10:                                               ; preds = %4
  %11 = icmp eq i8* %2, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %10
  %13 = load i8, i8* %2, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = call i64 @strlen(i8* %2) #26
  br label %18

18:                                               ; preds = %10, %12, %16
  %.0 = phi i64 [ %17, %16 ], [ 0, %12 ], [ 0, %10 ]
  %19 = add i32 %7, 1
  %20 = sub i32 2147483647, %19
  %21 = zext i32 %20 to i64
  %22 = icmp ugt i64 %.0, %21
  br i1 %22, label %23, label %24

23:                                               ; preds = %18
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.29.617, i32 0, i32 0)) #24
  unreachable

24:                                               ; preds = %18
  %25 = zext i32 %7 to i64
  %26 = add i64 %25, %.0
  %27 = add i64 %26, 1
  %28 = trunc i64 %27 to i32
  call void @png_write_chunk_header(%struct.png_struct_def.60* %0, i32 1950701684, i32 %28)
  %29 = getelementptr inbounds [80 x i8], [80 x i8]* %5, i32 0, i32 0
  %30 = add i32 %7, 1
  %31 = zext i32 %30 to i64
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %29, i64 %31)
  %32 = icmp ne i64 %.0, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %24
  call void @png_write_chunk_data(%struct.png_struct_def.60* %0, i8* %2, i64 %.0)
  br label %34

34:                                               ; preds = %33, %24
  call void @png_write_chunk_end(%struct.png_struct_def.60* %0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_save_uint_16(i8* %0, i32 %1) #11 {
  %3 = lshr i32 %1, 8
  %4 = and i32 %3, 255
  %5 = trunc i32 %4 to i8
  %6 = getelementptr inbounds i8, i8* %0, i64 0
  store i8 %5, i8* %6, align 1
  %7 = and i32 %1, 255
  %8 = trunc i32 %7 to i8
  %9 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %8, i8* %9, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_end(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %117, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3.512, i32 0, i32 0)) #24
  unreachable

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 54
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 53
  %14 = load i16, i16* %13, align 8
  %15 = zext i16 %14 to i32
  %16 = icmp sgt i32 %12, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %10
  call void @png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4.513, i32 0, i32 0))
  br label %18

18:                                               ; preds = %17, %10
  %19 = icmp ne %struct.png_info_def* %1, null
  br i1 %19, label %20, label %113

20:                                               ; preds = %18
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = and i32 %22, 512
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %27 = load i32, i32* %26, align 4
  %28 = and i32 %27, 512
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 23
  call void bitcast (void (%struct.png_struct_def.60*, %struct.png_time_struct*)* @png_write_tIME to void (%struct.png_struct_def*, %struct.png_time_struct*)*)(%struct.png_struct_def* %0, %struct.png_time_struct* %31)
  br label %32

32:                                               ; preds = %30, %25, %20
  %33 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 20
  %34 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %35 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %36 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %37 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %38 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %39 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %40 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %41 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %42 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %43 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %44 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %45 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %46 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %47 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %48 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %49 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %50 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %51 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 22
  %52 = load i32, i32* %33, align 4
  %53 = icmp slt i32 0, %52
  br i1 %53, label %.lr.ph, label %112

.lr.ph:                                           ; preds = %32
  br label %54

54:                                               ; preds = %.lr.ph, %108
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %108 ]
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %108 ]
  %55 = load %struct.png_text_struct*, %struct.png_text_struct** %34, align 8
  %56 = bitcast %struct.png_text_struct* %55 to i8*
  %uglygep = getelementptr i8, i8* %56, i64 %lsr.iv
  %uglygep4 = bitcast i8* %uglygep to i32*
  %57 = load i32, i32* %uglygep4, align 8
  %58 = icmp sgt i32 %57, 0
  br i1 %58, label %59, label %81

59:                                               ; preds = %54
  %60 = load %struct.png_text_struct*, %struct.png_text_struct** %44, align 8
  %61 = bitcast %struct.png_text_struct* %60 to i8*
  %uglygep5 = getelementptr i8, i8* %61, i64 %lsr.iv
  %uglygep56 = bitcast i8* %uglygep5 to i32*
  %62 = load i32, i32* %uglygep56, align 8
  %63 = load %struct.png_text_struct*, %struct.png_text_struct** %45, align 8
  %scevgep = getelementptr %struct.png_text_struct, %struct.png_text_struct* %63, i64 0, i32 1
  %scevgep7 = bitcast i8** %scevgep to i8*
  %uglygep8 = getelementptr i8, i8* %scevgep7, i64 %lsr.iv
  %uglygep89 = bitcast i8* %uglygep8 to i8**
  %64 = load i8*, i8** %uglygep89, align 8
  %65 = load %struct.png_text_struct*, %struct.png_text_struct** %46, align 8
  %scevgep10 = getelementptr %struct.png_text_struct, %struct.png_text_struct* %65, i64 0, i32 5
  %scevgep1011 = bitcast i8** %scevgep10 to i8*
  %uglygep12 = getelementptr i8, i8* %scevgep1011, i64 %lsr.iv
  %uglygep1213 = bitcast i8* %uglygep12 to i8**
  %66 = load i8*, i8** %uglygep1213, align 8
  %67 = load %struct.png_text_struct*, %struct.png_text_struct** %47, align 8
  %scevgep14 = getelementptr %struct.png_text_struct, %struct.png_text_struct* %67, i64 0, i32 6
  %scevgep1415 = bitcast i8** %scevgep14 to i8*
  %uglygep16 = getelementptr i8, i8* %scevgep1415, i64 %lsr.iv
  %uglygep1617 = bitcast i8* %uglygep16 to i8**
  %68 = load i8*, i8** %uglygep1617, align 8
  %69 = load %struct.png_text_struct*, %struct.png_text_struct** %48, align 8
  %scevgep18 = getelementptr %struct.png_text_struct, %struct.png_text_struct* %69, i64 0, i32 2
  %scevgep1819 = bitcast i8** %scevgep18 to i8*
  %uglygep20 = getelementptr i8, i8* %scevgep1819, i64 %lsr.iv
  %uglygep2021 = bitcast i8* %uglygep20 to i8**
  %70 = load i8*, i8** %uglygep2021, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i32, i8*, i8*, i8*, i8*)* @png_write_iTXt to void (%struct.png_struct_def*, i32, i8*, i8*, i8*, i8*)*)(%struct.png_struct_def* %0, i32 %62, i8* %64, i8* %66, i8* %68, i8* %70)
  %71 = load %struct.png_text_struct*, %struct.png_text_struct** %49, align 8
  %72 = bitcast %struct.png_text_struct* %71 to i8*
  %uglygep22 = getelementptr i8, i8* %72, i64 %lsr.iv
  %uglygep2223 = bitcast i8* %uglygep22 to i32*
  %73 = load i32, i32* %uglygep2223, align 8
  %74 = icmp eq i32 %73, -1
  br i1 %74, label %75, label %78

75:                                               ; preds = %59
  %76 = load %struct.png_text_struct*, %struct.png_text_struct** %51, align 8
  %77 = bitcast %struct.png_text_struct* %76 to i8*
  %uglygep24 = getelementptr i8, i8* %77, i64 %lsr.iv
  %uglygep2425 = bitcast i8* %uglygep24 to i32*
  store i32 -3, i32* %uglygep2425, align 8
  br label %108

78:                                               ; preds = %59
  %79 = load %struct.png_text_struct*, %struct.png_text_struct** %50, align 8
  %80 = bitcast %struct.png_text_struct* %79 to i8*
  %uglygep26 = getelementptr i8, i8* %80, i64 %lsr.iv
  %uglygep2627 = bitcast i8* %uglygep26 to i32*
  store i32 -2, i32* %uglygep2627, align 8
  br label %108

81:                                               ; preds = %54
  %82 = load %struct.png_text_struct*, %struct.png_text_struct** %35, align 8
  %83 = bitcast %struct.png_text_struct* %82 to i8*
  %uglygep28 = getelementptr i8, i8* %83, i64 %lsr.iv
  %uglygep2829 = bitcast i8* %uglygep28 to i32*
  %84 = load i32, i32* %uglygep2829, align 8
  %85 = icmp sge i32 %84, 0
  br i1 %85, label %86, label %96

86:                                               ; preds = %81
  %87 = load %struct.png_text_struct*, %struct.png_text_struct** %40, align 8
  %scevgep30 = getelementptr %struct.png_text_struct, %struct.png_text_struct* %87, i64 0, i32 1
  %scevgep3031 = bitcast i8** %scevgep30 to i8*
  %uglygep32 = getelementptr i8, i8* %scevgep3031, i64 %lsr.iv
  %uglygep3233 = bitcast i8* %uglygep32 to i8**
  %88 = load i8*, i8** %uglygep3233, align 8
  %89 = load %struct.png_text_struct*, %struct.png_text_struct** %41, align 8
  %scevgep34 = getelementptr %struct.png_text_struct, %struct.png_text_struct* %89, i64 0, i32 2
  %scevgep3435 = bitcast i8** %scevgep34 to i8*
  %uglygep36 = getelementptr i8, i8* %scevgep3435, i64 %lsr.iv
  %uglygep3637 = bitcast i8* %uglygep36 to i8**
  %90 = load i8*, i8** %uglygep3637, align 8
  %91 = load %struct.png_text_struct*, %struct.png_text_struct** %42, align 8
  %92 = bitcast %struct.png_text_struct* %91 to i8*
  %uglygep38 = getelementptr i8, i8* %92, i64 %lsr.iv
  %uglygep3839 = bitcast i8* %uglygep38 to i32*
  %93 = load i32, i32* %uglygep3839, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*, i8*, i32)* @png_write_zTXt to void (%struct.png_struct_def*, i8*, i8*, i32)*)(%struct.png_struct_def* %0, i8* %88, i8* %90, i32 %93)
  %94 = load %struct.png_text_struct*, %struct.png_text_struct** %43, align 8
  %95 = bitcast %struct.png_text_struct* %94 to i8*
  %uglygep40 = getelementptr i8, i8* %95, i64 %lsr.iv
  %uglygep4041 = bitcast i8* %uglygep40 to i32*
  store i32 -2, i32* %uglygep4041, align 8
  br label %108

96:                                               ; preds = %81
  %97 = load %struct.png_text_struct*, %struct.png_text_struct** %36, align 8
  %98 = bitcast %struct.png_text_struct* %97 to i8*
  %uglygep42 = getelementptr i8, i8* %98, i64 %lsr.iv
  %uglygep4243 = bitcast i8* %uglygep42 to i32*
  %99 = load i32, i32* %uglygep4243, align 8
  %100 = icmp eq i32 %99, -1
  br i1 %100, label %101, label %108

101:                                              ; preds = %96
  %102 = load %struct.png_text_struct*, %struct.png_text_struct** %37, align 8
  %scevgep44 = getelementptr %struct.png_text_struct, %struct.png_text_struct* %102, i64 0, i32 1
  %scevgep4445 = bitcast i8** %scevgep44 to i8*
  %uglygep46 = getelementptr i8, i8* %scevgep4445, i64 %lsr.iv
  %uglygep4647 = bitcast i8* %uglygep46 to i8**
  %103 = load i8*, i8** %uglygep4647, align 8
  %104 = load %struct.png_text_struct*, %struct.png_text_struct** %38, align 8
  %scevgep48 = getelementptr %struct.png_text_struct, %struct.png_text_struct* %104, i64 0, i32 2
  %scevgep4849 = bitcast i8** %scevgep48 to i8*
  %uglygep50 = getelementptr i8, i8* %scevgep4849, i64 %lsr.iv
  %uglygep5051 = bitcast i8* %uglygep50 to i8**
  %105 = load i8*, i8** %uglygep5051, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*, i8*, i64)* @png_write_tEXt to void (%struct.png_struct_def*, i8*, i8*, i64)*)(%struct.png_struct_def* %0, i8* %103, i8* %105, i64 0)
  %106 = load %struct.png_text_struct*, %struct.png_text_struct** %39, align 8
  %107 = bitcast %struct.png_text_struct* %106 to i8*
  %uglygep52 = getelementptr i8, i8* %107, i64 %lsr.iv
  %uglygep5253 = bitcast i8* %uglygep52 to i32*
  store i32 -3, i32* %uglygep5253, align 8
  br label %108

108:                                              ; preds = %78, %75, %96, %101, %86
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %109 = load i32, i32* %33, align 4
  %110 = sext i32 %109 to i64
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 56
  %111 = icmp slt i64 %indvars.iv.next, %110
  br i1 %111, label %54, label %._crit_edge

._crit_edge:                                      ; preds = %108
  br label %112

112:                                              ; preds = %._crit_edge, %32
  call void @write_unknown_chunks(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 8)
  br label %113

113:                                              ; preds = %112, %18
  %114 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %115 = load i32, i32* %114, align 4
  %116 = or i32 %115, 8
  store i32 %116, i32* %114, align 4
  call void bitcast (void (%struct.png_struct_def.60*)* @png_write_IEND to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %117

117:                                              ; preds = %2, %113
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_IEND(%struct.png_struct_def.60* noalias %0) #11 {
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1229278788, i8* null, i64 0)
  %2 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 15
  %3 = load i32, i32* %2, align 4
  %4 = or i32 %3, 16
  store i32 %4, i32* %2, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_convert_from_struct_tm(%struct.png_time_struct* %0, %struct.tm* %1) #11 {
  %3 = getelementptr inbounds %struct.tm, %struct.tm* %1, i32 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 1900, %4
  %6 = trunc i32 %5 to i16
  %7 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %0, i32 0, i32 0
  store i16 %6, i16* %7, align 2
  %8 = getelementptr inbounds %struct.tm, %struct.tm* %1, i32 0, i32 4
  %9 = load i32, i32* %8, align 8
  %10 = add nsw i32 %9, 1
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %0, i32 0, i32 1
  store i8 %11, i8* %12, align 2
  %13 = getelementptr inbounds %struct.tm, %struct.tm* %1, i32 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = trunc i32 %14 to i8
  %16 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %0, i32 0, i32 2
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.tm, %struct.tm* %1, i32 0, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %0, i32 0, i32 3
  store i8 %19, i8* %20, align 2
  %21 = getelementptr inbounds %struct.tm, %struct.tm* %1, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %0, i32 0, i32 4
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.tm, %struct.tm* %1, i32 0, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.png_time_struct, %struct.png_time_struct* %0, i32 0, i32 5
  store i8 %27, i8* %28, align 2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_convert_from_time_t(%struct.png_time_struct* %0, i64 %1) #11 {
  %3 = alloca i64, align 8
  store i64 %1, i64* %3, align 8
  %4 = call %struct.tm* @gmtime(i64* %3) #22
  call void @png_convert_from_struct_tm(%struct.png_time_struct* %0, %struct.tm* %4)
  ret void
}

; Function Attrs: nounwind
declare %struct.tm* @gmtime(i64*) #17

; Function Attrs: noinline nounwind uwtable
define noalias %struct.png_struct_def* @png_create_write_struct(i8* %0, i8* %1, void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)* %3) #11 {
  %5 = call noalias %struct.png_struct_def* @png_create_write_struct_2(i8* %0, i8* %1, void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)* %3, i8* null, i8* (%struct.png_struct_def*, i64)* null, void (%struct.png_struct_def*, i8*)* null)
  ret %struct.png_struct_def* %5
}

; Function Attrs: noinline nounwind uwtable
define noalias %struct.png_struct_def* @png_create_write_struct_2(i8* %0, i8* %1, void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)* %3, i8* %4, i8* (%struct.png_struct_def*, i64)* %5, void (%struct.png_struct_def*, i8*)* %6) #11 {
  %8 = call noalias %struct.png_struct_def* @png_create_png_struct(i8* %0, i8* %1, void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)* %3, i8* %4, i8* (%struct.png_struct_def*, i64)* %5, void (%struct.png_struct_def*, i8*)* %6)
  %9 = icmp ne %struct.png_struct_def* %8, null
  br i1 %9, label %10, label %22

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 21
  store i32 8192, i32* %11, align 8
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 26
  store i32 1, i32* %12, align 4
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 22
  store i32 -1, i32* %13, align 4
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 25
  store i32 8, i32* %14, align 8
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 24
  store i32 15, i32* %15, align 4
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 23
  store i32 8, i32* %16, align 8
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 31
  store i32 0, i32* %17, align 8
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 27
  store i32 -1, i32* %18, align 8
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 30
  store i32 8, i32* %19, align 4
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 29
  store i32 15, i32* %20, align 8
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i32 0, i32 28
  store i32 8, i32* %21, align 4
  call void @png_set_write_fn(%struct.png_struct_def* %8, i8* null, void (%struct.png_struct_def*, i8*, i64)* null, void (%struct.png_struct_def*)* null)
  br label %22

22:                                               ; preds = %10, %7
  ret %struct.png_struct_def* %8
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_rows(%struct.png_struct_def* noalias %0, i8** %1, i32 %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %9, label %.preheader

.preheader:                                       ; preds = %3
  %5 = icmp ult i32 0, %2
  br i1 %5, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  %6 = zext i32 %2 to i64
  br label %7

7:                                                ; preds = %.lr.ph, %7
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %7 ]
  %scevgep = getelementptr i8*, i8** %1, i64 %lsr.iv
  %8 = load i8*, i8** %scevgep, align 8
  call void @png_write_row(%struct.png_struct_def* %0, i8* %8)
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 1
  %tmp = trunc i64 %lsr.iv.next to i32
  %tmp4 = trunc i64 %6 to i32
  %exitcond = icmp ne i32 %tmp4, %tmp
  br i1 %exitcond, label %7, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %7
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.preheader
  br label %9

9:                                                ; preds = %.loopexit, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_row(%struct.png_struct_def* noalias %0, i8* %1) #11 {
  %3 = alloca %struct.png_row_info_struct, align 8
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %225, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %21

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %21

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 15
  %16 = load i32, i32* %15, align 4
  %17 = and i32 %16, 1024
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %14
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5.514, i32 0, i32 0)) #24
  unreachable

20:                                               ; preds = %14
  call void bitcast (void (%struct.png_struct_def.60*)* @png_write_start_row to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %21

21:                                               ; preds = %20, %9, %5
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 58
  %23 = load i8, i8* %22, align 4
  %24 = zext i8 %23 to i32
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %89

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %28, 2
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %89

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  switch i32 %34, label %89 [
    i32 0, label %35
    i32 1, label %41
    i32 2, label %51
    i32 3, label %57
    i32 4, label %67
    i32 5, label %73
    i32 6, label %83
  ]

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %37 = load i32, i32* %36, align 4
  %38 = and i32 %37, 7
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %89

40:                                               ; preds = %35
  call void bitcast (void (%struct.png_struct_def.60*)* @png_write_finish_row to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %225

41:                                               ; preds = %31
  %42 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %43 = load i32, i32* %42, align 4
  %44 = and i32 %43, 7
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %50, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %48 = load i32, i32* %47, align 8
  %49 = icmp ult i32 %48, 5
  br i1 %49, label %50, label %89

50:                                               ; preds = %46, %41
  call void bitcast (void (%struct.png_struct_def.60*)* @png_write_finish_row to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %225

51:                                               ; preds = %31
  %52 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %53 = load i32, i32* %52, align 4
  %54 = and i32 %53, 7
  %55 = icmp ne i32 %54, 4
  br i1 %55, label %56, label %89

56:                                               ; preds = %51
  call void bitcast (void (%struct.png_struct_def.60*)* @png_write_finish_row to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %225

57:                                               ; preds = %31
  %58 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %59 = load i32, i32* %58, align 4
  %60 = and i32 %59, 3
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %66, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %64 = load i32, i32* %63, align 8
  %65 = icmp ult i32 %64, 3
  br i1 %65, label %66, label %89

66:                                               ; preds = %62, %57
  call void bitcast (void (%struct.png_struct_def.60*)* @png_write_finish_row to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %225

67:                                               ; preds = %31
  %68 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %69 = load i32, i32* %68, align 4
  %70 = and i32 %69, 3
  %71 = icmp ne i32 %70, 2
  br i1 %71, label %72, label %89

72:                                               ; preds = %67
  call void bitcast (void (%struct.png_struct_def.60*)* @png_write_finish_row to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %225

73:                                               ; preds = %31
  %74 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %75 = load i32, i32* %74, align 4
  %76 = and i32 %75, 1
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %82, label %78

78:                                               ; preds = %73
  %79 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %80 = load i32, i32* %79, align 8
  %81 = icmp ult i32 %80, 2
  br i1 %81, label %82, label %89

82:                                               ; preds = %78, %73
  call void bitcast (void (%struct.png_struct_def.60*)* @png_write_finish_row to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %225

83:                                               ; preds = %31
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %85 = load i32, i32* %84, align 4
  %86 = and i32 %85, 1
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %83
  call void bitcast (void (%struct.png_struct_def.60*)* @png_write_finish_row to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %225

89:                                               ; preds = %35, %46, %51, %62, %67, %78, %83, %31, %26, %21
  %90 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 61
  %91 = load i8, i8* %90, align 1
  %92 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 2
  store i8 %91, i8* %92, align 8
  %93 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 40
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 0
  store i32 %94, i32* %95, align 8
  %96 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 66
  %97 = load i8, i8* %96, align 4
  %98 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 4
  store i8 %97, i8* %98, align 2
  %99 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 63
  %100 = load i8, i8* %99, align 1
  %101 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 3
  store i8 %100, i8* %101, align 1
  %102 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 3
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 4
  %106 = load i8, i8* %105, align 2
  %107 = zext i8 %106 to i32
  %108 = mul nsw i32 %104, %107
  %109 = trunc i32 %108 to i8
  %110 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 5
  store i8 %109, i8* %110, align 1
  %111 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 5
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = icmp sge i32 %113, 8
  br i1 %114, label %115, label %124

115:                                              ; preds = %89
  %116 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 5
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i64
  %122 = lshr i64 %121, 3
  %123 = mul i64 %118, %122
  br label %134

124:                                              ; preds = %89
  %125 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 0
  %126 = load i32, i32* %125, align 8
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 5
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i64
  %131 = mul i64 %127, %130
  %132 = add i64 %131, 7
  %133 = lshr i64 %132, 3
  br label %134

134:                                              ; preds = %124, %115
  %135 = phi i64 [ %123, %115 ], [ %133, %124 ]
  %136 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 1
  store i64 %135, i64* %136, align 8
  %137 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %138 = load i8*, i8** %137, align 8
  %139 = getelementptr inbounds i8, i8* %138, i64 1
  %140 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 1
  %141 = load i64, i64* %140, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %139, i8* align 1 %1, i64 %141, i1 false)
  %142 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 58
  %143 = load i8, i8* %142, align 4
  %144 = zext i8 %143 to i32
  %145 = icmp ne i32 %144, 0
  br i1 %145, label %146, label %167

146:                                              ; preds = %134
  %147 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = icmp slt i32 %149, 6
  br i1 %150, label %151, label %167

151:                                              ; preds = %146
  %152 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %153 = load i32, i32* %152, align 4
  %154 = and i32 %153, 2
  %155 = icmp ne i32 %154, 0
  br i1 %155, label %156, label %167

156:                                              ; preds = %151
  %157 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %158 = load i8*, i8** %157, align 8
  %159 = getelementptr inbounds i8, i8* %158, i64 1
  %160 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  call void @png_do_write_interlace(%struct.png_row_info_struct* %3, i8* %159, i32 %162)
  %163 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 0
  %164 = load i32, i32* %163, align 8
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %156
  call void bitcast (void (%struct.png_struct_def.60*)* @png_write_finish_row to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %225

167:                                              ; preds = %156, %151, %146, %134
  %168 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %169 = load i32, i32* %168, align 4
  %170 = icmp ne i32 %169, 0
  br i1 %170, label %171, label %172

171:                                              ; preds = %167
  call void @png_do_write_transformations(%struct.png_struct_def* %0, %struct.png_row_info_struct* %3)
  br label %172

172:                                              ; preds = %171, %167
  %173 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 5
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 64
  %177 = load i8, i8* %176, align 2
  %178 = zext i8 %177 to i32
  %179 = icmp ne i32 %175, %178
  br i1 %179, label %188, label %180

180:                                              ; preds = %172
  %181 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 5
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 69
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = icmp ne i32 %183, %186
  br i1 %187, label %188, label %189

188:                                              ; preds = %180, %172
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6.515, i32 0, i32 0)) #24
  unreachable

189:                                              ; preds = %180
  %190 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 122
  %191 = load i32, i32* %190, align 8
  %192 = and i32 %191, 4
  %193 = icmp ne i32 %192, 0
  br i1 %193, label %194, label %203

194:                                              ; preds = %189
  %195 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 123
  %196 = load i8, i8* %195, align 4
  %197 = zext i8 %196 to i32
  %198 = icmp eq i32 %197, 64
  br i1 %198, label %199, label %203

199:                                              ; preds = %194
  %200 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %201 = load i8*, i8** %200, align 8
  %202 = getelementptr inbounds i8, i8* %201, i64 1
  call void @png_do_write_intrapixel(%struct.png_row_info_struct* %3, i8* %202)
  br label %203

203:                                              ; preds = %199, %194, %189
  %204 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i32 0, i32 2
  %205 = load i8, i8* %204, align 8
  %206 = zext i8 %205 to i32
  %207 = icmp eq i32 %206, 3
  br i1 %207, label %208, label %213

208:                                              ; preds = %203
  %209 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 54
  %210 = load i32, i32* %209, align 4
  %211 = icmp sge i32 %210, 0
  br i1 %211, label %212, label %213

212:                                              ; preds = %208
  call void bitcast (void (%struct.png_struct_def.199*, %struct.png_row_info_struct*)* @png_do_check_palette_indexes to void (%struct.png_struct_def*, %struct.png_row_info_struct*)*)(%struct.png_struct_def* %0, %struct.png_row_info_struct* %3)
  br label %213

213:                                              ; preds = %212, %208, %203
  call void bitcast (void (%struct.png_struct_def.60*, %struct.png_row_info_struct*)* @png_write_find_filter to void (%struct.png_struct_def*, %struct.png_row_info_struct*)*)(%struct.png_struct_def* %0, %struct.png_row_info_struct* %3)
  %214 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 92
  %215 = load void (%struct.png_struct_def*, i32, i32)*, void (%struct.png_struct_def*, i32, i32)** %214, align 8
  %216 = icmp ne void (%struct.png_struct_def*, i32, i32)* %215, null
  br i1 %216, label %217, label %225

217:                                              ; preds = %213
  %218 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 92
  %219 = load void (%struct.png_struct_def*, i32, i32)*, void (%struct.png_struct_def*, i32, i32)** %218, align 8
  %220 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %221 = load i32, i32* %220, align 4
  %222 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 59
  %223 = load i8, i8* %222, align 1
  %224 = zext i8 %223 to i32
  call void %219(%struct.png_struct_def* %0, i32 %221, i32 %224)
  br label %225

225:                                              ; preds = %2, %40, %50, %56, %66, %72, %82, %88, %166, %217, %213
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_start_row(%struct.png_struct_def.60* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 66
  %3 = load i8, i8* %2, align 4
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 63
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = mul nsw i32 %4, %7
  %9 = icmp sge i32 %8, 8
  br i1 %9, label %10, label %17

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 37
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = sext i32 %8 to i64
  %15 = lshr i64 %14, 3
  %16 = mul i64 %13, %15
  br label %25

17:                                               ; preds = %1
  %18 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 37
  %19 = load i32, i32* %18, align 8
  %20 = zext i32 %19 to i64
  %21 = sext i32 %8 to i64
  %22 = mul i64 %20, %21
  %23 = add i64 %22, 7
  %24 = lshr i64 %23, 3
  br label %25

25:                                               ; preds = %17, %10
  %26 = phi i64 [ %16, %10 ], [ %24, %17 ]
  %27 = add i64 %26, 1
  %28 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 64
  %29 = load i8, i8* %28, align 2
  %30 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 69
  store i8 %29, i8* %30, align 1
  %31 = trunc i32 %8 to i8
  %32 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 68
  store i8 %31, i8* %32, align 2
  %33 = call noalias i8* @png_malloc(%struct.png_struct_def.60* %0, i64 %27)
  %34 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  store i8* %33, i8** %34, align 8
  %35 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 0
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 60
  %39 = load i8, i8* %38, align 2
  %40 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 38
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 1
  %43 = zext i8 %39 to i32
  %44 = and i32 %43, 31
  %45 = trunc i32 %44 to i8
  %.01 = select i1 %42, i8 %45, i8 %39
  %46 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 37
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %47, 1
  %49 = zext i8 %.01 to i32
  %50 = and i32 %49, 47
  %51 = trunc i32 %50 to i8
  %.12 = select i1 %48, i8 %51, i8 %.01
  %52 = zext i8 %.12 to i32
  %53 = icmp eq i32 %52, 0
  %.23 = select i1 %53, i8 8, i8 %.12
  %54 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 60
  store i8 %.23, i8* %54, align 2
  %55 = zext i8 %.23 to i32
  %56 = and i32 %55, 240
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %85

58:                                               ; preds = %25
  %59 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %60 = load i8*, i8** %59, align 8
  %61 = icmp eq i8* %60, null
  br i1 %61, label %62, label %85

62:                                               ; preds = %58
  %63 = call noalias i8* @png_malloc(%struct.png_struct_def.60* %0, i64 %27)
  %64 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  store i8* %63, i8** %64, align 8
  %65 = zext i8 %.23 to i32
  %66 = and i32 %65, 16
  %67 = icmp ne i32 %66, 0
  %68 = add nsw i32 0, 1
  %spec.select = select i1 %67, i32 %68, i32 0
  %69 = zext i8 %.23 to i32
  %70 = and i32 %69, 32
  %71 = icmp ne i32 %70, 0
  %72 = add nsw i32 %spec.select, 1
  %.1 = select i1 %71, i32 %72, i32 %spec.select
  %73 = zext i8 %.23 to i32
  %74 = and i32 %73, 64
  %75 = icmp ne i32 %74, 0
  %76 = add nsw i32 %.1, 1
  %.2 = select i1 %75, i32 %76, i32 %.1
  %77 = zext i8 %.23 to i32
  %78 = and i32 %77, 128
  %79 = icmp ne i32 %78, 0
  %80 = add nsw i32 %.2, 1
  %.3 = select i1 %79, i32 %80, i32 %.2
  %81 = icmp sgt i32 %.3, 1
  br i1 %81, label %82, label %85

82:                                               ; preds = %62
  %83 = call noalias i8* @png_malloc(%struct.png_struct_def.60* %0, i64 %27)
  %84 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 48
  store i8* %83, i8** %84, align 8
  br label %85

85:                                               ; preds = %62, %82, %58, %25
  %86 = zext i8 %.23 to i32
  %87 = and i32 %86, 224
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %89, label %92

89:                                               ; preds = %85
  %90 = call noalias i8* @png_calloc(%struct.png_struct_def.60* %0, i64 %27)
  %91 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 45
  store i8* %90, i8** %91, align 8
  br label %92

92:                                               ; preds = %89, %85
  %93 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 58
  %94 = load i8, i8* %93, align 4
  %95 = zext i8 %94 to i32
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %136

97:                                               ; preds = %92
  %98 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 17
  %99 = load i32, i32* %98, align 4
  %100 = and i32 %99, 2
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %129

102:                                              ; preds = %97
  %103 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 38
  %104 = load i32, i32* %103, align 4
  %105 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @png_write_start_row.png_pass_yinc, i64 0, i64 0), align 1
  %106 = zext i8 %105 to i32
  %107 = add i32 %104, %106
  %108 = sub i32 %107, 1
  %109 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @png_write_start_row.png_pass_ystart, i64 0, i64 0), align 1
  %110 = zext i8 %109 to i32
  %111 = sub i32 %108, %110
  %112 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @png_write_start_row.png_pass_yinc, i64 0, i64 0), align 1
  %113 = zext i8 %112 to i32
  %114 = udiv i32 %111, %113
  %115 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 39
  store i32 %114, i32* %115, align 8
  %116 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 37
  %117 = load i32, i32* %116, align 8
  %118 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @png_write_start_row.png_pass_inc, i64 0, i64 0), align 1
  %119 = zext i8 %118 to i32
  %120 = add i32 %117, %119
  %121 = sub i32 %120, 1
  %122 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @png_write_start_row.png_pass_start, i64 0, i64 0), align 1
  %123 = zext i8 %122 to i32
  %124 = sub i32 %121, %123
  %125 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @png_write_start_row.png_pass_inc, i64 0, i64 0), align 1
  %126 = zext i8 %125 to i32
  %127 = udiv i32 %124, %126
  %128 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 40
  store i32 %127, i32* %128, align 4
  br label %143

129:                                              ; preds = %97
  %130 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 38
  %131 = load i32, i32* %130, align 4
  %132 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 39
  store i32 %131, i32* %132, align 8
  %133 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 37
  %134 = load i32, i32* %133, align 8
  %135 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 40
  store i32 %134, i32* %135, align 4
  br label %143

136:                                              ; preds = %92
  %137 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 38
  %138 = load i32, i32* %137, align 4
  %139 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 39
  store i32 %138, i32* %139, align 8
  %140 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 37
  %141 = load i32, i32* %140, align 8
  %142 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 40
  store i32 %141, i32* %142, align 4
  br label %143

143:                                              ; preds = %102, %129, %136
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_finish_row(%struct.png_struct_def.60* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 43
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* %2, align 4
  %5 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 43
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 39
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %6, %8
  br i1 %9, label %146, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 58
  %12 = load i8, i8* %11, align 4
  %13 = zext i8 %12 to i32
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %145

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 43
  store i32 0, i32* %16, align 4
  %17 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 17
  %18 = load i32, i32* %17, align 4
  %19 = and i32 %18, 2
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %40, label %.critedge.preheader

.critedge.preheader:                              ; preds = %15
  %21 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 37
  %22 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 39
  %23 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 59
  %24 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 59
  %25 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 59
  %26 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 59
  %27 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 59
  %28 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 40
  %29 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 38
  %30 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 59
  %31 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 59
  %32 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 59
  %33 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 39
  %34 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 17
  %35 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 40
  %.promoted = load i8, i8* %23, align 1
  %36 = add i8 %.promoted, 1
  %37 = zext i8 %36 to i32
  %38 = icmp sge i32 %37, 7
  br i1 %38, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %.critedge.preheader
  %39 = trunc i32 7 to i8
  br label %44

40:                                               ; preds = %15
  %41 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 59
  %42 = load i8, i8* %41, align 1
  %43 = add i8 %42, 1
  store i8 %43, i8* %41, align 1
  br label %93

44:                                               ; preds = %.lr.ph, %.critedge.backedge
  %45 = phi i8 [ %36, %.lr.ph ], [ %90, %.critedge.backedge ]
  %46 = load i32, i32* %21, align 8
  %47 = zext i8 %45 to i64
  %48 = getelementptr inbounds [7 x i8], [7 x i8]* @png_write_finish_row.png_pass_inc, i64 0, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = add i32 %46, %50
  %52 = sub i32 %51, 1
  %53 = zext i8 %45 to i64
  %54 = getelementptr inbounds [7 x i8], [7 x i8]* @png_write_finish_row.png_pass_start, i64 0, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = sub i32 %52, %56
  %58 = zext i8 %45 to i64
  %59 = getelementptr inbounds [7 x i8], [7 x i8]* @png_write_finish_row.png_pass_inc, i64 0, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = udiv i32 %57, %61
  store i32 %62, i32* %28, align 4
  %63 = load i32, i32* %29, align 4
  %64 = zext i8 %45 to i64
  %65 = getelementptr inbounds [7 x i8], [7 x i8]* @png_write_finish_row.png_pass_yinc, i64 0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = add i32 %63, %67
  %69 = sub i32 %68, 1
  %70 = zext i8 %45 to i64
  %71 = getelementptr inbounds [7 x i8], [7 x i8]* @png_write_finish_row.png_pass_ystart, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = sub i32 %69, %73
  %75 = zext i8 %45 to i64
  %76 = getelementptr inbounds [7 x i8], [7 x i8]* @png_write_finish_row.png_pass_yinc, i64 0, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = udiv i32 %74, %78
  store i32 %79, i32* %33, align 8
  %80 = load i32, i32* %34, align 4
  %81 = and i32 %80, 2
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %..loopexit_crit_edge, label %83

83:                                               ; preds = %44
  %84 = load i32, i32* %35, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %.critedge.backedge, label %86

86:                                               ; preds = %83
  %87 = load i32, i32* %22, align 8
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %.critedge.backedge, label %..loopexit_crit_edge2

.critedge.backedge:                               ; preds = %86, %83
  %89 = phi i8 [ %45, %86 ], [ %45, %83 ]
  %90 = add i8 %89, 1
  %91 = icmp uge i8 %90, %39
  br i1 %91, label %.critedge..loopexit_crit_edge, label %44

..loopexit_crit_edge:                             ; preds = %44
  %split = phi i8 [ %45, %44 ]
  br label %.loopexit

.critedge..loopexit_crit_edge:                    ; preds = %.critedge.backedge
  %split1 = phi i8 [ %90, %.critedge.backedge ]
  br label %.loopexit

..loopexit_crit_edge2:                            ; preds = %86
  %split3 = phi i8 [ %45, %86 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge2, %.critedge..loopexit_crit_edge, %..loopexit_crit_edge, %.critedge.preheader
  %92 = phi i8 [ %split, %..loopexit_crit_edge ], [ %split1, %.critedge..loopexit_crit_edge ], [ %split3, %..loopexit_crit_edge2 ], [ %36, %.critedge.preheader ]
  store i8 %92, i8* %23, align 1
  br label %93

93:                                               ; preds = %.loopexit, %40
  %94 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 59
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = icmp slt i32 %96, 7
  br i1 %97, label %98, label %145

98:                                               ; preds = %93
  %99 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 45
  %100 = load i8*, i8** %99, align 8
  %101 = icmp ne i8* %100, null
  br i1 %101, label %102, label %146

102:                                              ; preds = %98
  %103 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 45
  %104 = load i8*, i8** %103, align 8
  %105 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 66
  %106 = load i8, i8* %105, align 4
  %107 = zext i8 %106 to i32
  %108 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 63
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = mul nsw i32 %107, %110
  %112 = icmp sge i32 %111, 8
  br i1 %112, label %113, label %127

113:                                              ; preds = %102
  %114 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 37
  %115 = load i32, i32* %114, align 8
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 66
  %118 = load i8, i8* %117, align 4
  %119 = zext i8 %118 to i32
  %120 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 63
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = mul nsw i32 %119, %122
  %124 = sext i32 %123 to i64
  %125 = lshr i64 %124, 3
  %126 = mul i64 %116, %125
  br label %142

127:                                              ; preds = %102
  %128 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 37
  %129 = load i32, i32* %128, align 8
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 66
  %132 = load i8, i8* %131, align 4
  %133 = zext i8 %132 to i32
  %134 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 63
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = mul nsw i32 %133, %136
  %138 = sext i32 %137 to i64
  %139 = mul i64 %130, %138
  %140 = add i64 %139, 7
  %141 = lshr i64 %140, 3
  br label %142

142:                                              ; preds = %127, %113
  %143 = phi i64 [ %126, %113 ], [ %141, %127 ]
  %144 = add i64 %143, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %104, i8 0, i64 %144, i1 false)
  br label %146

145:                                              ; preds = %93, %10
  call void @png_compress_IDAT(%struct.png_struct_def.60* %0, i8* null, i64 0, i32 4)
  br label %146

146:                                              ; preds = %98, %142, %1, %145
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_do_write_interlace(%struct.png_row_info_struct* %0, i8* %1, i32 %2) #11 {
  %4 = icmp slt i32 %2, 6
  br i1 %4, label %5, label %195

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  switch i32 %8, label %122 [
    i32 1, label %9
    i32 2, label %46
    i32 4, label %84
  ]

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds [7 x i8], [7 x i8]* @png_do_write_interlace.png_pass_start, i64 0, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds [7 x i8], [7 x i8]* @png_do_write_interlace.png_pass_inc, i64 0, i64 %16
  %18 = icmp ult i32 %15, %11
  br i1 %18, label %.lr.ph28, label %42

.lr.ph28:                                         ; preds = %9
  br label %19

19:                                               ; preds = %.lr.ph28, %37
  %.0427 = phi i8* [ %1, %.lr.ph28 ], [ %.15, %37 ]
  %.0626 = phi i32 [ 7, %.lr.ph28 ], [ %.17, %37 ]
  %.0825 = phi i32 [ 0, %.lr.ph28 ], [ %.19, %37 ]
  %.01224 = phi i32 [ %15, %.lr.ph28 ], [ %40, %37 ]
  %20 = lshr i32 %.01224, 3
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %1, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = and i32 %.01224, 7
  %26 = sub nsw i32 7, %25
  %27 = ashr i32 %24, %26
  %28 = and i32 %27, 1
  %29 = shl i32 %28, %.0626
  %30 = or i32 %.0825, %29
  %31 = icmp eq i32 %.0626, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %19
  %33 = trunc i32 %30 to i8
  %34 = getelementptr inbounds i8, i8* %.0427, i32 1
  store i8 %33, i8* %.0427, align 1
  br label %37

35:                                               ; preds = %19
  %36 = add i32 %.0626, -1
  br label %37

37:                                               ; preds = %32, %35
  %.19 = phi i32 [ 0, %32 ], [ %30, %35 ]
  %.17 = phi i32 [ 7, %32 ], [ %36, %35 ]
  %.15 = phi i8* [ %34, %32 ], [ %.0427, %35 ]
  %38 = load i8, i8* %17, align 1
  %39 = zext i8 %38 to i32
  %40 = add i32 %.01224, %39
  %41 = icmp ult i32 %40, %11
  br i1 %41, label %19, label %._crit_edge

._crit_edge:                                      ; preds = %37
  %split = phi i32 [ %.19, %37 ]
  %split29 = phi i32 [ %.17, %37 ]
  %split30 = phi i8* [ %.15, %37 ]
  br label %42

42:                                               ; preds = %._crit_edge, %9
  %.08.lcssa = phi i32 [ %split, %._crit_edge ], [ 0, %9 ]
  %.06.lcssa = phi i32 [ %split29, %._crit_edge ], [ 7, %9 ]
  %.04.lcssa = phi i8* [ %split30, %._crit_edge ], [ %1, %9 ]
  %43 = icmp ne i32 %.06.lcssa, 7
  br i1 %43, label %44, label %149

44:                                               ; preds = %42
  %45 = trunc i32 %.08.lcssa to i8
  store i8 %45, i8* %.04.lcssa, align 1
  br label %149

46:                                               ; preds = %5
  %47 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %48 = load i32, i32* %47, align 8
  %49 = sext i32 %2 to i64
  %50 = getelementptr inbounds [7 x i8], [7 x i8]* @png_do_write_interlace.png_pass_start, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = sext i32 %2 to i64
  %54 = getelementptr inbounds [7 x i8], [7 x i8]* @png_do_write_interlace.png_pass_inc, i64 0, i64 %53
  %55 = icmp ult i32 %52, %48
  br i1 %55, label %.lr.ph36, label %80

.lr.ph36:                                         ; preds = %46
  br label %56

56:                                               ; preds = %.lr.ph36, %75
  %.01534 = phi i32 [ %52, %.lr.ph36 ], [ %78, %75 ]
  %.01633 = phi i8* [ %1, %.lr.ph36 ], [ %.117, %75 ]
  %.01832 = phi i32 [ 6, %.lr.ph36 ], [ %.119, %75 ]
  %.02031 = phi i32 [ 0, %.lr.ph36 ], [ %.121, %75 ]
  %57 = lshr i32 %.01534, 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %1, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = and i32 %.01534, 3
  %63 = sub nsw i32 3, %62
  %64 = shl i32 %63, 1
  %65 = ashr i32 %61, %64
  %66 = and i32 %65, 3
  %67 = shl i32 %66, %.01832
  %68 = or i32 %.02031, %67
  %69 = icmp eq i32 %.01832, 0
  br i1 %69, label %70, label %73

70:                                               ; preds = %56
  %71 = trunc i32 %68 to i8
  %72 = getelementptr inbounds i8, i8* %.01633, i32 1
  store i8 %71, i8* %.01633, align 1
  br label %75

73:                                               ; preds = %56
  %74 = sub i32 %.01832, 2
  br label %75

75:                                               ; preds = %70, %73
  %.121 = phi i32 [ 0, %70 ], [ %68, %73 ]
  %.119 = phi i32 [ 6, %70 ], [ %74, %73 ]
  %.117 = phi i8* [ %72, %70 ], [ %.01633, %73 ]
  %76 = load i8, i8* %54, align 1
  %77 = zext i8 %76 to i32
  %78 = add i32 %.01534, %77
  %79 = icmp ult i32 %78, %48
  br i1 %79, label %56, label %._crit_edge37

._crit_edge37:                                    ; preds = %75
  %split38 = phi i32 [ %.121, %75 ]
  %split39 = phi i32 [ %.119, %75 ]
  %split40 = phi i8* [ %.117, %75 ]
  br label %80

80:                                               ; preds = %._crit_edge37, %46
  %.020.lcssa = phi i32 [ %split38, %._crit_edge37 ], [ 0, %46 ]
  %.018.lcssa = phi i32 [ %split39, %._crit_edge37 ], [ 6, %46 ]
  %.016.lcssa = phi i8* [ %split40, %._crit_edge37 ], [ %1, %46 ]
  %81 = icmp ne i32 %.018.lcssa, 6
  br i1 %81, label %82, label %149

82:                                               ; preds = %80
  %83 = trunc i32 %.020.lcssa to i8
  store i8 %83, i8* %.016.lcssa, align 1
  br label %149

84:                                               ; preds = %5
  %85 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = sext i32 %2 to i64
  %88 = getelementptr inbounds [7 x i8], [7 x i8]* @png_do_write_interlace.png_pass_start, i64 0, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = sext i32 %2 to i64
  %92 = getelementptr inbounds [7 x i8], [7 x i8]* @png_do_write_interlace.png_pass_inc, i64 0, i64 %91
  %93 = icmp ult i32 %90, %86
  br i1 %93, label %.lr.ph46, label %118

.lr.ph46:                                         ; preds = %84
  br label %94

94:                                               ; preds = %.lr.ph46, %113
  %.0244 = phi i32 [ %90, %.lr.ph46 ], [ %116, %113 ]
  %.0343 = phi i32 [ 0, %.lr.ph46 ], [ %.1, %113 ]
  %.01042 = phi i32 [ 4, %.lr.ph46 ], [ %.111, %113 ]
  %.01341 = phi i8* [ %1, %.lr.ph46 ], [ %.114, %113 ]
  %95 = lshr i32 %.0244, 1
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds i8, i8* %1, i64 %96
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = and i32 %.0244, 1
  %101 = sub nsw i32 1, %100
  %102 = shl i32 %101, 2
  %103 = ashr i32 %99, %102
  %104 = and i32 %103, 15
  %105 = shl i32 %104, %.01042
  %106 = or i32 %.0343, %105
  %107 = icmp eq i32 %.01042, 0
  br i1 %107, label %108, label %111

108:                                              ; preds = %94
  %109 = trunc i32 %106 to i8
  %110 = getelementptr inbounds i8, i8* %.01341, i32 1
  store i8 %109, i8* %.01341, align 1
  br label %113

111:                                              ; preds = %94
  %112 = sub i32 %.01042, 4
  br label %113

113:                                              ; preds = %108, %111
  %.114 = phi i8* [ %110, %108 ], [ %.01341, %111 ]
  %.111 = phi i32 [ 4, %108 ], [ %112, %111 ]
  %.1 = phi i32 [ 0, %108 ], [ %106, %111 ]
  %114 = load i8, i8* %92, align 1
  %115 = zext i8 %114 to i32
  %116 = add i32 %.0244, %115
  %117 = icmp ult i32 %116, %86
  br i1 %117, label %94, label %._crit_edge47

._crit_edge47:                                    ; preds = %113
  %split48 = phi i8* [ %.114, %113 ]
  %split49 = phi i32 [ %.111, %113 ]
  %split50 = phi i32 [ %.1, %113 ]
  br label %118

118:                                              ; preds = %._crit_edge47, %84
  %.013.lcssa = phi i8* [ %split48, %._crit_edge47 ], [ %1, %84 ]
  %.010.lcssa = phi i32 [ %split49, %._crit_edge47 ], [ 4, %84 ]
  %.03.lcssa = phi i32 [ %split50, %._crit_edge47 ], [ 0, %84 ]
  %119 = icmp ne i32 %.010.lcssa, 4
  br i1 %119, label %120, label %149

120:                                              ; preds = %118
  %121 = trunc i32 %.03.lcssa to i8
  store i8 %121, i8* %.013.lcssa, align 1
  br label %149

122:                                              ; preds = %5
  %123 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %124 = load i32, i32* %123, align 8
  %125 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = ashr i32 %127, 3
  %129 = sext i32 %128 to i64
  %130 = sext i32 %2 to i64
  %131 = getelementptr inbounds [7 x i8], [7 x i8]* @png_do_write_interlace.png_pass_start, i64 0, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = sext i32 %2 to i64
  %135 = getelementptr inbounds [7 x i8], [7 x i8]* @png_do_write_interlace.png_pass_inc, i64 0, i64 %134
  %136 = icmp ult i32 %133, %124
  br i1 %136, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %122
  br label %137

137:                                              ; preds = %.lr.ph, %143
  %.023 = phi i32 [ %133, %.lr.ph ], [ %147, %143 ]
  %.0122 = phi i8* [ %1, %.lr.ph ], [ %144, %143 ]
  %138 = zext i32 %.023 to i64
  %139 = mul i64 %138, %129
  %140 = getelementptr inbounds i8, i8* %1, i64 %139
  %141 = icmp ne i8* %.0122, %140
  br i1 %141, label %142, label %143

142:                                              ; preds = %137
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %.0122, i8* align 1 %140, i64 %129, i1 false)
  br label %143

143:                                              ; preds = %142, %137
  %144 = getelementptr inbounds i8, i8* %.0122, i64 %129
  %145 = load i8, i8* %135, align 1
  %146 = zext i8 %145 to i32
  %147 = add i32 %.023, %146
  %148 = icmp ult i32 %147, %124
  br i1 %148, label %137, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %143
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %122
  br label %149

149:                                              ; preds = %.loopexit, %118, %120, %80, %82, %42, %44
  %150 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %151 = load i32, i32* %150, align 8
  %152 = sext i32 %2 to i64
  %153 = getelementptr inbounds [7 x i8], [7 x i8]* @png_do_write_interlace.png_pass_inc, i64 0, i64 %152
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = add i32 %151, %155
  %157 = sub i32 %156, 1
  %158 = sext i32 %2 to i64
  %159 = getelementptr inbounds [7 x i8], [7 x i8]* @png_do_write_interlace.png_pass_start, i64 0, i64 %158
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = sub i32 %157, %161
  %163 = sext i32 %2 to i64
  %164 = getelementptr inbounds [7 x i8], [7 x i8]* @png_do_write_interlace.png_pass_inc, i64 0, i64 %163
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = udiv i32 %162, %166
  %168 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  store i32 %167, i32* %168, align 8
  %169 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = icmp sge i32 %171, 8
  br i1 %172, label %173, label %182

173:                                              ; preds = %149
  %174 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %175 = load i32, i32* %174, align 8
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i64
  %180 = lshr i64 %179, 3
  %181 = mul i64 %176, %180
  br label %192

182:                                              ; preds = %149
  %183 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %184 = load i32, i32* %183, align 8
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i64
  %189 = mul i64 %185, %188
  %190 = add i64 %189, 7
  %191 = lshr i64 %190, 3
  br label %192

192:                                              ; preds = %182, %173
  %193 = phi i64 [ %181, %173 ], [ %191, %182 ]
  %194 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %193, i64* %194, align 8
  br label %195

195:                                              ; preds = %192, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_do_write_transformations(%struct.png_struct_def* noalias %0, %struct.png_row_info_struct* %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %110, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1048576
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %19

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 11
  %11 = load void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)*, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)** %10, align 8
  %12 = icmp ne void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)* %11, null
  br i1 %12, label %13, label %19

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 11
  %15 = load void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)*, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)** %14, align 8
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  call void %15(%struct.png_struct_def* %0, %struct.png_row_info_struct* %1, i8* %18)
  br label %19

19:                                               ; preds = %9, %13, %4
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, 32768
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %34

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, 128
  %31 = icmp ne i32 %30, 0
  %32 = xor i1 %31, true
  %33 = zext i1 %32 to i32
  call void @png_do_strip_channel(%struct.png_row_info_struct* %1, i8* %27, i32 %33)
  br label %34

34:                                               ; preds = %24, %19
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %36 = load i32, i32* %35, align 4
  %37 = and i32 %36, 65536
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %43

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  call void @png_do_packswap(%struct.png_row_info_struct* %1, i8* %42)
  br label %43

43:                                               ; preds = %39, %34
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %45 = load i32, i32* %44, align 4
  %46 = and i32 %45, 4
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %55

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 1
  %52 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 62
  %53 = load i8, i8* %52, align 8
  %54 = zext i8 %53 to i32
  call void @png_do_pack(%struct.png_row_info_struct* %1, i8* %51, i32 %54)
  br label %55

55:                                               ; preds = %48, %43
  %56 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %57 = load i32, i32* %56, align 4
  %58 = and i32 %57, 16
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %60, label %64

60:                                               ; preds = %55
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 1
  call void @png_do_swap(%struct.png_row_info_struct* %1, i8* %63)
  br label %64

64:                                               ; preds = %60, %55
  %65 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %66 = load i32, i32* %65, align 4
  %67 = and i32 %66, 8
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %69, label %74

69:                                               ; preds = %64
  %70 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 1
  %73 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 88
  call void @png_do_shift(%struct.png_row_info_struct* %1, i8* %72, %struct.png_color_8_struct* %73)
  br label %74

74:                                               ; preds = %69, %64
  %75 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %76 = load i32, i32* %75, align 4
  %77 = and i32 %76, 131072
  %78 = icmp ne i32 %77, 0
  br i1 %78, label %79, label %83

79:                                               ; preds = %74
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds i8, i8* %81, i64 1
  call void @png_do_write_swap_alpha(%struct.png_row_info_struct* %1, i8* %82)
  br label %83

83:                                               ; preds = %79, %74
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %85 = load i32, i32* %84, align 4
  %86 = and i32 %85, 524288
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %88, label %92

88:                                               ; preds = %83
  %89 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %90 = load i8*, i8** %89, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 1
  call void @png_do_write_invert_alpha(%struct.png_row_info_struct* %1, i8* %91)
  br label %92

92:                                               ; preds = %88, %83
  %93 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %94 = load i32, i32* %93, align 4
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %101

97:                                               ; preds = %92
  %98 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %99 = load i8*, i8** %98, align 8
  %100 = getelementptr inbounds i8, i8* %99, i64 1
  call void @png_do_bgr(%struct.png_row_info_struct* %1, i8* %100)
  br label %101

101:                                              ; preds = %97, %92
  %102 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %103 = load i32, i32* %102, align 4
  %104 = and i32 %103, 32
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %106, label %110

106:                                              ; preds = %101
  %107 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %108 = load i8*, i8** %107, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 1
  call void @png_do_invert(%struct.png_row_info_struct* %1, i8* %109)
  br label %110

110:                                              ; preds = %2, %106, %101
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_write_intrapixel(%struct.png_row_info_struct* %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %4 = load i8, i8* %3, align 8
  %5 = zext i8 %4 to i32
  %6 = and i32 %5, 2
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %94

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, 8
  br i1 %14, label %15, label %42

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %17 = load i8, i8* %16, align 8
  %18 = zext i8 %17 to i32
  %19 = icmp eq i32 %18, 2
  br i1 %19, label %25, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %22 = load i8, i8* %21, align 8
  %23 = zext i8 %22 to i32
  %24 = icmp eq i32 %23, 6
  br i1 %24, label %25, label %94

25:                                               ; preds = %20, %15
  %.02 = phi i32 [ 3, %15 ], [ 4, %20 ]
  %26 = sext i32 %.02 to i64
  %27 = icmp ult i32 0, %10
  br i1 %27, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %25
  %scevgep = getelementptr i8, i8* %1, i64 2
  br label %28

28:                                               ; preds = %.lr.ph, %28
  %lsr.iv12 = phi i8* [ %scevgep, %.lr.ph ], [ %41, %28 ]
  %lsr.iv = phi i32 [ %10, %.lr.ph ], [ %lsr.iv.next, %28 ]
  %lsr.iv1213 = bitcast i8* %lsr.iv12 to i1*
  %scevgep15 = getelementptr i8, i8* %lsr.iv12, i64 -2
  %29 = load i8, i8* %scevgep15, align 1
  %30 = zext i8 %29 to i32
  %scevgep16 = getelementptr i8, i8* %lsr.iv12, i64 -1
  %31 = load i8, i8* %scevgep16, align 1
  %32 = zext i8 %31 to i32
  %33 = sub nsw i32 %30, %32
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %scevgep15, align 1
  %35 = load i8, i8* %lsr.iv12, align 1
  %36 = zext i8 %35 to i32
  %scevgep17 = getelementptr i8, i8* %lsr.iv12, i64 -1
  %37 = load i8, i8* %scevgep17, align 1
  %38 = zext i8 %37 to i32
  %39 = sub nsw i32 %36, %38
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %lsr.iv12, align 1
  %lsr.iv.next = add i32 %lsr.iv, -1
  %scevgep14 = getelementptr i1, i1* %lsr.iv1213, i64 %26
  %41 = bitcast i1* %scevgep14 to i8*
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  br i1 %exitcond, label %28, label %..loopexit_crit_edge

42:                                               ; preds = %8
  %43 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = icmp eq i32 %45, 16
  br i1 %46, label %47, label %94

47:                                               ; preds = %42
  %48 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %49 = load i8, i8* %48, align 8
  %50 = zext i8 %49 to i32
  %51 = icmp eq i32 %50, 2
  br i1 %51, label %57, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %54 = load i8, i8* %53, align 8
  %55 = zext i8 %54 to i32
  %56 = icmp eq i32 %55, 6
  br i1 %56, label %57, label %94

57:                                               ; preds = %52, %47
  %.1 = phi i32 [ 6, %47 ], [ 8, %52 ]
  %58 = sext i32 %.1 to i64
  %59 = icmp ult i32 0, %10
  br i1 %59, label %.lr.ph10, label %.loopexit5

.lr.ph10:                                         ; preds = %57
  %scevgep20 = getelementptr i8, i8* %1, i64 5
  br label %60

60:                                               ; preds = %.lr.ph10, %60
  %lsr.iv21 = phi i8* [ %scevgep20, %.lr.ph10 ], [ %93, %60 ]
  %lsr.iv18 = phi i32 [ %10, %.lr.ph10 ], [ %lsr.iv.next19, %60 ]
  %lsr.iv2122 = bitcast i8* %lsr.iv21 to i1*
  %scevgep24 = getelementptr i8, i8* %lsr.iv21, i64 -5
  %61 = load i8, i8* %scevgep24, align 1
  %62 = zext i8 %61 to i32
  %63 = shl i32 %62, 8
  %scevgep25 = getelementptr i8, i8* %lsr.iv21, i64 -4
  %64 = load i8, i8* %scevgep25, align 1
  %65 = zext i8 %64 to i32
  %66 = or i32 %63, %65
  %scevgep26 = getelementptr i8, i8* %lsr.iv21, i64 -3
  %67 = load i8, i8* %scevgep26, align 1
  %68 = zext i8 %67 to i32
  %69 = shl i32 %68, 8
  %scevgep27 = getelementptr i8, i8* %lsr.iv21, i64 -2
  %70 = load i8, i8* %scevgep27, align 1
  %71 = zext i8 %70 to i32
  %72 = or i32 %69, %71
  %scevgep28 = getelementptr i8, i8* %lsr.iv21, i64 -1
  %73 = load i8, i8* %scevgep28, align 1
  %74 = zext i8 %73 to i32
  %75 = shl i32 %74, 8
  %76 = load i8, i8* %lsr.iv21, align 1
  %77 = zext i8 %76 to i32
  %78 = or i32 %75, %77
  %79 = sub i32 %66, %72
  %80 = zext i32 %79 to i64
  %81 = and i64 %80, 65535
  %82 = trunc i64 %81 to i32
  %83 = sub i32 %78, %72
  %84 = zext i32 %83 to i64
  %85 = and i64 %84, 65535
  %86 = trunc i64 %85 to i32
  %87 = lshr i32 %82, 8
  %88 = trunc i32 %87 to i8
  store i8 %88, i8* %scevgep24, align 1
  %89 = trunc i32 %82 to i8
  %scevgep29 = getelementptr i8, i8* %lsr.iv21, i64 -4
  store i8 %89, i8* %scevgep29, align 1
  %90 = lshr i32 %86, 8
  %91 = trunc i32 %90 to i8
  %scevgep30 = getelementptr i8, i8* %lsr.iv21, i64 -1
  store i8 %91, i8* %scevgep30, align 1
  %92 = trunc i32 %86 to i8
  store i8 %92, i8* %lsr.iv21, align 1
  %lsr.iv.next19 = add i32 %lsr.iv18, -1
  %scevgep23 = getelementptr i1, i1* %lsr.iv2122, i64 %58
  %93 = bitcast i1* %scevgep23 to i8*
  %exitcond11 = icmp ne i32 %lsr.iv.next19, 0
  br i1 %exitcond11, label %60, label %..loopexit5_crit_edge

..loopexit_crit_edge:                             ; preds = %28
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %25
  br label %94

..loopexit5_crit_edge:                            ; preds = %60
  br label %.loopexit5

.loopexit5:                                       ; preds = %..loopexit5_crit_edge, %57
  br label %94

94:                                               ; preds = %.loopexit5, %.loopexit, %42, %52, %20, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_find_filter(%struct.png_struct_def.60* noalias %0, %struct.png_row_info_struct* %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 60
  %4 = load i8, i8* %3, align 2
  %5 = zext i8 %4 to i32
  %6 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 5
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = add nsw i32 %10, 7
  %12 = ashr i32 %11, 3
  %13 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %16 = load i8*, i8** %15, align 8
  %17 = icmp ule i64 144115188075855871, %7
  br i1 %17, label %18, label %21

18:                                               ; preds = %2
  %19 = sub i32 0, %5
  %20 = and i32 %5, %19
  br label %37

21:                                               ; preds = %2
  %22 = and i32 %5, 8
  %23 = icmp ne i32 %22, 0
  %24 = icmp ne i32 %5, 8
  %or.cond = and i1 %23, %24
  br i1 %or.cond, label %25, label %37

25:                                               ; preds = %21
  %26 = getelementptr i8, i8* %14, i64 1
  %27 = icmp ult i64 0, %7
  br i1 %27, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %25
  br label %28

28:                                               ; preds = %.lr.ph, %28
  %.018 = phi i64 [ 0, %.lr.ph ], [ %36, %28 ]
  %.0117 = phi i64 [ 0, %.lr.ph ], [ %35, %28 ]
  %scevgep = getelementptr i8, i8* %26, i64 %.018
  %29 = load i8, i8* %scevgep, align 1
  %30 = zext i8 %29 to i32
  %31 = icmp ult i32 %30, 128
  %32 = sub i32 256, %30
  %33 = select i1 %31, i32 %30, i32 %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %.0117, %34
  %36 = add nuw i64 %.018, 1
  %exitcond = icmp ne i64 %7, %36
  br i1 %exitcond, label %28, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %28
  %split = phi i64 [ %35, %28 ]
  %split19 = phi i32 [ %5, %28 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %25
  %.16.ph = phi i64 [ %split, %..loopexit_crit_edge ], [ 0, %25 ]
  %.02.ph = phi i32 [ %split19, %..loopexit_crit_edge ], [ %5, %25 ]
  br label %37

37:                                               ; preds = %.loopexit, %21, %18
  %.16 = phi i64 [ -257, %18 ], [ -257, %21 ], [ %.16.ph, %.loopexit ]
  %.02 = phi i32 [ %20, %18 ], [ %5, %21 ], [ %.02.ph, %.loopexit ]
  %38 = icmp eq i32 %.02, 16
  br i1 %38, label %39, label %42

39:                                               ; preds = %37
  call void @png_setup_sub_row_only(%struct.png_struct_def.60* %0, i32 %12, i64 %7)
  %40 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %41 = load i8*, i8** %40, align 8
  br label %59

42:                                               ; preds = %37
  %43 = and i32 %.02, 16
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %45, label %59

45:                                               ; preds = %42
  %46 = call i64 @png_setup_sub_row(%struct.png_struct_def.60* %0, i32 %12, i64 %7, i64 %.16)
  %47 = icmp ult i64 %46, %.16
  br i1 %47, label %48, label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 48
  %52 = load i8*, i8** %51, align 8
  %53 = icmp ne i8* %52, null
  br i1 %53, label %54, label %59

54:                                               ; preds = %48
  %55 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 48
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  store i8* %56, i8** %57, align 8
  %58 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 48
  store i8* %50, i8** %58, align 8
  br label %59

59:                                               ; preds = %42, %48, %54, %45, %39
  %.49 = phi i64 [ %.16, %39 ], [ %.16, %42 ], [ %.16, %45 ], [ %46, %54 ], [ %46, %48 ]
  %.2 = phi i8* [ %41, %39 ], [ %16, %42 ], [ %16, %45 ], [ %50, %54 ], [ %50, %48 ]
  %60 = icmp eq i32 %.02, 32
  br i1 %60, label %61, label %64

61:                                               ; preds = %59
  call void @png_setup_up_row_only(%struct.png_struct_def.60* %0, i64 %7)
  %62 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %63 = load i8*, i8** %62, align 8
  br label %81

64:                                               ; preds = %59
  %65 = and i32 %.02, 32
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %67, label %81

67:                                               ; preds = %64
  %68 = call i64 @png_setup_up_row(%struct.png_struct_def.60* %0, i64 %7, i64 %.49)
  %69 = icmp ult i64 %68, %.49
  br i1 %69, label %70, label %81

70:                                               ; preds = %67
  %71 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 48
  %74 = load i8*, i8** %73, align 8
  %75 = icmp ne i8* %74, null
  br i1 %75, label %76, label %81

76:                                               ; preds = %70
  %77 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 48
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  store i8* %78, i8** %79, align 8
  %80 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 48
  store i8* %72, i8** %80, align 8
  br label %81

81:                                               ; preds = %64, %70, %76, %67, %61
  %.712 = phi i64 [ %.49, %61 ], [ %.49, %64 ], [ %.49, %67 ], [ %68, %76 ], [ %68, %70 ]
  %.5 = phi i8* [ %63, %61 ], [ %.2, %64 ], [ %.2, %67 ], [ %72, %76 ], [ %72, %70 ]
  %82 = icmp eq i32 %.02, 64
  br i1 %82, label %83, label %86

83:                                               ; preds = %81
  call void @png_setup_avg_row_only(%struct.png_struct_def.60* %0, i32 %12, i64 %7)
  %84 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %85 = load i8*, i8** %84, align 8
  br label %103

86:                                               ; preds = %81
  %87 = and i32 %.02, 64
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %89, label %103

89:                                               ; preds = %86
  %90 = call i64 @png_setup_avg_row(%struct.png_struct_def.60* %0, i32 %12, i64 %7, i64 %.712)
  %91 = icmp ult i64 %90, %.712
  br i1 %91, label %92, label %103

92:                                               ; preds = %89
  %93 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %94 = load i8*, i8** %93, align 8
  %95 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 48
  %96 = load i8*, i8** %95, align 8
  %97 = icmp ne i8* %96, null
  br i1 %97, label %98, label %103

98:                                               ; preds = %92
  %99 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 48
  %100 = load i8*, i8** %99, align 8
  %101 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  store i8* %100, i8** %101, align 8
  %102 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 48
  store i8* %94, i8** %102, align 8
  br label %103

103:                                              ; preds = %86, %92, %98, %89, %83
  %.1015 = phi i64 [ %.712, %83 ], [ %.712, %86 ], [ %.712, %89 ], [ %90, %98 ], [ %90, %92 ]
  %.8 = phi i8* [ %85, %83 ], [ %.5, %86 ], [ %.5, %89 ], [ %94, %98 ], [ %94, %92 ]
  %104 = icmp eq i32 %.02, 128
  br i1 %104, label %105, label %108

105:                                              ; preds = %103
  call void @png_setup_paeth_row_only(%struct.png_struct_def.60* %0, i32 %12, i64 %7)
  %106 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %107 = load i8*, i8** %106, align 8
  br label %125

108:                                              ; preds = %103
  %109 = and i32 %.02, 128
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %111, label %125

111:                                              ; preds = %108
  %112 = call i64 @png_setup_paeth_row(%struct.png_struct_def.60* %0, i32 %12, i64 %7, i64 %.1015)
  %113 = icmp ult i64 %112, %.1015
  br i1 %113, label %114, label %125

114:                                              ; preds = %111
  %115 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %116 = load i8*, i8** %115, align 8
  %117 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 48
  %118 = load i8*, i8** %117, align 8
  %119 = icmp ne i8* %118, null
  br i1 %119, label %120, label %125

120:                                              ; preds = %114
  %121 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 48
  %122 = load i8*, i8** %121, align 8
  %123 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  store i8* %122, i8** %123, align 8
  %124 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 48
  store i8* %116, i8** %124, align 8
  br label %125

125:                                              ; preds = %108, %114, %120, %111, %105
  %.11 = phi i8* [ %107, %105 ], [ %.8, %108 ], [ %.8, %111 ], [ %116, %120 ], [ %116, %114 ]
  %126 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i32 0, i32 1
  %127 = load i64, i64* %126, align 8
  %128 = add i64 %127, 1
  call void @png_write_filtered_row(%struct.png_struct_def.60* %0, i8* %.11, i64 %128)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_setup_sub_row_only(%struct.png_struct_def.60* noalias %0, i32 %1, i64 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 0
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 1
  %10 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  %13 = zext i32 %1 to i64
  %14 = icmp ult i64 0, %13
  br i1 %14, label %.lr.ph14, label %19

.lr.ph14:                                         ; preds = %3
  br label %15

15:                                               ; preds = %.lr.ph14, %15
  %lsr.iv21 = phi i64 [ %13, %.lr.ph14 ], [ %lsr.iv.next22, %15 ]
  %.0211 = phi i8* [ %12, %.lr.ph14 ], [ %18, %15 ]
  %.0410 = phi i8* [ %9, %.lr.ph14 ], [ %17, %15 ]
  %16 = load i8, i8* %.0410, align 1
  store i8 %16, i8* %.0211, align 1
  %17 = getelementptr inbounds i8, i8* %.0410, i32 1
  %18 = getelementptr inbounds i8, i8* %.0211, i32 1
  %lsr.iv.next22 = add nsw i64 %lsr.iv21, -1
  %exitcond18 = icmp ne i64 %lsr.iv.next22, 0
  br i1 %exitcond18, label %15, label %._crit_edge15

._crit_edge15:                                    ; preds = %15
  %split = phi i8* [ %17, %15 ]
  %split16 = phi i8* [ %18, %15 ]
  br label %19

19:                                               ; preds = %._crit_edge15, %3
  %.04.lcssa = phi i8* [ %split, %._crit_edge15 ], [ %9, %3 ]
  %.02.lcssa = phi i8* [ %split16, %._crit_edge15 ], [ %12, %3 ]
  %.0.lcssa = phi i64 [ %13, %._crit_edge15 ], [ 0, %3 ]
  %20 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr i8, i8* %21, i64 1
  %23 = icmp ult i64 %.0.lcssa, %2
  br i1 %23, label %.lr.ph, label %33

.lr.ph:                                           ; preds = %19
  %24 = sub i64 %2, %13
  br label %25

25:                                               ; preds = %.lr.ph, %25
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %25 ]
  %scevgep = getelementptr i8, i8* %22, i64 %lsr.iv
  %scevgep19 = getelementptr i8, i8* %.02.lcssa, i64 %lsr.iv
  %scevgep20 = getelementptr i8, i8* %.04.lcssa, i64 %lsr.iv
  %26 = load i8, i8* %scevgep20, align 1
  %27 = zext i8 %26 to i32
  %28 = load i8, i8* %scevgep, align 1
  %29 = zext i8 %28 to i32
  %30 = sub nsw i32 %27, %29
  %31 = and i32 %30, 255
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %scevgep19, align 1
  %lsr.iv.next = add nuw i64 %lsr.iv, 1
  %exitcond = icmp ne i64 %24, %lsr.iv.next
  br i1 %exitcond, label %25, label %._crit_edge

._crit_edge:                                      ; preds = %25
  br label %33

33:                                               ; preds = %._crit_edge, %19
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @png_setup_sub_row(%struct.png_struct_def.60* noalias %0, i32 %1, i64 %2, i64 %3) #11 {
  %5 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 0
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 1
  %11 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  %14 = zext i32 %1 to i64
  %15 = icmp ult i64 0, %14
  br i1 %15, label %.lr.ph20, label %26

.lr.ph20:                                         ; preds = %4
  br label %16

16:                                               ; preds = %.lr.ph20, %16
  %lsr.iv29 = phi i64 [ %14, %.lr.ph20 ], [ %lsr.iv.next30, %16 ]
  %.018 = phi i64 [ 0, %.lr.ph20 ], [ %23, %16 ]
  %.0416 = phi i8* [ %10, %.lr.ph20 ], [ %24, %16 ]
  %.0615 = phi i8* [ %13, %.lr.ph20 ], [ %25, %16 ]
  %17 = load i8, i8* %.0416, align 1
  store i8 %17, i8* %.0615, align 1
  %18 = zext i8 %17 to i32
  %19 = icmp ult i32 %18, 128
  %20 = sub i32 256, %18
  %21 = select i1 %19, i32 %18, i32 %20
  %22 = zext i32 %21 to i64
  %23 = add i64 %.018, %22
  %24 = getelementptr inbounds i8, i8* %.0416, i32 1
  %25 = getelementptr inbounds i8, i8* %.0615, i32 1
  %lsr.iv.next30 = add nsw i64 %lsr.iv29, -1
  %exitcond26 = icmp ne i64 %lsr.iv.next30, 0
  br i1 %exitcond26, label %16, label %._crit_edge21

._crit_edge21:                                    ; preds = %16
  %split22 = phi i8* [ %25, %16 ]
  %split23 = phi i8* [ %24, %16 ]
  %split25 = phi i64 [ %23, %16 ]
  br label %26

26:                                               ; preds = %._crit_edge21, %4
  %.06.lcssa = phi i8* [ %split22, %._crit_edge21 ], [ %13, %4 ]
  %.04.lcssa = phi i8* [ %split23, %._crit_edge21 ], [ %10, %4 ]
  %.01.lcssa = phi i64 [ %14, %._crit_edge21 ], [ 0, %4 ]
  %.0.lcssa = phi i64 [ %split25, %._crit_edge21 ], [ 0, %4 ]
  %27 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr i8, i8* %28, i64 1
  %30 = icmp ult i64 %.01.lcssa, %2
  br i1 %30, label %.lr.ph, label %48

.lr.ph:                                           ; preds = %26
  %31 = sub i64 %2, %14
  br label %32

32:                                               ; preds = %.lr.ph, %47
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %47 ]
  %.112 = phi i64 [ %.0.lcssa, %.lr.ph ], [ %45, %47 ]
  %scevgep = getelementptr i8, i8* %29, i64 %lsr.iv
  %scevgep27 = getelementptr i8, i8* %.04.lcssa, i64 %lsr.iv
  %scevgep28 = getelementptr i8, i8* %.06.lcssa, i64 %lsr.iv
  %33 = load i8, i8* %scevgep27, align 1
  %34 = zext i8 %33 to i32
  %35 = load i8, i8* %scevgep, align 1
  %36 = zext i8 %35 to i32
  %37 = sub nsw i32 %34, %36
  %38 = and i32 %37, 255
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %scevgep28, align 1
  %40 = zext i8 %39 to i32
  %41 = icmp ult i32 %40, 128
  %42 = sub i32 256, %40
  %43 = select i1 %41, i32 %40, i32 %42
  %44 = zext i32 %43 to i64
  %45 = add i64 %.112, %44
  %46 = icmp ugt i64 %45, %3
  br i1 %46, label %._crit_edge, label %47

47:                                               ; preds = %32
  %lsr.iv.next = add nuw i64 %lsr.iv, 1
  %exitcond = icmp ne i64 %31, %lsr.iv.next
  br i1 %exitcond, label %32, label %._crit_edge13

._crit_edge:                                      ; preds = %32
  %split = phi i64 [ %45, %32 ]
  br label %48

._crit_edge13:                                    ; preds = %47
  %split14 = phi i64 [ %45, %47 ]
  br label %48

48:                                               ; preds = %._crit_edge13, %._crit_edge, %26
  %.2 = phi i64 [ %split14, %._crit_edge13 ], [ %split, %._crit_edge ], [ %.0.lcssa, %26 ]
  ret i64 %.2
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_setup_up_row_only(%struct.png_struct_def.60* noalias %0, i64 %1) #11 {
  %3 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 0
  store i8 2, i8* %5, align 1
  %6 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr i8, i8* %7, i64 1
  %9 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr i8, i8* %10, i64 1
  %12 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 45
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr i8, i8* %13, i64 1
  %15 = icmp ult i64 0, %1
  br i1 %15, label %.lr.ph, label %25

.lr.ph:                                           ; preds = %2
  br label %16

16:                                               ; preds = %.lr.ph, %16
  %.07 = phi i64 [ 0, %.lr.ph ], [ %24, %16 ]
  %scevgep = getelementptr i8, i8* %14, i64 %.07
  %scevgep8 = getelementptr i8, i8* %8, i64 %.07
  %scevgep9 = getelementptr i8, i8* %11, i64 %.07
  %17 = load i8, i8* %scevgep8, align 1
  %18 = zext i8 %17 to i32
  %19 = load i8, i8* %scevgep, align 1
  %20 = zext i8 %19 to i32
  %21 = sub nsw i32 %18, %20
  %22 = and i32 %21, 255
  %23 = trunc i32 %22 to i8
  store i8 %23, i8* %scevgep9, align 1
  %24 = add nuw i64 %.07, 1
  %exitcond = icmp ne i64 %1, %24
  br i1 %exitcond, label %16, label %._crit_edge

._crit_edge:                                      ; preds = %16
  br label %25

25:                                               ; preds = %._crit_edge, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @png_setup_up_row(%struct.png_struct_def.60* noalias %0, i64 %1, i64 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 0
  store i8 2, i8* %6, align 1
  %7 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr i8, i8* %8, i64 1
  %10 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 1
  %13 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 45
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 1
  %16 = icmp ult i64 0, %1
  br i1 %16, label %.lr.ph, label %34

.lr.ph:                                           ; preds = %3
  br label %17

17:                                               ; preds = %.lr.ph, %32
  %.09 = phi i64 [ 0, %.lr.ph ], [ %30, %32 ]
  %.018 = phi i64 [ 0, %.lr.ph ], [ %33, %32 ]
  %scevgep = getelementptr i8, i8* %15, i64 %.018
  %scevgep12 = getelementptr i8, i8* %9, i64 %.018
  %scevgep13 = getelementptr i8, i8* %12, i64 %.018
  %18 = load i8, i8* %scevgep12, align 1
  %19 = zext i8 %18 to i32
  %20 = load i8, i8* %scevgep, align 1
  %21 = zext i8 %20 to i32
  %22 = sub nsw i32 %19, %21
  %23 = and i32 %22, 255
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %scevgep13, align 1
  %25 = zext i8 %24 to i32
  %26 = icmp ult i32 %25, 128
  %27 = sub i32 256, %25
  %28 = select i1 %26, i32 %25, i32 %27
  %29 = zext i32 %28 to i64
  %30 = add i64 %.09, %29
  %31 = icmp ugt i64 %30, %2
  br i1 %31, label %._crit_edge, label %32

32:                                               ; preds = %17
  %33 = add nuw i64 %.018, 1
  %exitcond = icmp ne i64 %1, %33
  br i1 %exitcond, label %17, label %._crit_edge10

._crit_edge:                                      ; preds = %17
  %split = phi i64 [ %30, %17 ]
  br label %34

._crit_edge10:                                    ; preds = %32
  %split11 = phi i64 [ %30, %32 ]
  br label %34

34:                                               ; preds = %._crit_edge10, %._crit_edge, %3
  %.1 = phi i64 [ %split11, %._crit_edge10 ], [ %split, %._crit_edge ], [ 0, %3 ]
  ret i64 %.1
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_setup_avg_row_only(%struct.png_struct_def.60* noalias %0, i32 %1, i64 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 0
  store i8 3, i8* %6, align 1
  %7 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 1
  %10 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  %13 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 45
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  %16 = icmp ult i32 0, %1
  br i1 %16, label %.lr.ph18, label %29

.lr.ph18:                                         ; preds = %3
  br label %17

17:                                               ; preds = %.lr.ph18, %17
  %lsr.iv26 = phi i32 [ %1, %.lr.ph18 ], [ %lsr.iv.next27, %17 ]
  %.0215 = phi i8* [ %15, %.lr.ph18 ], [ %21, %17 ]
  %.0414 = phi i8* [ %9, %.lr.ph18 ], [ %18, %17 ]
  %.0613 = phi i8* [ %12, %.lr.ph18 ], [ %28, %17 ]
  %18 = getelementptr inbounds i8, i8* %.0414, i32 1
  %19 = load i8, i8* %.0414, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %.0215, i32 1
  %22 = load i8, i8* %.0215, align 1
  %23 = zext i8 %22 to i32
  %24 = sdiv i32 %23, 2
  %25 = sub nsw i32 %20, %24
  %26 = and i32 %25, 255
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds i8, i8* %.0613, i32 1
  store i8 %27, i8* %.0613, align 1
  %lsr.iv.next27 = add i32 %lsr.iv26, -1
  %exitcond = icmp ne i32 %lsr.iv.next27, 0
  br i1 %exitcond, label %17, label %._crit_edge19

._crit_edge19:                                    ; preds = %17
  %split = phi i8* [ %28, %17 ]
  %split20 = phi i8* [ %18, %17 ]
  %split21 = phi i8* [ %21, %17 ]
  br label %29

29:                                               ; preds = %._crit_edge19, %3
  %.06.lcssa = phi i8* [ %split, %._crit_edge19 ], [ %12, %3 ]
  %.04.lcssa = phi i8* [ %split20, %._crit_edge19 ], [ %9, %3 ]
  %.02.lcssa = phi i8* [ %split21, %._crit_edge19 ], [ %15, %3 ]
  %.0.lcssa = phi i32 [ %1, %._crit_edge19 ], [ 0, %3 ]
  %30 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr i8, i8* %31, i64 1
  %33 = zext i32 %.0.lcssa to i64
  %34 = icmp ult i64 %33, %2
  br i1 %34, label %.lr.ph, label %52

.lr.ph:                                           ; preds = %29
  %35 = add i32 %.0.lcssa, 1
  %36 = zext i32 %35 to i64
  br label %37

37:                                               ; preds = %.lr.ph, %37
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %37 ]
  %scevgep = getelementptr i8, i8* %32, i64 %lsr.iv
  %scevgep23 = getelementptr i8, i8* %.02.lcssa, i64 %lsr.iv
  %scevgep24 = getelementptr i8, i8* %.04.lcssa, i64 %lsr.iv
  %scevgep25 = getelementptr i8, i8* %.06.lcssa, i64 %lsr.iv
  %38 = load i8, i8* %scevgep24, align 1
  %39 = zext i8 %38 to i32
  %40 = load i8, i8* %scevgep23, align 1
  %41 = zext i8 %40 to i32
  %42 = load i8, i8* %scevgep, align 1
  %43 = zext i8 %42 to i32
  %44 = add nsw i32 %41, %43
  %45 = sdiv i32 %44, 2
  %46 = sub nsw i32 %39, %45
  %47 = and i32 %46, 255
  %48 = trunc i32 %47 to i8
  store i8 %48, i8* %scevgep25, align 1
  %49 = add i64 %36, %lsr.iv
  %tmp = trunc i64 %49 to i32
  %50 = zext i32 %tmp to i64
  %51 = icmp ult i64 %50, %2
  %lsr.iv.next = add i64 %lsr.iv, 1
  br i1 %51, label %37, label %._crit_edge

._crit_edge:                                      ; preds = %37
  br label %52

52:                                               ; preds = %._crit_edge, %29
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @png_setup_avg_row(%struct.png_struct_def.60* noalias %0, i32 %1, i64 %2, i64 %3) #11 {
  %5 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 0
  store i8 3, i8* %7, align 1
  %8 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 1
  %11 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  %14 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 45
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  %17 = icmp ult i32 0, %1
  br i1 %17, label %.lr.ph24, label %36

.lr.ph24:                                         ; preds = %4
  br label %18

18:                                               ; preds = %.lr.ph24, %18
  %lsr.iv34 = phi i32 [ %1, %.lr.ph24 ], [ %lsr.iv.next35, %18 ]
  %.022 = phi i64 [ 0, %.lr.ph24 ], [ %35, %18 ]
  %.0420 = phi i8* [ %10, %.lr.ph24 ], [ %19, %18 ]
  %.0619 = phi i8* [ %13, %.lr.ph24 ], [ %29, %18 ]
  %.0818 = phi i8* [ %16, %.lr.ph24 ], [ %22, %18 ]
  %19 = getelementptr inbounds i8, i8* %.0420, i32 1
  %20 = load i8, i8* %.0420, align 1
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds i8, i8* %.0818, i32 1
  %23 = load i8, i8* %.0818, align 1
  %24 = zext i8 %23 to i32
  %25 = sdiv i32 %24, 2
  %26 = sub nsw i32 %21, %25
  %27 = and i32 %26, 255
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds i8, i8* %.0619, i32 1
  store i8 %28, i8* %.0619, align 1
  %30 = zext i8 %28 to i32
  %31 = icmp ult i32 %30, 128
  %32 = sub i32 256, %30
  %33 = select i1 %31, i32 %30, i32 %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %.022, %34
  %lsr.iv.next35 = add i32 %lsr.iv34, -1
  %exitcond = icmp ne i32 %lsr.iv.next35, 0
  br i1 %exitcond, label %18, label %._crit_edge25

._crit_edge25:                                    ; preds = %18
  %split26 = phi i8* [ %22, %18 ]
  %split27 = phi i8* [ %29, %18 ]
  %split28 = phi i8* [ %19, %18 ]
  %split30 = phi i64 [ %35, %18 ]
  br label %36

36:                                               ; preds = %._crit_edge25, %4
  %.08.lcssa = phi i8* [ %split26, %._crit_edge25 ], [ %16, %4 ]
  %.06.lcssa = phi i8* [ %split27, %._crit_edge25 ], [ %13, %4 ]
  %.04.lcssa = phi i8* [ %split28, %._crit_edge25 ], [ %10, %4 ]
  %.01.lcssa = phi i32 [ %1, %._crit_edge25 ], [ 0, %4 ]
  %.0.lcssa = phi i64 [ %split30, %._crit_edge25 ], [ 0, %4 ]
  %37 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr i8, i8* %38, i64 1
  %40 = zext i32 %.01.lcssa to i64
  %41 = icmp ult i64 %40, %2
  br i1 %41, label %.lr.ph, label %67

.lr.ph:                                           ; preds = %36
  %42 = add i32 %.01.lcssa, 1
  %43 = zext i32 %42 to i64
  br label %47

44:                                               ; preds = %47
  %.1 = phi i64 [ %64, %47 ]
  %tmp = trunc i64 %66 to i32
  %45 = zext i32 %tmp to i64
  %46 = icmp ult i64 %45, %2
  %lsr.iv.next = add i64 %lsr.iv, 1
  br i1 %46, label %47, label %._crit_edge16

47:                                               ; preds = %.lr.ph, %44
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %44 ]
  %.115 = phi i64 [ %.0.lcssa, %.lr.ph ], [ %.1, %44 ]
  %scevgep = getelementptr i8, i8* %39, i64 %lsr.iv
  %scevgep31 = getelementptr i8, i8* %.04.lcssa, i64 %lsr.iv
  %scevgep32 = getelementptr i8, i8* %.06.lcssa, i64 %lsr.iv
  %scevgep33 = getelementptr i8, i8* %.08.lcssa, i64 %lsr.iv
  %48 = load i8, i8* %scevgep31, align 1
  %49 = zext i8 %48 to i32
  %50 = load i8, i8* %scevgep33, align 1
  %51 = zext i8 %50 to i32
  %52 = load i8, i8* %scevgep, align 1
  %53 = zext i8 %52 to i32
  %54 = add nsw i32 %51, %53
  %55 = sdiv i32 %54, 2
  %56 = sub nsw i32 %49, %55
  %57 = and i32 %56, 255
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %scevgep32, align 1
  %59 = zext i8 %58 to i32
  %60 = icmp ult i32 %59, 128
  %61 = sub i32 256, %59
  %62 = select i1 %60, i32 %59, i32 %61
  %63 = zext i32 %62 to i64
  %64 = add i64 %.115, %63
  %65 = icmp ugt i64 %64, %3
  %66 = add i64 %43, %lsr.iv
  br i1 %65, label %._crit_edge, label %44

._crit_edge:                                      ; preds = %47
  %split = phi i64 [ %64, %47 ]
  br label %67

._crit_edge16:                                    ; preds = %44
  %split17 = phi i64 [ %.1, %44 ]
  br label %67

67:                                               ; preds = %._crit_edge16, %._crit_edge, %36
  %.2 = phi i64 [ %split17, %._crit_edge16 ], [ %split, %._crit_edge ], [ %.0.lcssa, %36 ]
  ret i64 %.2
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_setup_paeth_row_only(%struct.png_struct_def.60* noalias %0, i32 %1, i64 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 0
  store i8 4, i8* %6, align 1
  %7 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 1
  %10 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  %13 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 45
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 1
  %16 = zext i32 %1 to i64
  %17 = icmp ult i64 0, %16
  br i1 %17, label %.lr.ph20, label %29

.lr.ph20:                                         ; preds = %3
  br label %18

18:                                               ; preds = %.lr.ph20, %18
  %lsr.iv30 = phi i64 [ %16, %.lr.ph20 ], [ %lsr.iv.next31, %18 ]
  %.0117 = phi i8* [ %9, %.lr.ph20 ], [ %19, %18 ]
  %.0316 = phi i8* [ %12, %.lr.ph20 ], [ %28, %18 ]
  %.0515 = phi i8* [ %15, %.lr.ph20 ], [ %22, %18 ]
  %19 = getelementptr inbounds i8, i8* %.0117, i32 1
  %20 = load i8, i8* %.0117, align 1
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds i8, i8* %.0515, i32 1
  %23 = load i8, i8* %.0515, align 1
  %24 = zext i8 %23 to i32
  %25 = sub nsw i32 %21, %24
  %26 = and i32 %25, 255
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds i8, i8* %.0316, i32 1
  store i8 %27, i8* %.0316, align 1
  %lsr.iv.next31 = add nsw i64 %lsr.iv30, -1
  %exitcond25 = icmp ne i64 %lsr.iv.next31, 0
  br i1 %exitcond25, label %18, label %._crit_edge21

._crit_edge21:                                    ; preds = %18
  %split = phi i8* [ %22, %18 ]
  %split22 = phi i8* [ %28, %18 ]
  %split23 = phi i8* [ %19, %18 ]
  br label %29

29:                                               ; preds = %._crit_edge21, %3
  %.05.lcssa = phi i8* [ %split, %._crit_edge21 ], [ %15, %3 ]
  %.03.lcssa = phi i8* [ %split22, %._crit_edge21 ], [ %12, %3 ]
  %.01.lcssa = phi i8* [ %split23, %._crit_edge21 ], [ %9, %3 ]
  %.0.lcssa = phi i64 [ %16, %._crit_edge21 ], [ 0, %3 ]
  %30 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr i8, i8* %31, i64 1
  %33 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 45
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr i8, i8* %34, i64 1
  %36 = icmp ult i64 %.0.lcssa, %2
  br i1 %36, label %.lr.ph, label %68

.lr.ph:                                           ; preds = %29
  %37 = sub i64 %2, %16
  br label %38

38:                                               ; preds = %.lr.ph, %38
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %38 ]
  %scevgep = getelementptr i8, i8* %.01.lcssa, i64 %lsr.iv
  %scevgep26 = getelementptr i8, i8* %.03.lcssa, i64 %lsr.iv
  %scevgep27 = getelementptr i8, i8* %.05.lcssa, i64 %lsr.iv
  %scevgep28 = getelementptr i8, i8* %35, i64 %lsr.iv
  %scevgep29 = getelementptr i8, i8* %32, i64 %lsr.iv
  %39 = load i8, i8* %scevgep27, align 1
  %40 = zext i8 %39 to i32
  %41 = load i8, i8* %scevgep28, align 1
  %42 = zext i8 %41 to i32
  %43 = load i8, i8* %scevgep29, align 1
  %44 = zext i8 %43 to i32
  %45 = sub nsw i32 %40, %42
  %46 = sub nsw i32 %44, %42
  %47 = icmp slt i32 %45, 0
  %48 = sub nsw i32 0, %45
  %49 = select i1 %47, i32 %48, i32 %45
  %50 = icmp slt i32 %46, 0
  %51 = sub nsw i32 0, %46
  %52 = select i1 %50, i32 %51, i32 %46
  %53 = add nsw i32 %45, %46
  %54 = icmp slt i32 %53, 0
  %55 = add nsw i32 %45, %46
  %56 = sub nsw i32 0, %55
  %57 = add nsw i32 %45, %46
  %58 = select i1 %54, i32 %56, i32 %57
  %59 = icmp sle i32 %49, %52
  %60 = icmp sle i32 %49, %58
  %or.cond = select i1 %59, i1 %60, i1 false
  %61 = icmp sle i32 %52, %58
  %. = select i1 %61, i32 %40, i32 %42
  %62 = select i1 %or.cond, i32 %44, i32 %.
  %63 = load i8, i8* %scevgep, align 1
  %64 = zext i8 %63 to i32
  %65 = sub nsw i32 %64, %62
  %66 = and i32 %65, 255
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %scevgep26, align 1
  %lsr.iv.next = add nuw i64 %lsr.iv, 1
  %exitcond = icmp ne i64 %37, %lsr.iv.next
  br i1 %exitcond, label %38, label %._crit_edge

._crit_edge:                                      ; preds = %38
  br label %68

68:                                               ; preds = %._crit_edge, %29
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @png_setup_paeth_row(%struct.png_struct_def.60* noalias %0, i32 %1, i64 %2, i64 %3) #11 {
  %5 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 0
  store i8 4, i8* %7, align 1
  %8 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 1
  %11 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 47
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  %14 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 45
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  %17 = zext i32 %1 to i64
  %18 = icmp ult i64 0, %17
  br i1 %18, label %.lr.ph26, label %36

.lr.ph26:                                         ; preds = %4
  br label %19

19:                                               ; preds = %.lr.ph26, %19
  %lsr.iv38 = phi i64 [ %17, %.lr.ph26 ], [ %lsr.iv.next39, %19 ]
  %.024 = phi i64 [ 0, %.lr.ph26 ], [ %35, %19 ]
  %.0123 = phi i8* [ %10, %.lr.ph26 ], [ %20, %19 ]
  %.0322 = phi i8* [ %13, %.lr.ph26 ], [ %29, %19 ]
  %.0521 = phi i8* [ %16, %.lr.ph26 ], [ %23, %19 ]
  %20 = getelementptr inbounds i8, i8* %.0123, i32 1
  %21 = load i8, i8* %.0123, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i8, i8* %.0521, i32 1
  %24 = load i8, i8* %.0521, align 1
  %25 = zext i8 %24 to i32
  %26 = sub nsw i32 %22, %25
  %27 = and i32 %26, 255
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds i8, i8* %.0322, i32 1
  store i8 %28, i8* %.0322, align 1
  %30 = zext i8 %28 to i32
  %31 = icmp ult i32 %30, 128
  %32 = sub i32 256, %30
  %33 = select i1 %31, i32 %30, i32 %32
  %34 = zext i32 %33 to i64
  %35 = add i64 %.024, %34
  %lsr.iv.next39 = add nsw i64 %lsr.iv38, -1
  %exitcond33 = icmp ne i64 %lsr.iv.next39, 0
  br i1 %exitcond33, label %19, label %._crit_edge27

._crit_edge27:                                    ; preds = %19
  %split29 = phi i8* [ %23, %19 ]
  %split30 = phi i8* [ %29, %19 ]
  %split31 = phi i8* [ %20, %19 ]
  %split32 = phi i64 [ %35, %19 ]
  br label %36

36:                                               ; preds = %._crit_edge27, %4
  %.09.lcssa = phi i64 [ %17, %._crit_edge27 ], [ 0, %4 ]
  %.05.lcssa = phi i8* [ %split29, %._crit_edge27 ], [ %16, %4 ]
  %.03.lcssa = phi i8* [ %split30, %._crit_edge27 ], [ %13, %4 ]
  %.01.lcssa = phi i8* [ %split31, %._crit_edge27 ], [ %10, %4 ]
  %.0.lcssa = phi i64 [ %split32, %._crit_edge27 ], [ 0, %4 ]
  %37 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr i8, i8* %38, i64 1
  %40 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 45
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr i8, i8* %41, i64 1
  %43 = icmp ult i64 %.09.lcssa, %2
  br i1 %43, label %.lr.ph, label %83

.lr.ph:                                           ; preds = %36
  %44 = sub i64 %2, %17
  br label %46

45:                                               ; preds = %46
  %.1 = phi i64 [ %81, %46 ]
  %lsr.iv.next = add nuw i64 %lsr.iv, 1
  %exitcond = icmp ne i64 %44, %lsr.iv.next
  br i1 %exitcond, label %46, label %._crit_edge18

46:                                               ; preds = %.lr.ph, %45
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %45 ]
  %.117 = phi i64 [ %.0.lcssa, %.lr.ph ], [ %.1, %45 ]
  %scevgep = getelementptr i8, i8* %.01.lcssa, i64 %lsr.iv
  %scevgep34 = getelementptr i8, i8* %.03.lcssa, i64 %lsr.iv
  %scevgep35 = getelementptr i8, i8* %.05.lcssa, i64 %lsr.iv
  %scevgep36 = getelementptr i8, i8* %42, i64 %lsr.iv
  %scevgep37 = getelementptr i8, i8* %39, i64 %lsr.iv
  %47 = load i8, i8* %scevgep35, align 1
  %48 = zext i8 %47 to i32
  %49 = load i8, i8* %scevgep36, align 1
  %50 = zext i8 %49 to i32
  %51 = load i8, i8* %scevgep37, align 1
  %52 = zext i8 %51 to i32
  %53 = sub nsw i32 %48, %50
  %54 = sub nsw i32 %52, %50
  %55 = icmp slt i32 %53, 0
  %56 = sub nsw i32 0, %53
  %57 = select i1 %55, i32 %56, i32 %53
  %58 = icmp slt i32 %54, 0
  %59 = sub nsw i32 0, %54
  %60 = select i1 %58, i32 %59, i32 %54
  %61 = add nsw i32 %53, %54
  %62 = icmp slt i32 %61, 0
  %63 = add nsw i32 %53, %54
  %64 = sub nsw i32 0, %63
  %65 = add nsw i32 %53, %54
  %66 = select i1 %62, i32 %64, i32 %65
  %67 = icmp sle i32 %57, %60
  %68 = icmp sle i32 %57, %66
  %or.cond = select i1 %67, i1 %68, i1 false
  %69 = icmp sle i32 %60, %66
  %. = select i1 %69, i32 %48, i32 %50
  %70 = select i1 %or.cond, i32 %52, i32 %.
  %71 = load i8, i8* %scevgep, align 1
  %72 = zext i8 %71 to i32
  %73 = sub nsw i32 %72, %70
  %74 = and i32 %73, 255
  %75 = trunc i32 %74 to i8
  store i8 %75, i8* %scevgep34, align 1
  %76 = zext i8 %75 to i32
  %77 = icmp ult i32 %76, 128
  %78 = sub i32 256, %76
  %79 = select i1 %77, i32 %76, i32 %78
  %80 = zext i32 %79 to i64
  %81 = add i64 %.117, %80
  %82 = icmp ugt i64 %81, %3
  br i1 %82, label %._crit_edge, label %45

._crit_edge:                                      ; preds = %46
  %split = phi i64 [ %81, %46 ]
  br label %83

._crit_edge18:                                    ; preds = %45
  %split19 = phi i64 [ %.1, %45 ]
  br label %83

83:                                               ; preds = %._crit_edge18, %._crit_edge, %36
  %.2 = phi i64 [ %split19, %._crit_edge18 ], [ %split, %._crit_edge ], [ %.0.lcssa, %36 ]
  ret i64 %.2
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_write_filtered_row(%struct.png_struct_def.60* noalias %0, i8* %1, i64 %2) #11 {
  call void @png_compress_IDAT(%struct.png_struct_def.60* %0, i8* %1, i64 %2, i32 0)
  %4 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 45
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ne i8* %5, null
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 45
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 45
  store i8* %11, i8** %12, align 8
  %13 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 46
  store i8* %9, i8** %13, align 8
  br label %14

14:                                               ; preds = %7, %3
  call void @png_write_finish_row(%struct.png_struct_def.60* %0)
  %15 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 78
  %16 = load i32, i32* %15, align 4
  %17 = add i32 %16, 1
  store i32 %17, i32* %15, align 4
  %18 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 77
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %14
  %22 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 78
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 77
  %25 = load i32, i32* %24, align 8
  %26 = icmp uge i32 %23, %25
  br i1 %26, label %27, label %28

27:                                               ; preds = %21
  call void bitcast (void (%struct.png_struct_def*)* @png_write_flush to void (%struct.png_struct_def.60*)*)(%struct.png_struct_def.60* %0)
  br label %28

28:                                               ; preds = %27, %21, %14
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_compress_IDAT(%struct.png_struct_def.60* noalias %0, i8* %1, i64 %2, i32 %3) #11 {
  %5 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 18
  %6 = load i32, i32* %5, align 8
  %7 = icmp ne i32 %6, 1229209940
  br i1 %7, label %8, label %46

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 20
  %10 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %9, align 8
  %11 = icmp eq %struct.png_compression_buffer* %10, null
  br i1 %11, label %12, label %23

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 21
  %14 = load i32, i32* %13, align 8
  %15 = zext i32 %14 to i64
  %16 = add i64 8, %15
  %17 = call noalias i8* @png_malloc(%struct.png_struct_def.60* %0, i64 %16)
  %18 = bitcast i8* %17 to %struct.png_compression_buffer*
  %19 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 20
  store %struct.png_compression_buffer* %18, %struct.png_compression_buffer** %19, align 8
  %20 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 20
  %21 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %20, align 8
  %22 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %21, i32 0, i32 0
  store %struct.png_compression_buffer* null, %struct.png_compression_buffer** %22, align 8
  br label %27

23:                                               ; preds = %8
  %24 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 20
  %25 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %24, align 8
  %26 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %25, i32 0, i32 0
  call void @png_free_buffer_list(%struct.png_struct_def.60* %0, %struct.png_compression_buffer** %26)
  br label %27

27:                                               ; preds = %23, %12
  %28 = call i64 @png_image_size(%struct.png_struct_def.60* %0)
  %29 = call i32 @png_deflate_claim(%struct.png_struct_def.60* %0, i32 1229209940, i64 %28)
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %35

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %33 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %32, i32 0, i32 6
  %34 = load i8*, i8** %33, align 8
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* %34) #24
  unreachable

35:                                               ; preds = %27
  %36 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 20
  %37 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %36, align 8
  %38 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %37, i32 0, i32 1
  %39 = getelementptr inbounds [1 x i8], [1 x i8]* %38, i32 0, i32 0
  %40 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %41 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %40, i32 0, i32 3
  store i8* %39, i8** %41, align 8
  %42 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 21
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %45 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %44, i32 0, i32 4
  store i32 %43, i32* %45, align 8
  br label %46

46:                                               ; preds = %35, %4
  %47 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %48 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %47, i32 0, i32 0
  store i8* %1, i8** %48, align 8
  %49 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %50 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %49, i32 0, i32 1
  store i32 0, i32* %50, align 8
  %51 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %52 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %51, i32 0, i32 1
  %53 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %54 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %55 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %54, i32 0, i32 1
  %56 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %57 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %56, i32 0, i32 1
  %58 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %59 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %58, i32 0, i32 4
  %60 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 20
  %61 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 21
  %62 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 15
  %63 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 131
  %64 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 15
  %65 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %66 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %65, i32 0, i32 3
  %67 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %68 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %67, i32 0, i32 4
  %69 = icmp ne i32 %3, 0
  br label %70

70:                                               ; preds = %.backedge, %46
  %.01 = phi i64 [ %2, %46 ], [ %80, %.backedge ]
  %71 = icmp ugt i64 4294967295, %.01
  %72 = trunc i64 %.01 to i32
  %spec.select = select i1 %71, i32 %72, i32 -1
  store i32 %spec.select, i32* %52, align 8
  %73 = zext i32 %spec.select to i64
  %74 = sub i64 %.01, %73
  %75 = icmp ugt i64 %74, 0
  %76 = select i1 %75, i32 0, i32 %3
  %77 = call i32 @deflate(%struct.z_stream_s* %53, i32 %76)
  %78 = load i32, i32* %55, align 8
  %79 = zext i32 %78 to i64
  %80 = add i64 %74, %79
  store i32 0, i32* %57, align 8
  %81 = load i32, i32* %59, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %105

83:                                               ; preds = %70
  %84 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %60, align 8
  %85 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %84, i32 0, i32 1
  %86 = getelementptr inbounds [1 x i8], [1 x i8]* %85, i32 0, i32 0
  %87 = load i32, i32* %61, align 8
  %88 = load i32, i32* %62, align 4
  %89 = and i32 %88, 4
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %97

91:                                               ; preds = %83
  %92 = load i8, i8* %63, align 8
  %93 = zext i8 %92 to i32
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %97

95:                                               ; preds = %91
  %96 = call i64 @png_image_size(%struct.png_struct_def.60* %0)
  call void @optimize_cmf(i8* %86, i64 %96)
  br label %97

97:                                               ; preds = %95, %91, %83
  %98 = icmp ugt i32 %87, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %97
  %100 = zext i32 %87 to i64
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1229209940, i8* %86, i64 %100)
  br label %101

101:                                              ; preds = %99, %97
  %102 = load i32, i32* %64, align 4
  %103 = or i32 %102, 4
  store i32 %103, i32* %64, align 4
  store i8* %86, i8** %66, align 8
  store i32 %87, i32* %68, align 8
  %104 = icmp eq i32 %77, 0
  %or.cond = select i1 %104, i1 %69, i1 false
  br i1 %or.cond, label %.backedge, label %105

.backedge:                                        ; preds = %101, %106
  br label %70

105:                                              ; preds = %101, %70
  switch i32 %77, label %.loopexit [
    i32 0, label %106
    i32 1, label %111
  ]

106:                                              ; preds = %105
  %107 = icmp eq i64 %80, 0
  br i1 %107, label %108, label %.backedge

108:                                              ; preds = %106
  %109 = icmp eq i32 %3, 4
  br i1 %109, label %110, label %152

110:                                              ; preds = %108
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.11.570, i32 0, i32 0)) #24
  unreachable

111:                                              ; preds = %105
  %.lcssa2 = phi i32 [ %77, %105 ]
  %112 = icmp eq i32 %3, 4
  br i1 %112, label %113, label %148

113:                                              ; preds = %111
  %114 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 20
  %115 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %114, align 8
  %116 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %115, i32 0, i32 1
  %117 = getelementptr inbounds [1 x i8], [1 x i8]* %116, i32 0, i32 0
  %118 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 21
  %119 = load i32, i32* %118, align 8
  %120 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %121 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %120, i32 0, i32 4
  %122 = load i32, i32* %121, align 8
  %123 = sub i32 %119, %122
  %124 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 15
  %125 = load i32, i32* %124, align 4
  %126 = and i32 %125, 4
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %135

128:                                              ; preds = %113
  %129 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 131
  %130 = load i8, i8* %129, align 8
  %131 = zext i8 %130 to i32
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %135

133:                                              ; preds = %128
  %134 = call i64 @png_image_size(%struct.png_struct_def.60* %0)
  call void @optimize_cmf(i8* %117, i64 %134)
  br label %135

135:                                              ; preds = %133, %128, %113
  %136 = icmp ugt i32 %123, 0
  br i1 %136, label %137, label %139

137:                                              ; preds = %135
  %138 = zext i32 %123 to i64
  call void @png_write_complete_chunk(%struct.png_struct_def.60* %0, i32 1229209940, i8* %117, i64 %138)
  br label %139

139:                                              ; preds = %137, %135
  %140 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %141 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %140, i32 0, i32 4
  store i32 0, i32* %141, align 8
  %142 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %143 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %142, i32 0, i32 3
  store i8* null, i8** %143, align 8
  %144 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 15
  %145 = load i32, i32* %144, align 4
  %146 = or i32 %145, 12
  store i32 %146, i32* %144, align 4
  %147 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 18
  store i32 0, i32* %147, align 8
  br label %152

.loopexit:                                        ; preds = %105
  %.lcssa.ph = phi i32 [ %77, %105 ]
  br label %148

148:                                              ; preds = %.loopexit, %111
  %.lcssa = phi i32 [ %.lcssa2, %111 ], [ %.lcssa.ph, %.loopexit ]
  call void bitcast (void (%struct.png_struct_def*, i32)* @png_zstream_error to void (%struct.png_struct_def.60*, i32)*)(%struct.png_struct_def.60* %0, i32 %.lcssa)
  %149 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 19
  %150 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %149, i32 0, i32 6
  %151 = load i8*, i8** %150, align 8
  call void bitcast (void (%struct.png_struct_def*, i8*)* @png_error to void (%struct.png_struct_def.60*, i8*)*)(%struct.png_struct_def.60* %0, i8* %151) #24
  unreachable

152:                                              ; preds = %108, %139
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_flush(%struct.png_struct_def* noalias %0) #11 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %11, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 43
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 39
  %7 = load i32, i32* %6, align 8
  %8 = icmp uge i32 %5, %7
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  call void bitcast (void (%struct.png_struct_def.60*, i8*, i64, i32)* @png_compress_IDAT to void (%struct.png_struct_def*, i8*, i64, i32)*)(%struct.png_struct_def* %0, i8* null, i64 0, i32 2)
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 78
  store i32 0, i32* %10, align 4
  call void @png_flush(%struct.png_struct_def* %0)
  br label %11

11:                                               ; preds = %3, %1, %9
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @png_image_size(%struct.png_struct_def.60* noalias %0) #11 {
  %2 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 38
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 41
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, 32768
  %7 = icmp ult i32 %3, 32768
  %or.cond = select i1 %6, i1 %7, i1 false
  br i1 %or.cond, label %8, label %84

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 58
  %10 = load i8, i8* %9, align 4
  %11 = zext i8 %10 to i32
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %78

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 37
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 64
  %17 = load i8, i8* %16, align 2
  %18 = zext i8 %17 to i32
  %19 = icmp uge i32 %18, 8
  %20 = zext i32 %18 to i64
  %21 = zext i32 %18 to i64
  %22 = lshr i64 %21, 3
  br label %23

23:                                               ; preds = %13, %76
  %lsr.iv = phi i32 [ 7, %13 ], [ %lsr.iv.next, %76 ]
  %.014 = phi i32 [ 0, %13 ], [ %77, %76 ]
  %.023 = phi i64 [ 0, %13 ], [ %.1, %76 ]
  %24 = icmp ugt i32 %.014, 1
  %25 = ashr i32 %lsr.iv, 1
  %26 = select i1 %24, i32 %25, i32 3
  %27 = shl i32 1, %26
  %28 = sub nsw i32 %27, 1
  %29 = and i32 1, %.014
  %30 = add i32 %.014, 1
  %31 = ashr i32 %30, 1
  %32 = sub nsw i32 3, %31
  %33 = shl i32 %29, %32
  %34 = and i32 %33, 7
  %35 = sub nsw i32 %28, %34
  %36 = add i32 %15, %35
  %37 = icmp ugt i32 %.014, 1
  %38 = ashr i32 %lsr.iv, 1
  %39 = select i1 %37, i32 %38, i32 3
  %40 = lshr i32 %36, %39
  %41 = icmp ugt i32 %40, 0
  br i1 %41, label %42, label %76

42:                                               ; preds = %23
  br i1 %19, label %43, label %46

43:                                               ; preds = %42
  %44 = zext i32 %40 to i64
  %45 = mul i64 %44, %22
  br label %51

46:                                               ; preds = %42
  %47 = zext i32 %40 to i64
  %48 = mul i64 %47, %20
  %49 = add i64 %48, 7
  %50 = lshr i64 %49, 3
  br label %51

51:                                               ; preds = %46, %43
  %52 = phi i64 [ %45, %43 ], [ %50, %46 ]
  %53 = add i64 %52, 1
  %54 = icmp ugt i32 %.014, 2
  %55 = add i32 %lsr.iv, 1
  %56 = ashr i32 %55, 1
  %57 = select i1 %54, i32 %56, i32 3
  %58 = shl i32 1, %57
  %59 = sub nsw i32 %58, 1
  %60 = add i32 %lsr.iv, -8
  %61 = and i32 1, %60
  %62 = ashr i32 %.014, 1
  %63 = sub nsw i32 3, %62
  %64 = shl i32 %61, %63
  %65 = and i32 %64, 7
  %66 = sub nsw i32 %59, %65
  %67 = add i32 %3, %66
  %68 = icmp ugt i32 %.014, 2
  %69 = add i32 %lsr.iv, 1
  %70 = ashr i32 %69, 1
  %71 = select i1 %68, i32 %70, i32 3
  %72 = lshr i32 %67, %71
  %73 = zext i32 %72 to i64
  %74 = mul i64 %53, %73
  %75 = add i64 %.023, %74
  br label %76

76:                                               ; preds = %23, %51
  %.1 = phi i64 [ %75, %51 ], [ %.023, %23 ]
  %77 = add nuw nsw i32 %.014, 1
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %exitcond = icmp ne i32 %lsr.iv.next, 0
  br i1 %exitcond, label %23, label %.loopexit

78:                                               ; preds = %8
  %79 = getelementptr inbounds %struct.png_struct_def.60, %struct.png_struct_def.60* %0, i32 0, i32 41
  %80 = load i64, i64* %79, align 8
  %81 = add i64 %80, 1
  %82 = zext i32 %3 to i64
  %83 = mul i64 %81, %82
  br label %84

.loopexit:                                        ; preds = %76
  %.0.ph = phi i64 [ %.1, %76 ]
  br label %84

84:                                               ; preds = %.loopexit, %1, %78
  %.0 = phi i64 [ %83, %78 ], [ 4294967295, %1 ], [ %.0.ph, %.loopexit ]
  ret i64 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_pack(%struct.png_row_info_struct* %0, i8* %1, i32 %2) #11 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = icmp eq i32 %6, 8
  br i1 %7, label %8, label %118

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  %10 = load i8, i8* %9, align 2
  %11 = zext i8 %10 to i32
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %118

13:                                               ; preds = %8
  switch i32 %2, label %83 [
    i32 1, label %14
    i32 2, label %35
    i32 4, label %59
  ]

14:                                               ; preds = %13
  %15 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = icmp ult i32 0, %16
  br i1 %17, label %.lr.ph, label %31

.lr.ph:                                           ; preds = %14
  %18 = zext i32 %16 to i64
  br label %19

19:                                               ; preds = %.lr.ph, %30
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %30 ]
  %.0526 = phi i8* [ %1, %.lr.ph ], [ %.16, %30 ]
  %.0725 = phi i32 [ 128, %.lr.ph ], [ %.18, %30 ]
  %.0924 = phi i32 [ 0, %.lr.ph ], [ %.2, %30 ]
  %scevgep = getelementptr i8, i8* %1, i64 %lsr.iv
  %20 = load i8, i8* %scevgep, align 1
  %21 = zext i8 %20 to i32
  %22 = icmp ne i32 %21, 0
  %23 = or i32 %.0924, %.0725
  %spec.select = select i1 %22, i32 %23, i32 %.0924
  %24 = icmp sgt i32 %.0725, 1
  br i1 %24, label %25, label %27

25:                                               ; preds = %19
  %26 = ashr i32 %.0725, 1
  br label %30

27:                                               ; preds = %19
  %28 = trunc i32 %spec.select to i8
  store i8 %28, i8* %.0526, align 1
  %29 = getelementptr inbounds i8, i8* %.0526, i32 1
  br label %30

30:                                               ; preds = %25, %27
  %.2 = phi i32 [ %spec.select, %25 ], [ 0, %27 ]
  %.18 = phi i32 [ %26, %25 ], [ 128, %27 ]
  %.16 = phi i8* [ %.0526, %25 ], [ %29, %27 ]
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 1
  %tmp = trunc i64 %lsr.iv.next to i32
  %tmp54 = trunc i64 %18 to i32
  %exitcond = icmp ne i32 %tmp54, %tmp
  br i1 %exitcond, label %19, label %._crit_edge

._crit_edge:                                      ; preds = %30
  %split = phi i32 [ %.2, %30 ]
  %split28 = phi i32 [ %.18, %30 ]
  %split29 = phi i8* [ %.16, %30 ]
  br label %31

31:                                               ; preds = %._crit_edge, %14
  %.09.lcssa = phi i32 [ %split, %._crit_edge ], [ 0, %14 ]
  %.07.lcssa = phi i32 [ %split28, %._crit_edge ], [ 128, %14 ]
  %.05.lcssa = phi i8* [ %split29, %._crit_edge ], [ %1, %14 ]
  %32 = icmp ne i32 %.07.lcssa, 128
  br i1 %32, label %33, label %83

33:                                               ; preds = %31
  %34 = trunc i32 %.09.lcssa to i8
  store i8 %34, i8* %.05.lcssa, align 1
  br label %83

35:                                               ; preds = %13
  %36 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %37 = load i32, i32* %36, align 8
  %38 = icmp ult i32 0, %37
  br i1 %38, label %.lr.ph36, label %55

.lr.ph36:                                         ; preds = %35
  %39 = zext i32 %37 to i64
  br label %40

40:                                               ; preds = %.lr.ph36, %54
  %lsr.iv55 = phi i64 [ 0, %.lr.ph36 ], [ %lsr.iv.next56, %54 ]
  %.01533 = phi i8* [ %1, %.lr.ph36 ], [ %.116, %54 ]
  %.01732 = phi i32 [ 6, %.lr.ph36 ], [ %.118, %54 ]
  %.01931 = phi i32 [ 0, %.lr.ph36 ], [ %.120, %54 ]
  %scevgep57 = getelementptr i8, i8* %1, i64 %lsr.iv55
  %41 = load i8, i8* %scevgep57, align 1
  %42 = zext i8 %41 to i32
  %43 = and i32 %42, 3
  %44 = trunc i32 %43 to i8
  %45 = zext i8 %44 to i32
  %46 = shl i32 %45, %.01732
  %47 = or i32 %.01931, %46
  %48 = icmp eq i32 %.01732, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %40
  %50 = trunc i32 %47 to i8
  store i8 %50, i8* %.01533, align 1
  %51 = getelementptr inbounds i8, i8* %.01533, i32 1
  br label %54

52:                                               ; preds = %40
  %53 = sub i32 %.01732, 2
  br label %54

54:                                               ; preds = %52, %49
  %.120 = phi i32 [ 0, %49 ], [ %47, %52 ]
  %.118 = phi i32 [ 6, %49 ], [ %53, %52 ]
  %.116 = phi i8* [ %51, %49 ], [ %.01533, %52 ]
  %lsr.iv.next56 = add nuw nsw i64 %lsr.iv55, 1
  %tmp58 = trunc i64 %lsr.iv.next56 to i32
  %tmp59 = trunc i64 %39 to i32
  %exitcond41 = icmp ne i32 %tmp59, %tmp58
  br i1 %exitcond41, label %40, label %._crit_edge37

._crit_edge37:                                    ; preds = %54
  %split38 = phi i32 [ %.120, %54 ]
  %split39 = phi i32 [ %.118, %54 ]
  %split40 = phi i8* [ %.116, %54 ]
  br label %55

55:                                               ; preds = %._crit_edge37, %35
  %.019.lcssa = phi i32 [ %split38, %._crit_edge37 ], [ 0, %35 ]
  %.017.lcssa = phi i32 [ %split39, %._crit_edge37 ], [ 6, %35 ]
  %.015.lcssa = phi i8* [ %split40, %._crit_edge37 ], [ %1, %35 ]
  %56 = icmp ne i32 %.017.lcssa, 6
  br i1 %56, label %57, label %83

57:                                               ; preds = %55
  %58 = trunc i32 %.019.lcssa to i8
  store i8 %58, i8* %.015.lcssa, align 1
  br label %83

59:                                               ; preds = %13
  %60 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %61 = load i32, i32* %60, align 8
  %62 = icmp ult i32 0, %61
  br i1 %62, label %.lr.ph48, label %79

.lr.ph48:                                         ; preds = %59
  %63 = zext i32 %61 to i64
  br label %64

64:                                               ; preds = %.lr.ph48, %78
  %lsr.iv60 = phi i64 [ 0, %.lr.ph48 ], [ %lsr.iv.next61, %78 ]
  %.0145 = phi i32 [ 0, %.lr.ph48 ], [ %.1, %78 ]
  %.0244 = phi i32 [ 4, %.lr.ph48 ], [ %.13, %78 ]
  %.01243 = phi i8* [ %1, %.lr.ph48 ], [ %.113, %78 ]
  %scevgep64 = getelementptr i8, i8* %1, i64 %lsr.iv60
  %65 = load i8, i8* %scevgep64, align 1
  %66 = zext i8 %65 to i32
  %67 = and i32 %66, 15
  %68 = trunc i32 %67 to i8
  %69 = zext i8 %68 to i32
  %70 = shl i32 %69, %.0244
  %71 = or i32 %.0145, %70
  %72 = icmp eq i32 %.0244, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %64
  %74 = trunc i32 %71 to i8
  store i8 %74, i8* %.01243, align 1
  %75 = getelementptr inbounds i8, i8* %.01243, i32 1
  br label %78

76:                                               ; preds = %64
  %77 = sub i32 %.0244, 4
  br label %78

78:                                               ; preds = %76, %73
  %.113 = phi i8* [ %75, %73 ], [ %.01243, %76 ]
  %.13 = phi i32 [ 4, %73 ], [ %77, %76 ]
  %.1 = phi i32 [ 0, %73 ], [ %71, %76 ]
  %lsr.iv.next61 = add nuw nsw i64 %lsr.iv60, 1
  %tmp62 = trunc i64 %lsr.iv.next61 to i32
  %tmp63 = trunc i64 %63 to i32
  %exitcond53 = icmp ne i32 %tmp63, %tmp62
  br i1 %exitcond53, label %64, label %._crit_edge49

._crit_edge49:                                    ; preds = %78
  %split50 = phi i8* [ %.113, %78 ]
  %split51 = phi i32 [ %.13, %78 ]
  %split52 = phi i32 [ %.1, %78 ]
  br label %79

79:                                               ; preds = %._crit_edge49, %59
  %.012.lcssa = phi i8* [ %split50, %._crit_edge49 ], [ %1, %59 ]
  %.02.lcssa = phi i32 [ %split51, %._crit_edge49 ], [ 4, %59 ]
  %.01.lcssa = phi i32 [ %split52, %._crit_edge49 ], [ 0, %59 ]
  %80 = icmp ne i32 %.02.lcssa, 4
  br i1 %80, label %81, label %83

81:                                               ; preds = %79
  %82 = trunc i32 %.01.lcssa to i8
  store i8 %82, i8* %.012.lcssa, align 1
  br label %83

83:                                               ; preds = %13, %79, %81, %55, %57, %31, %33
  %84 = trunc i32 %2 to i8
  %85 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  store i8 %84, i8* %85, align 1
  %86 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 4
  %87 = load i8, i8* %86, align 2
  %88 = zext i8 %87 to i32
  %89 = mul i32 %2, %88
  %90 = trunc i32 %89 to i8
  %91 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  store i8 %90, i8* %91, align 1
  %92 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = icmp sge i32 %94, 8
  br i1 %95, label %96, label %105

96:                                               ; preds = %83
  %97 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %98 = load i32, i32* %97, align 8
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i64
  %103 = lshr i64 %102, 3
  %104 = mul i64 %99, %103
  br label %115

105:                                              ; preds = %83
  %106 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %107 = load i32, i32* %106, align 8
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 5
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i64
  %112 = mul i64 %108, %111
  %113 = add i64 %112, 7
  %114 = lshr i64 %113, 3
  br label %115

115:                                              ; preds = %105, %96
  %116 = phi i64 [ %104, %96 ], [ %114, %105 ]
  %117 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  store i64 %116, i64* %117, align 8
  br label %118

118:                                              ; preds = %115, %8, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_shift(%struct.png_row_info_struct* %0, i8* %1, %struct.png_color_8_struct* %2) #11 {
  %4 = alloca [4 x i32], align 16
  %5 = alloca [4 x i32], align 16
  %6 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %7 = load i8, i8* %6, align 8
  %8 = zext i8 %7 to i32
  %9 = icmp ne i32 %8, 3
  br i1 %9, label %10, label %249

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %12 = load i8, i8* %11, align 8
  %13 = zext i8 %12 to i32
  %14 = and i32 %13, 2
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %62

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 0
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = sub nsw i32 %19, %22
  %24 = zext i32 0 to i64
  %25 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %24
  store i32 %23, i32* %25, align 4
  %26 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 0
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = zext i32 0 to i64
  %30 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %29
  store i32 %28, i32* %30, align 4
  %31 = add i32 0, 1
  %32 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = sub nsw i32 %34, %37
  %39 = zext i32 %31 to i64
  %40 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %39
  store i32 %38, i32* %40, align 4
  %41 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 1
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = zext i32 %31 to i64
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %44
  store i32 %43, i32* %45, align 4
  %46 = add i32 %31, 1
  %47 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 2
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = sub nsw i32 %49, %52
  %54 = zext i32 %46 to i64
  %55 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %54
  store i32 %53, i32* %55, align 4
  %56 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = zext i32 %46 to i64
  %60 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %59
  store i32 %58, i32* %60, align 4
  %61 = add i32 %46, 1
  br label %78

62:                                               ; preds = %10
  %63 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 3
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = sub nsw i32 %65, %68
  %70 = zext i32 0 to i64
  %71 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %70
  store i32 %69, i32* %71, align 4
  %72 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 3
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = zext i32 0 to i64
  %76 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %75
  store i32 %74, i32* %76, align 4
  %77 = add i32 0, 1
  br label %78

78:                                               ; preds = %62, %16
  %.03 = phi i32 [ %61, %16 ], [ %77, %62 ]
  %79 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %80 = load i8, i8* %79, align 8
  %81 = zext i8 %80 to i32
  %82 = and i32 %81, 4
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %84, label %100

84:                                               ; preds = %78
  %85 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 4
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = sub nsw i32 %87, %90
  %92 = zext i32 %.03 to i64
  %93 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %92
  store i32 %91, i32* %93, align 4
  %94 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 4
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = zext i32 %.03 to i64
  %98 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %97
  store i32 %96, i32* %98, align 4
  %99 = add i32 %.03, 1
  br label %100

100:                                              ; preds = %84, %78
  %.14 = phi i32 [ %99, %84 ], [ %.03, %78 ]
  %101 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = icmp slt i32 %103, 8
  br i1 %104, label %105, label %159

105:                                              ; preds = %100
  %106 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 1
  %107 = load i64, i64* %106, align 8
  %108 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 3
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %112, label %117

112:                                              ; preds = %105
  %113 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = icmp eq i32 %115, 2
  br i1 %116, label %128, label %117

117:                                              ; preds = %112, %105
  %118 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = icmp eq i32 %120, 4
  br i1 %121, label %122, label %127

122:                                              ; preds = %117
  %123 = getelementptr inbounds %struct.png_color_8_struct, %struct.png_color_8_struct* %2, i32 0, i32 3
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = icmp eq i32 %125, 3
  br i1 %126, label %128, label %127

127:                                              ; preds = %122, %117
  br label %128

128:                                              ; preds = %127, %122, %112
  %.18 = phi i32 [ 85, %112 ], [ 255, %127 ], [ 17, %122 ]
  %129 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 0
  %130 = load i32, i32* %129, align 16
  %131 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 0
  %132 = load i32, i32* %131, align 16
  %133 = sub nsw i32 0, %132
  %134 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 0
  %135 = load i32, i32* %134, align 16
  %136 = icmp sgt i32 %130, %133
  %137 = icmp ult i64 0, %107
  br i1 %137, label %.lr.ph26, label %.loopexit

.lr.ph26:                                         ; preds = %128
  br label %138

138:                                              ; preds = %.lr.ph26, %154
  %.0524 = phi i8* [ %1, %.lr.ph26 ], [ %158, %154 ]
  %.0623 = phi i64 [ 0, %.lr.ph26 ], [ %157, %154 ]
  %139 = load i8, i8* %.0524, align 1
  %140 = zext i8 %139 to i32
  br i1 %136, label %.lr.ph, label %154

.lr.ph:                                           ; preds = %138
  br label %141

141:                                              ; preds = %.lr.ph, %151
  %.01021 = phi i32 [ %130, %.lr.ph ], [ %152, %151 ]
  %.01320 = phi i32 [ 0, %.lr.ph ], [ %.114, %151 ]
  %142 = icmp sgt i32 %.01021, 0
  br i1 %142, label %143, label %146

143:                                              ; preds = %141
  %144 = shl i32 %140, %.01021
  %145 = or i32 %.01320, %144
  br label %151

146:                                              ; preds = %141
  %147 = sub nsw i32 0, %.01021
  %148 = lshr i32 %140, %147
  %149 = and i32 %148, %.18
  %150 = or i32 %.01320, %149
  br label %151

151:                                              ; preds = %143, %146
  %.01022 = phi i32 [ %.01021, %143 ], [ %.01021, %146 ]
  %.114 = phi i32 [ %145, %143 ], [ %150, %146 ]
  %152 = sub nsw i32 %.01022, %135
  %153 = icmp sgt i32 %152, %133
  br i1 %153, label %141, label %._crit_edge

._crit_edge:                                      ; preds = %151
  %split = phi i32 [ %.114, %151 ]
  br label %154

154:                                              ; preds = %._crit_edge, %138
  %.013.lcssa = phi i32 [ %split, %._crit_edge ], [ 0, %138 ]
  %155 = and i32 %.013.lcssa, 255
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %.0524, align 1
  %157 = add nuw i64 %.0623, 1
  %158 = getelementptr inbounds i8, i8* %.0524, i32 1
  %exitcond = icmp ne i64 %157, %107
  br i1 %exitcond, label %138, label %..loopexit_crit_edge

159:                                              ; preds = %100
  %160 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  %163 = icmp eq i32 %162, 8
  br i1 %163, label %164, label %201

164:                                              ; preds = %159
  %165 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %166 = load i32, i32* %165, align 8
  %167 = mul i32 %.14, %166
  %168 = icmp ult i32 0, %167
  br i1 %168, label %.lr.ph37, label %.loopexit18

.lr.ph37:                                         ; preds = %164
  br label %169

169:                                              ; preds = %.lr.ph37, %196
  %.01535 = phi i8* [ %1, %.lr.ph37 ], [ %200, %196 ]
  %.01634 = phi i32 [ 0, %.lr.ph37 ], [ %199, %196 ]
  %170 = urem i32 %.01634, %.14
  %171 = load i8, i8* %.01535, align 1
  %172 = zext i8 %171 to i32
  %173 = zext i32 %170 to i64
  %174 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %173
  %175 = load i32, i32* %174, align 4
  %176 = zext i32 %170 to i64
  %177 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %176
  %178 = load i32, i32* %177, align 4
  %179 = sub nsw i32 0, %178
  %180 = zext i32 %170 to i64
  %181 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %180
  %182 = icmp sgt i32 %175, %179
  br i1 %182, label %.lr.ph31, label %196

.lr.ph31:                                         ; preds = %169
  br label %183

183:                                              ; preds = %.lr.ph31, %192
  %.01129 = phi i32 [ 0, %.lr.ph31 ], [ %.112, %192 ]
  %.01727 = phi i32 [ %175, %.lr.ph31 ], [ %194, %192 ]
  %184 = icmp sgt i32 %.01727, 0
  br i1 %184, label %185, label %188

185:                                              ; preds = %183
  %186 = shl i32 %172, %.01727
  %187 = or i32 %.01129, %186
  br label %192

188:                                              ; preds = %183
  %189 = sub nsw i32 0, %.01727
  %190 = lshr i32 %172, %189
  %191 = or i32 %.01129, %190
  br label %192

192:                                              ; preds = %185, %188
  %.01728 = phi i32 [ %.01727, %185 ], [ %.01727, %188 ]
  %.112 = phi i32 [ %187, %185 ], [ %191, %188 ]
  %193 = load i32, i32* %181, align 4
  %194 = sub nsw i32 %.01728, %193
  %195 = icmp sgt i32 %194, %179
  br i1 %195, label %183, label %._crit_edge32

._crit_edge32:                                    ; preds = %192
  %split33 = phi i32 [ %.112, %192 ]
  br label %196

196:                                              ; preds = %._crit_edge32, %169
  %.011.lcssa = phi i32 [ %split33, %._crit_edge32 ], [ 0, %169 ]
  %197 = and i32 %.011.lcssa, 255
  %198 = trunc i32 %197 to i8
  store i8 %198, i8* %.01535, align 1
  %199 = add nuw i32 %.01634, 1
  %200 = getelementptr inbounds i8, i8* %.01535, i32 1
  %exitcond38 = icmp ne i32 %199, %167
  br i1 %exitcond38, label %169, label %..loopexit18_crit_edge

201:                                              ; preds = %159
  %202 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %203 = load i32, i32* %202, align 8
  %204 = mul i32 %.14, %203
  %205 = icmp ult i32 0, %204
  br i1 %205, label %.lr.ph49, label %.loopexit19

.lr.ph49:                                         ; preds = %201
  br label %206

206:                                              ; preds = %.lr.ph49, %240
  %.0247 = phi i32 [ 0, %.lr.ph49 ], [ %248, %240 ]
  %.0946 = phi i8* [ %1, %.lr.ph49 ], [ %247, %240 ]
  %207 = urem i32 %.0247, %.14
  %208 = load i8, i8* %.0946, align 1
  %209 = zext i8 %208 to i32
  %210 = shl i32 %209, 8
  %211 = getelementptr inbounds i8, i8* %.0946, i64 1
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = add i32 %210, %213
  %215 = trunc i32 %214 to i16
  %216 = zext i16 %215 to i32
  %217 = zext i32 %207 to i64
  %218 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %217
  %219 = load i32, i32* %218, align 4
  %220 = zext i32 %207 to i64
  %221 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %220
  %222 = load i32, i32* %221, align 4
  %223 = sub nsw i32 0, %222
  %224 = zext i32 %207 to i64
  %225 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %224
  %226 = icmp sgt i32 %219, %223
  br i1 %226, label %.lr.ph43, label %240

.lr.ph43:                                         ; preds = %206
  br label %227

227:                                              ; preds = %.lr.ph43, %236
  %.041 = phi i32 [ 0, %.lr.ph43 ], [ %.1, %236 ]
  %.0139 = phi i32 [ %219, %.lr.ph43 ], [ %238, %236 ]
  %228 = icmp sgt i32 %.0139, 0
  br i1 %228, label %229, label %232

229:                                              ; preds = %227
  %230 = shl i32 %216, %.0139
  %231 = or i32 %.041, %230
  br label %236

232:                                              ; preds = %227
  %233 = sub nsw i32 0, %.0139
  %234 = lshr i32 %216, %233
  %235 = or i32 %.041, %234
  br label %236

236:                                              ; preds = %229, %232
  %.0140 = phi i32 [ %.0139, %229 ], [ %.0139, %232 ]
  %.1 = phi i32 [ %231, %229 ], [ %235, %232 ]
  %237 = load i32, i32* %225, align 4
  %238 = sub nsw i32 %.0140, %237
  %239 = icmp sgt i32 %238, %223
  br i1 %239, label %227, label %._crit_edge44

._crit_edge44:                                    ; preds = %236
  %split45 = phi i32 [ %.1, %236 ]
  br label %240

240:                                              ; preds = %._crit_edge44, %206
  %.0.lcssa = phi i32 [ %split45, %._crit_edge44 ], [ 0, %206 ]
  %241 = lshr i32 %.0.lcssa, 8
  %242 = and i32 %241, 255
  %243 = trunc i32 %242 to i8
  %244 = getelementptr inbounds i8, i8* %.0946, i32 1
  store i8 %243, i8* %.0946, align 1
  %245 = and i32 %.0.lcssa, 255
  %246 = trunc i32 %245 to i8
  %247 = getelementptr inbounds i8, i8* %244, i32 1
  store i8 %246, i8* %244, align 1
  %248 = add nuw i32 %.0247, 1
  %exitcond50 = icmp ne i32 %248, %204
  br i1 %exitcond50, label %206, label %..loopexit19_crit_edge

..loopexit_crit_edge:                             ; preds = %154
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %128
  br label %249

..loopexit18_crit_edge:                           ; preds = %196
  br label %.loopexit18

.loopexit18:                                      ; preds = %..loopexit18_crit_edge, %164
  br label %249

..loopexit19_crit_edge:                           ; preds = %240
  br label %.loopexit19

.loopexit19:                                      ; preds = %..loopexit19_crit_edge, %201
  br label %249

249:                                              ; preds = %.loopexit19, %.loopexit18, %.loopexit, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_write_swap_alpha(%struct.png_row_info_struct* %0, i8* %1) #11 {
  %3 = alloca [2 x i8], align 1
  %4 = alloca [2 x i8], align 1
  %5 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %6 = load i8, i8* %5, align 8
  %7 = zext i8 %6 to i32
  %8 = icmp eq i32 %7, 6
  br i1 %8, label %9, label %44

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = icmp eq i32 %12, 8
  br i1 %13, label %14, label %25

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = icmp ult i32 0, %16
  br i1 %17, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %14
  %18 = zext i32 %16 to i64
  br label %19

19:                                               ; preds = %.lr.ph, %19
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %19 ]
  %20 = shl nuw nsw i64 %lsr.iv, 2
  %scevgep = getelementptr i8, i8* %1, i64 %20
  %21 = load i8, i8* %scevgep, align 1
  %scevgep43 = getelementptr i8, i8* %scevgep, i64 1
  %22 = load i8, i8* %scevgep43, align 1
  store i8 %22, i8* %scevgep, align 1
  %scevgep44 = getelementptr i8, i8* %scevgep, i64 2
  %23 = load i8, i8* %scevgep44, align 1
  %scevgep45 = getelementptr i8, i8* %scevgep, i64 1
  store i8 %23, i8* %scevgep45, align 1
  %scevgep46 = getelementptr i8, i8* %scevgep, i64 3
  %24 = load i8, i8* %scevgep46, align 1
  %scevgep47 = getelementptr i8, i8* %scevgep, i64 2
  store i8 %24, i8* %scevgep47, align 1
  %scevgep48 = getelementptr i8, i8* %scevgep, i64 3
  store i8 %21, i8* %scevgep48, align 1
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 1
  %tmp = trunc i64 %lsr.iv.next to i32
  %tmp42 = trunc i64 %18 to i32
  %exitcond = icmp ne i32 %tmp42, %tmp
  br i1 %exitcond, label %19, label %..loopexit_crit_edge

25:                                               ; preds = %9
  %26 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds [2 x i8], [2 x i8]* %3, i64 0, i64 0
  %29 = getelementptr inbounds [2 x i8], [2 x i8]* %3, i64 0, i64 1
  %30 = getelementptr inbounds [2 x i8], [2 x i8]* %3, i64 0, i64 0
  %31 = getelementptr inbounds [2 x i8], [2 x i8]* %3, i64 0, i64 1
  %.promoted = load i8, i8* %28, align 1
  %.promoted18 = load i8, i8* %29, align 1
  %32 = icmp ult i32 0, %27
  br i1 %32, label %.lr.ph23, label %.loopexit12

.lr.ph23:                                         ; preds = %25
  %33 = zext i32 %27 to i64
  br label %34

34:                                               ; preds = %.lr.ph23, %34
  %lsr.iv50 = phi i64 [ 0, %.lr.ph23 ], [ %lsr.iv.next51, %34 ]
  %35 = shl nuw nsw i64 %lsr.iv50, 3
  %scevgep52 = getelementptr i8, i8* %1, i64 %35
  %36 = load i8, i8* %scevgep52, align 1
  %scevgep55 = getelementptr i8, i8* %scevgep52, i64 1
  %37 = load i8, i8* %scevgep55, align 1
  %scevgep56 = getelementptr i8, i8* %scevgep52, i64 2
  %38 = load i8, i8* %scevgep56, align 1
  store i8 %38, i8* %scevgep52, align 1
  %scevgep57 = getelementptr i8, i8* %scevgep52, i64 3
  %39 = load i8, i8* %scevgep57, align 1
  %scevgep58 = getelementptr i8, i8* %scevgep52, i64 1
  store i8 %39, i8* %scevgep58, align 1
  %scevgep59 = getelementptr i8, i8* %scevgep52, i64 4
  %40 = load i8, i8* %scevgep59, align 1
  %scevgep60 = getelementptr i8, i8* %scevgep52, i64 2
  store i8 %40, i8* %scevgep60, align 1
  %scevgep61 = getelementptr i8, i8* %scevgep52, i64 5
  %41 = load i8, i8* %scevgep61, align 1
  %scevgep62 = getelementptr i8, i8* %scevgep52, i64 3
  store i8 %41, i8* %scevgep62, align 1
  %scevgep63 = getelementptr i8, i8* %scevgep52, i64 6
  %42 = load i8, i8* %scevgep63, align 1
  %scevgep64 = getelementptr i8, i8* %scevgep52, i64 4
  store i8 %42, i8* %scevgep64, align 1
  %scevgep65 = getelementptr i8, i8* %scevgep52, i64 7
  %43 = load i8, i8* %scevgep65, align 1
  %scevgep66 = getelementptr i8, i8* %scevgep52, i64 5
  store i8 %43, i8* %scevgep66, align 1
  %scevgep67 = getelementptr i8, i8* %scevgep52, i64 6
  store i8 %36, i8* %scevgep67, align 1
  %scevgep68 = getelementptr i8, i8* %scevgep52, i64 7
  store i8 %37, i8* %scevgep68, align 1
  %lsr.iv.next51 = add nuw nsw i64 %lsr.iv50, 1
  %tmp53 = trunc i64 %lsr.iv.next51 to i32
  %tmp54 = trunc i64 %33 to i32
  %exitcond25 = icmp ne i32 %tmp54, %tmp53
  br i1 %exitcond25, label %34, label %..loopexit12_crit_edge

44:                                               ; preds = %2
  %45 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %46 = load i8, i8* %45, align 8
  %47 = zext i8 %46 to i32
  %48 = icmp eq i32 %47, 4
  br i1 %48, label %49, label %78

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = icmp eq i32 %52, 8
  br i1 %53, label %54, label %63

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %56 = load i32, i32* %55, align 8
  %57 = icmp ult i32 0, %56
  br i1 %57, label %.lr.ph29, label %.loopexit13

.lr.ph29:                                         ; preds = %54
  %58 = zext i32 %56 to i64
  br label %59

59:                                               ; preds = %.lr.ph29, %59
  %lsr.iv70 = phi i64 [ 0, %.lr.ph29 ], [ %lsr.iv.next71, %59 ]
  %60 = shl nuw nsw i64 %lsr.iv70, 1
  %scevgep74 = getelementptr i8, i8* %1, i64 %60
  %61 = load i8, i8* %scevgep74, align 1
  %scevgep75 = getelementptr i8, i8* %scevgep74, i64 1
  %62 = load i8, i8* %scevgep75, align 1
  store i8 %62, i8* %scevgep74, align 1
  %scevgep76 = getelementptr i8, i8* %scevgep74, i64 1
  store i8 %61, i8* %scevgep76, align 1
  %lsr.iv.next71 = add nuw nsw i64 %lsr.iv70, 1
  %tmp72 = trunc i64 %lsr.iv.next71 to i32
  %tmp73 = trunc i64 %58 to i32
  %exitcond30 = icmp ne i32 %tmp73, %tmp72
  br i1 %exitcond30, label %59, label %..loopexit13_crit_edge

63:                                               ; preds = %49
  %64 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %65 = load i32, i32* %64, align 8
  %66 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 0
  %67 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 1
  %68 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 0
  %69 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 1
  %.promoted31 = load i8, i8* %66, align 1
  %.promoted33 = load i8, i8* %67, align 1
  %70 = icmp ult i32 0, %65
  br i1 %70, label %.lr.ph38, label %.loopexit14

.lr.ph38:                                         ; preds = %63
  %71 = zext i32 %65 to i64
  br label %72

72:                                               ; preds = %.lr.ph38, %72
  %lsr.iv78 = phi i64 [ 0, %.lr.ph38 ], [ %lsr.iv.next79, %72 ]
  %73 = shl nuw nsw i64 %lsr.iv78, 2
  %scevgep82 = getelementptr i8, i8* %1, i64 %73
  %74 = load i8, i8* %scevgep82, align 1
  %scevgep83 = getelementptr i8, i8* %scevgep82, i64 1
  %75 = load i8, i8* %scevgep83, align 1
  %scevgep84 = getelementptr i8, i8* %scevgep82, i64 2
  %76 = load i8, i8* %scevgep84, align 1
  store i8 %76, i8* %scevgep82, align 1
  %scevgep85 = getelementptr i8, i8* %scevgep82, i64 3
  %77 = load i8, i8* %scevgep85, align 1
  %scevgep86 = getelementptr i8, i8* %scevgep82, i64 1
  store i8 %77, i8* %scevgep86, align 1
  %scevgep87 = getelementptr i8, i8* %scevgep82, i64 2
  store i8 %74, i8* %scevgep87, align 1
  %scevgep88 = getelementptr i8, i8* %scevgep82, i64 3
  store i8 %75, i8* %scevgep88, align 1
  %lsr.iv.next79 = add nuw nsw i64 %lsr.iv78, 1
  %tmp80 = trunc i64 %lsr.iv.next79 to i32
  %tmp81 = trunc i64 %71 to i32
  %exitcond41 = icmp ne i32 %tmp81, %tmp80
  br i1 %exitcond41, label %72, label %..loopexit14_crit_edge

..loopexit_crit_edge:                             ; preds = %19
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %14
  br label %78

..loopexit12_crit_edge:                           ; preds = %34
  %split = phi i8 [ %37, %34 ]
  %split24 = phi i8 [ %36, %34 ]
  br label %.loopexit12

.loopexit12:                                      ; preds = %..loopexit12_crit_edge, %25
  %.lcssa19 = phi i8 [ %split, %..loopexit12_crit_edge ], [ %.promoted18, %25 ]
  %.lcssa = phi i8 [ %split24, %..loopexit12_crit_edge ], [ %.promoted, %25 ]
  store i8 %.lcssa, i8* %28, align 1
  store i8 %.lcssa19, i8* %29, align 1
  br label %78

..loopexit13_crit_edge:                           ; preds = %59
  br label %.loopexit13

.loopexit13:                                      ; preds = %..loopexit13_crit_edge, %54
  br label %78

..loopexit14_crit_edge:                           ; preds = %72
  %split39 = phi i8 [ %75, %72 ]
  %split40 = phi i8 [ %74, %72 ]
  br label %.loopexit14

.loopexit14:                                      ; preds = %..loopexit14_crit_edge, %63
  %.lcssa34 = phi i8 [ %split39, %..loopexit14_crit_edge ], [ %.promoted33, %63 ]
  %.lcssa32 = phi i8 [ %split40, %..loopexit14_crit_edge ], [ %.promoted31, %63 ]
  store i8 %.lcssa32, i8* %66, align 1
  store i8 %.lcssa34, i8* %67, align 1
  br label %78

78:                                               ; preds = %.loopexit14, %.loopexit13, %.loopexit12, %.loopexit, %44
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_do_write_invert_alpha(%struct.png_row_info_struct* %0, i8* %1) #11 {
  %3 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %4 = load i8, i8* %3, align 8
  %5 = zext i8 %4 to i32
  %6 = icmp eq i32 %5, 6
  br i1 %6, label %7, label %40

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = icmp eq i32 %10, 8
  br i1 %11, label %12, label %23

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = icmp ult i32 0, %14
  br i1 %15, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %12
  %scevgep = getelementptr i8, i8* %1, i64 3
  %16 = zext i32 %14 to i64
  br label %17

17:                                               ; preds = %.lr.ph, %17
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %17 ]
  %18 = shl nuw nsw i64 %lsr.iv, 2
  %scevgep27 = getelementptr i8, i8* %scevgep, i64 %18
  %19 = load i8, i8* %scevgep27, align 1
  %20 = zext i8 %19 to i32
  %21 = sub nsw i32 255, %20
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %scevgep27, align 1
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 1
  %tmp = trunc i64 %lsr.iv.next to i32
  %tmp28 = trunc i64 %16 to i32
  %exitcond = icmp ne i32 %tmp28, %tmp
  br i1 %exitcond, label %17, label %..loopexit_crit_edge

23:                                               ; preds = %7
  %24 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = icmp ult i32 0, %25
  br i1 %26, label %.lr.ph16, label %.loopexit9

.lr.ph16:                                         ; preds = %23
  %scevgep29 = getelementptr i8, i8* %1, i64 7
  %27 = zext i32 %25 to i64
  br label %28

28:                                               ; preds = %.lr.ph16, %28
  %lsr.iv30 = phi i64 [ 0, %.lr.ph16 ], [ %lsr.iv.next31, %28 ]
  %29 = shl nuw nsw i64 %lsr.iv30, 3
  %scevgep33 = getelementptr i8, i8* %scevgep29, i64 %29
  %scevgep34 = getelementptr i8, i8* %scevgep33, i64 -1
  %30 = shl nuw nsw i64 %lsr.iv30, 3
  %scevgep35 = getelementptr i8, i8* %scevgep29, i64 %30
  %31 = load i8, i8* %scevgep34, align 1
  %32 = zext i8 %31 to i32
  %33 = sub nsw i32 255, %32
  %34 = trunc i32 %33 to i8
  %35 = shl nuw nsw i64 %lsr.iv30, 3
  %scevgep32 = getelementptr i8, i8* %scevgep29, i64 %35
  store i8 %34, i8* %scevgep34, align 1
  %36 = load i8, i8* %scevgep35, align 1
  %37 = zext i8 %36 to i32
  %38 = sub nsw i32 255, %37
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %scevgep32, align 1
  %lsr.iv.next31 = add nuw nsw i64 %lsr.iv30, 1
  %tmp36 = trunc i64 %lsr.iv.next31 to i32
  %tmp37 = trunc i64 %27 to i32
  %exitcond17 = icmp ne i32 %tmp37, %tmp36
  br i1 %exitcond17, label %28, label %..loopexit9_crit_edge

40:                                               ; preds = %2
  %41 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 2
  %42 = load i8, i8* %41, align 8
  %43 = zext i8 %42 to i32
  %44 = icmp eq i32 %43, 4
  br i1 %44, label %45, label %79

45:                                               ; preds = %40
  %46 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 3
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = icmp eq i32 %48, 8
  br i1 %49, label %50, label %62

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %52 = load i32, i32* %51, align 8
  %53 = icmp ult i32 0, %52
  br i1 %53, label %.lr.ph21, label %.loopexit10

.lr.ph21:                                         ; preds = %50
  %54 = zext i32 %52 to i64
  br label %55

55:                                               ; preds = %.lr.ph21, %55
  %lsr.iv38 = phi i64 [ 0, %.lr.ph21 ], [ %lsr.iv.next39, %55 ]
  %56 = shl nuw nsw i64 %lsr.iv38, 1
  %scevgep42 = getelementptr i8, i8* %1, i64 %56
  %57 = load i8, i8* %scevgep42, align 1
  store i8 %57, i8* %scevgep42, align 1
  %scevgep43 = getelementptr i8, i8* %scevgep42, i64 1
  %58 = load i8, i8* %scevgep43, align 1
  %59 = zext i8 %58 to i32
  %60 = sub nsw i32 255, %59
  %61 = trunc i32 %60 to i8
  %scevgep44 = getelementptr i8, i8* %scevgep42, i64 1
  store i8 %61, i8* %scevgep44, align 1
  %lsr.iv.next39 = add nuw nsw i64 %lsr.iv38, 1
  %tmp40 = trunc i64 %lsr.iv.next39 to i32
  %tmp41 = trunc i64 %54 to i32
  %exitcond22 = icmp ne i32 %tmp41, %tmp40
  br i1 %exitcond22, label %55, label %..loopexit10_crit_edge

62:                                               ; preds = %45
  %63 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i32 0, i32 0
  %64 = load i32, i32* %63, align 8
  %65 = icmp ult i32 0, %64
  br i1 %65, label %.lr.ph25, label %.loopexit11

.lr.ph25:                                         ; preds = %62
  %66 = zext i32 %64 to i64
  %scevgep50 = getelementptr i8, i8* %1, i64 3
  br label %67

67:                                               ; preds = %.lr.ph25, %67
  %lsr.iv46 = phi i64 [ 0, %.lr.ph25 ], [ %lsr.iv.next47, %67 ]
  %68 = shl nuw nsw i64 %lsr.iv46, 2
  %scevgep52 = getelementptr i8, i8* %scevgep50, i64 %68
  %scevgep53 = getelementptr i8, i8* %scevgep52, i64 -1
  %69 = shl nuw nsw i64 %lsr.iv46, 2
  %scevgep54 = getelementptr i8, i8* %scevgep50, i64 %69
  %70 = load i8, i8* %scevgep53, align 1
  %71 = zext i8 %70 to i32
  %72 = sub nsw i32 255, %71
  %73 = trunc i32 %72 to i8
  %74 = shl nuw nsw i64 %lsr.iv46, 2
  %scevgep51 = getelementptr i8, i8* %scevgep50, i64 %74
  store i8 %73, i8* %scevgep53, align 1
  %75 = load i8, i8* %scevgep54, align 1
  %76 = zext i8 %75 to i32
  %77 = sub nsw i32 255, %76
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %scevgep51, align 1
  %lsr.iv.next47 = add nuw nsw i64 %lsr.iv46, 1
  %tmp48 = trunc i64 %lsr.iv.next47 to i32
  %tmp49 = trunc i64 %66 to i32
  %exitcond26 = icmp ne i32 %tmp49, %tmp48
  br i1 %exitcond26, label %67, label %..loopexit11_crit_edge

..loopexit_crit_edge:                             ; preds = %17
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %12
  br label %79

..loopexit9_crit_edge:                            ; preds = %28
  br label %.loopexit9

.loopexit9:                                       ; preds = %..loopexit9_crit_edge, %23
  br label %79

..loopexit10_crit_edge:                           ; preds = %55
  br label %.loopexit10

.loopexit10:                                      ; preds = %..loopexit10_crit_edge, %50
  br label %79

..loopexit11_crit_edge:                           ; preds = %67
  br label %.loopexit11

.loopexit11:                                      ; preds = %..loopexit11_crit_edge, %62
  br label %79

79:                                               ; preds = %.loopexit11, %.loopexit10, %.loopexit9, %.loopexit, %40
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_image(%struct.png_struct_def* noalias %0, i8** %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %16, label %4

4:                                                ; preds = %2
  %5 = call i32 bitcast (i32 (%struct.png_struct_def.199*)* @png_set_interlace_handling to i32 (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 38
  %7 = icmp slt i32 0, %5
  br i1 %7, label %.preheader.lr.ph, label %.loopexit

.preheader.lr.ph:                                 ; preds = %4
  br label %.preheader

.preheader:                                       ; preds = %.preheader.lr.ph, %14
  %.015 = phi i32 [ 0, %.preheader.lr.ph ], [ %15, %14 ]
  %8 = load i32, i32* %6, align 4
  %9 = icmp ult i32 0, %8
  br i1 %9, label %.lr.ph, label %14

.lr.ph:                                           ; preds = %.preheader
  br label %10

10:                                               ; preds = %.lr.ph, %10
  %lsr.iv = phi i64 [ 0, %.lr.ph ], [ %lsr.iv.next, %10 ]
  %scevgep = getelementptr i8*, i8** %1, i64 %lsr.iv
  %11 = load i8*, i8** %scevgep, align 8
  call void @png_write_row(%struct.png_struct_def* %0, i8* %11)
  %12 = load i32, i32* %6, align 4
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 1
  %tmp = trunc i64 %lsr.iv.next to i32
  %13 = icmp ult i32 %tmp, %12
  br i1 %13, label %10, label %._crit_edge

._crit_edge:                                      ; preds = %10
  br label %14

14:                                               ; preds = %._crit_edge, %.preheader
  %15 = add nuw nsw i32 %.015, 1
  %exitcond = icmp ne i32 %15, %5
  br i1 %exitcond, label %.preheader, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %14
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %4
  br label %16

16:                                               ; preds = %.loopexit, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_flush(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %2
  %5 = icmp slt i32 %1, 0
  %. = select i1 %5, i32 0, i32 %1
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 77
  store i32 %., i32* %6, align 8
  br label %7

7:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_filter(%struct.png_struct_def* noalias %0, i32 %1, i32 %2) #11 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %121, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 122
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 4
  %9 = icmp ne i32 %8, 0
  %10 = icmp eq i32 %1, 64
  %or.cond = select i1 %9, i1 %10, i1 false
  %.01 = select i1 %or.cond, i32 0, i32 %1
  %11 = icmp eq i32 %.01, 0
  br i1 %11, label %12, label %120

12:                                               ; preds = %5
  %13 = and i32 %2, 255
  switch i32 %13, label %25 [
    i32 5, label %14
    i32 6, label %14
    i32 7, label %14
    i32 0, label %15
    i32 1, label %17
    i32 2, label %19
    i32 3, label %21
    i32 4, label %23
  ]

14:                                               ; preds = %12, %12, %12
  call void @png_app_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7.518, i32 0, i32 0))
  br label %15

15:                                               ; preds = %12, %14
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 60
  store i8 8, i8* %16, align 2
  br label %28

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 60
  store i8 16, i8* %18, align 2
  br label %28

19:                                               ; preds = %12
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 60
  store i8 32, i8* %20, align 2
  br label %28

21:                                               ; preds = %12
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 60
  store i8 64, i8* %22, align 2
  br label %28

23:                                               ; preds = %12
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 60
  store i8 -128, i8* %24, align 2
  br label %28

25:                                               ; preds = %12
  %26 = trunc i32 %2 to i8
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 60
  store i8 %26, i8* %27, align 2
  br label %28

28:                                               ; preds = %25, %23, %21, %19, %17, %15
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 46
  %30 = load i8*, i8** %29, align 8
  %31 = icmp ne i8* %30, null
  br i1 %31, label %32, label %117

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 38
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 1
  %36 = and i32 %2, -225
  %spec.select = select i1 %35, i32 %36, i32 %2
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, 1
  %40 = and i32 %spec.select, -209
  %.13 = select i1 %39, i32 %40, i32 %spec.select
  %41 = and i32 %.13, 224
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %43, label %49

43:                                               ; preds = %32
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 45
  %45 = load i8*, i8** %44, align 8
  %46 = icmp eq i8* %45, null
  br i1 %46, label %47, label %49

47:                                               ; preds = %43
  call void @png_app_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.8.519, i32 0, i32 0))
  %48 = and i32 %.13, -225
  br label %49

49:                                               ; preds = %47, %43, %32
  %.24 = phi i32 [ %48, %47 ], [ %.13, %43 ], [ %.13, %32 ]
  %50 = and i32 %.24, 16
  %51 = icmp ne i32 %50, 0
  %52 = add nsw i32 0, 1
  %spec.select6 = select i1 %51, i32 %52, i32 0
  %53 = and i32 %.24, 32
  %54 = icmp ne i32 %53, 0
  %55 = add nsw i32 %spec.select6, 1
  %.1 = select i1 %54, i32 %55, i32 %spec.select6
  %56 = and i32 %.24, 64
  %57 = icmp ne i32 %56, 0
  %58 = add nsw i32 %.1, 1
  %.2 = select i1 %57, i32 %58, i32 %.1
  %59 = and i32 %.24, 128
  %60 = icmp ne i32 %59, 0
  %61 = add nsw i32 %.2, 1
  %.3 = select i1 %60, i32 %61, i32 %.2
  %62 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 66
  %63 = load i8, i8* %62, align 4
  %64 = zext i8 %63 to i32
  %65 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 63
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = mul nsw i32 %64, %67
  %69 = icmp sge i32 %68, 8
  br i1 %69, label %70, label %84

70:                                               ; preds = %49
  %71 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %72 = load i32, i32* %71, align 8
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 66
  %75 = load i8, i8* %74, align 4
  %76 = zext i8 %75 to i32
  %77 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 63
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = mul nsw i32 %76, %79
  %81 = sext i32 %80 to i64
  %82 = lshr i64 %81, 3
  %83 = mul i64 %73, %82
  br label %99

84:                                               ; preds = %49
  %85 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 37
  %86 = load i32, i32* %85, align 8
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 66
  %89 = load i8, i8* %88, align 4
  %90 = zext i8 %89 to i32
  %91 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 63
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = mul nsw i32 %90, %93
  %95 = sext i32 %94 to i64
  %96 = mul i64 %87, %95
  %97 = add i64 %96, 7
  %98 = lshr i64 %97, 3
  br label %99

99:                                               ; preds = %84, %70
  %100 = phi i64 [ %83, %70 ], [ %98, %84 ]
  %101 = add i64 %100, 1
  %102 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 47
  %103 = load i8*, i8** %102, align 8
  %104 = icmp eq i8* %103, null
  br i1 %104, label %105, label %108

105:                                              ; preds = %99
  %106 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %101)
  %107 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 47
  store i8* %106, i8** %107, align 8
  br label %108

108:                                              ; preds = %105, %99
  %109 = icmp sgt i32 %.3, 1
  br i1 %109, label %110, label %117

110:                                              ; preds = %108
  %111 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 48
  %112 = load i8*, i8** %111, align 8
  %113 = icmp eq i8* %112, null
  br i1 %113, label %114, label %117

114:                                              ; preds = %110
  %115 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %0, i64 %101)
  %116 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 48
  store i8* %115, i8** %116, align 8
  br label %117

117:                                              ; preds = %108, %114, %110, %28
  %.35 = phi i32 [ %2, %28 ], [ %.24, %110 ], [ %.24, %114 ], [ %.24, %108 ]
  %118 = trunc i32 %.35 to i8
  %119 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 60
  store i8 %118, i8* %119, align 2
  br label %121

120:                                              ; preds = %5
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9.520, i32 0, i32 0)) #24
  unreachable

121:                                              ; preds = %3, %117
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_filter_heuristics(%struct.png_struct_def* noalias %0, i32 %1, i32 %2, double* %3, double* %4) #11 {
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_filter_heuristics_fixed(%struct.png_struct_def* noalias %0, i32 %1, i32 %2, i32* %3, i32* %4) #11 {
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_compression_level(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 22
  store i32 %1, i32* %5, align 4
  br label %6

6:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_compression_mem_level(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 25
  store i32 %1, i32* %5, align 8
  br label %6

6:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_compression_strategy(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 16
  %6 = load i32, i32* %5, align 8
  %7 = or i32 %6, 1
  store i32 %7, i32* %5, align 8
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 26
  store i32 %1, i32* %8, align 4
  br label %9

9:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_compression_window_bits(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = icmp sgt i32 %1, 15
  br i1 %5, label %6, label %7

6:                                                ; preds = %4
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.10.521, i32 0, i32 0))
  br label %10

7:                                                ; preds = %4
  %8 = icmp slt i32 %1, 8
  br i1 %8, label %9, label %10

9:                                                ; preds = %7
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.11.522, i32 0, i32 0))
  br label %10

10:                                               ; preds = %7, %9, %6
  %.1 = phi i32 [ 15, %6 ], [ 8, %9 ], [ %1, %7 ]
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 24
  store i32 %.1, i32* %11, align 4
  br label %12

12:                                               ; preds = %2, %10
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_compression_method(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = icmp ne i32 %1, 8
  br i1 %5, label %6, label %7

6:                                                ; preds = %4
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.12.523, i32 0, i32 0))
  br label %7

7:                                                ; preds = %6, %4
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 23
  store i32 %1, i32* %8, align 8
  br label %9

9:                                                ; preds = %2, %7
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_text_compression_level(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 27
  store i32 %1, i32* %5, align 8
  br label %6

6:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_text_compression_mem_level(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 30
  store i32 %1, i32* %5, align 4
  br label %6

6:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_text_compression_strategy(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 31
  store i32 %1, i32* %5, align 8
  br label %6

6:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_text_compression_window_bits(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = icmp sgt i32 %1, 15
  br i1 %5, label %6, label %7

6:                                                ; preds = %4
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.10.521, i32 0, i32 0))
  br label %10

7:                                                ; preds = %4
  %8 = icmp slt i32 %1, 8
  br i1 %8, label %9, label %10

9:                                                ; preds = %7
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.11.522, i32 0, i32 0))
  br label %10

10:                                               ; preds = %7, %9, %6
  %.1 = phi i32 [ 15, %6 ], [ 8, %9 ], [ %1, %7 ]
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 29
  store i32 %.1, i32* %11, align 8
  br label %12

12:                                               ; preds = %2, %10
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_text_compression_method(%struct.png_struct_def* noalias %0, i32 %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = icmp ne i32 %1, 8
  br i1 %5, label %6, label %7

6:                                                ; preds = %4
  call void @png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.12.523, i32 0, i32 0))
  br label %7

7:                                                ; preds = %6, %4
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 28
  store i32 %1, i32* %8, align 4
  br label %9

9:                                                ; preds = %2, %7
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_write_status_fn(%struct.png_struct_def* noalias %0, void (%struct.png_struct_def*, i32, i32)* %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 92
  store void (%struct.png_struct_def*, i32, i32)* %1, void (%struct.png_struct_def*, i32, i32)** %5, align 8
  br label %6

6:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_set_write_user_transform_fn(%struct.png_struct_def* noalias %0, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)* %1) #11 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 17
  %6 = load i32, i32* %5, align 4
  %7 = or i32 %6, 1048576
  store i32 %7, i32* %5, align 4
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 11
  store void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)* %1, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)** %8, align 8
  br label %9

9:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @png_write_png(%struct.png_struct_def* noalias %0, %struct.png_info_def* noalias %1, i32 %2, i8* %3) #11 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %or.cond = select i1 %5, i1 true, i1 %6
  br i1 %or.cond, label %69, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 32768
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %7
  call void @png_app_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.13.524, i32 0, i32 0))
  br label %69

13:                                               ; preds = %7
  call void @png_write_info(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  %14 = and i32 %2, 32
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %13
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_invert_mono to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %17

17:                                               ; preds = %16, %13
  %18 = and i32 %2, 64
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %27

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = and i32 %22, 2
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 24
  call void bitcast (void (%struct.png_struct_def.199*, %struct.png_color_8_struct*)* @png_set_shift to void (%struct.png_struct_def*, %struct.png_color_8_struct*)*)(%struct.png_struct_def* %0, %struct.png_color_8_struct* %26)
  br label %27

27:                                               ; preds = %20, %25, %17
  %28 = and i32 %2, 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %27
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_packing to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %31

31:                                               ; preds = %30, %27
  %32 = and i32 %2, 256
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_swap_alpha to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %35

35:                                               ; preds = %34, %31
  %36 = and i32 %2, 6144
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %50

38:                                               ; preds = %35
  %39 = and i32 %2, 4096
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %46

41:                                               ; preds = %38
  %42 = and i32 %2, 2048
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %41
  call void @png_app_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.14.525, i32 0, i32 0))
  br label %45

45:                                               ; preds = %44, %41
  call void bitcast (void (%struct.png_struct_def.199*, i32, i32)* @png_set_filler to void (%struct.png_struct_def*, i32, i32)*)(%struct.png_struct_def* %0, i32 0, i32 1)
  br label %50

46:                                               ; preds = %38
  %47 = and i32 %2, 2048
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %46
  call void bitcast (void (%struct.png_struct_def.199*, i32, i32)* @png_set_filler to void (%struct.png_struct_def*, i32, i32)*)(%struct.png_struct_def* %0, i32 0, i32 0)
  br label %50

50:                                               ; preds = %45, %49, %46, %35
  %51 = and i32 %2, 128
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %50
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_bgr to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %54

54:                                               ; preds = %53, %50
  %55 = and i32 %2, 512
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_swap to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %58

58:                                               ; preds = %57, %54
  %59 = and i32 %2, 8
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_packswap to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %62

62:                                               ; preds = %61, %58
  %63 = and i32 %2, 1024
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_invert_alpha to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %0)
  br label %66

66:                                               ; preds = %65, %62
  %67 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i32 0, i32 53
  %68 = load i8**, i8*** %67, align 8
  call void @png_write_image(%struct.png_struct_def* %0, i8** %68)
  call void @png_write_end(%struct.png_struct_def* %0, %struct.png_info_def* %1)
  br label %69

69:                                               ; preds = %4, %66, %12
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_image_write_to_memory(%struct.png_image* %0, i8* %1, i64* noalias %2, i32 %3, i8* %4, i32 %5, i8* %6) #11 {
  %8 = alloca %struct.png_image_write_control, align 8
  %magicptr = ptrtoint %struct.png_image* %0 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %52, label %9

9:                                                ; preds = %7
  %10 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %48

13:                                               ; preds = %9
  %14 = icmp ne i64* %2, null
  %15 = icmp ne i8* %4, null
  %or.cond = select i1 %14, i1 %15, i1 false
  br i1 %or.cond, label %16, label %46

16:                                               ; preds = %13
  %17 = icmp eq i8* %1, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %16
  store i64 0, i64* %2, align 8
  br label %19

19:                                               ; preds = %18, %16
  %20 = call i32 @png_image_write_init(%struct.png_image* %0)
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %52

22:                                               ; preds = %19
  %23 = bitcast %struct.png_image_write_control* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 88, i1 false)
  %24 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %8, i32 0, i32 0
  store %struct.png_image* %0, %struct.png_image** %24, align 8
  %25 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %8, i32 0, i32 1
  store i8* %4, i8** %25, align 8
  %26 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %8, i32 0, i32 2
  store i32 %5, i32* %26, align 8
  %27 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %8, i32 0, i32 3
  store i8* %6, i8** %27, align 8
  %28 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %8, i32 0, i32 4
  store i32 %3, i32* %28, align 8
  %29 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %8, i32 0, i32 8
  store i8* %1, i8** %29, align 8
  %30 = load i64, i64* %2, align 8
  %31 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %8, i32 0, i32 9
  store i64 %30, i64* %31, align 8
  %32 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %8, i32 0, i32 10
  store i64 0, i64* %32, align 8
  %33 = bitcast %struct.png_image_write_control* %8 to i8*
  %34 = call i32 @png_safe_execute(%struct.png_image* %0, i32 (i8*)* @png_image_write_memory, i8* %33)
  call void @png_image_free(%struct.png_image* %0)
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %52

36:                                               ; preds = %22
  %37 = icmp ne i8* %1, null
  br i1 %37, label %38, label %43

38:                                               ; preds = %36
  %39 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %8, i32 0, i32 10
  %40 = load i64, i64* %39, align 8
  %41 = load i64, i64* %2, align 8
  %42 = icmp ugt i64 %40, %41
  %spec.select = select i1 %42, i32 0, i32 %34
  br label %43

43:                                               ; preds = %38, %36
  %.01 = phi i32 [ %34, %36 ], [ %spec.select, %38 ]
  %44 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %8, i32 0, i32 10
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %2, align 8
  br label %52

46:                                               ; preds = %13
  %47 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.15.526, i32 0, i32 0))
  br label %52

48:                                               ; preds = %9
  %49 = icmp ne %struct.png_image* %0, null
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16.527, i32 0, i32 0))
  br label %52

52:                                               ; preds = %7, %48, %19, %22, %43, %50, %46
  %.0 = phi i32 [ %47, %46 ], [ %51, %50 ], [ %.01, %43 ], [ %34, %22 ], [ 0, %19 ], [ 0, %7 ], [ 0, %48 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_image_write_init(%struct.png_image* %0) #11 {
  %2 = alloca %struct.png_struct_def*, align 8
  %3 = alloca %struct.png_info_def*, align 8
  %4 = bitcast %struct.png_image* %0 to i8*
  %5 = call noalias %struct.png_struct_def* @png_create_write_struct(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23.535, i32 0, i32 0), i8* %4, void (%struct.png_struct_def*, i8*)* @png_safe_error, void (%struct.png_struct_def*, i8*)* @png_safe_warning)
  store %struct.png_struct_def* %5, %struct.png_struct_def** %2, align 8
  %6 = load %struct.png_struct_def*, %struct.png_struct_def** %2, align 8
  %7 = icmp ne %struct.png_struct_def* %6, null
  br i1 %7, label %8, label %32

8:                                                ; preds = %1
  %9 = load %struct.png_struct_def*, %struct.png_struct_def** %2, align 8
  %10 = call noalias %struct.png_info_def* @png_create_info_struct(%struct.png_struct_def* %9)
  store %struct.png_info_def* %10, %struct.png_info_def** %3, align 8
  %11 = load %struct.png_info_def*, %struct.png_info_def** %3, align 8
  %12 = icmp ne %struct.png_info_def* %11, null
  br i1 %12, label %13, label %31

13:                                               ; preds = %8
  %14 = load %struct.png_struct_def*, %struct.png_struct_def** %2, align 8
  %15 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc_warn to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %14, i64 48)
  %16 = bitcast i8* %15 to %struct.png_control*
  %17 = icmp ne %struct.png_control* %16, null
  br i1 %17, label %18, label %29

18:                                               ; preds = %13
  %19 = bitcast %struct.png_control* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 48, i1 false)
  %20 = load %struct.png_struct_def*, %struct.png_struct_def** %2, align 8
  %21 = getelementptr inbounds %struct.png_control, %struct.png_control* %16, i32 0, i32 0
  store %struct.png_struct_def* %20, %struct.png_struct_def** %21, align 8
  %22 = load %struct.png_info_def*, %struct.png_info_def** %3, align 8
  %23 = getelementptr inbounds %struct.png_control, %struct.png_control* %16, i32 0, i32 1
  store %struct.png_info_def* %22, %struct.png_info_def** %23, align 8
  %24 = getelementptr inbounds %struct.png_control, %struct.png_control* %16, i32 0, i32 5
  %25 = load i8, i8* %24, align 8
  %26 = and i8 %25, -2
  %27 = or i8 %26, 1
  store i8 %27, i8* %24, align 8
  %28 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 0
  store %struct.png_control* %16, %struct.png_control** %28, align 8
  br label %34

29:                                               ; preds = %13
  %30 = load %struct.png_struct_def*, %struct.png_struct_def** %2, align 8
  call void @png_destroy_info_struct(%struct.png_struct_def* %30, %struct.png_info_def** %3)
  br label %31

31:                                               ; preds = %29, %8
  call void @png_destroy_write_struct(%struct.png_struct_def** %2, %struct.png_info_def** null)
  br label %32

32:                                               ; preds = %31, %1
  %33 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.24.536, i32 0, i32 0))
  br label %34

34:                                               ; preds = %32, %18
  %.0 = phi i32 [ 1, %18 ], [ %33, %32 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_image_write_memory(i8* %0) #11 {
  %2 = bitcast i8* %0 to %struct.png_image_write_control*
  %3 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %2, i32 0, i32 0
  %4 = load %struct.png_image*, %struct.png_image** %3, align 8
  %5 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 0
  %6 = load %struct.png_control*, %struct.png_control** %5, align 8
  %7 = getelementptr inbounds %struct.png_control, %struct.png_control* %6, i32 0, i32 0
  %8 = load %struct.png_struct_def*, %struct.png_struct_def** %7, align 8
  %9 = bitcast %struct.png_image_write_control* %2 to i8*
  call void @png_set_write_fn(%struct.png_struct_def* %8, i8* %9, void (%struct.png_struct_def*, i8*, i64)* @image_memory_write, void (%struct.png_struct_def*)* @image_memory_flush)
  %10 = bitcast %struct.png_image_write_control* %2 to i8*
  %11 = call i32 @png_image_write_main(i8* %10)
  ret i32 %11
}

; Function Attrs: noinline nounwind uwtable
define internal void @image_memory_write(%struct.png_struct_def* %0, i8* %1, i64 %2) #11 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i32 0, i32 9
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.png_image_write_control*
  %7 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %6, i32 0, i32 10
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 -1, %8
  %10 = icmp ule i64 %2, %9
  br i1 %10, label %11, label %25

11:                                               ; preds = %3
  %12 = icmp ugt i64 %2, 0
  br i1 %12, label %13, label %26

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %6, i32 0, i32 9
  %15 = load i64, i64* %14, align 8
  %16 = add i64 %8, %2
  %17 = icmp uge i64 %15, %16
  br i1 %17, label %18, label %22

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %6, i32 0, i32 8
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 %8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %21, i8* align 1 %1, i64 %2, i1 false)
  br label %22

22:                                               ; preds = %18, %13
  %23 = add i64 %8, %2
  %24 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %6, i32 0, i32 10
  store i64 %23, i64* %24, align 8
  br label %26

25:                                               ; preds = %3
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25.534, i32 0, i32 0)) #24
  unreachable

26:                                               ; preds = %11, %22
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @image_memory_flush(%struct.png_struct_def* %0) #11 {
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_image_write_main(i8* %0) #11 {
  %2 = alloca i16, align 2
  %3 = bitcast i8* %0 to %struct.png_image_write_control*
  %4 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 0
  %5 = load %struct.png_image*, %struct.png_image** %4, align 8
  %6 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 0
  %7 = load %struct.png_control*, %struct.png_control** %6, align 8
  %8 = getelementptr inbounds %struct.png_control, %struct.png_control* %7, i32 0, i32 0
  %9 = load %struct.png_struct_def*, %struct.png_struct_def** %8, align 8
  %10 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 0
  %11 = load %struct.png_control*, %struct.png_control** %10, align 8
  %12 = getelementptr inbounds %struct.png_control, %struct.png_control* %11, i32 0, i32 1
  %13 = load %struct.png_info_def*, %struct.png_info_def** %12, align 8
  %14 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %15, 8
  %17 = icmp ne i32 %16, 0
  %18 = and i32 %15, 4
  %19 = icmp ne i32 %18, 0
  %20 = select i1 %17, i1 false, i1 %19
  %21 = zext i1 %20 to i32
  %22 = icmp ne i32 %16, 0
  %23 = and i32 %15, 1
  %24 = icmp ne i32 %23, 0
  %25 = select i1 %22, i1 false, i1 %24
  %26 = zext i1 %25 to i32
  %27 = icmp ne i32 %21, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %1
  %29 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 0
  br label %32

32:                                               ; preds = %28, %1
  %33 = phi i1 [ false, %1 ], [ %31, %28 ]
  %34 = zext i1 %33 to i32
  call void @png_set_benign_errors(%struct.png_struct_def* %9, i32 0)
  %35 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 4
  %36 = load i32, i32* %35, align 4
  %37 = and i32 %36, 8
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %44, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 4
  %41 = load i32, i32* %40, align 4
  %42 = and i32 %41, 3
  %43 = add i32 %42, 1
  br label %44

44:                                               ; preds = %32, %39
  %45 = phi i32 [ %43, %39 ], [ 1, %32 ]
  %46 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = udiv i32 2147483647, %45
  %49 = icmp ule i32 %47, %48
  br i1 %49, label %50, label %87

50:                                               ; preds = %44
  %51 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = mul i32 %52, %45
  %54 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 2
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %50
  %58 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 2
  store i32 %53, i32* %58, align 8
  br label %59

59:                                               ; preds = %57, %50
  %60 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 2
  %61 = load i32, i32* %60, align 8
  %62 = icmp slt i32 %61, 0
  br i1 %62, label %63, label %67

63:                                               ; preds = %59
  %64 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 2
  %65 = load i32, i32* %64, align 8
  %66 = sub nsw i32 0, %65
  br label %70

67:                                               ; preds = %59
  %68 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 2
  %69 = load i32, i32* %68, align 8
  br label %70

70:                                               ; preds = %67, %63
  %.07 = phi i32 [ %66, %63 ], [ %69, %67 ]
  %71 = icmp uge i32 %.07, %53
  br i1 %71, label %72, label %82

72:                                               ; preds = %70
  %73 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 3
  %74 = load i32, i32* %73, align 8
  %75 = udiv i32 -1, %53
  %76 = icmp ugt i32 %74, %75
  br i1 %76, label %77, label %92

77:                                               ; preds = %72
  %78 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 0
  %79 = load %struct.png_control*, %struct.png_control** %78, align 8
  %80 = getelementptr inbounds %struct.png_control, %struct.png_control* %79, i32 0, i32 0
  %81 = load %struct.png_struct_def*, %struct.png_struct_def** %80, align 8
  call void @png_error(%struct.png_struct_def* %81, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.26.528, i32 0, i32 0)) #24
  unreachable

82:                                               ; preds = %70
  %83 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 0
  %84 = load %struct.png_control*, %struct.png_control** %83, align 8
  %85 = getelementptr inbounds %struct.png_control, %struct.png_control* %84, i32 0, i32 0
  %86 = load %struct.png_struct_def*, %struct.png_struct_def** %85, align 8
  call void @png_error(%struct.png_struct_def* %86, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.27.529, i32 0, i32 0)) #24
  unreachable

87:                                               ; preds = %44
  %88 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 0
  %89 = load %struct.png_control*, %struct.png_control** %88, align 8
  %90 = getelementptr inbounds %struct.png_control, %struct.png_control* %89, i32 0, i32 0
  %91 = load %struct.png_struct_def*, %struct.png_struct_def** %90, align 8
  call void @png_error(%struct.png_struct_def* %91, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.28.530, i32 0, i32 0)) #24
  unreachable

92:                                               ; preds = %72
  %93 = and i32 %15, 8
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %124

95:                                               ; preds = %92
  %96 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 3
  %97 = load i8*, i8** %96, align 8
  %98 = icmp ne i8* %97, null
  br i1 %98, label %99, label %119

99:                                               ; preds = %95
  %100 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 6
  %101 = load i32, i32* %100, align 4
  %102 = icmp ugt i32 %101, 0
  br i1 %102, label %103, label %119

103:                                              ; preds = %99
  %104 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 6
  %105 = load i32, i32* %104, align 4
  %106 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 3
  %109 = load i32, i32* %108, align 8
  %110 = icmp ugt i32 %105, 16
  br i1 %110, label %117, label %111

111:                                              ; preds = %103
  %112 = icmp ugt i32 %105, 4
  br i1 %112, label %117, label %113

113:                                              ; preds = %111
  %114 = icmp ugt i32 %105, 2
  %115 = zext i1 %114 to i64
  %116 = select i1 %114, i32 2, i32 1
  br label %117

117:                                              ; preds = %113, %111, %103
  %118 = phi i32 [ 8, %103 ], [ %116, %113 ], [ 4, %111 ]
  call void @png_set_IHDR(%struct.png_struct_def* %9, %struct.png_info_def* %13, i32 %107, i32 %109, i32 %118, i32 3, i32 0, i32 0, i32 0)
  call void @png_image_set_PLTE(%struct.png_image_write_control* %3)
  br label %141

119:                                              ; preds = %99, %95
  %120 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 0
  %121 = load %struct.png_control*, %struct.png_control** %120, align 8
  %122 = getelementptr inbounds %struct.png_control, %struct.png_control* %121, i32 0, i32 0
  %123 = load %struct.png_struct_def*, %struct.png_struct_def** %122, align 8
  call void @png_error(%struct.png_struct_def* %123, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.29.531, i32 0, i32 0)) #24
  unreachable

124:                                              ; preds = %92
  %125 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 2
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 3
  %128 = load i32, i32* %127, align 8
  %129 = icmp ne i32 %34, 0
  %130 = zext i1 %129 to i64
  %131 = select i1 %129, i32 16, i32 8
  %132 = and i32 %15, 2
  %133 = icmp ne i32 %132, 0
  %134 = zext i1 %133 to i64
  %135 = select i1 %133, i32 2, i32 0
  %136 = and i32 %15, 1
  %137 = icmp ne i32 %136, 0
  %138 = zext i1 %137 to i64
  %139 = select i1 %137, i32 4, i32 0
  %140 = add nsw i32 %135, %139
  call void @png_set_IHDR(%struct.png_struct_def* %9, %struct.png_info_def* %13, i32 %126, i32 %128, i32 %131, i32 %140, i32 0, i32 0, i32 0)
  br label %141

141:                                              ; preds = %124, %117
  %142 = icmp ne i32 %34, 0
  br i1 %142, label %143, label %149

143:                                              ; preds = %141
  call void @png_set_gAMA_fixed(%struct.png_struct_def* %9, %struct.png_info_def* %13, i32 100000)
  %144 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 5
  %145 = load i32, i32* %144, align 8
  %146 = and i32 %145, 1
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %156

148:                                              ; preds = %143
  call void @png_set_cHRM_fixed(%struct.png_struct_def* %9, %struct.png_info_def* %13, i32 31270, i32 32900, i32 64000, i32 33000, i32 30000, i32 60000, i32 15000, i32 6000)
  br label %156

149:                                              ; preds = %141
  %150 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 5
  %151 = load i32, i32* %150, align 8
  %152 = and i32 %151, 1
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %155

154:                                              ; preds = %149
  call void @png_set_sRGB(%struct.png_struct_def* %9, %struct.png_info_def* %13, i32 0)
  br label %156

155:                                              ; preds = %149
  call void @png_set_gAMA_fixed(%struct.png_struct_def* %9, %struct.png_info_def* %13, i32 45455)
  br label %156

156:                                              ; preds = %154, %155, %143, %148
  call void @png_write_info(%struct.png_struct_def* %9, %struct.png_info_def* %13)
  %157 = icmp ne i32 %34, 0
  br i1 %157, label %158, label %164

158:                                              ; preds = %156
  store i16 1, i16* %2, align 2
  %159 = bitcast i16* %2 to i8*
  %160 = load i8, i8* %159, align 2
  %161 = zext i8 %160 to i32
  %162 = icmp ne i32 %161, 0
  br i1 %162, label %163, label %164

163:                                              ; preds = %158
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_swap to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %9)
  br label %164

164:                                              ; preds = %158, %163, %156
  %165 = and i32 %15, 16
  %166 = icmp ne i32 %165, 0
  br i1 %166, label %167, label %174

167:                                              ; preds = %164
  %168 = icmp eq i32 %16, 0
  %169 = and i32 %15, 2
  %170 = icmp ne i32 %169, 0
  %or.cond = and i1 %168, %170
  br i1 %or.cond, label %171, label %172

171:                                              ; preds = %167
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_bgr to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %9)
  br label %172

172:                                              ; preds = %171, %167
  %173 = and i32 %15, -17
  br label %174

174:                                              ; preds = %172, %164
  %.06 = phi i32 [ %173, %172 ], [ %15, %164 ]
  %175 = and i32 %.06, 32
  %176 = icmp ne i32 %175, 0
  br i1 %176, label %177, label %184

177:                                              ; preds = %174
  %178 = icmp eq i32 %16, 0
  %179 = and i32 %.06, 1
  %180 = icmp ne i32 %179, 0
  %or.cond10 = select i1 %178, i1 %180, i1 false
  br i1 %or.cond10, label %181, label %182

181:                                              ; preds = %177
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_swap_alpha to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %9)
  br label %182

182:                                              ; preds = %181, %177
  %183 = and i32 %.06, -33
  br label %184

184:                                              ; preds = %182, %174
  %.1 = phi i32 [ %183, %182 ], [ %.06, %174 ]
  %185 = icmp ne i32 %16, 0
  br i1 %185, label %186, label %191

186:                                              ; preds = %184
  %187 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 6
  %188 = load i32, i32* %187, align 4
  %189 = icmp ule i32 %188, 16
  br i1 %189, label %190, label %191

190:                                              ; preds = %186
  call void bitcast (void (%struct.png_struct_def.199*)* @png_set_packing to void (%struct.png_struct_def*)*)(%struct.png_struct_def* %9)
  br label %191

191:                                              ; preds = %190, %186, %184
  %192 = and i32 %.1, -16
  %193 = icmp ne i32 %192, 0
  br i1 %193, label %194, label %195

194:                                              ; preds = %191
  call void @png_error(%struct.png_struct_def* %9, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.30.532, i32 0, i32 0)) #24
  unreachable

195:                                              ; preds = %191
  %196 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 1
  %197 = load i8*, i8** %196, align 8
  %198 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 2
  %199 = load i32, i32* %198, align 8
  %200 = sext i32 %199 to i64
  %201 = icmp ne i32 %21, 0
  %202 = mul i64 %200, 2
  %spec.select = select i1 %201, i64 %202, i64 %200
  %203 = icmp slt i64 %spec.select, 0
  br i1 %203, label %204, label %212

204:                                              ; preds = %195
  %205 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 3
  %206 = load i32, i32* %205, align 8
  %207 = sub i32 %206, 1
  %208 = zext i32 %207 to i64
  %209 = sub nsw i64 0, %spec.select
  %210 = mul nsw i64 %208, %209
  %211 = getelementptr inbounds i8, i8* %197, i64 %210
  br label %212

212:                                              ; preds = %204, %195
  %.05 = phi i8* [ %211, %204 ], [ %197, %195 ]
  %213 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 5
  store i8* %.05, i8** %213, align 8
  %214 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 6
  store i64 %spec.select, i64* %214, align 8
  %215 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 5
  %216 = load i32, i32* %215, align 8
  %217 = and i32 %216, 2
  %218 = icmp ne i32 %217, 0
  br i1 %218, label %219, label %220

219:                                              ; preds = %212
  call void @png_set_filter(%struct.png_struct_def* %9, i32 0, i32 0)
  call void @png_set_compression_level(%struct.png_struct_def* %9, i32 3)
  br label %220

220:                                              ; preds = %219, %212
  %221 = icmp ne i32 %21, 0
  %222 = icmp ne i32 %26, 0
  %or.cond11 = select i1 %221, i1 %222, i1 false
  br i1 %or.cond11, label %229, label %223

223:                                              ; preds = %220
  %224 = icmp eq i32 %16, 0
  br i1 %224, label %225, label %243

225:                                              ; preds = %223
  %226 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 4
  %227 = load i32, i32* %226, align 8
  %228 = icmp ne i32 %227, 0
  br i1 %228, label %229, label %243

229:                                              ; preds = %220, %225
  %230 = call i64 @png_get_rowbytes(%struct.png_struct_def* %9, %struct.png_info_def* %13)
  %231 = call noalias i8* bitcast (i8* (%struct.png_struct_def.60*, i64)* @png_malloc to i8* (%struct.png_struct_def*, i64)*)(%struct.png_struct_def* %9, i64 %230)
  %232 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 7
  store i8* %231, i8** %232, align 8
  %233 = icmp ne i32 %34, 0
  br i1 %233, label %234, label %237

234:                                              ; preds = %229
  %235 = bitcast %struct.png_image_write_control* %3 to i8*
  %236 = call i32 @png_safe_execute(%struct.png_image* %5, i32 (i8*)* @png_write_image_16bit, i8* %235)
  br label %240

237:                                              ; preds = %229
  %238 = bitcast %struct.png_image_write_control* %3 to i8*
  %239 = call i32 @png_safe_execute(%struct.png_image* %5, i32 (i8*)* @png_write_image_8bit, i8* %238)
  br label %240

240:                                              ; preds = %237, %234
  %.03 = phi i32 [ %236, %234 ], [ %239, %237 ]
  %241 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 7
  store i8* null, i8** %241, align 8
  call void bitcast (void (%struct.png_struct_def.60*, i8*)* @png_free to void (%struct.png_struct_def*, i8*)*)(%struct.png_struct_def* %9, i8* %231)
  %242 = icmp eq i32 %.03, 0
  br i1 %242, label %256, label %255

243:                                              ; preds = %225, %223
  %244 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 5
  %245 = load i8*, i8** %244, align 8
  %246 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %3, i32 0, i32 6
  %247 = load i64, i64* %246, align 8
  %248 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 3
  %249 = load i32, i32* %248, align 8
  %250 = icmp ugt i32 %249, 0
  br i1 %250, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %243
  br label %251

251:                                              ; preds = %.lr.ph, %251
  %.0113 = phi i32 [ %249, %.lr.ph ], [ %253, %251 ]
  %.0212 = phi i8* [ %245, %.lr.ph ], [ %252, %251 ]
  call void @png_write_row(%struct.png_struct_def* %9, i8* %.0212)
  %252 = getelementptr inbounds i8, i8* %.0212, i64 %247
  %253 = add i32 %.0113, -1
  %254 = icmp ugt i32 %253, 0
  br i1 %254, label %251, label %..loopexit_crit_edge

..loopexit_crit_edge:                             ; preds = %251
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %243
  br label %255

255:                                              ; preds = %.loopexit, %240
  call void @png_write_end(%struct.png_struct_def* %9, %struct.png_info_def* %13)
  br label %256

256:                                              ; preds = %240, %255
  %.0 = phi i32 [ 1, %255 ], [ 0, %240 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define internal void @png_image_set_PLTE(%struct.png_image_write_control* %0) #11 {
  %2 = alloca [256 x %struct.png_color_struct], align 16
  %3 = alloca [256 x i8], align 16
  %4 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %0, i32 0, i32 0
  %5 = load %struct.png_image*, %struct.png_image** %4, align 8
  %6 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %0, i32 0, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 6
  %9 = load i32, i32* %8, align 4
  %10 = icmp ugt i32 %9, 256
  br i1 %10, label %14, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 6
  %13 = load i32, i32* %12, align 4
  br label %14

14:                                               ; preds = %1, %11
  %15 = phi i32 [ %13, %11 ], [ 256, %1 ]
  %16 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 4
  %17 = load i32, i32* %16, align 4
  %18 = and i32 %17, 3
  %19 = add i32 %18, 1
  %20 = and i32 %17, 32
  %21 = icmp ne i32 %20, 0
  %22 = and i32 %17, 1
  %23 = icmp ne i32 %22, 0
  %24 = select i1 %21, i1 %23, i1 false
  %25 = zext i1 %24 to i32
  %26 = and i32 %17, 16
  %27 = icmp ne i32 %26, 0
  %28 = zext i1 %27 to i64
  %29 = select i1 %27, i32 2, i32 0
  %30 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %30, i8 -1, i64 256, i1 false)
  %31 = getelementptr inbounds [256 x %struct.png_color_struct], [256 x %struct.png_color_struct]* %2, i32 0, i32 0
  %32 = bitcast %struct.png_color_struct* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %32, i8 0, i64 768, i1 false)
  %33 = and i32 %17, 4
  %34 = icmp ne i32 %33, 0
  %35 = xor i32 1, %25
  %36 = sext i32 %35 to i64
  %37 = sext i32 %25 to i64
  %38 = icmp ne i32 %25, 0
  %39 = select i1 %38, i32 0, i32 3
  %40 = sext i32 %39 to i64
  %41 = xor i32 2, %29
  %42 = add nsw i32 %25, %41
  %43 = sext i32 %42 to i64
  %44 = add nsw i32 %25, 1
  %45 = sext i32 %44 to i64
  %46 = add nsw i32 %25, %29
  %47 = sext i32 %46 to i64
  %48 = bitcast i8* %7 to i16*
  %49 = and i32 %19, 1
  %50 = icmp ne i32 %49, 0
  %51 = icmp ne i32 %25, 0
  %52 = sub i32 %19, 1
  %53 = select i1 %51, i32 0, i32 %52
  %54 = zext i32 %53 to i64
  %55 = icmp uge i32 %19, 3
  %56 = sext i32 %25 to i64
  %57 = xor i32 2, %29
  %58 = add nsw i32 %25, %57
  %59 = sext i32 %58 to i64
  %60 = add nsw i32 %25, 1
  %61 = sext i32 %60 to i64
  %62 = add nsw i32 %25, %29
  %63 = sext i32 %62 to i64
  %64 = icmp uge i32 %19, 3
  %65 = xor i32 2, %29
  %66 = sext i32 %65 to i64
  %67 = xor i32 2, %29
  %68 = sext i32 %67 to i64
  %69 = xor i32 2, %29
  %70 = sext i32 %69 to i64
  %71 = sext i32 %29 to i64
  %72 = sext i32 %29 to i64
  %73 = sext i32 %29 to i64
  %74 = icmp slt i32 0, %15
  br i1 %74, label %.lr.ph, label %268

.lr.ph:                                           ; preds = %14
  %wide.trip.count = zext i32 %15 to i64
  %scevgep = getelementptr [256 x %struct.png_color_struct], [256 x %struct.png_color_struct]* %2, i64 0, i64 0, i32 2
  %scevgep12 = bitcast i8* %scevgep to [256 x %struct.png_color_struct]*
  br label %75

75:                                               ; preds = %.lr.ph, %266
  %lsr.iv27 = phi i32 [ 0, %.lr.ph ], [ %lsr.iv.next, %266 ]
  %lsr.iv = phi [256 x %struct.png_color_struct]* [ %scevgep12, %.lr.ph ], [ %267, %266 ]
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %266 ]
  %.0110 = phi i32 [ 0, %.lr.ph ], [ %.8, %266 ]
  %lsr.iv14 = bitcast [256 x %struct.png_color_struct]* %lsr.iv to i8*
  br i1 %34, label %76, label %239

76:                                               ; preds = %75
  %77 = zext i32 %lsr.iv27 to i64
  %78 = getelementptr inbounds i16, i16* %48, i64 %77
  br i1 %50, label %79, label %195

79:                                               ; preds = %76
  br i1 %64, label %80, label %168

80:                                               ; preds = %79
  %81 = getelementptr inbounds i16, i16* %78, i64 %66
  %82 = load i16, i16* %81, align 2
  %83 = zext i16 %82 to i32
  %84 = mul nsw i32 255, %83
  %85 = ashr i32 %84, 15
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %86
  %88 = load i16, i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = getelementptr inbounds i16, i16* %78, i64 %68
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nsw i32 255, %92
  %94 = and i32 %93, 32767
  %95 = getelementptr inbounds i16, i16* %78, i64 %70
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = mul nsw i32 255, %97
  %99 = ashr i32 %98, 15
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = mul nsw i32 %94, %103
  %105 = ashr i32 %104, 12
  %106 = add nsw i32 %89, %105
  %107 = ashr i32 %106, 8
  %108 = and i32 255, %107
  %109 = trunc i32 %108 to i8
  store i8 %109, i8* %lsr.iv14, align 1
  %110 = getelementptr inbounds i16, i16* %78, i64 1
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = mul nsw i32 255, %112
  %114 = ashr i32 %113, 15
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %115
  %117 = load i16, i16* %116, align 2
  %118 = zext i16 %117 to i32
  %119 = getelementptr inbounds i16, i16* %78, i64 1
  %120 = load i16, i16* %119, align 2
  %121 = zext i16 %120 to i32
  %122 = mul nsw i32 255, %121
  %123 = and i32 %122, 32767
  %124 = getelementptr inbounds i16, i16* %78, i64 1
  %125 = load i16, i16* %124, align 2
  %126 = zext i16 %125 to i32
  %127 = mul nsw i32 255, %126
  %128 = ashr i32 %127, 15
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %129
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = mul nsw i32 %123, %132
  %134 = ashr i32 %133, 12
  %135 = add nsw i32 %118, %134
  %136 = ashr i32 %135, 8
  %137 = and i32 255, %136
  %138 = trunc i32 %137 to i8
  %scevgep16 = getelementptr i8, i8* %lsr.iv14, i64 -1
  store i8 %138, i8* %scevgep16, align 1
  %139 = getelementptr inbounds i16, i16* %78, i64 %71
  %140 = load i16, i16* %139, align 2
  %141 = zext i16 %140 to i32
  %142 = mul nsw i32 255, %141
  %143 = ashr i32 %142, 15
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %144
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = getelementptr inbounds i16, i16* %78, i64 %72
  %149 = load i16, i16* %148, align 2
  %150 = zext i16 %149 to i32
  %151 = mul nsw i32 255, %150
  %152 = and i32 %151, 32767
  %153 = getelementptr inbounds i16, i16* %78, i64 %73
  %154 = load i16, i16* %153, align 2
  %155 = zext i16 %154 to i32
  %156 = mul nsw i32 255, %155
  %157 = ashr i32 %156, 15
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %158
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = mul nsw i32 %152, %161
  %163 = ashr i32 %162, 12
  %164 = add nsw i32 %147, %163
  %165 = ashr i32 %164, 8
  %166 = and i32 255, %165
  %167 = trunc i32 %166 to i8
  %scevgep17 = getelementptr i8, i8* %lsr.iv14, i64 -2
  store i8 %167, i8* %scevgep17, align 1
  br label %266

168:                                              ; preds = %79
  %169 = load i16, i16* %78, align 2
  %170 = zext i16 %169 to i32
  %171 = mul nsw i32 255, %170
  %172 = ashr i32 %171, 15
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %173
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = load i16, i16* %78, align 2
  %178 = zext i16 %177 to i32
  %179 = mul nsw i32 255, %178
  %180 = and i32 %179, 32767
  %181 = load i16, i16* %78, align 2
  %182 = zext i16 %181 to i32
  %183 = mul nsw i32 255, %182
  %184 = ashr i32 %183, 15
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %185
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i32
  %189 = mul nsw i32 %180, %188
  %190 = ashr i32 %189, 12
  %191 = add nsw i32 %176, %190
  %192 = ashr i32 %191, 8
  %193 = and i32 255, %192
  %194 = trunc i32 %193 to i8
  %scevgep18 = getelementptr i8, i8* %lsr.iv14, i64 -1
  store i8 %194, i8* %scevgep18, align 1
  %scevgep19 = getelementptr i8, i8* %lsr.iv14, i64 -2
  store i8 %194, i8* %scevgep19, align 1
  store i8 %194, i8* %lsr.iv14, align 1
  br label %266

195:                                              ; preds = %76
  %196 = getelementptr inbounds i16, i16* %78, i64 %54
  %197 = load i16, i16* %196, align 2
  %198 = zext i16 %197 to i32
  %199 = mul i32 %198, 255
  %200 = add i32 %199, 32895
  %201 = lshr i32 %200, 16
  %202 = trunc i32 %201 to i8
  %203 = zext i8 %202 to i32
  %204 = icmp sgt i32 %203, 0
  %205 = zext i8 %202 to i32
  %206 = icmp slt i32 %205, 255
  %or.cond = and i1 %204, %206
  br i1 %or.cond, label %207, label %213

207:                                              ; preds = %195
  %208 = zext i16 %197 to i32
  %209 = ashr i32 %208, 1
  %210 = add nsw i32 2139062400, %209
  %211 = zext i16 %197 to i32
  %212 = sdiv i32 %210, %211
  br label %213

213:                                              ; preds = %207, %195
  %.0 = phi i32 [ %212, %207 ], [ 0, %195 ]
  %scevgep28 = getelementptr [256 x i8], [256 x i8]* %3, i64 0, i64 %indvars.iv
  store i8 %202, i8* %scevgep28, align 1
  %214 = zext i8 %202 to i32
  %215 = icmp slt i32 %214, 255
  %216 = add i64 %indvars.iv, 1
  %tmp = trunc i64 %216 to i32
  %spec.select = select i1 %215, i32 %tmp, i32 %.0110
  br i1 %55, label %217, label %233

217:                                              ; preds = %213
  %218 = getelementptr inbounds i16, i16* %78, i64 %59
  %219 = load i16, i16* %218, align 2
  %220 = zext i16 %219 to i32
  %221 = zext i16 %197 to i32
  %222 = call zeroext i8 @png_unpremultiply(i32 %220, i32 %221, i32 %.0)
  store i8 %222, i8* %lsr.iv14, align 1
  %223 = getelementptr inbounds i16, i16* %78, i64 %61
  %224 = load i16, i16* %223, align 2
  %225 = zext i16 %224 to i32
  %226 = zext i16 %197 to i32
  %227 = call zeroext i8 @png_unpremultiply(i32 %225, i32 %226, i32 %.0)
  %scevgep20 = getelementptr i8, i8* %lsr.iv14, i64 -1
  store i8 %227, i8* %scevgep20, align 1
  %228 = getelementptr inbounds i16, i16* %78, i64 %63
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = zext i16 %197 to i32
  %232 = call zeroext i8 @png_unpremultiply(i32 %230, i32 %231, i32 %.0)
  %scevgep21 = getelementptr i8, i8* %lsr.iv14, i64 -2
  store i8 %232, i8* %scevgep21, align 1
  br label %266

233:                                              ; preds = %213
  %234 = getelementptr inbounds i16, i16* %78, i64 %56
  %235 = load i16, i16* %234, align 2
  %236 = zext i16 %235 to i32
  %237 = zext i16 %197 to i32
  %238 = call zeroext i8 @png_unpremultiply(i32 %236, i32 %237, i32 %.0)
  %scevgep22 = getelementptr i8, i8* %lsr.iv14, i64 -1
  store i8 %238, i8* %scevgep22, align 1
  %scevgep23 = getelementptr i8, i8* %lsr.iv14, i64 -2
  store i8 %238, i8* %scevgep23, align 1
  store i8 %238, i8* %lsr.iv14, align 1
  br label %266

239:                                              ; preds = %75
  %240 = zext i32 %lsr.iv27 to i64
  %241 = getelementptr inbounds i8, i8* %7, i64 %240
  switch i32 %19, label %266 [
    i32 4, label %242
    i32 3, label %249
    i32 2, label %256
    i32 1, label %263
  ]

242:                                              ; preds = %239
  %243 = getelementptr inbounds i8, i8* %241, i64 %40
  %244 = load i8, i8* %243, align 1
  %scevgep31 = getelementptr [256 x i8], [256 x i8]* %3, i64 0, i64 %indvars.iv
  store i8 %244, i8* %scevgep31, align 1
  %scevgep32 = getelementptr [256 x i8], [256 x i8]* %3, i64 0, i64 %indvars.iv
  %245 = load i8, i8* %scevgep32, align 1
  %246 = zext i8 %245 to i32
  %247 = icmp slt i32 %246, 255
  %248 = add i64 %indvars.iv, 1
  %tmp34 = trunc i64 %248 to i32
  %spec.select4 = select i1 %247, i32 %tmp34, i32 %.0110
  br label %249

249:                                              ; preds = %239, %242
  %.4 = phi i32 [ %.0110, %239 ], [ %spec.select4, %242 ]
  %250 = getelementptr inbounds i8, i8* %241, i64 %43
  %251 = load i8, i8* %250, align 1
  store i8 %251, i8* %lsr.iv14, align 1
  %252 = getelementptr inbounds i8, i8* %241, i64 %45
  %253 = load i8, i8* %252, align 1
  %scevgep26 = getelementptr i8, i8* %lsr.iv14, i64 -1
  store i8 %253, i8* %scevgep26, align 1
  %254 = getelementptr inbounds i8, i8* %241, i64 %47
  %255 = load i8, i8* %254, align 1
  %scevgep15 = getelementptr i8, i8* %lsr.iv14, i64 -2
  store i8 %255, i8* %scevgep15, align 1
  br label %266

256:                                              ; preds = %239
  %257 = getelementptr inbounds i8, i8* %241, i64 %36
  %258 = load i8, i8* %257, align 1
  %scevgep29 = getelementptr [256 x i8], [256 x i8]* %3, i64 0, i64 %indvars.iv
  store i8 %258, i8* %scevgep29, align 1
  %scevgep30 = getelementptr [256 x i8], [256 x i8]* %3, i64 0, i64 %indvars.iv
  %259 = load i8, i8* %scevgep30, align 1
  %260 = zext i8 %259 to i32
  %261 = icmp slt i32 %260, 255
  %262 = add i64 %indvars.iv, 1
  %tmp33 = trunc i64 %262 to i32
  %spec.select5 = select i1 %261, i32 %tmp33, i32 %.0110
  br label %263

263:                                              ; preds = %239, %256
  %.6 = phi i32 [ %.0110, %239 ], [ %spec.select5, %256 ]
  %264 = getelementptr inbounds i8, i8* %241, i64 %37
  %265 = load i8, i8* %264, align 1
  %scevgep24 = getelementptr i8, i8* %lsr.iv14, i64 -1
  store i8 %265, i8* %scevgep24, align 1
  %scevgep25 = getelementptr i8, i8* %lsr.iv14, i64 -2
  store i8 %265, i8* %scevgep25, align 1
  store i8 %265, i8* %lsr.iv14, align 1
  br label %266

266:                                              ; preds = %217, %233, %80, %168, %239, %263, %249
  %.8 = phi i32 [ %.0110, %168 ], [ %.0110, %80 ], [ %spec.select, %233 ], [ %spec.select, %217 ], [ %.6, %263 ], [ %.4, %249 ], [ %.0110, %239 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %scevgep13 = getelementptr [256 x %struct.png_color_struct], [256 x %struct.png_color_struct]* %lsr.iv, i64 0, i64 1
  %267 = bitcast %struct.png_color_struct* %scevgep13 to [256 x %struct.png_color_struct]*
  %lsr.iv.next = add i32 %lsr.iv27, %19
  %exitcond = icmp ne i64 %wide.trip.count, %indvars.iv.next
  br i1 %exitcond, label %75, label %._crit_edge

._crit_edge:                                      ; preds = %266
  %split = phi i32 [ %.8, %266 ]
  br label %268

268:                                              ; preds = %._crit_edge, %14
  %.01.lcssa = phi i32 [ %split, %._crit_edge ], [ 0, %14 ]
  %269 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 0
  %270 = load %struct.png_control*, %struct.png_control** %269, align 8
  %271 = getelementptr inbounds %struct.png_control, %struct.png_control* %270, i32 0, i32 0
  %272 = load %struct.png_struct_def*, %struct.png_struct_def** %271, align 8
  %273 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 0
  %274 = load %struct.png_control*, %struct.png_control** %273, align 8
  %275 = getelementptr inbounds %struct.png_control, %struct.png_control* %274, i32 0, i32 1
  %276 = load %struct.png_info_def*, %struct.png_info_def** %275, align 8
  %277 = getelementptr inbounds [256 x %struct.png_color_struct], [256 x %struct.png_color_struct]* %2, i32 0, i32 0
  call void @png_set_PLTE(%struct.png_struct_def* %272, %struct.png_info_def* %276, %struct.png_color_struct* %277, i32 %15)
  %278 = icmp sgt i32 %.01.lcssa, 0
  br i1 %278, label %279, label %289

279:                                              ; preds = %268
  %280 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 0
  %281 = load %struct.png_control*, %struct.png_control** %280, align 8
  %282 = getelementptr inbounds %struct.png_control, %struct.png_control* %281, i32 0, i32 0
  %283 = load %struct.png_struct_def*, %struct.png_struct_def** %282, align 8
  %284 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 0
  %285 = load %struct.png_control*, %struct.png_control** %284, align 8
  %286 = getelementptr inbounds %struct.png_control, %struct.png_control* %285, i32 0, i32 1
  %287 = load %struct.png_info_def*, %struct.png_info_def** %286, align 8
  %288 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i32 0, i32 0
  call void @png_set_tRNS(%struct.png_struct_def* %283, %struct.png_info_def* %287, i8* %288, i32 %.01.lcssa, %struct.png_color_16_struct* null)
  br label %289

289:                                              ; preds = %279, %268
  %290 = getelementptr inbounds %struct.png_image, %struct.png_image* %5, i32 0, i32 6
  store i32 %15, i32* %290, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_write_image_16bit(i8* %0) #11 {
  %2 = bitcast i8* %0 to %struct.png_image_write_control*
  %3 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %2, i32 0, i32 0
  %4 = load %struct.png_image*, %struct.png_image** %3, align 8
  %5 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 0
  %6 = load %struct.png_control*, %struct.png_control** %5, align 8
  %7 = getelementptr inbounds %struct.png_control, %struct.png_control* %6, i32 0, i32 0
  %8 = load %struct.png_struct_def*, %struct.png_struct_def** %7, align 8
  %9 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %2, i32 0, i32 5
  %10 = load i8*, i8** %9, align 8
  %11 = bitcast i8* %10 to i16*
  %12 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %2, i32 0, i32 7
  %13 = load i8*, i8** %12, align 8
  %14 = bitcast i8* %13 to i16*
  %15 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 4
  %16 = load i32, i32* %15, align 4
  %17 = and i32 %16, 2
  %18 = icmp ne i32 %17, 0
  %19 = zext i1 %18 to i64
  %20 = select i1 %18, i32 3, i32 1
  %21 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 3
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 4
  %24 = load i32, i32* %23, align 4
  %25 = and i32 %24, 1
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %46

27:                                               ; preds = %1
  %28 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 4
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, 32
  %31 = icmp ne i32 %30, 0
  %32 = getelementptr inbounds i16, i16* %11, i32 1
  %33 = getelementptr inbounds i16, i16* %14, i32 1
  %.011 = select i1 %31, i32 -1, i32 %20
  %.07 = select i1 %31, i16* %33, i16* %14
  %.05 = select i1 %31, i16* %32, i16* %11
  %34 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %20, 1
  %37 = mul i32 %35, %36
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i16, i16* %.07, i64 %38
  %40 = sext i32 %.011 to i64
  %41 = sext i32 %.011 to i64
  %42 = icmp ult i16* %.07, %39
  %43 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %2, i32 0, i32 7
  %44 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %2, i32 0, i32 6
  %45 = icmp ugt i32 %22, 0
  br i1 %45, label %.preheader.lr.ph, label %95

.preheader.lr.ph:                                 ; preds = %27
  br label %.preheader

46:                                               ; preds = %1
  call void @png_error(%struct.png_struct_def* %8, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.31.533, i32 0, i32 0)) #24
  unreachable

.preheader:                                       ; preds = %.preheader.lr.ph, %86
  %.1619 = phi i16* [ %.05, %.preheader.lr.ph ], [ %92, %86 ]
  %.01018 = phi i32 [ %22, %.preheader.lr.ph ], [ %93, %86 ]
  br i1 %42, label %.lr.ph, label %86

.lr.ph:                                           ; preds = %.preheader
  br label %47

47:                                               ; preds = %.lr.ph, %82
  %.0317 = phi i16* [ %.07, %.lr.ph ], [ %84, %82 ]
  %.0816 = phi i16* [ %.1619, %.lr.ph ], [ %83, %82 ]
  %48 = getelementptr inbounds i16, i16* %.0816, i64 %40
  %49 = load i16, i16* %48, align 2
  %50 = getelementptr inbounds i16, i16* %.0317, i64 %41
  store i16 %49, i16* %50, align 2
  %51 = zext i16 %49 to i32
  %52 = icmp sgt i32 %51, 0
  %53 = zext i16 %49 to i32
  %54 = icmp slt i32 %53, 65535
  %or.cond = and i1 %52, %54
  br i1 %or.cond, label %55, label %61

55:                                               ; preds = %47
  %56 = zext i16 %49 to i32
  %57 = ashr i32 %56, 1
  %58 = add nsw i32 2147450880, %57
  %59 = zext i16 %49 to i32
  %60 = sdiv i32 %58, %59
  br label %61

61:                                               ; preds = %55, %47
  %.02 = phi i32 [ %60, %55 ], [ 0, %47 ]
  %62 = zext i16 %49 to i32
  %63 = zext i16 %49 to i32
  %64 = icmp slt i32 %63, 65535
  br label %65

65:                                               ; preds = %78, %61
  %.19 = phi i16* [ %.0816, %61 ], [ %66, %78 ]
  %.14 = phi i16* [ %.0317, %61 ], [ %79, %78 ]
  %.01 = phi i32 [ %20, %61 ], [ %80, %78 ]
  %66 = getelementptr inbounds i16, i16* %.19, i32 1
  %67 = load i16, i16* %.19, align 2
  %68 = zext i16 %67 to i32
  %69 = icmp sge i32 %68, %62
  br i1 %69, label %78, label %70

70:                                               ; preds = %65
  %71 = zext i16 %67 to i32
  %72 = icmp sgt i32 %71, 0
  %or.cond14 = select i1 %72, i1 %64, i1 false
  %73 = zext i16 %67 to i32
  %74 = mul i32 %73, %.02
  %75 = add i32 %74, 16384
  %76 = lshr i32 %75, 15
  %77 = trunc i32 %76 to i16
  %.0 = select i1 %or.cond14, i16 %77, i16 %67
  br label %78

78:                                               ; preds = %65, %70
  %.1 = phi i16 [ %.0, %70 ], [ -1, %65 ]
  %79 = getelementptr inbounds i16, i16* %.14, i32 1
  store i16 %.1, i16* %.14, align 2
  %80 = add nsw i32 %.01, -1
  %81 = icmp sgt i32 %80, 0
  br i1 %81, label %65, label %82

82:                                               ; preds = %78
  %.lcssa15 = phi i16* [ %79, %78 ]
  %.lcssa = phi i16* [ %66, %78 ]
  %83 = getelementptr inbounds i16, i16* %.lcssa, i32 1
  %84 = getelementptr inbounds i16, i16* %.lcssa15, i32 1
  %85 = icmp ult i16* %84, %39
  br i1 %85, label %47, label %._crit_edge

._crit_edge:                                      ; preds = %82
  br label %86

86:                                               ; preds = %._crit_edge, %.preheader
  %.1620 = phi i16* [ %.1619, %._crit_edge ], [ %.1619, %.preheader ]
  %87 = load i8*, i8** %43, align 8
  call void @png_write_row(%struct.png_struct_def* %8, i8* %87)
  %88 = load i64, i64* %44, align 8
  %89 = trunc i64 %88 to i16
  %90 = zext i16 %89 to i64
  %91 = udiv i64 %90, 2
  %92 = getelementptr inbounds i16, i16* %.1620, i64 %91
  %93 = add i32 %.01018, -1
  %94 = icmp ugt i32 %93, 0
  br i1 %94, label %.preheader, label %._crit_edge21

._crit_edge21:                                    ; preds = %86
  br label %95

95:                                               ; preds = %._crit_edge21, %27
  ret i32 1
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @png_write_image_8bit(i8* %0) #11 {
  %2 = bitcast i8* %0 to %struct.png_image_write_control*
  %3 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %2, i32 0, i32 0
  %4 = load %struct.png_image*, %struct.png_image** %3, align 8
  %5 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 0
  %6 = load %struct.png_control*, %struct.png_control** %5, align 8
  %7 = getelementptr inbounds %struct.png_control, %struct.png_control* %6, i32 0, i32 0
  %8 = load %struct.png_struct_def*, %struct.png_struct_def** %7, align 8
  %9 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %2, i32 0, i32 5
  %10 = load i8*, i8** %9, align 8
  %11 = bitcast i8* %10 to i16*
  %12 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %2, i32 0, i32 7
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 3
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 4
  %17 = load i32, i32* %16, align 4
  %18 = and i32 %17, 2
  %19 = icmp ne i32 %18, 0
  %20 = zext i1 %19 to i64
  %21 = select i1 %19, i32 3, i32 1
  %22 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 4
  %23 = load i32, i32* %22, align 4
  %24 = and i32 %23, 1
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %87

26:                                               ; preds = %1
  %27 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 4
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %28, 32
  %30 = icmp ne i32 %29, 0
  %31 = getelementptr inbounds i16, i16* %11, i32 1
  %32 = getelementptr inbounds i8, i8* %13, i32 1
  %.012 = select i1 %30, i32 -1, i32 %21
  %.05 = select i1 %30, i8* %32, i8* %13
  %.04 = select i1 %30, i16* %31, i16* %11
  %33 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = add i32 %21, 1
  %36 = mul i32 %34, %35
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %.05, i64 %37
  %39 = sext i32 %.012 to i64
  %40 = sext i32 %.012 to i64
  %41 = icmp ult i8* %.05, %38
  %42 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %2, i32 0, i32 7
  %43 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %2, i32 0, i32 6
  %44 = icmp ugt i32 %15, 0
  br i1 %44, label %.preheader.lr.ph, label %.loopexit

.preheader.lr.ph:                                 ; preds = %26
  br label %.preheader

.preheader:                                       ; preds = %.preheader.lr.ph, %78
  %.120 = phi i16* [ %.04, %.preheader.lr.ph ], [ %84, %78 ]
  %.0619 = phi i32 [ %15, %.preheader.lr.ph ], [ %85, %78 ]
  br i1 %41, label %.lr.ph, label %78

.lr.ph:                                           ; preds = %.preheader
  br label %45

45:                                               ; preds = %.lr.ph, %74
  %.0818 = phi i8* [ %.05, %.lr.ph ], [ %76, %74 ]
  %.01017 = phi i16* [ %.120, %.lr.ph ], [ %75, %74 ]
  %46 = getelementptr inbounds i16, i16* %.01017, i64 %39
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = mul i32 %48, 255
  %50 = add i32 %49, 32895
  %51 = lshr i32 %50, 16
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %.0818, i64 %40
  store i8 %52, i8* %53, align 1
  %54 = zext i8 %52 to i32
  %55 = icmp sgt i32 %54, 0
  %56 = zext i8 %52 to i32
  %57 = icmp slt i32 %56, 255
  %or.cond = and i1 %55, %57
  br i1 %or.cond, label %58, label %64

58:                                               ; preds = %45
  %59 = zext i16 %47 to i32
  %60 = ashr i32 %59, 1
  %61 = add nsw i32 2139062400, %60
  %62 = zext i16 %47 to i32
  %63 = sdiv i32 %61, %62
  br label %64

64:                                               ; preds = %58, %45
  %.03 = phi i32 [ %63, %58 ], [ 0, %45 ]
  %65 = zext i16 %47 to i32
  br label %66

66:                                               ; preds = %66, %64
  %.111 = phi i16* [ %.01017, %64 ], [ %67, %66 ]
  %.19 = phi i8* [ %.0818, %64 ], [ %71, %66 ]
  %.02 = phi i32 [ %21, %64 ], [ %72, %66 ]
  %67 = getelementptr inbounds i16, i16* %.111, i32 1
  %68 = load i16, i16* %.111, align 2
  %69 = zext i16 %68 to i32
  %70 = call zeroext i8 @png_unpremultiply(i32 %69, i32 %65, i32 %.03)
  %71 = getelementptr inbounds i8, i8* %.19, i32 1
  store i8 %70, i8* %.19, align 1
  %72 = add nsw i32 %.02, -1
  %73 = icmp sgt i32 %72, 0
  br i1 %73, label %66, label %74

74:                                               ; preds = %66
  %.lcssa14 = phi i16* [ %67, %66 ]
  %.lcssa = phi i8* [ %71, %66 ]
  %75 = getelementptr inbounds i16, i16* %.lcssa14, i32 1
  %76 = getelementptr inbounds i8, i8* %.lcssa, i32 1
  %77 = icmp ult i8* %76, %38
  br i1 %77, label %45, label %._crit_edge

._crit_edge:                                      ; preds = %74
  br label %78

78:                                               ; preds = %._crit_edge, %.preheader
  %.121 = phi i16* [ %.120, %._crit_edge ], [ %.120, %.preheader ]
  %79 = load i8*, i8** %42, align 8
  call void @png_write_row(%struct.png_struct_def* %8, i8* %79)
  %80 = load i64, i64* %43, align 8
  %81 = trunc i64 %80 to i16
  %82 = zext i16 %81 to i64
  %83 = udiv i64 %82, 2
  %84 = getelementptr inbounds i16, i16* %.121, i64 %83
  %85 = add i32 %.0619, -1
  %86 = icmp ugt i32 %85, 0
  br i1 %86, label %.preheader, label %..loopexit_crit_edge

87:                                               ; preds = %1
  %88 = getelementptr inbounds %struct.png_image, %struct.png_image* %4, i32 0, i32 2
  %89 = load i32, i32* %88, align 4
  %90 = mul i32 %89, %21
  %91 = zext i32 %90 to i64
  %92 = inttoptr i64 %91 to i8*
  %93 = getelementptr i8, i8* %13, i64 %91
  %94 = icmp ult i8* %13, %93
  %95 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %2, i32 0, i32 6
  %96 = icmp ugt i32 %15, 0
  br i1 %96, label %.preheader15.lr.ph, label %.loopexit16

.preheader15.lr.ph:                               ; preds = %87
  br label %.preheader15

.preheader15:                                     ; preds = %.preheader15.lr.ph, %118
  %.227 = phi i16* [ %11, %.preheader15.lr.ph ], [ %123, %118 ]
  %.1726 = phi i32 [ %15, %.preheader15.lr.ph ], [ %124, %118 ]
  br i1 %94, label %.lr.ph24, label %.preheader15._crit_edge

.preheader15._crit_edge:                          ; preds = %.preheader15
  br label %118

.lr.ph24:                                         ; preds = %.preheader15
  br label %97

97:                                               ; preds = %.lr.ph24, %97
  %lsr.iv = phi i64 [ 0, %.lr.ph24 ], [ %lsr.iv.next, %97 ]
  %scevgep = getelementptr i8, i8* %13, i64 %lsr.iv
  %scevgep29 = getelementptr i16, i16* %.227, i64 %lsr.iv
  %98 = load i16, i16* %scevgep29, align 2
  %99 = zext i16 %98 to i32
  %100 = mul i32 %99, 255
  %101 = lshr i32 %100, 15
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %102
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = and i32 %100, 32767
  %107 = lshr i32 %100, 15
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = mul i32 %106, %111
  %113 = lshr i32 %112, 12
  %114 = add i32 %105, %113
  %115 = lshr i32 %114, 8
  %116 = and i32 255, %115
  %117 = trunc i32 %116 to i8
  store i8 %117, i8* %scevgep, align 1
  %lsr.iv.next = add i64 %lsr.iv, 1
  %tmp = inttoptr i64 %lsr.iv.next to i8*
  %exitcond = icmp ne i8* %92, %tmp
  br i1 %exitcond, label %97, label %._crit_edge25

._crit_edge25:                                    ; preds = %97
  br label %118

118:                                              ; preds = %.preheader15._crit_edge, %._crit_edge25
  %.228 = phi i16* [ %.227, %._crit_edge25 ], [ %.227, %.preheader15._crit_edge ]
  call void @png_write_row(%struct.png_struct_def* %8, i8* %13)
  %119 = load i64, i64* %95, align 8
  %120 = trunc i64 %119 to i16
  %121 = zext i16 %120 to i64
  %122 = udiv i64 %121, 2
  %123 = getelementptr inbounds i16, i16* %.228, i64 %122
  %124 = add i32 %.1726, -1
  %125 = icmp ugt i32 %124, 0
  br i1 %125, label %.preheader15, label %..loopexit16_crit_edge

..loopexit_crit_edge:                             ; preds = %78
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %26
  br label %126

..loopexit16_crit_edge:                           ; preds = %118
  br label %.loopexit16

.loopexit16:                                      ; preds = %..loopexit16_crit_edge, %87
  br label %126

126:                                              ; preds = %.loopexit16, %.loopexit
  ret i32 1
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @png_unpremultiply(i32 %0, i32 %1, i32 %2) #11 {
  %4 = icmp uge i32 %0, %1
  %5 = icmp ult i32 %1, 128
  %or.cond = or i1 %4, %5
  br i1 %or.cond, label %31, label %6

6:                                                ; preds = %3
  %7 = icmp ugt i32 %0, 0
  br i1 %7, label %8, label %31

8:                                                ; preds = %6
  %9 = icmp ult i32 %1, 65407
  %10 = mul i32 %0, %2
  %11 = add i32 %10, 64
  %12 = lshr i32 %11, 7
  %13 = mul i32 %0, 255
  %.01 = select i1 %9, i32 %12, i32 %13
  %14 = lshr i32 %.01, 15
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [512 x i16], [512 x i16]* @png_sRGB_base, i64 0, i64 %15
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = and i32 %.01, 32767
  %20 = lshr i32 %.01, 15
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [512 x i8], [512 x i8]* @png_sRGB_delta, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = mul i32 %19, %24
  %26 = lshr i32 %25, 12
  %27 = add i32 %18, %26
  %28 = lshr i32 %27, 8
  %29 = and i32 255, %28
  %30 = trunc i32 %29 to i8
  br label %31

31:                                               ; preds = %6, %3, %8
  %.0 = phi i8 [ %30, %8 ], [ -1, %3 ], [ 0, %6 ]
  ret i8 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_image_write_to_stdio(%struct.png_image* %0, %struct._IO_FILE.1* %1, i32 %2, i8* %3, i32 %4, i8* %5) #11 {
  %7 = alloca %struct.png_image_write_control, align 8
  %magicptr = ptrtoint %struct.png_image* %0 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %39, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %35

12:                                               ; preds = %8
  %13 = icmp ne %struct._IO_FILE.1* %1, null
  %14 = icmp ne i8* %3, null
  %or.cond = select i1 %13, i1 %14, i1 false
  br i1 %or.cond, label %15, label %33

15:                                               ; preds = %12
  %16 = call i32 @png_image_write_init(%struct.png_image* %0)
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %39

18:                                               ; preds = %15
  %19 = bitcast %struct._IO_FILE.1* %1 to i8*
  %20 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 0
  %21 = load %struct.png_control*, %struct.png_control** %20, align 8
  %22 = getelementptr inbounds %struct.png_control, %struct.png_control* %21, i32 0, i32 0
  %23 = load %struct.png_struct_def*, %struct.png_struct_def** %22, align 8
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %23, i32 0, i32 9
  store i8* %19, i8** %24, align 8
  %25 = bitcast %struct.png_image_write_control* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 88, i1 false)
  %26 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %7, i32 0, i32 0
  store %struct.png_image* %0, %struct.png_image** %26, align 8
  %27 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %7, i32 0, i32 1
  store i8* %3, i8** %27, align 8
  %28 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %7, i32 0, i32 2
  store i32 %4, i32* %28, align 8
  %29 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %7, i32 0, i32 3
  store i8* %5, i8** %29, align 8
  %30 = getelementptr inbounds %struct.png_image_write_control, %struct.png_image_write_control* %7, i32 0, i32 4
  store i32 %2, i32* %30, align 8
  %31 = bitcast %struct.png_image_write_control* %7 to i8*
  %32 = call i32 @png_safe_execute(%struct.png_image* %0, i32 (i8*)* @png_image_write_main, i8* %31)
  call void @png_image_free(%struct.png_image* %0)
  br label %39

33:                                               ; preds = %12
  %34 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.17.537, i32 0, i32 0))
  br label %39

35:                                               ; preds = %8
  %36 = icmp ne %struct.png_image* %0, null
  br i1 %36, label %37, label %39

37:                                               ; preds = %35
  %38 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.18.538, i32 0, i32 0))
  br label %39

39:                                               ; preds = %6, %35, %15, %37, %33, %18
  %.0 = phi i32 [ %32, %18 ], [ %34, %33 ], [ %38, %37 ], [ 0, %15 ], [ 0, %6 ], [ 0, %35 ]
  ret i32 %.0
}

; Function Attrs: noinline nounwind uwtable
define i32 @png_image_write_to_file(%struct.png_image* %0, i8* %1, i32 %2, i8* %3, i32 %4, i8* %5) #11 {
  %magicptr = ptrtoint %struct.png_image* %0 to i64
  %cond = icmp eq i64 %magicptr, 0
  br i1 %cond, label %54, label %7

7:                                                ; preds = %6
  %8 = getelementptr inbounds %struct.png_image, %struct.png_image* %0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %50

11:                                               ; preds = %7
  %12 = icmp ne i8* %1, null
  %13 = icmp ne i8* %3, null
  %or.cond = select i1 %12, i1 %13, i1 false
  br i1 %or.cond, label %14, label %48

14:                                               ; preds = %11
  %15 = call %struct._IO_FILE.1* @fopen(i8* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.539, i32 0, i32 0))
  %16 = icmp ne %struct._IO_FILE.1* %15, null
  br i1 %16, label %17, label %43

17:                                               ; preds = %14
  %18 = call i32 @png_image_write_to_stdio(%struct.png_image* %0, %struct._IO_FILE.1* %15, i32 %2, i8* %3, i32 %4, i8* %5)
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %40

20:                                               ; preds = %17
  %21 = call i32 @fflush(%struct._IO_FILE.1* %15)
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %32

23:                                               ; preds = %20
  %24 = call i32 @ferror(%struct._IO_FILE.1* %15) #22
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %32

26:                                               ; preds = %23
  %27 = call i32 bitcast (i32 (%struct._IO_FILE*)* @fclose to i32 (%struct._IO_FILE.1*)*)(%struct._IO_FILE.1* %15)
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %54, label %29

29:                                               ; preds = %26
  %30 = call i32* @__errno_location() #20
  %31 = load i32, i32* %30, align 4
  br label %36

32:                                               ; preds = %23, %20
  %33 = call i32* @__errno_location() #20
  %34 = load i32, i32* %33, align 4
  %35 = call i32 bitcast (i32 (%struct._IO_FILE*)* @fclose to i32 (%struct._IO_FILE.1*)*)(%struct._IO_FILE.1* %15)
  br label %36

36:                                               ; preds = %32, %29
  %.01 = phi i32 [ %31, %29 ], [ %34, %32 ]
  %37 = call i32 @remove(i8* %1) #22
  %38 = call i8* @strerror(i32 %.01) #22
  %39 = call i32 @png_image_error(%struct.png_image* %0, i8* %38)
  br label %54

40:                                               ; preds = %17
  %41 = call i32 bitcast (i32 (%struct._IO_FILE*)* @fclose to i32 (%struct._IO_FILE.1*)*)(%struct._IO_FILE.1* %15)
  %42 = call i32 @remove(i8* %1) #22
  br label %54

43:                                               ; preds = %14
  %44 = call i32* @__errno_location() #20
  %45 = load i32, i32* %44, align 4
  %46 = call i8* @strerror(i32 %45) #22
  %47 = call i32 @png_image_error(%struct.png_image* %0, i8* %46)
  br label %54

48:                                               ; preds = %11
  %49 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20.540, i32 0, i32 0))
  br label %54

50:                                               ; preds = %7
  %51 = icmp ne %struct.png_image* %0, null
  br i1 %51, label %52, label %54

52:                                               ; preds = %50
  %53 = call i32 @png_image_error(%struct.png_image* %0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.21.541, i32 0, i32 0))
  br label %54

54:                                               ; preds = %6, %50, %26, %52, %48, %43, %40, %36
  %.0 = phi i32 [ %39, %36 ], [ 0, %40 ], [ %47, %43 ], [ %49, %48 ], [ %53, %52 ], [ 1, %26 ], [ 0, %6 ], [ 0, %50 ]
  ret i32 %.0
}

; Function Attrs: nounwind
declare i32 @ferror(%struct._IO_FILE.1*) #17

; Function Attrs: nounwind
declare i32 @remove(i8*) #17

; Function Attrs: noinline nounwind uwtable
define void @png_write_chunk_start(%struct.png_struct_def.60* noalias %0, i8* %1, i32 %2) #11 {
  %4 = getelementptr inbounds i8, i8* %1, i64 0
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = and i32 255, %6
  %8 = shl i32 %7, 24
  %9 = getelementptr inbounds i8, i8* %1, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = and i32 255, %11
  %13 = shl i32 %12, 16
  %14 = or i32 %8, %13
  %15 = getelementptr inbounds i8, i8* %1, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = and i32 255, %17
  %19 = shl i32 %18, 8
  %20 = or i32 %14, %19
  %21 = getelementptr inbounds i8, i8* %1, i64 3
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = and i32 255, %23
  %25 = shl i32 %24, 0
  %26 = or i32 %20, %25
  call void @png_write_chunk_header(%struct.png_struct_def.60* %0, i32 %26, i32 %2)
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.umax.i32(i32, i32) #10

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.umin.i32(i32, i32) #10

attributes #0 = { sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "probe-stack"="inline-asm" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly nofree nosync nounwind willreturn }
attributes #2 = { nofree nounwind nonlazybind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind nonlazybind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { inaccessiblemem_or_argmemonly mustprogress nounwind nonlazybind willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nofree nonlazybind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nonlazybind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { noreturn nounwind nonlazybind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nounwind nonlazybind returns_twice "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { mustprogress nofree nounwind nonlazybind willreturn writeonly "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #11 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noinline noreturn nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { argmemonly nofree nounwind willreturn }
attributes #16 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { argmemonly nofree nounwind willreturn writeonly }
attributes #19 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #20 = { nounwind readnone }
attributes #21 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #22 = { nounwind }
attributes #23 = { nounwind returns_twice }
attributes #24 = { noreturn }
attributes #25 = { noreturn nounwind }
attributes #26 = { nounwind readonly }

!llvm.ident = !{!0, !0, !0, !0, !0, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7}

!0 = !{!"clang version 14.0.6"}
!1 = !{!"clang version 7.0.0-3~ubuntu0.18.04.1 (tags/RELEASE_700/final)"}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{i32 4, !"cf-protection-return", i32 1}
!4 = !{i32 4, !"cf-protection-branch", i32 1}
!5 = !{i32 7, !"PIC Level", i32 2}
!6 = !{i32 7, !"RtLibUseGOT", i32 1}
!7 = !{i32 7, !"uwtable", i32 1}
!8 = !{!9, !13, i64 8}
!9 = !{!"arib_instance_t", !10, i64 0, !10, i64 1, !10, i64 2, !13, i64 8}
!10 = !{!"_Bool", !11, i64 0}
!11 = !{!"omnipotent char", !12, i64 0}
!12 = !{!"Simple C/C++ TBAA"}
!13 = !{!"any pointer", !11, i64 0}
!14 = !{!15, !13, i64 32}
!15 = !{!"arib_instance_private_t", !13, i64 0, !13, i64 8, !13, i64 16, !13, i64 24, !13, i64 32, !13, i64 40, !13, i64 48, !16, i64 56, !11, i64 60, !11, i64 812}
!16 = !{!"int", !11, i64 0}
!17 = !{!13, !13, i64 0}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.mustprogress"}
!20 = !{!11, !11, i64 0}
!21 = !{!22, !11, i64 0}
!22 = !{!"png_color_struct", !11, i64 0, !11, i64 1, !11, i64 2}
!23 = !{!22, !11, i64 1}
!24 = !{!22, !11, i64 2}
!25 = distinct !{!25, !19}
!26 = !{!16, !16, i64 0}
!27 = distinct !{!27, !19}
!28 = distinct !{!28, !19}
!29 = distinct !{!29, !19}
